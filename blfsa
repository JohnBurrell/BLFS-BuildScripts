#!/bin/bash
#
if [ $UID -ne 0 ]; then echo Please run this script as root. ; exit 1; fi
LFS=$LFS
if [[ ! -d $LFS || "$LFS" = "" ]]; then
  echo "'$LFS' is not a directory"
  echo "do: export LFS=/mnt/lfs"
  echo
  exit 1
fi

# repository will be for BLFS
REPO="BLFS"
blfscommands="/blfs-commands"
DumpedCommands=${LFS}${blfscommands}
Dumpedhtml=$LFS/blfs-html
WgetList="wget-list" # default name for the source list file
ncc="--no-check-certificate" # used with wgetopts in some packages
hostwgetopts="" # Options for wget on the host, e.g. proxy settings, certs.
wgetopts="" # Options for wget, e.g. proxy settings, certs etc on LFS
needsproxy=false # whether to include proxy settings in the build script
sortedfile="sortedfile" # name of the sorted WgetList file
anduin_src_root="http://anduin.linuxfromscratch.org/sources/BLFS/svn"
patch_root="http://www.linuxfromscratch.org/patches/blfs/svn" # patch url
gnomeSource="ftp://ftp.gnome.org/pub/gnome/sources" # url for gnome sources
RETURN_PARAM=65  # error return
RETURN_NOTSET=67 #  no dependencies set
RETURN_DEPNOTMET=69 # package dependency not met
RETURN_ALLDEPSMET=71 # all dependencies met
RETURN_FNF=73 # file not found
RETURN_MTOV=75 # more than one version of a file found
srcrootdir=/blfs-sources # all source files are under this dir
blfsBuildFiles=/blfsBuildFiles # location of the pkgs, pkg-order and pkg-dependencies files
blfsfiles=blfsfiles # name of the subdir to the build files dir
blfsfilesTar=${blfsfiles}.tar.xz # tar file with files names and dependencies for each section
PKGUSERDIR=/usr/src # pkguser dir will be $PKGUSERDIR/$Section
BuildLog=${LFS}/BLFS-buildlog.log # keep a record of packages and times
if [ ! -e $BuildLog ]; then
  touch $BuildLog
fi
BLFSBUILDFILES=${LFS}${blfsBuildFiles}/${blfsfiles} # location of the blfs build files
SOURCEDIR=${LFS}${srcrootdir}
build="build" # name of the build file for each package
cfg=~/BLFS.conf # config file to hold required params

#initialize the config variables
BLFS_BOOK_LOC_DIR=${HOME}/LFS_BOOK/${REPO} # define local dir for the downloaded book xml
SVN_URL="svn://svn.linuxfromscratch.org/${REPO}/" # svn url
GIT_URL="https://github.com/elkrejzi/BLFS" # Krejzi's github book
BOOK_URL=$GIT_URL # use the github book by default
BOOK_VERSION=$BOOK_VERSION
SOURCES=$SOURCES
SOURCEURL=$SOURCEURL
CLEAN_SRC_DIR=$CLEAN_SRC_DIR
BOOK=$BOOK
SECTION=$SECTION
XORG_PREFIX=$XORG_PREFIX
XVERSION=$XVERSION
GNOME_OR_XFCE=$GNOME_OR_XFCE
BROWSER=$BROWSER
SINGLE_PACKAGE=$SINGLE_PACKAGE
AS_ROOT=$AS_ROOT # 'no' install as package user, 'yes' install as root
SYSTEMD=$SYSTEMD # 'yes' - use systemd. 'no' use sysvinit.
if [ -e $cfg ]; then
  source $cfg # exists so source it
else
  touch $cfg #cfg is new
fi
if [ -z $BOOK_VERSION ]; then
  BOOK_VERSION="BOOK"
fi
if [ -z $SOURCES ]; then
  SOURCES="download"
fi
if [ -z $SOURCEURL ]; then
  SOURCEURL="url_in_book"
fi
if [ -z $CLEAN_SRC_DIR ]; then
  CLEAN_SRC_DIR="no"
fi
if [ -z $BOOK ]; then
  BOOK="git"
fi
if [ -z $SECTION ]; then
  SECTION="libraries"
fi
if [ -z $XORG_PREFIX ]; then
  XORG_PREFIX="/usr"
fi
if [ -z $XVERSION ]; then
  XVERSION="7.7-1"
fi
if [ -z $GNOME_OR_XFCE ]; then
  GNOME_OR_XFCE="gnome"
fi
if [ -z $BROWSER ]; then
  BROWSER="firefox"
fi
if [ -z $SINGLE_PACKAGE ]; then
  SINGLE_PACKAGE="no"
fi
if [ -z $AS_ROOT ]; then
  AS_ROOT="no"
fi
if [ -z $SYSTEMD ]; then
  SYSTEMD="no"
fi
# store the values in a new config file
if [ -e $cfg ]; then
  rm $cfg
  touch $cfg
fi
echo "BLFS_BOOK_LOC_DIR=$BLFS_BOOK_LOC_DIR" | tee $cfg
echo "BOOK_URL=$BOOK_URL" | tee -a $cfg
echo "BOOK_VERSION=$BOOK_VERSION" | tee -a $cfg
echo "SOURCES=$SOURCES" | tee -a $cfg
echo "SOURCEURL=$SOURCEURL" | tee -a $cfg
echo "CLEAN_SRC_DIR=$CLEAN_SRC_DIR" | tee -a $cfg
echo "BOOK=$BOOK" | tee -a $cfg
echo "SECTION=$SECTION" | tee -a $cfg
echo "XORG_PREFIX=$XORG_PREFIX" | tee -a $cfg
echo "XVERSION=$XVERSION" | tee -a $cfg
echo "GNOME_OR_XFCE=$GNOME_OR_XFCE" | tee -a $cfg
echo "BROWSER=$BROWSER" | tee -a $cfg
echo "SINGLE_PACKAGE=$SINGLE_PACKAGE" | tee -a $cfg
echo "AS_ROOT=$AS_ROOT" | tee -a $cfg
echo "SYSTEMD=$SYSTEMD" | tee -a $cfg
#
# set up names of x subdirs
#
xproto="x7proto"
xlib="x7lib"
xapp="x7app"
xfont="x7font"
#
# functions
#
_log() {                      # turn on debugging commands with _DEBUG=true
  if [ "$_DEBUG" == "true" ]; then
    echo 1>&2 "$@"
  fi
} # end _log
#
configEdit () {
tempfile1=dialog_1
tempfile2=dialog_2
tempfile3=dialog_3
DIALOG=dialog # could set to gui dialog - xdialog, if availale
#test -n "$DISPLAY" && DIALOG=xdialog
# delete temp files on exit
trap "rm -f $tempfile1 $tempfile2 $tempfile3" 0 1 2 5 15

_edit () {
   items=$(awk -F\= '{print $1,$2}' $cfg)
   $DIALOG --title "" \
          --menu "BLFS config file editor:" 0 0 0 $items 2> $tempfile1

   retval=$?
   parameter=$(cat $tempfile1)

   [ $retval -eq 0 ] && tochange=$parameter || return 1
   if [ "$tochange" = BLFS_BOOK_LOC_DIR ]; then
     display="Enter the local directory to store the BLFS Book"
   elif [ "$tochange" = BOOK_URL ]; then
     display="Enter the url of the BLFS book. You should set BOOK to git, svn or local first."
   elif [ "$tochange" = BOOK_VERSION ]; then
     display="BLFS book version. For the current book, type BOOK, for BLFS-systemd type systemd (type blank to get a list). For Armin's branch on github, type KBLFS"
   elif [ "$tochange" = BOOK ]; then
     display="Enter git, svn or local (if local the book must be in $BLFS_BOOK_LOC_DIR)"
   elif [ "$tochange" = SOURCES ]; then
     display="Type download or local (if local, source files must be in ${LFS}${srcrootdir}/${SECTION})"
   elif [ "$tochange" = SOURCEURL ]; then
     display="Type anduin or url_in_book"
   elif [ "$tochange" = CLEAN_SRC_DIR ]; then
     display="If yes, all files in $WgetList in ${LFS}${srcrootdir}/${SECTION} will be deleted. Default is no"
   elif [ "$tochange" = SECTION ]; then
     display="options are blfs, security, virtualization, libraries, genutils, sysutils, programming, java, networks, server, x, xlibs, windowmanager, gnomeplatform, telepathy, gnomedesktop, gnomeapps, xfce, browser, office, xsoftware, multimedia, pst, avr or ALL"
   elif [ "$tochange" = XORG_PREFIX ]; then
     display="Choose the installation prefix for Xorg"
   elif [ "$tochange" = XVERSION ]; then
     display="Enter the current X version in the BLFS book"
   elif [ "$tochange" = GNOME_OR_XFCE ]; then
     display="type gnome or xfce - you can install one or the other, not both"
   elif [ "$tochange" = BROWSER ]; then
     if [ "$SECTION" = browser ]; then
       display="Type firefox, seamonkey or chromium"
     else
       display="Type firefox, seamonkey or chromium. Set SECTION to browser to install it."
     fi
   elif [ "$tochange" = SINGLE_PACKAGE ]; then
     if [[ "$SECTION" = ALL || "$SECTION" = all ]]; then
     display="Name of the package to install. There is no section ALL, so change it to the correct section for the package you have specified."
     else
     display="Name of the package to install. It must be in $SECTION. If specified, this will take precedence. Type no to switch off this option"
     fi
   elif [ $tochange = "AS_ROOT" ]; then
     display="If yes, install packages as root. If no, install as package user"
   elif [ $tochange = "SYSTEMD" ]; then
     display="Set to yes if LFS was installed using systemd. Otherwise set to no."
   fi
   val=$(awk -F\= -v x=$tochange '$1==x {print $2}' $cfg)
   $DIALOG --clear --title "Change value" \
          --inputbox "$display" 0 0 $val 2> $tempfile2

   $DIALOG --title "Confirmation"  --yesno "Commit ?" 0 0
   case $? in
       0) newval=$(cat $tempfile2)
          awk -v x=$tochange -v n=$newval '
               BEGIN {FS=OFS="="}$1==x {$2=n} {print}
               ' $cfg > $cfg.tmp
          mv $cfg.tmp $cfg
          . $cfg
# if BOOK or BOOK_URL changes, update BOOK and BOOK_URL to be compatible
          case $tochange in
             BOOK)
               tochange="BOOK_URL"
               case $BOOK in
                  git)
                    val=$GIT_URL
                  ;;
                  svn)
                    val=$SVN_URL
                  ;;
                  *)
                    val=""
                  ;;
               esac
               if [ ! -z $val ]; then
                 awk -v x=$tochange -v n=$val '
                    BEGIN {FS=OFS="="}$1==x {$2=n} {print}
                    ' $cfg > $cfg.tmp
                 mv $cfg.tmp $cfg
                 . $cfg
               fi
             ;;
             BOOK_URL)
               if [ "$BOOK" = git ]; then
                 GIT_URL=$BOOK_URL
               elif [ "$BOOK" = svn ]; then
                 SVN_URL=$BOOK_URL
               fi
             ;;
          esac 
       ;;
       1|255) $DIALOG --infobox "Value not changed" 0 0
              sleep 1
   ;;
   esac
   $DIALOG --textbox $cfg 0 0
}

_main () {
   $DIALOG --title "BLFS config file editor" \
           --menu "Please choose an option:" 15 55 5 \
                   1 "View the config file" \
                   2 "Edit config file" \
                   3 "Exit from this menu" 2> $tempfile3

   retv=$?
   choice=$(cat $tempfile3)
   if [ $retv -eq 1 -o $retv -eq 255 ]; then
     echo "cancel pressed - exiting now"
     exit 1
   fi
   case $choice in
       1) $DIALOG --textbox $cfg 0 0
          _main
           ;;
       2) _edit
          _main 
           ;;
       3) return 
           ;;
   esac
}
_main
rm -rf $tempfile1 $tempfile2 $tempfile3 # make sure temp files are removed
} #end configEdit
#
GetAllSections () {
local allsec=""
secfile=${BLFSBUILDFILES}/allSections
if [ ! -e $secfile ]; then
  return $RETURN_PARAM
else
IFS='
'
allsec=( $( < $secfile ) )
rtrnSec=(${allsec[@]})
return 0
fi
} # end GetAllSections
#
SetupSections () {
numSections=1
if [ "$SECTION" = all ]; then
  rtrnSec=""
  GetAllSections
  return_val=$?
  if [ $return_val -eq $RETURN_PARAM ]; then
    echo "Error reading in allSections file."
    echo "Make sure file allSections is in $BLFSBUILDFILES"
    echo "Exiting now"
    exit 1
  else
    SectionsALL=(${rtrnSec[@]})
    numSections=${#SectionsALL[@]}
  fi
else
  SectionsALL[0]=$SECTION
fi
} # end SetupSections
#
GetLocalREPO () {
bookdir=$1
#
# create a list of local BLFS books - only works relative to $bookdir
unset Paths
for Path in $( find $bookdir -name index.xml -exec dirname {} ';' ); do
  if [ -e $Path/.svn ]; then
    Paths="$Paths $Path"
  fi
done
PathCount=$( echo $Paths | awk '{print NF}' )
case $PathCount in
   0) echo >&2 "Couldn't find any local BLFS book in $bookdir"
      echo >&2 "Suggest you svn one or specify a different location"
      return $RETURN_PARAM
   ;;
   1) Path=$Paths
      svn info $Path >&2
      PS3="Is this correct? : "
      select confirm in Yes No; do
        case $confirm in
          '') echo >&2 "Please enter 1 for Yes or 2 for No"
          ;;
          ?*) break
          ;;
        esac
      done
      case $confirm in
         No) echo >&2 "This is the only BLFS book in $bookdir"
             return $RETURN_PARAM
         ;;
        Yes) 
            BOOK_VERSION=$(echo $Path | awk 'BEGIN {FS="/"}{print $5}')
            tochange="BOOK_VERSION"
            awk -v x=$tochange -v n=$BOOK_VERSION '
               BEGIN {FS=OFS="="}$1==x {$2=n} {print}
               ' $cfg > $cfg.tmp
            mv $cfg.tmp $cfg
            return 0
         ;;
      esac
   ;;
   *)
      PS3="which is your $REPO svn repo? : "
      select Path in $( echo $Paths | sed 's@'$HOME'@~@g'); do
        Path=$( echo $Path | sed 's@~@'$HOME'@' )
        case $Path in
         '') echo >&2 "Please select using number"
         ;;
         ?*) echo >&2 "You have selected svn repo"
             svn info $Path >&2
             PS3="Is this correct? : "
             select confirm in Yes No; do
               case $confirm in
                '') echo >&2 "Please enter 1 for Yes or 2 for No"
                ;;
                ?*) break
                ;;
               esac
             done
             case $confirm in
               No) 
                   return $RETURN_PARAM
               ;;
               Yes)
                   BOOK_VERSION=$(echo $Path | awk 'BEGIN {FS="/"}{print $5}')
                   tochange="BOOK_VERSION"
                   awk -v x=$tochange -v n=$BOOK_VERSION '
                   BEGIN {FS=OFS="="}$1==x {$2=n} {print}
                   ' $cfg > $cfg.tmp
                   mv $cfg.tmp $cfg
                   return 0
               ;;
             esac
         ;;
        esac
      done
   ;;
esac
} # end GetLocalREPO
#
ChkLocalBook () {
# $1 is the book dir
# $2 is the book version
localbookdir=${1}/${2}
ChkLocalBookExists $1 $2
return_val=$?
if [ $return_val -eq $RETURN_PARAM ]; then # requested book not present
  echo "Requested book not present locally. Will download it."
  return 0
else # book present, test if need to svn or git clone an update
  ChkLocalBookDetails $localbookdir
  return_val=$?
  if [ $return_val -eq $RETURN_PARAM ]; then
    return $RETURN_PARAM # same book already present locally
  else
    return 0
  fi
fi
} # end ChkLocalBook
#
ChkLocalBookExists () {
# $1 is the book dir
# $2 is the book version
local bookdir=${1}/${2}
#
svnorgit="svn"
if [ "$2" = KBLFS ]; then svnorgit="git"; fi
unset BookPath
if [ -d $bookdir ]; then
for BookPath in $( find $bookdir -name index.xml -exec dirname {} ';' ); do
  if [ -e ${BookPath}/.${svnorgit} ]; then #a book exists, check the version
    if [ "$BOOK_VERSION" = Current_Development -o "$BOOK_VERSION" = BOOK ]; then
      version="BOOK"
    else
      version=$BOOK_VERSION
    fi
    if [ $BookPath = $bookdir ]; then
      return 0 #requested version is present locally
    fi
  fi
done
else
  echo "Dir $bookdir not present locally."
fi
return $RETURN_PARAM #requested book not present locally
} #end ChkLocalBookExists
#
ChkLocalBookDetails () {
local bookdir=$1
#
if [[ "$BOOK_VERSION" = Current_Development || "$BOOK_VERSION" = BOOK || "$BOOK_VERSION" = systemd ]]; then
  # check the last svn date
  returned_array=( $(LastAccessSvn "$argument") )
  retval=$?
  if [ $retval -eq 0 ]; then # compare last svn date with today's date
    if [ ${returned_array[0]} -eq ${returned_array[1]} ]; then
      echo "same book already downloaded today"
      echo "To use it, set BOOK=local in the config file."
      echo "To download it again, delete $bookdir"
      return $RETURN_PARAM
    else
      return 0
    fi
  else
    echo "Could not retrieve date of last svn - no entries file found."
    echo "Will svn the requested book"
    return 0
  fi
elif [ "$BOOK_VERSION" = KBLFS ]; then # get the commit hash
  pushd $bookdir > /dev/null
    local -a localCommit=( $(git log --max-count=1) )
  popd > /dev/null
  if [ "$latestCommit" == "${localCommit[1]}" ]; then
    echo "The same commit is already present in $bookdir."
    echo "Set BOOK=local in the config file to use it."
    return $RETURN_PARAM
  else
    return 0
  fi
else # assume book is a release version so don't update it
  echo "Requested book is present locally and is a release version"
  echo "so update not necessary"
  return $RETURN_PARAM
fi
} # end ChkLocalBookDetails
#
CleanLocalREPO () { # del any files in the local directory
local bookdir=$1
if [ -d $bookdir ]; then #local dir exists
  if [ "$(ls -A $bookdir)" ]; then
    rm -rf ${bookdir}/${version} # delete contents of local book dir
  fi
else  # create it
  mkdir -pv $bookdir
fi
} # end CleanLocalREPO
#
GetSvnUrl () {
if [ "$BOOK_URL" = blank ]; then
  BOOK_URL="svn://svn.linuxfromscratch.org/${REPO}/"
fi
} # end GetSvnUrl
#
WhichBLFSBook () {
Ignore="bootscripts"
PS3="Please select the book version : "
select TAG in 'Current Development' $( svn ls ${BOOK_URL}tags | grep -vE "$Ignore" ); do
  case $TAG in
    '') echo >&2 "Please select a numbered option";;
    Current*)
      type=trunk
      version=BOOK
      BOOK_VERSION="Current_Development"
    ;;
    ?*)
      if [ "$BOOK_VERSION" = systemd ]; then
        type="branches"
        version="systemd"
      else
        type="tags"
        version=$TAG
        BOOK_VERSION=$TAG
      fi
    ;;
  esac
  BOOK_FULL_URL="${BOOK_URL}$type/$version"
  echo >&2 "You have selected '$TAG'"
  echo >&2 "$BOOK_FULL_URL"
  PS3="Is this correct? : "
  select confirm in Yes No; do
    case $confirm in
      '') echo >&2 "Please enter 1 for Yes or 2 for No";;
      ?*) break
    esac
  done
  case $confirm in
    No) PS3="Please select the book version : "
    ;;
# update the config file with the book version
    Yes) awk -v x=BOOK_VERSION -v n=$BOOK_VERSION '
             BEGIN {FS=OFS="="}$1==x {$2=n} {print}
             ' $cfg > $cfg.tmp
             mv $cfg.tmp $cfg
         break
    ;;
  esac
done
} #end WhichBLFSBook
#
SetBLFSBook () {
case $BOOK_VERSION in
   Current_Development)
         type="trunk"
         version="BOOK"
   ;;
   BOOK)
         type="trunk"
         version="BOOK"
   ;;
   systemd)
         type="branches"
         version="systemd"
   ;;
   *)
         type="tags"
         version=$BOOK_VERSION
   ;;
esac
} #end SetBLFSBook
#
LastAccessSvn () {
local passed_array   # Local variable
local bookdir=$BLFS_BOOK_LOC_DIR
if [ "$BOOK_VERSION" = systemd ]; then bookdir=${bookdir}/SYSTEMD; fi
BookLoc=${bookdir}/${version}
if [ -e ${BookLoc}/.svn/entries ]; then #check time of last svn
  EntriesDate=$( stat --printf=%y ${BookLoc}/.svn/entries | awk 'gsub(/-/,"") {printf $1}' )
  date=$(date +'%Y-%m-%d %H:%M:%S') # today's date
  read Y M D h m s <<< ${date//[-: ]/ }
  today=$Y$M$D
  passed_array=( $EntriesDate $today ) # return the last svn date and today
  echo "${passed_array[@]}"
  return 0
else
  return $RETURN_PARAM # no entries file found
fi
} # end LastAccessSvn
CheckoutBook () {
local bookdir=$1
#
Url="${BOOK_URL}${type}/${version}"
#
echo "Will svn the LFS book at $Url"
echo "and place it in $bookdir"
svn co $Url $bookdir # get the requested book
#
} # end CheckoutBook
#
LocalBook () {
# $1 is the book dir
# $2 is the book version
if [ "$2" = Current_Development -o "$2" = BOOK ]; then
  type="trunk"
  version="BOOK"
elif [ "$2" = systemd ]; then
  type="branches"
  version="systemd"
else
  type="tags"
  version=$2
fi
if [ "$2" != KBLFS ]; then
  SVNINFO="$(svn info ${1}/${2} | awk '{printf $0"|"}')"
fi
} # end LocalBook
#
CleanSourceDir () {
# $1 is the current section
DirToClean=${SOURCEDIR}/${1}
wgetFile=${DirToClean}/${WgetList}
sortedFile=${DirToClean}/${sortedfile}
if [ -d $DirToClean ]; then
  if [ "$(ls -A $DirToClean)" ]; then # dir has files in it
    if [ -e $wgetFile ]; then
      for File in ${DirToClean}/*; do
        fndfile=$( echo $File | awk -F\/ '{print $NF}' )
        if [ -e $wgetFile ]; then
          if [ "$( grep -q $fndfile $wgetFile ; echo $? )" = "0" ]; then
            rm -rf ${DirToClean}/${fndfile} # delete the file if in wget-list
          fi
        fi
      done
      if [ -e $wgetFile ]; then rm $wgetFile; fi
      if [ -e $sortedFile ]; then rm $sortedFile; fi
    else
      echo "List file $wgetFile not present. Cannot clean directory $DirToClean"
    fi
  else
     echo "directory $DirToClean is empty"
  fi
else
  install -v -m0755 -d $DirToClean
fi
} #end CleanSourceDir
#
ChkSrcPresent () {
# $1 is the directory to check and $2 is the sortedfile list of files
fileMissing=false
dirtochk=$1
sortedFile=$2
if [ -z $sortedFile ]; then
  echo "No sorted file present in ${SOURCEDIR}/${Section}"
  echo "sources are not available"
  return 0
fi
while read FileUrl; do
  if [[ ${FileUrl:0:1} != '#' ]]; then # ignore file if it has a hash at the start
    filetofind=$( echo $FileUrl | awk -F\/ '{print $NF}' )
    if [ ! -e ${dirtochk}/${filetofind} ]; then
      echo "file $filetofind not downloaded"
      fileMissing=true
    fi
  fi
done < $sortedFile
if $fileMissing; then
  return $RETURN_PARAM
else
  return 0
fi
} # end ChkSrcPresent
#
createMd5File () {
commandname=$1
xmlsec="x"
rtrnCom=""
filetoget=${1}fnames
getComms $filetoget $xmlsec
fileComm=(${rtrnCom[@]})
tempfile=$(date +%d%B%Y_%H:%M)tmp.file
printf "%s\n" "${fileComm[@]}" > ${SrcPath}/${1}/${tempfile} #write to a tmp file
currentdir=$( echo $PWD )
cd ${SrcPath}/${1}
source $tempfile
rm $tempfile
cd $currentdir
return 0
} # createMd5File
#
GetXtraFiles () {
commandname=$1
xmlsec="x"
rtrnCom=""
filetoget=${1}wget
getComms $filetoget $xmlsec
fileComm=(${rtrnCom[@]})
tempfile=$(date +%d%B%Y_%H:%M)tmp.file
printf "%s\n" "${fileComm[@]}" | sed -e 's/\(.*\)&&$/\1/' > ${SrcPath}/${1}/${tempfile}
currentdir=$( echo $PWD )
cd ${SrcPath}/${1}
source $tempfile # download the files
cd ..
rm $tempfile
cd $currentdir
return 0
} # end GetXtraFiles
#
SortWgetList () {
# this function creates the wget-list for a particular section and sorts it.
# $1 is the section name, $2 is the array of pkg names, $3 is the array of src names.
local section_name=$1
declare -a pkgname=("${!2}")
declare -a srcname=("${!3}")
local SrcPath=${SOURCEDIR}/${section_name}
#
# you can use your own wget-list file for a particular section.
# for e.g, you can download latest versions of gnome and the X libraries.
# Put the wget list files in the $blfsfilesTar dir.
#
#if [ "$section_name" = gnomeplatform ]; then
#  pkgfile=${BLFSBUILDFILES}/gnomeplatform-wget-list
#elif [ "$section_name" = gnomedesktop ]; then
#  pkgfile=${BLFSBUILDFILES}/gnomedesktop-wget-list
#elif [ "$section_name" = gnomeapps ]; then
#  pkgfile=${BLFSBUILDFILES}/gnomeapps-wget-list
#elif [ "$section_name" = xlibs ]; then
#  pkgfile=${BLFSBUILDFILES}/xlibs-wget-list
#else
  pkgfile=${SOURCEDIR}/${WgetList}
#fi
if [ ! -e "$pkgfile" ]; then
  echo "\""$pkgfile"\" does not exist. Please download wget-list"
  exit 1
else
  echo "will use $pkgfile to download the required source files"
fi
#
if [ ! -d $SrcPath ]; then install -v -m0755 -d $SrcPath; fi
if [ -e ${SrcPath}/${WgetList} ]; then rm ${SrcPath}/${WgetList}; fi
#
for (( ik=0; ik<${#srcname[@]}; ik++ )); do
  if $single_package; then # find the package
    if [[ "$SINGLE_PACKAGE" == "${pkgname[ik]}" ]]; then # found the package
      tomatch="/${srcname[ik]}[0-9]"
      grep $tomatch $pkgfile >> ${SrcPath}/${WgetList}
      break
    fi
  else # some packages need extra files downloaded
    case ${srcname[ik]} in
       cracklib-|libnl-|git-|docbook-xsl-|freetype-|poppler-) # need cracklib-words, libnl-docs, git-manpages, docbook-xsl-doc, freetype-doc, poppler-data
            tomatch="/${srcname[ik]}"
       ;;
       *)
            tomatch="/${srcname[ik]}[0-9]"
       ;;
    esac
    grep $tomatch $pkgfile  >> ${SrcPath}/${WgetList} # list of files in this section
  fi
done
# make sure there are no duplicate lines
if [ -e ${SrcPath}/${sortedfile} ]; then rm ${SrcPath}/${sortedfile}; fi
sort -u ${SrcPath}/${WgetList} > ${SrcPath}/${sortedfile}
case $BROWSER in
  firefox)
     sed -i '/seamonkey-/d' ${SrcPath}/${sortedfile}
  ;;
  seamonkey)
     sed -i '/firefox-/d' ${SrcPath}/${sortedfile}
  ;;
esac
# don't download icedtea-web in the java section
case $section_name in
  java)
     sed -i '/icedtea-web/d' ${SrcPath}/${sortedfile}
  ;;
esac
return 0
} # end SortWgetList
#
GetSources () {
# $1 is the section name, $2 is the sorted file name, $3 is where to get the src url
local fname
local extName
local section_name=$1
local sortedfile=$2
local src_url=$3
local SrcPath=${SOURCEDIR}/${section_name}
#
while read url_line; do
  fname=$(echo $url_line |  awk -F\/ '{print $NF}' )
  skipit=false # download this file by default
  if [ -e ${SrcPath}/${fname} ]; then # file exists
    skipit=true
  else
    extName=$(echo $fname | awk -F\. '{print $NF}' )
    case $section_name in
        java)
           case $fname in
             OpenJDK*bin*)  # only want to download one binary
                    case $(uname -m) in
                      x86_64) # don't want the i686 version
                          case $fname in
                            *i686-bin*)
                                 skipit=true
                            ;;
                            *x86_64-bin*) # don't want either binary
                                 skipit=true # using the oracle binary
                            ;;
                          esac
                      ;;
                      *) # don't want the x86_64 version
                          case $fname in
                            *x86_64-bin*)
                                 skipit=true
                            ;;
                          esac
                      ;;
                    esac
                    if [ "$src_url" = anduin ]; then
                      initial=${fname:0:1}
                      initial=$(echo ${initial,,*}) # make sure first char is lower case
                    fi
             ;;
             OpenJDK*) # don't want the book downloads - use wget
                    skipit=true
             ;;
             *)
                    if [ "$src_url" = anduin ]; then
                      initial=${fname:0:1}
                      initial=$(echo ${initial,,*}) # make sure first char is lower case
                    fi
             ;;
           esac
        ;;
        programming)
           if [ "$src_url" = anduin ]; then
             case $fname in
               Archive*|ExtUtils*|Glib*|URI*|XML*) # perl modules
                 initial="perl-modules"
               ;;
               docutils|pyatspi*|py2cairo*|pygtk*|pygobject*|pyxdg*) # python modules
                 initial="python-modules"
               ;;
               *)
                 initial=${fname:0:1}
                 initial=$(echo ${initial,,*}) # make sure first char is lower case
               ;;
             esac
           fi
        ;;
        x)
           if [ "$src_url" = anduin ]; then
             case $fname in # MesaLib is not part of Xorg
               MesaLib*)
                 initial="m"
               ;;
               *)
                 initial="Xorg"
               ;;
             esac
           fi
        ;;
        *)
           if [ "$src_url" = anduin ]; then
             initial=${fname:0:1}
             initial=$(echo ${initial,,*}) # make sure first char is lower case
           fi
        ;;
    esac
  fi
  if ! $skipit; then # get the source
    case $src_url in
        anduin)
            full_url=${anduin_src_root}/${initial}/${fname} # use anduin
        ;;
        url_in_book)
            full_url=$url_line # use the url in the wget-list file
        ;;
    esac
    if [ "$extName" = patch ]; then full_url=${patch_root}/${fname}; fi
    wget $hostwgetopts $full_url -P $SrcPath
  fi
done < ${SrcPath}/${sortedfile}
#
if [ "$section_name" = x ]; then # get all the extra files
  srcUrl="http://xorg.freedesktop.org/releases/individual"
#set up the dirs under x
  if [ ! -e ${SrcPath}/${xproto} ]; then
    install -v -d ${SrcPath}/${xproto}
  fi
  if [ ! -e ${SrcPath}/${xlib} ]; then
    install -v -d ${SrcPath}/${xlib}
  fi
  if [ ! -e ${SrcPath}/${xapp} ]; then
    install -v -d ${SrcPath}/${xapp}
  fi
  if [ ! -e ${SrcPath}/${xfont} ]; then
    install -v -d ${SrcPath}/${xfont}
  fi
  createMd5File $xproto # create all the md5 files
  createMd5File $xlib
  createMd5File $xapp
  createMd5File $xfont
  GetXtraFiles $xproto # get the wget commands
  GetXtraFiles $xlib
  GetXtraFiles $xapp
  GetXtraFiles $xfont
fi
} #end GetSources
#
GetListFile () {
# $1 is the book directory
REPODIR=${1}/${version}
local wgetlistfile=${SOURCEDIR}/${2}
if [ -e $wgetlistfile ]; then
  rm $wgetlistfile
fi
make -j1 -f $REPODIR/Makefile -C $REPODIR BASEDIR=$SOURCEDIR $2
#
} #end GetListFile
#
ChkEmptySrcFiles () {
if [ ! -d ${SOURCEDIR}/${1} ]; then
  mkdir -pv ${SOURCEDIR}/${1}
  return $RETURN_PARAM
fi
if [ "$(ls -A ${SOURCEDIR}/${1})" ]; then #  directory is not empty
  zeroLenFiles=$(ls -l $SOURCEDIR/${1}|awk '!/^d/&&$5==0 {print $NF}')
  len=${#zeroLenFiles}
  if [ $len -gt 0 ]; then
    echo -e "These files are empty:\n$zeroLenFiles"
    return $RETURN_PARAM
  else
    return 0 # no empty files found
  fi
else
  return $RETURN_PARAM # section directory is empty
fi
} # end ChkEmptySrcFiles
#
GetGitInfo () {
# $1 is the dir containing .git
local tmpfile=/tmp/$(date +%d%B%Y_%H:%M)tmp.file
pushd $1 > /dev/null
    echo "== Remote URL: $(git remote -v)" > $tmpfile
    echo "== Remote Branches: " >> $tmpfile
    git branch -r >> $tmpfile
    echo "== Local Branches:" >> $tmpfile
    git branch >> $tmpfile
    echo "== Configuration (.git/config)" >> $tmpfile
    cat .git/config >> $tmpfile
    echo "== Most Recent Commit" >> $tmpfile
    git log --max-count=1 >> $tmpfile
    GITINFO="$(more $tmpfile | awk '{printf $0"|"}')"
    rm $tmpfile
popd > /dev/null
} # end GetGitInfo
#
DumpCommands () {
# $1 is the REPO (BLFS in this case)
# $2 is the dir containing the book
# $3 is either commit or Revision depending on whether using git or svn
#
REPODIR=$2
target=$( echo $1 | awk '{print tolower($1)}')
if [ "$3" = commit ]; then # use GITINFO
  local commitInfo=$GITINFO
else
  local commitInfo=$SVNINFO
fi
AllInfo=$( echo $commitInfo | awk -v pattern=$3 'BEGIN{ RS = "|" };$0 ~ pattern {print $0}' )
for dir in $DumpedCommands $Dumpedhtml; do
  if [ ! -d $dir ]; then
    install -vd $dir
    touch $dir/.${3} # prevent cat error meassage 6 lines below
  else # check if there is already a revision or commit file
    if [ ! -e $dir/.${3} ]; then touch $dir/.${3}; fi # prevent cat error msg
  fi
done
for dir in $Dumpedhtml $DumpedCommands; do
  if [ -e "$dir" -a "$AllInfo" != "$( cat $dir/.${3} | awk -v pattern=$3 '$0 ~ pattern {print $0}')" ]; then
    if [ -d $Dumpedhtml ]; then rm -rf $Dumpedhtml;fi
    if [ -d $DumpedCommands ]; then rm -rf $DumpedCommands;fi
    pushd $REPODIR > /dev/null
        make -j1 DUMPDIR=$DumpedCommands BASEDIR=$Dumpedhtml $target dump-commands
        for dir in $DumpedCommands $Dumpedhtml; do
          echo $commitInfo | awk 'BEGIN{ RS = "|" }; {print $0}' > $dir/.${3}
        done
    popd > /dev/null
    break
  fi
done
} # end DumpCommands
#
unpackBLFSfiles () {
# * NOTE * the tar file $blfsfilesTar and the directory $blfsBuildFiles
# must exist before calling this function
#
tar -xvf ${LFS}/${blfsfilesTar} -C ${LFS}${blfsBuildFiles} --no-same-owner
#untarred so delete it
rm ${LFS}/${blfsfilesTar}
} #end unpackBLFSfiles
#
trimSpace () {  # trim whitespace before and after a string, single and multi-line strings
    echo "$1" | sed -n '1h;1!H;${;g;s/^[ \t]*//g;s/[ \t]*$//g;p;}'
} # end trimSpace
#
combineScripts () {
declare -a commands=("${!1}")
declare -a buildWrap=("${!2}")
local combine=""
local numc=${#commands[@]}
local numb=${#buildWrap[@]}
countc=0 # counter for the combine array
countbl=0 # counter for build lines written
inc=false # switch for whether a configure, make and install section is present
cont=0 # number of continuation lines
ifDoc=false # true if an if block containing a doc
#
for (( i=0; i<$numb; i++ ))
do
  case "${buildWrap[i]}" in
    configure_commands*)
      combine[countc++]=${buildWrap[countbl++]}
      combine[countc++]=${buildWrap[countbl++]} # the {: line
      for (( jk=$countg; jk<$numc; jk++ )); do
        case ${commands[jk]} in
           make*) # assume either a make command or make install
              countg=$jk
              break
           ;;
           'LANG="en_US.UTF-8" make') # the media-player-info make command
              countg=$jk
              break
           ;;
           *"setup.py build"*) # python module build
              countg=$jk
              break
           ;;
           *install*) # test to see if part of a continuation sequence
              case ${commands[jk]} in
                 *\\) # a continuation line
                    if [ $cont -gt 0 ]; then # part of configure sequence so store it
                      storit[cont++]="${commands[jk]}"
                    else # assume an install cont line
                      countg=$jk
                      break
                    fi
                 ;;
                 *)
                    countg=$jk
                    break
                 ;;
              esac
           ;;
           error_count*)
              countg=$jk
              break
           ;;
           *"waf build")
              countg=$jk
              break
           ;;
           './build.sh -Ddist.dir='*) # apache-ant build
              countg=$jk
              break
           ;;
           '_bindir="bin.linuxx86"'*|'./b2 stage'*) # boost
              countg=$jk
              break
           ;;
           *ninja*) # chromium make
              countg=$jk
              break
           ;;
           *)
              case "${commands[jk]}" in
                 *\\)
                    storit[cont++]="${commands[jk]}"
                 ;;
                 *)
                    # write with any continuation lines
                    if [ $cont -gt 0 ]; then
                      for (( l=0; l<$cont; l++ )); do
                        combine[countc++]="  ${storit[l]}"
                      done
                      combine[countc++]="  ${commands[jk]}"
                      cont=0
                      inc=true
                    else
                      combine[countc++]="  ${commands[jk]}" # configure command
                      inc=true # found at least one configure command
                    fi
                    if [ $[jk+1] -eq $numc ]; then countg=$jk; fi
                 ;;
              esac
           ;;
        esac
      done
      if [ $cont -gt 0 ]; then
        for (( l=0; l<$cont; l++ )); do
          combine[countc++]="  ${storit[l]}"
        done
        combine[countc++]="  ${commands[countg++]}"
        inc=true
        cont=0
      fi
      if ! $inc; then
        combine[countc++]='  echo "no configure script for this package"'
      fi
    ;;
    make_commands*)
      inc=false
      combine[countc++]=${buildWrap[countbl++]}
      combine[countc++]=${buildWrap[countbl++]} # the {: command
      for (( jl=$countg; jl<$numc; jl++ )); do
        case ${commands[jl]} in
           *install*) # assume an install command
              case ${commands[jl]} in
                 *"/usr/bin/bjam"*) # this is boost so stay in make
                       combine[countc++]="  ${commands[jl]}"
                 ;;
                 *)
                       countg=$jl
                       break
                 ;;
              esac
           ;;
           docsdir*)
              countg=$jl
              break
           ;;
           "make update")
              countg=$jl
              break
           ;;
           "ln -v -sfn ant-"*) # apache-ant symlink
              countg=$jl
              break
           ;;
           *'find build/*/images/j2sdk-image'*) # openjdk install line
              countg=$jl
              break
           ;;
           *)
              case "${commands[jl]}" in
                 *\\)
                     storit[cont++]="${commands[jl]}"
                 ;;
                 *)
                     if [ $cont -gt 0 ]; then # write the continuation lines
                       for (( l=0; l<$cont; l++ )); do
                         combine[countc++]="  ${storit[l]}"
                       done
                       combine[countc++]="  ${commands[jl]}"
                       cont=0
                       inc=true
                     else
                       combine[countc++]="  ${commands[jl]}" # make commands
                       inc=true #at least one make command found
                     fi
                     if [ $[jl+1] -eq $numc ]; then # no more commands
                       countg=$jl
                       if [[ "${commands[$countg]}" != *make* ]]; then
                         ((countc--))
                       fi
                     fi
                 ;;
              esac
           ;;
        esac
      done
       if ! $inc; then
         combine[countc++]='  echo "no make script for this package"'
       fi
    ;;
    install_commands*)
      inc=false
      foundDoc=false
      combine[countc++]=${buildWrap[countbl++]}
      combine[countc++]=${buildWrap[countbl++]} # the {: command
      for (( jm=$countg; jm<$numc; jm++ )); do
        case ${commands[jm]} in
          *install*)
             case "${commands[jm]}" in
               *\\) # cont line so store it
                  case "${commands[jm]}" in
                    'make'*'=/usr/share/doc'*) # genuine install command
                        storit[cont++]="${commands[jm]}"
                        inc=true
                    ;;
                    *'/usr/share/doc'*) # cont line contains a doc
                        foundDoc=true
                        storit[cont++]="${commands[jm]}"
                    ;;
                    *) # no doc in this cont line
                        storit[cont++]="${commands[jm]}"
                    ;;
                  esac
               ;;
               'make'*'=/usr/share/doc'*) # genuine install command
                    combine[countc++]="  ${commands[jm]}"
                    inc=true
               ;;
               *'/usr/share/doc'*) # don't write a doc install
                    :
               ;;
               *) # install line so write it out
                    if [ $cont -gt 0 ]; then # first write out cont lines
                      for (( l=0; l<$cont; l++ )); do
                        combine[countc++]="  ${storit[l]}"
                      done
                    fi 
                    combine[countc++]="  ${commands[jm]}"
                    inc=true
                    cont=0
                    countg=$[jm+1]
               ;;
             esac
          ;;
          '#'*) # comment line so ignore it
              countg=$[jm+1]
          ;;
          "make update")
              combine[countc++]="  ${commands[jm]}"
              cont=0
              inc=true
              countg=$[jm+1]
          ;;
          *'/usr/share/doc/php'*) # php so write the docs
              for (( l=0; l<$cont; l++ )); do
                combine[countc++]="  ${storit[l]}"
              done
              combine[countc++]="  ${commands[jm]}"
              cont=0
              inc=true
              countg=$[jm+1]
          ;;
          *'/usr/share/doc/slang'*) # store this continuation line
              storit[cont++]="${commands[jm]}"
          ;;
          *'build/*/images/j2sdk-image'*) # openjdk install lines
              combine[countc++]="  ${commands[jm]}"
              cont=0
              inc=true
              countg=$[jm+1]
          ;;
          if*) # starts with if so if a doc, will need to delete the closing fi
                   case ${commands[jm]} in
                   *'/usr/share/doc'*)
                       ifDoc=true
                       case ${commands[j]} in
                          *\\) # a continuation line so store it
                                storit[cont++]="${commands[jm]}"
                          ;;
                       esac
                   ;;
                   *\\) # a continuation line
                       storit[cont++]="${commands[jm]}"
                   ;;
                   *) # if block but not a doc or a cont line
                       echo ${commands[jm]}
                   ;;
                esac
          ;;
          *'/usr/share/doc'*) 
             cont=0 # doc so don't write it out
             countg=$[jm+1] # update countg in case this is the last line
          ;;
          "ln -v -sfn ant-"*) # apache-ant symlink
             countg=$jm
             break
          ;;
          "for "*) # begining of a for loop so break
             countg=$jm
             cont=0
             inc=true
             break
          ;;
          *"chmod"*) # break at a chmod commands
             if [ $cont -eq 0 ]; then
               break
             else # write out the cont lines
               for (( l=0; l<$cont; l++ )); do
                 combine[countc++]="  ${storit[l]}"
               done
               combine[countc++]="  ${commands[jm]}"
               cont=0
               inc=true
               break
             fi
          ;;
          *)
             case "${commands[jm]}" in
               *\\) # if a cont line, then store it
                   storit[cont++]="${commands[jm]}"
               ;;
               *)
                 if ! $foundDoc; then # write out any cont lines
                   if [ $cont -gt 0 ]; then
                     for (( l=0; l<$cont; l++ )); do
                       combine[countc++]="  ${storit[l]}"
                     done
                     combine[countc++]="  ${commands[jm]}"
                     cont=0
                     inc=true
                   else
                     countg=$jm
                     cont=0
                     inc=true
                     break
                   fi
                 else # continuation of a doc line so ignore it
                   cont=0
                 fi
               ;;
             esac
          ;;
        esac
      done
      if ! $inc; then
        combine[countc++]='  echo "no install script for this package"'
      fi
    ;;
    *)
      if [ $i -lt $countbl ]; then
        :
      else
        combine[countc++]=${buildWrap[i]}
        ((countbl++)) # increment because have written another build command
      fi
    ;;
  esac
done
rtr=(${combine[@]})
} # end combineScript
#
getBuild () {
local abuild=""
buildfile=$BLFSBUILDFILES/buildsrc
if [ ! -e $buildfile ]; then
  return $RETURN_PARAM
else
IFS='
'
abuild=( $( < $buildfile ) )
rtrnBuild=(${abuild[@]})
return 0
fi
} # end getBuild
#
Getxmlsec () {
xmlsec=general
case $1 in
  blfs|security|virtualization)
        xmlsec=postlfs
  ;;
  gnomeplatform|gnomedesktop|gnomeapps|telepathy)
        xmlsec=gnome
  ;;
  multimedia)
        xmlsec=multimedia
  ;;
  networks)
        xmlsec=basicnet
  ;;
  office|xsoftware|browser)
        xmlsec=xsoft
  ;;
  pst)
        xmlsec=pst
  ;;
  server)
        xmlsec=server
  ;;
  x|xlibs|windowmanager)
        xmlsec=x
  ;;
  xfce)
        xmlsec=xfce
  ;;
esac
} # end Getxmlsec
#
getComms () {
# $1 is the package name
# $2 is the commands section to look in
local acom=""
local bcom=""
local localpkgname=$1
local commandsection=$2
if [[ "$localpkgname" == ffmpeg || "$localpkgname" == atk || "$localpkgname" == jdkbin ]]; then # avoid at-spi2-atk which *-atk matches and gcc-java
  curfile=${DumpedCommands}/${commandsection}/???-${commandname}
else
  if [ -e ${DumpedCommands}/${commandsection}/*-${commandname} ]; then
    curfile=${DumpedCommands}/${commandsection}/*-${commandname}
  else
    echo -e 'echo "No commands matching '"${blfscommands}"'/'"${commandsection}"'/*-'"${commandname}"'"'
    echo 'echo "Adjust the command name before continuing. Exiting now"'
    echo "exit 1"
    exit 1
  fi
fi
IFS='
'
acom=( $( < $curfile ) )
case $localpkgname in
     aspell)
             ic=0
             foundconf=false # only need 1st configure and commands, not the 2nd
             for tline in ${acom[@]}; do
               case $tline in
                  *configure*)
                    if ! $foundconf; then
                      foundconf=true
                      bcom[ic++]=$tline
                    else
                      break
                    fi
                  ;;
                  *)
                    if $foundconf; then
                      bcom[ic++]=$tline
                    fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     docbook-xsl)
             ic=0
             catcount=0 # need to find 4 xmlcatalog commands then ignore the rest
             xmlcatfound=false
             for tline in ${acom[@]}; do
               case $tline in
                  xmlcatalog*)
                    ((catcount++))
                    if [ $catcount -ge 5 ]; then #ignore remaining commands
                      xmlcatfound=true
                    else
                      bcom[ic++]=$tline
                     fi
                  ;;
                  *)
                     if ! $xmlcatfound; then #write the commands
                       bcom[ic++]=$tline
                     fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     firefox)
             ic=0
             makeinstallfound=false
             for tline in ${acom[@]}; do
               case $tline in
                  *'make -f client.mk install'*)
                    if ! $makeinstallfound; then
                      makeinstallfound=true
                      bcom[ic++]=$tline
                    fi
                  ;;
                  *)
                     bcom[ic++]=$tline
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     firewall)
             ic=0
             EOFfound=false # need to find 2 EOFs and ignore the remaining commands
             for tline in ${acom[@]}; do
               case $tline in
                  *EOF*)
                    if ! $EOFfound; then # found first EOF  - write til next EOF
                      EOFfound=true
                      bcom[ic++]=$tline # write the cat - EOF line
                    else # finish writing commands
                      bcom[ic++]=$tline # EOF line
                      EOFfound=false
                    fi   
                  ;;
                  modprobe*)
                    :
                  ;;
                  chmod*)
                      bcom[ic++]=$tline
                      break
                  ;;
                  *)   
                    if $EOFfound; then # write all commands until next EOF
                      bcom[ic++]=$tline
                    fi   
                  ;;   
               esac 
             done 
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     gimp) # only want the commands to the first make install
             ic=0
             foundinstall=false
             for tline in ${acom[@]}; do
               case $tline in
                  "make install"*)
                     if ! $foundinstall; then
                       bcom[ic++]=$tline
                       foundinstall=true
                     fi
                  ;;
                  *)
                     if ! $foundinstall; then
                       bcom[ic++]=$tline
                     fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     git)
             ic=0
             foundhtml=false
             for tline in ${acom[@]}
             do
               case $tline in
                  "make htmldir"*)
                     foundhtml=true
                  ;;
                  "tar -xf ../git-manpages"*)
                     bcom[ic++]=$tline
                     foundhtml=false
                  ;;
                  *)
                     if ! $foundhtml; then
                       bcom[ic++]=$tline
                     fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     linux-pam) # remove all the test commands
             ic=0
             instfound=false
             for tline in ${acom[@]}; do
               case $tline in
                  *install*)
                     if ! $instfound; then
                       instfound=true
                     else
                       bcom[ic++]=$tline
                       instfound=false
                     fi
                  ;;
                  *)
                     if ! $instfound; then #write the commands
                       bcom[ic++]=$tline
                     fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     openjdk) # don't want the test lines
             ic=0
             displayfound=false
             for tline in ${acom[@]}; do
               case $tline in
                  *DISPLAY*)
                    displayfound=true
                  ;;
                  *'find build/*/images'*) # want this
                    displayfound=false
                    bcom[ic++]=$tline
                  ;;
                  *)
                     if ! $displayfound; then #write the commands
                       bcom[ic++]=$tline
                     fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     py2cairo) # only want the first set of ./waf lines
             ic=0
             foundwaf=false
             for tline in ${acom[@]}; do
               case $tline in
                  './waf configure'*)
                       foundwaf=true
                       bcom[ic++]=$tline
                  ;;
                  *"waf install"*)
                       if $foundwaf; then
                         bcom[ic++]=$tline
                         break
                       fi
                  ;;
                  *)
                       if $foundwaf; then
                         bcom[ic++]=$tline
                       fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     py3cairo)
             ic=0
             foundpatch=false
             for tline in ${acom[@]}; do
               case $tline in
                  'patch -Np1 -i ../pycairo-1.10.0-waf_unpack-1.patch'*)
                       foundpatch=true
                       bcom[ic++]=$tline
                  ;;
                  *"waf install"*)
                       if $foundpatch; then
                         bcom[ic++]=$tline
                         foundpatch=false
                         break
                       fi
                  ;;
                  *)
                       if $foundpatch; then
                         bcom[ic++]=$tline
                       fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     pygobject2)
             ic=0
             foundpatch=false
             for tline in ${acom[@]}; do
               case $tline in
                  'patch -Np1 -i ../pygobject-2.28.6-fixes-1.patch'*)
                       foundpatch=true
                       bcom[ic++]=$tline
                  ;;
                  "make install"*)
                       if $foundpatch; then
                         bcom[ic++]=$tline
                         foundpatch=false
                         break
                       else
                         continue
                       fi
                  ;;
                  *)
                       if $foundpatch; then
                         bcom[ic++]=$tline
                       fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     qt4) # need commands down to first /etc/profile.d/qt4.sh
             ic=0
             profcount=0
             for tline in ${acom[@]}; do
               case $tline in
                  'cat > /etc/profile.d/qt4.sh'*)
                       ((profcount++))
                       if [ $profcount -lt 2 ]; then
                         bcom[ic++]=$tline
                       else
                         break
                       fi
                  ;;
                  *)
                       bcom[ic++]=$tline
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     qtchooser) # need the qt4 commands only
             ic=0
             founddm755=false
             for tline in ${acom[@]}; do
               case $tline in
                  "install -dm755"*)
                       if $founddm755; then
                         founddm755=false
                       else
                         founddm755=true
                         bcom[ic++]=$tline
                       fi
                  ;;
                  "EOF"*)
                       if $founddm755; then
                         :
                       else
                         bcom[ic++]=$tline
                         founddm755=true
                       fi
                  ;;
                  "ln -sfv qt4.conf"*) # need this and break
                         bcom[ic++]=$tline
                         break
                  ;;
                  *)
                       if ! $founddm755; then
                         bcom[ic++]=$tline
                       fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     shadow) # only pass system-passwd with cracklib
             ic=0
             passwdcount=0
             syspasswdfound=false
             for tline in ${acom[@]}; do
               case $tline in
                  'cat > /etc/pam.d/system-password'*)
                       ((passwdcount++))
                       if [ $passwdcount -eq 2 ]; then
                         syspasswdfound=true
                       else
                         bcom[ic++]=$tline
                       fi
                  ;;
                  EOF*)
                       if $syspasswdfound; then
                         syspasswdfound=false
                       else
                         bcom[ic++]=$tline
                       fi
                  ;;
                  *)
                       if ! $syspasswdfound; then
                         bcom[ic++]=$tline
                       fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     weston) # don't want the weston activation commands
             ic=0
             foundweston=false
             for tline in ${acom[@]}; do
               case $tline in
                  weston*)
                       foundweston=true
                  ;;
                  *)
                       if ! $foundweston; then
                         bcom[ic++]=$tline
                       fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     xml-parser|tie-ixhash|xml-libxml|xml-sax-expat|xml-sax-base|xml-namespace|xml-sax|xml-simple|extutls-dpnds|extutls-pkgcnfg|perl-glib|uri|archive-zip)
             ic=0
             found=false
             for tline in ${acom[@]}; do
               case $tline in
                  perl*)
                         if ! $found; then
                           found=true
                           bcom[ic++]=$tline
                         fi
                  ;;
                  *install*)
                         if $found; then
                           bcom[ic++]=$tline
                           rtrnCom=(${bcom[@]})
                           return 0
                         fi
                  ;;
                  *)
                         if $found; then
                           bcom[ic++]=$tline
                         fi
                  ;;
               esac
             done
             return $RETURN_PARAM #install command not found
     ;;
     xorg-evdev|xorg-synaptics|xorg-nouveau|xorg-modeset)
# need the first set of commands
             ic=0
             foundconfig=false
             for tline in ${acom[@]}; do
               case $tline in
                  *configure*)
                       foundconfig=true
                       bcom[ic++]=$tline
                  ;;
                  *install*)
                       if $foundconfig; then
                         bcom[ic++]=$tline
                         break
                       fi
                  ;;
                  *)
                       if $foundconfig; then # write commands until make install
                         bcom[ic++]=$tline
                       fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     xorg-intel) # need the commands with enable-kms-only
             ic=0
             foundconfig=false
             foundkms=false
             for tline in ${acom[@]}; do
               case $tline in
                  *"XORG_CONFIG      \\") # need one of these
                         if ! $foundconfig; then
                           foundconfig=true
                           bcom[ic++]=$tline
                         fi
                  ;;
                  *"enable-kms-only"*) # need this
                         foundkms=true
                         bcom[ic++]=$tline
                  ;;
                  *'cat >> /etc/X11'*)  # don't want this
                         if $foundkms; then break; fi
                  ;;
                  *)
                         if $foundkms; then # write commands until the cat line
                           bcom[ic++]=$tline
                         fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     xorg-vmmouse)
             ic=0
             foundpatch=false # need the first patch
             for tline in ${acom[@]}; do
               case $tline in
                  *"patch"*)
                         foundpatch=true
                         bcom[ic++]=$tline
                  ;;
                  *install*)
                         if $foundpatch; then 
                           bcom[ic++]=$tline
                           break
                         fi
                  ;;
                  *)
                         if $foundpatch; then # write commands until make install
                           bcom[ic++]=$tline
                         fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     xorg-wacom)
             ic=0
             foundconfig=false
             foundudev=false
             foundsystemd=false
             for tline in ${acom[@]}; do
               case $tline in
                  *"XORG_CONFIG                                \\"*) # need one of these
                         if ! $foundconfig; then
                           foundconfig=true
                           bcom[ic++]=$tline
                         fi
                  ;;
                  *"with-udev-rules-dir="*) # need one of these
                         if $foundconfig -a ! $foundudev; then
                           foundudev=true
                           bcom[ic++]=$tline
                         fi
                  ;;
                  *"with-systemd-unit-dir="*) # and one of these
                         if $foundconfig -a $foundudev -a ! $foundsystemd; then
                           foundsystemd=true
                           bcom[ic++]=$tline
                         fi
                  ;;
                  *install*)
                         if $foundconfig -a $foundudev -a $foundsystemd; then
                           bcom[ic++]=$tline
                           break
                         fi
                  ;;
                  *)
                         if $foundconfig -a $foundudev -a $foundsystemd; then # write commands until make install
                           bcom[ic++]=$tline
                         fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     ${xproto}fnames|${xlib}fnames|${xapp}fnames|${xfont}fnames)
             ic=0
             for tline in ${acom[@]}; do
               case $tline in
                  mkdir*)
                     break
                  ;;
                  *)
                     bcom[ic++]=$tline
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     ${xproto}wget|${xlib}wget|${xapp}wget|${xfont}wget)
             ic=0
             mkdirfound=false
             for tline in ${acom[@]}; do
               case $tline in
                  mkdir*)
                     bcom[ic++]=$tline
                     mkdirfound=true
                  ;;
                  export*)
                     break
                  ;;
                  *)
                     if $mkdirfound; then
                       bcom[ic++]=$tline
                     fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     $xproto|$xlib|$xapp|$xfont)
             ic=0
             foundbash=false
             for tline in ${acom[@]}; do
               case $tline in
                  bash*)
                     foundbash=true
                     bcom[ic++]=$tline
                  ;;
                  *)
                     if $foundbash; then
                       bcom[ic++]=$tline
                     fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     *)
             rtrnCom=(${acom[@]})
             return 0
     ;;
esac
} # end getComms
#
GetCommands () {
#get access to the arrays
rtrnBuild=""
getBuild
return_val=$?
if [ $return_val -eq $RETURN_PARAM ]; then # no build file present
  return $RETURN_PARAM
else
  buildScripts=(${rtrnBuild[@]})
  rtrnCom=""
  local commandsection=$xmlsec
  case $pkgname in
      adwaita-icn-thm|gvfs|libsecret|netwrk-mngr-app|polkit-gnome)
        if [ "$xmlsec" = xfce ]; then # these are in gnome
          commandsection=gnome
        fi
      ;;
  esac
  getComms $pkgname $commandsection
  commandScripts=(${rtrnCom[@]})
  numclines=${#commandScripts[@]} # # of commands
# 
# output commands until first configure found (or special chars)
#
  countg=0 # # of commands wriiten out
  cont=0
  wpa_sup=false
  mozconfigfnd=false
  isSed=false
  for line in "${commandScripts[@]}"; do
    if $mozconfigfnd || $wpa_sup; then # never both true - are in different sections
       case "$line" in
          EOF)
            echo "$line"
            ((countg++))
            if $mozconfigfnd; then 
              mozconfigfnd=false
            else
              wpa_sup=false
            fi
          ;;
          *)  # continue writing until an EOF found
            echo "$line"
            ((countg++))
          ;;
       esac
    else
      case "$line" in
        'cat > wpa_supplicant/.config << "EOF"'|'cat >> wpa_supplicant/.config << "EOF"') # wpa_supp writes .config document
            wpa_sup=true
            echo $line
            ((countg++))
        ;;
        "cat > mozconfig <<"*) # firefox, seamonkey write mozconfig
            mozconfigfnd=true
            echo $line
            ((countg++))
        ;;
        sed*)
# test if sed has continuation line
          case "$line" in
            *\\)
              isSed=true # this is a sed with cont line(s)
              cacheit[cont++]="$line"
              ((countg++))
            ;;
            *)
              echo "$line"
              ((countg++))
            ;;
          esac
        ;;
        export*) # catch any env variables being set up
          echo "$line"
          ((countg++))
          [ $countg -eq $numclines ] && return 0
        ;;
        "perl Makefile.PL"*) # a perl module
          break
        ;;
        'cat > /etc/rc.d/rc.iptables << "EOF"') # the firewall for iptables
         echo $line
         ((countg++))
        ;;
        *configure*|*Configure*|*bootstrap*|*autogen.sh*|cmake*|*"build.sh -Ddist.dir"*)
          if $isSed; then # test if another cont line
            case "$line" in
              *\\) # another cont line found so store it
                 cacheit[cont++]="$line"
                 ((countg++))
              ;;
              *) # write out the stored lines
                 for (( l=0; l<$cont; l++ )); do
                   echo "${cacheit[l]}"
                 done
                 echo "$line"
                 cont=0
                 ((countg++))
                 isSed=false # finished with this sed command
              ;;
            esac
          else
            if [ $cont -gt 0 ]; then countg=$countg-$cont; fi
            break
          fi
        ;;
        make*) # begins with make or install so break
          if $isSed; then # write out the sed lines
            for (( l=0; l<$cont; l++ )); do
              echo "${cacheit[l]}"
            done
            echo "$line"
            cont=0
            ((countg++))
            isSed=false # finished with any sed command
          else
            break
          fi
        ;;
        'install -v -d -m755 /usr/share/xml/docbook/xml-dtd-4.5'*) # break for docbook-xml
           break
        ;;
        *)
          case "$line" in
            *\\) # if a continuation line, store in cache
              cacheit[cont++]="$line"
              ((countg++))
            ;;
            *)
             if [ $cont -gt 0 ]; then # write out continuation line 
               for (( l=0; l<$cont; l++ )); do
                 echo "${cacheit[l]}"
               done
               echo "$line"
               cont=0
               isSed=false # finished with any sed command
               ((countg++)) # count # of commands written to output
               [ $countg -eq $numclines ] && return 0
             else
               echo "$line"
               ((countg++)) # count # of commands written to output
               [ $countg -eq $numclines ] && return 0
             fi
            ;;
          esac
       ;;
      esac
    fi
  done
#
  rtr=""
  combineScripts commandScripts[@] buildScripts[@]
  scriptOut=(${rtr[@]})
  for t in "${scriptOut[@]}"; do
    echo $t
  done
  if [ $countg -ne $numclines ]; then # output remaining commands
    cont=0 # counter for continuation lines
    foundDoc=false # doc command
    tarcomm=false # tar command
    symtest=false # symlink
#
    for (( k=$countg; k<$numclines; k++ )); do
      case ${commandScripts[k]} in
         install*)
                case ${commandScripts[k]} in
                   *'/usr/share/doc'*)
                       case ${commandScripts[k]} in
                          *\\) # a doc continuation line
                             foundDoc=true
                          ;;
                       esac
                   ;;
                   *\\) # a continuation line
                       cacheit[cont++]=${commandScripts[k]}
                   ;;
                   *) # install but not a doc or a cont line
                       echo ${commandScripts[k]}
                   ;;
                esac
         ;;
         ln*) # is a symlink so write it
                case ${commandScripts[k]} in
                   *\\) # a continuation line
                       cacheit[cont++]=${commandScripts[k]}
                       symtest=true
                   ;;
                   *) # write it out
                       echo ${commandScripts[k]}
                   ;;
                esac
         ;;
         if*) # starts with if so if a doc, will need to delete the closing fi
                   case ${commandScripts[k]} in
                   *'/usr/share/doc'*)
                       ifDoc=true
                       case ${commandScripts[k]} in
                          *\\) # a continuation line
                                cacheit[cont++]=${commandScripts[k]}
                          ;;
                       esac
                   ;;
                   *\\) # a continuation line
                       cacheit[cont++]=${commandScripts[k]}
                   ;;
                   *) # if block but not a doc or a cont line
                       echo ${commandScripts[k]}
                   ;;
                esac
         ;;
         tar*) # untar a file, so catch the cont lines
                case ${commandScripts[k]} in
                   *\\) # a continuation line
                       cacheit[cont++]=${commandScripts[k]}
                       tarcomm=true
                   ;;
                   *) 
                       echo ${commandScripts[k]}
                   ;;
                esac
         ;;
         gunzip*) # unpack a tarball so write it
                echo ${commandScripts[k]}
         ;;
         mv*) # a move commands so write it
                echo ${commandScripts[k]}
         ;;
         'mkdir -p /usr/share/doc/git-'*|'mkdir    /usr/share/doc/git-'*) # want the git docs
                echo ${commandScripts[k]}
         ;;
         'find /usr/share/doc/git-'*) # need these find commmands in git
                echo ${commandScripts[k]}
         ;;
         *'/usr/share/doc/php'*) # php doc so write it
                for (( l=0; l<$cont; l++ )); do
                  echo "${cacheit[l]}"
                done
                echo ${commandScripts[k]}
                cont=0
         ;;
         *'/usr/share/doc'*)
                if $tarcomm; then
                  case ${commandScripts[k]} in
                     *\\) # another continuation line
                         cacheit[cont++]=${commandScripts[k]}
                     ;;
                     *)
                         for (( l=0; l<$cont; l++ )); do
                           echo "${cacheit[l]}"
                         done
                         echo ${commandScripts[k]}
                         tarcomm=false
                         cont=0
                     ;;
                   esac
                elif $symtest; then
                  case ${commandScripts[k]} in
                     *\\) # another continuation line
                         cacheit[cont++]=${commandScripts[k]}
                     ;;
                     *) 
                         for (( l=0; l<$cont; l++ )); do
                           echo "${cacheit[l]}"
                         done
                         echo ${commandScripts[k]}
                         symtest=false
                         cont=0
                     ;;
                   esac
                else
                  case ${commandScripts[k]} in
                      *\\) # a continuation line
                         foundDoc=true
                      ;;
                      *)
                         if $foundDoc; then # is a doc, so don't write
                           foundDoc=false
                         fi
                         cont=0
                      ;;
                  esac
                fi
         ;;
         "fi"*)
                if $ifDoc; then # end of a doc if test - don't write it
                  ifDoc=false
                else
                  echo ${commandScripts[k]} # if block is not a doc
                fi
         ;;
         *)
              if ! $ifDoc; then # not commands within a doc if block
                case ${commandScripts[k]} in
                    *\\) # continuation line, store it
                       cacheit[cont++]=${commandScripts[k]}
                    ;;
                    *) 
                       if [ $cont -gt 0 ]; then # write out continuation line(s)
                         for (( l=0; l<$cont; l++ )); do
                           echo "${cacheit[l]}"
                         done
                         symtest=false
                         tarcomm=false
                         cont=0
                       fi
                       echo ${commandScripts[k]}
                    ;;
                esac
              fi
         ;;
      esac
    done
  fi
  return 0
fi
} # end GetCommands
#
GetXCommands () {
#get access to the xml x commands
rtrnCom=""
getComms $pkgname $xmlsec
commandScripts=(${rtrnCom[@]})
numclines=${#commandScripts[@]} # # of commands
for xt in "${commandScripts[@]}"; do
  echo $xt
done
return 0
} # end GetXCommands
#
GetcacertsCommands () {
rtrnCom=""
getComms $pkgname $xmlsec
commandScripts=(${rtrnCom[@]})
# dump all the commands
for line in "${commandScripts[@]}"; do
  echo $line
done
} # end GetcacertsCommands
#
accountsserviceComms () {
local accountscom=""
accountscom[0]="./configure --prefix=/usr \\"
accountscom[1]="            --sysconfdir=/etc \\"
accountscom[2]="            --libexecdir=/usr/lib/accountsservice \\"
accountscom[3]="            --with-systemdsystemunitdir=/usr/lib/systemd/system \\"
accountscom[4]="            --localstatedir=/var --disable-static --enable-systemd"
accountscom[5]="make"
accountscom[6]="make install"
rtrncommands=(${accountscom[@]})
} # end accountsserviceComms
#
avrbinutilsComms () {
local avrbinutilscom=""
avrbinutilscom[0]="patch -Np1 -i ../binutils-2.23.2-avr-size.patch"
avrbinutilscom[1]="patch -Np1 -i ../binutils-2.23.2-texinfo-5.0.patch"
avrbinutilscom[2]="sed -i '/ac_cpp=/s/\\\$CPPFLAGS/\\\$CPPFLAGS -O2/' libiberty/configure"
avrbinutilscom[3]="config_guess=\$(./config.guess)"
avrbinutilscom[4]="rm -rf ../binutils-build"
avrbinutilscom[5]="mkdir -v ../binutils-build"
avrbinutilscom[6]="cd ../binutils-build"
avrbinutilscom[7]="../binutils-2.23.2/configure --prefix=/usr \\"
avrbinutilscom[8]="                             --with-lib-path=/usr/lib \\"
avrbinutilscom[9]="                             --enable-ld=default \\"
avrbinutilscom[10]="                             --enable-gold \\"
avrbinutilscom[11]="                             --enable-plugins \\"
avrbinutilscom[12]="                             --enable-threads \\"
avrbinutilscom[13]="                             --with-pic \\"
avrbinutilscom[14]="                             --enable-shared \\"
avrbinutilscom[15]="                             --disable-werror \\"
avrbinutilscom[16]="                             --disable-multilib \\"
avrbinutilscom[17]="                             --build=\${config_guess} \\"
avrbinutilscom[18]="                             --target=avr"
avrbinutilscom[19]="make configure-host"
avrbinutilscom[20]="make tooldir=/usr"
avrbinutilscom[21]="make tooldir=/usr DESTDIR=/tmp install"
avrbinutilscom[22]="cp /tmp/usr/bin/avr-*  /usr/bin/"
avrbinutilscom[23]="cp /tmp/usr/lib/ldscripts/avr* /usr/lib/ldscripts/"
avrbinutilscom[24]="for info in as bfd binutils configure gprof ld standards; do"
avrbinutilscom[25]="cp /tmp/usr/share/info/\${info}.info /usr/share/info/avr-\${info}.info"
avrbinutilscom[26]="done"
avrbinutilscom[27]="cp /tmp/usr/share/man/man1/avr-* /usr/share/man/man1/"
avrbinutilscom[28]="cp -r /tmp/usr/x86_64-unknown-linux-gnu/avr /usr/x86_64-unknown-linux-gnu/"
avrbinutilscom[29]="rm -rf /tmp/usr"
rtrncommands=(${avrbinutilscom[@]})
} # end avrbinutilsComms
#
avrgccComms () {
local avrgcccom=""
avrgcccom[0]='export CFLAGS="-O2 -pipe"'
avrgcccom[1]='export CXXFLAGS="-O2 -pipe"'
avrgcccom[2]="sed -i 's/install_to_\$(INSTALL_DEST) //' libiberty/Makefile.in"
avrgcccom[3]="sed -i '/ac_cpp=/s/\\\$CPPFLAGS/\\\$CPPFLAGS -O2/' libiberty/configure"
avrgcccom[4]="sed -i '/ac_cpp=/s/\\\$CPPFLAGS/\\\$CPPFLAGS -O2/' gcc/configure"
avrgcccom[5]="rm -rf ../gcc-build"
avrgcccom[6]="mkdir -v ../gcc-build"
avrgcccom[7]="cd ../gcc-build"
avrgcccom[8]="../gcc-${gccvers}/configure --prefix=/usr               \\"
avrgcccom[9]="                  --disable-cloog-version-check \\"
avrgcccom[10]="                 --disable-install-libiberty \\"
avrgcccom[11]="                 --disable-libssp \\"
avrgcccom[12]="                 --disable-libstdcxx-pch \\"
avrgcccom[13]="                 --disable-libunwind-exceptions \\"
avrgcccom[14]="                 --disable-linker-build-id \\"
avrgcccom[15]="                 --disable-nls \\"
avrgcccom[16]="                 --disable-werror \\"
avrgcccom[17]="                 --enable-__cxa_atexit \\"
avrgcccom[18]="                 --enable-checking=release \\"
avrgcccom[19]="                 --enable-clocale=gnu \\"
avrgcccom[20]="                 --enable-cloog-backend=isl \\"
avrgcccom[21]="                 --enable-gnu-unique-object \\"
avrgcccom[22]="                 --enable-gold \\"
avrgcccom[23]="                 --enable-languages=c,c++ \\"
avrgcccom[24]="                 --enable-ld=default \\"
avrgcccom[25]="                 --enable-lto \\"
avrgcccom[26]="                 --enable-plugin \\"
avrgcccom[27]="                 --enable-shared \\"
avrgcccom[28]="                 --infodir=/usr/share/info \\"
avrgcccom[29]="                 --libdir=/usr/lib \\"
avrgcccom[30]="                 --libexecdir=/usr/lib \\"
avrgcccom[31]="                 --mandir=/usr/share/man \\"
avrgcccom[32]="                 --target=avr \\"
avrgcccom[33]="                 --with-as=/usr/bin/avr-as \\"
avrgcccom[34]="                 --with-gnu-as \\"
avrgcccom[35]="                 --with-gnu-ld \\"
avrgcccom[36]="                 --with-ld=/usr/bin/avr-ld \\"
avrgcccom[37]="                 --with-plugin-ld=ld.gold \\"
avrgcccom[38]="                 --with-system-zlib"
avrgcccom[39]="make"
avrgcccom[40]="make DESTDIR=/tmp install"
avrgcccom[41]='find /tmp/usr/lib -type f -name "*.a" \'
avrgcccom[42]="   -exec /usr/bin/avr-strip --strip-debug '{}' \\;"
avrgcccom[43]="cp /tmp/usr/bin/avr-*  /usr/bin/"
avrgcccom[44]="cp -r /tmp/usr/lib/gcc/avr  /usr/lib/gcc/"
avrgcccom[45]="cp /tmp/usr/share/man/man1/avr-* /usr/share/man/man1"
avrgcccom[46]="rm -rf /tmp/usr"
rtrncommands=(${avrgcccom[@]})
} # end avrgccComms
#
basicComms () {
local basiccom=""
basiccom[0]="./configure --prefix=/usr \\"
basiccom[1]="            --sysconfdir=/etc \\"
basiccom[2]="            --localstatedir=/var \\"
basiccom[3]="            --libexecdir=/usr/lib \\"
basiccom[4]="            --disable-static"
basiccom[5]="make"
basiccom[6]="make install"
rtrncommands=(${basiccom[@]})
} # basicComms
#
blfsbtscrptsComms () {
local blfscom=""
blfscom[0]='make install-$bsToInstall'
rtrncommands=(${blfscom[@]})
} # end blfsbtscrptsComms
#
ccacheComms () {
local ccachecom=""
ccachecom[0]="CHOST=x86_64-unknown-linux-gnu"
ccachecom[1]="./configure --prefix=/usr"
ccachecom[2]="make"
ccachecom[3]="install -Dm 755 ccache /usr/bin/ccache"
ccachecom[4]="install -Dm 644 ccache.1 /usr/share/man/man1/ccache.1"
ccachecom[5]="install -d /usr/lib/ccache/bin"
ccachecom[6]="ln -sf /usr/bin/ccache /usr/lib/ccache/bin/cc"
ccachecom[7]="ln -sf /usr/bin/ccache /usr/lib/ccache/bin/gcc"
ccachecom[8]="ln -sf /usr/bin/ccache /usr/lib/ccache/bin/g++"
ccachecom[9]="ln -sf /usr/bin/ccache /usr/lib/ccache/bin/cpp"
ccachecom[10]="ln -sf /usr/bin/ccache /usr/lib/ccache/bin/c++"
ccachecom[11]="ln -sf /usr/bin/ccache /usr/lib/ccache/bin/\${CHOST}-cc"
ccachecom[12]="ln -sf /usr/bin/ccache /usr/lib/ccache/bin/\${CHOST}-gcc"
ccachecom[13]="ln -sf /usr/bin/ccache /usr/lib/ccache/bin/\${CHOST}-g++"
ccachecom[14]="ln -sf /usr/bin/ccache /usr/lib/ccache/bin/\${CHOST}-cpp"
ccachecom[15]="ln -sf /usr/bin/ccache /usr/lib/ccache/bin/\${CHOST}-c++"
rtrncommands=(${ccachecom[@]})
} # end ccacheComms
#
chromeComms () {
local chromecom=""
chromecom[0]="find third_party/icu -type f \\! -regex '.*\\.\\(gyp\\|gypi\\|isolate\\)' -delete"
chromecom[1]='./build/linux/unbundle/replace_gyp_files.py "${_chromium_conf[@]}"'
chromecom[2]='./build/gyp_chromium --depth=. "${_chromium_conf[@]}"'
chromecom[3]="ninja -C out/Release chrome chrome_sandbox chromedriver"
chromecom[4]="install -D out/Release/chrome /usr/lib/chromium/chromium"
chromecom[5]="install -Dm755 out/Release/chrome_sandbox \\"
chromecom[6]="    /usr/lib/chromium/chrome-sandbox"
chromecom[7]="install -D out/Release/chromedriver /usr/lib/chromium/chromedriver"
chromecom[8]="cp out/Release/{*.pak,libffmpegsumo.so,libpdf.so,icudtl.dat} /usr/lib/chromium/"
chromecom[9]="cp -a out/Release/locales /usr/lib/chromium/"
chromecom[10]="install -Dm644 out/Release/chrome.1 /usr/share/man/man1/chromium.1"
chromecom[11]="for size in 22 24 48 64 128 256; do"
chromecom[12]='  install -Dm644 "chrome/app/theme/chromium/product_logo_$size.png" \'
chromecom[13]='    "/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png"'
chromecom[14]="done"
chromecom[15]="for size in 16 32; do"
chromecom[16]='  install -Dm644 "chrome/app/theme/default_100_percent/chromium/product_logo_$size.png" \'
chromecom[17]='    "/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png"'
chromecom[18]="done"
rtrncommands=(${chromecom[@]})
} # end chromeComms
#
coreutilsComms () {
local corecom=""
corecom[0]="patch -Np1 -i ../coreutils-${coreutilsvers}-i18n-1.patch"
corecom[1]="touch Makefile.in"
corecom[2]="FORCE_UNSAFE_CONFIGURE=1 ./configure \\"
corecom[3]="                         --prefix=/usr --libexecdir=/usr/lib \\"
corecom[4]="                         --enable-no-install-program=kill,uptime \\"
corecom[5]="                         --with-openssl"
corecom[6]="make"
corecom[7]="make install"
corecom[8]="mv -v /usr/share/man/man1/chroot.1 /usr/share/man/man8/chroot.8"
corecom[9]='sed -i s/\"1\"/\"8\"/1 /usr/share/man/man8/chroot.8'
rtrncommands=(${corecom[@]})
} # end coreutilsComms
#
dbusComms () {
local dbuscom=""
dbuscom[0]="./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var \\"
dbuscom[1]="            --libexecdir=/usr/lib/dbus-1.0 --with-dbus-user=messagebus \\"
dbuscom[2]="            --with-system-pid-file=/run/dbus/pid \\"
dbuscom[3]="            --with-system-socket=/run/dbus/system_bus_socket \\"
dbuscom[4]="            --with-console-auth-dir=/run/console/ \\"
dbuscom[5]="            --enable-inotify --disable-dnotify \\"
dbuscom[6]="            --disable-verbose-mode --disable-static \\"
dbuscom[7]="            --disable-tests --disable-asserts \\"
dbuscom[8]="            --with-systemdsystemunitdir=/usr/lib/systemd/system \\"
dbuscom[9]="            --enable-systemd"
dbuscom[10]="make"
dbuscom[11]="make install"
rtrncommands=(${dbuscom[@]})
} # end dbusComms
#
espeakComms () {
local espeakcom=""
espeakcom[0]="cd src"
espeakcom[1]="cp portaudio19.h portaudio.h"
espeakcom[2]="make AUDIO=runtime"
espeakcom[3]="make install"
espeakcom[4]="chmod 644 /usr/lib/libespeak.a"
rtrncommands=(${espeakcom[@]})
} # end espeakComms
#
gtkvncComms () {
local gtkvnccom=""
gtkvnccom[0]="./configure --prefix=/usr \\"
gtkvnccom[1]="            --with-gtk=3.0 \\"
gtkvnccom[2]="            --enable-vala"
gtkvnccom[3]="make"
gtkvnccom[4]="make install"
rtrncommands=(${gtkvnccom[@]})
} # end gtkvncComms
hamcrestComms () {
local hamcrestcom=""
hamcrestcom[0]="install -v -dm755 /usr/share/java/hamcrest"
hamcrestcom[1]="for hamtype in core library generator integration; do"
hamcrestcom[2]="  cp \${SrcName}\${hamtype}-\${pkgver}.jar /usr/share/java/hamcrest"
hamcrestcom[3]="ln -sv hamcrest/\${SrcName}\${hamtype}-\${pkgver}.jar \\"
hamcrestcom[4]="       /usr/share/java/\${SrcName}\${hamtype}.jar"
hamcrestcom[5]="done"
rtrncommands=(${hamcrestcom[@]})
} # end hamcrestComms
#
iwComms () {
local iwcom=""
iwcom[0]="make"
iwcom[1]="make SBINDIR=/usr/bin install"
rtrncommands=(${iwcom[@]})
} # end iwComms
#
libproxyComms () {
local libproxycom=""
libproxycom[0]="mkdir build"
libproxycom[1]="cd build"
libproxycom[2]="cmake -DCMAKE_INSTALL_PREFIX=/usr \\"
libproxycom[3]="      -DLIBEXEC_INSTALL_DIR=/usr/lib/libproxy \\"
libproxycom[4]="      -DCMAKE_SKIP_RPATH=ON \\"
libproxycom[5]="      -DWITH_WEBKIT=OFF \\"
libproxycom[6]="      .."
libproxycom[7]="make"
libproxycom[8]="make install"
rtrncommands=(${libproxycom[@]})
} # end libproxyComms
#
libvirtComms () {
local libpvirtcom=""
libvirtcom[0]="./configure --prefix=/usr \\"
libvirtcom[1]="            --libexec=/usr/lib/libvirt \\"
libvirtcom[2]="            --sbindir=/usr/bin \\"
libvirtcom[3]="            --with-storage-lvm \\"
libvirtcom[4]="            --with-udev --disable-static \\"
libvirtcom[5]="            --with-init-script=systemd"
libvirtcom[6]="make"
libvirtcom[7]="make install"
rtrncommands=(${libvirtcom[@]})
} # end libvirtComms
#
mpiComms () {
local mpicom=""
mpicom[0]="./configure --prefix=/usr \\"
mpicom[1]="            --with-udevdir=/usr/lib/udev"
mpicom[2]='LANG="en_US.UTF-8" make'
mpicom[3]="make install"
rtrncommands=(${mpicom[@]})
} # end mpiComms
#
netctlComms () {
local netctlcom=""
netctlcom[0]="make install"
netctlcom[1]="install -D -m644 contrib/bash-completion /usr/share/bash-completion/completions/netctl"
netctlcom[2]="install -D -m644 contrib/zsh-completion /usr/share/zsh/site-functions/_netctl"
rtrncommands=(${netctlcom[@]})
} # end netctlComms
#
nvidiaComms () {
local nvcom=""
nvcom[0]="cd kernel"
nvcom[1]="make SYSSRC=/usr/lib/modules/\${_kernver}/build module"
nvcom[2]="cd uvm"
nvcom[3]="make SYSSRC=/usr/lib/modules/\${_kernver}/build module"
nvcom[4]="install -D -m644 nvidia.ko \\"
nvcom[5]="/usr/lib/modules/\${_extramodules}/nvidia.ko"
nvcom[6]="install -D -m644 uvm/nvidia-uvm.ko \\"
nvcom[7]="/usr/lib/modules/\${_extramodules}/nvidia-uvm.ko"
nvcom[8]="install -d -m755 /usr/lib/modprobe.d"
nvcom[9]='echo "blacklist nouveau" >> /usr/lib/modprobe.d/nvidia.conf'
nvcom[10]='echo $_kernver >> /usr/lib/modules/${_extramodules}/version'
rtrncommands=(${nvcom[@]})
} # end nvidiaComms
#
nvlibglComms () {
local nvlibglcom=""
nvlibglcom[0]="bsdtar -xf nvidia-persistenced-init.tar.bz2"
nvlibglcom[1]="mkdir -p /usr/lib/xorg/modules/extensions"
nvlibglcom[2]="ln -s /usr/lib/nvidia/xorg/modules/extensions/libglx.so.\${pkgver} /usr/lib/xorg/modules/extensions/libglx.so.\${pkgver}"
nvlibglcom[3]="ln -s libglx.so.\${pkgver} /usr/lib/xorg/modules/extensions/libglx.so.1"
nvlibglcom[4]="ln -s libglx.so.\${pkgver} /usr/lib/xorg/modules/extensions/libglx.so"
nvlibglcom[5]="ln -s /usr/lib/nvidia/libGL.so.\${pkgver} /usr/lib/libGL.so.\${pkgver}"
nvlibglcom[6]="ln -s libGL.so.\${pkgver} /usr/lib/libGL.so.1"
nvlibglcom[7]="ln -s libGL.so.\${pkgver} /usr/lib/libGL.so"
nvlibglcom[8]="ln -s /usr/lib/nvidia/libEGL.so.\${pkgver} /usr/lib/libEGL.so.\${pkgver}"
nvlibglcom[9]="ln -s libEGL.so.\${pkgver} /usr/lib/libEGL.so.1"
nvlibglcom[10]="ln -s libEGL.so.\${pkgver} /usr/lib/libEGL.so"
nvlibglcom[11]="ln -s /usr/lib/nvidia/libGLESv1_CM.so.\${pkgver} /usr/lib/libGLESv1_CM.so.\${pkgver}"
nvlibglcom[12]="ln -s libGLESv1_CM.so.\${pkgver} /usr/lib/libGLESv1_CM.so.1"
nvlibglcom[13]="ln -s libGLESv1_CM.so.\${pkgver} /usr/lib/libGLESv1_CM.so"
nvlibglcom[14]="ln -s /usr/lib/nvidia/libGLESv2.so.\${pkgver} /usr/lib/libGLESv2.so.\${pkgver}"
nvlibglcom[15]="ln -s libGLESv2.so.\${pkgver} /usr/lib/libGLESv2.so.2"
nvlibglcom[16]="ln -s libGLESv2.so.\${pkgver} /usr/lib/libGLESv2.so"
rtrncommands=(${nvlibglcom[@]})
} # end nvlibgl
#
nvutilsComms () {
local nvutilscom=""
nvutilscom[0]="bsdtar -xf nvidia-persistenced-init.tar.bz2"
nvutilscom[1]="install -D -m755 nvidia_drv.so /usr/lib/xorg/modules/drivers/nvidia_drv.so"
nvutilscom[2]="install -D -m755 libglx.so.\$pkgver /usr/lib/nvidia/xorg/modules/extensions/libglx.so.\${pkgver}"
nvutilscom[3]="ln -s libglx.so.\${pkgver} /usr/lib/nvidia/xorg/modules/extensions/libglx.so"
nvutilscom[4]="install -D -m755 libGL.so.\${pkgver} /usr/lib/nvidia/libGL.so.\${pkgver}"
nvutilscom[5]="install -D -m755 libEGL.so.\${pkgver} /usr/lib/nvidia/libEGL.so.\${pkgver}"
nvutilscom[6]="install -D -m755 libGLESv1_CM.so.\${pkgver} /usr/lib/nvidia/libGLESv1_CM.so.\${pkgver}"
nvutilscom[7]="install -D -m755 libGLESv2.so.\${pkgver} /usr/lib/nvidia/libGLESv2.so.\${pkgver}"
nvutilscom[8]="install -D -m755 libnvidia-glcore.so.\${pkgver} /usr/lib/libnvidia-glcore.so.\${pkgver}"
nvutilscom[9]="install -D -m755 libnvidia-eglcore.so.\${pkgver} /usr/lib/libnvidia-eglcore.so.\${pkgver}"
nvutilscom[10]="install -D -m755 libnvidia-glsi.so.\${pkgver} /usr/lib/libnvidia-glsi.so.\${pkgver}"
nvutilscom[11]="install -D -m755 libnvidia-ifr.so.\${pkgver} /usr/lib/libnvidia-ifr.so.\${pkgver}"
nvutilscom[12]="install -D -m755 libnvidia-fbc.so.\${pkgver} /usr/lib/libnvidia-fbc.so.\${pkgver}"
nvutilscom[13]="install -D -m755 libnvidia-encode.so.\${pkgver} /usr/lib/libnvidia-encode.so.\${pkgver}"
nvutilscom[14]="install -D -m755 libnvidia-cfg.so.\${pkgver} /usr/lib/libnvidia-cfg.so.\${pkgver}"
nvutilscom[15]="install -D -m755 libnvidia-ml.so.\${pkgver} /usr/lib/libnvidia-ml.so.\${pkgver}"
nvutilscom[16]="install -D -m755 libvdpau_nvidia.so.\${pkgver} /usr/lib/vdpau/libvdpau_nvidia.so.\${pkgver}"
nvutilscom[17]="install -D -m755 tls/libnvidia-tls.so.\${pkgver} /usr/lib/libnvidia-tls.so.\${pkgver}"
nvutilscom[18]="install -D -m755 libcuda.so.\${pkgver} /usr/lib/libcuda.so.\${pkgver}"
nvutilscom[19]="install -D -m755 libnvcuvid.so.\${pkgver} /usr/lib/libnvcuvid.so.\${pkgver}"
nvutilscom[20]="install -D -m755 nvidia-debugdump /usr/bin/nvidia-debugdump"
nvutilscom[21]="install -D -m755 nvidia-xconfig /usr/bin/nvidia-xconfig"
nvutilscom[22]="install -D -m644 nvidia-xconfig.1.gz /usr/share/man/man1/nvidia-xconfig.1.gz"
nvutilscom[23]="install -D -m755 nvidia-settings /usr/bin/nvidia-settings"
nvutilscom[24]="install -D -m644 nvidia-settings.1.gz /usr/share/man/man1/nvidia-settings.1.gz"
nvutilscom[25]="install -D -m644 nvidia-settings.desktop /usr/share/applications/nvidia-settings.desktop"
nvutilscom[26]="install -D -m644 nvidia-settings.png /usr/share/pixmaps/nvidia-settings.png"
nvutilscom[27]="sed -e 's:__UTILS_PATH__:/usr/bin:' -e 's:__PIXMAP_PATH__:/usr/share/pixmaps:' -i /usr/share/applications/nvidia-settings.desktop"
nvutilscom[28]="install -D -m755 nvidia-bug-report.sh /usr/bin/nvidia-bug-report.sh"
nvutilscom[29]="install -D -m755 nvidia-smi /usr/bin/nvidia-smi"
nvutilscom[30]="install -D -m644 nvidia-smi.1.gz /usr/share/man/man1/nvidia-smi.1.gz"
nvutilscom[31]="install -D -m755 nvidia-cuda-mps-server /usr/bin/nvidia-cuda-mps-server"
nvutilscom[32]="install -D -m755 nvidia-cuda-mps-control /usr/bin/nvidia-cuda-mps-control"
nvutilscom[33]="install -D -m644 nvidia-cuda-mps-control.1.gz /usr/share/man/man1/nvidia-cuda-mps-control.1.gz"
nvutilscom[34]="install -D -m755 nvidia-modprobe /usr/bin/nvidia-modprobe"
nvutilscom[35]="install -D -m644 nvidia-modprobe.1.gz /usr/share/man/man1/nvidia-modprobe.1.gz"
nvutilscom[36]="install -D -m755 nvidia-persistenced /usr/bin/nvidia-persistenced"
nvutilscom[37]="install -D -m644 nvidia-persistenced.1.gz /usr/share/man/man1/nvidia-persistenced.1.gz"
nvutilscom[38]="install -D -m644 nvidia-persistenced-init/systemd/nvidia-persistenced.service.template /usr/lib/systemd/system/nvidia-persistenced.service"
nvutilscom[39]="sed -i 's/__USER__/nvidia-persistenced/' /usr/lib/systemd/system/nvidia-persistenced.service"
nvutilscom[40]="install -D -m644 nvidia-application-profiles-\${pkgver}-rc /usr/share/nvidia/nvidia-application-profiles-\${pkgver}-rc"
nvutilscom[41]="install -D -m644 nvidia-application-profiles-\${pkgver}-key-documentation /usr/share/nvidia/nvidia-application-profiles-\${pkgver}-key-documentation"
rtrncommands=(${nvutilscom[@]})
} #end nvutilsComms
#
openjdkComms () {
local openjdkcom=""
openjdkcom[0]="for subrepo in corba hotspot jdk jaxws jaxp langtools nashorn; do"
openjdkcom[1]="  ln -s ../\${subrepo}-\${_repo_ver} \${subrepo}"
openjdkcom[2]="done"
openjdkcom[3]="cd hotspot"
openjdkcom[4]="patch -p1 < ../jdk8u_adjust-mflags-for-gmake-4.patch"
openjdkcom[5]="cd ../jdk"
openjdkcom[6]="patch -p0 < ../jdk8u_nonreparenting-wm.patch"
openjdkcom[7]="cd .."
openjdkcom[8]="unset JAVA_HOME"
openjdkcom[9]="sh configure \\"
openjdkcom[10]="   --prefix=/opt \\"
openjdkcom[11]="   --with-update-version=\${_jdk_update} \\"
openjdkcom[12]="   --with-build-number=b\${_jdk_build} \\"
openjdkcom[13]='   --with-milestone="fcs" \'
openjdkcom[14]="   --enable-unlimited-crypto \\"
openjdkcom[15]="   --with-zlib=system"
openjdkcom[16]="make DEBUG_BINARIES=true"
openjdkcom[17]="make install"
openjdkcom[18]="cd build/linux-x86_64-normal-server-release/images"
openjdkcom[19]="cp -R j2sdk-image /opt/jdk8-openjdk"
openjdkcom[20]="rm -rf /opt/jdk"
openjdkcom[21]="ln -v -nsf jdk8-openjdk /opt/jdk"
rtrncommands=(${openjdkcom[@]})
} # openjdkComms
#
pyComms () {
local pycom=""
if [ "$pkgname" = "py2-xdg" ]; then
pycom[0]="python2 setup.py install --optimize=1"
elif [ "$pkgname" = "py3-xdg" ]; then
pycom[0]="python3 setup.py install --optimize=1"
elif [ "$pkgname" = docutils ]; then
pycom[0]="python2 setup.py build --build-lib=build/python2"
pycom[1]="find build/python2 -type f -exec \\"
pycom[2]="  sed -i '1s,^#! \?/usr/bin/\(env \|\)python$,#!/usr/bin/python2,' {} \;"
pycom[3]="python2 setup.py install --optimize=1"
fi
rtrncommands=(${pycom[@]})
} #end pyComms
#
py2atspiComms () {
py2atspicom=""
py2atspicom[0]="sed '/AC_PATH_XTRA/d' -i configure.ac"
py2atspicom[1]="autoreconf -fi"
py2atspicom[2]="mkdir ../python2"
py2atspicom[3]="cd ../python2"
py2atspicom[4]="../\${srcdir}/configure --prefix=/usr --with-python=/usr/bin/python2"
py2atspicom[5]="make"
py2atspicom[6]="make install"
rtrncommands=(${py2atspicom[@]})
} # end py2atspiComms
#
py2dbusComms () {
local py2dbuscom=""
py2dbuscom[0]="PYTHON=python2 ./configure --prefix=/usr \\"
py2dbuscom[1]="                            --docdir=/usr/share/doc/dbus-python-1.2.0"
py2dbuscom[2]="make"
py2dbuscom[3]="make install"
rtrncommands=(${py2dbuscom[@]})
} # end py2dbusComms
#
py3dbusComms () {
local py3dbuscom=""
py3dbuscom[0]="PYTHON=python3 ./configure --prefix=/usr \\"
py3dbuscom[1]="                            --docdir=/usr/share/doc/dbus-python-1.2.0"
py3dbuscom[2]="make"
py3dbuscom[3]="make install"
rtrncommands=(${py3dbuscom[@]})
} # end py3dbusComms
#
py2setuptoolsComms () {
local py2setuptoolscom=""
py2setuptoolscom[0]="sed -i -e 's|^#\!.*/usr/bin/python|#!/usr/bin/python2|' setuptools/tests/test_resources.py"
py2setuptoolscom[1]="sed -i -e 's|^#\!.*/usr/bin/env python|#!/usr/bin/env python2|' setuptools/command/easy_install.py"
py2setuptoolscom[2]="python2 setup.py build"
py2setuptoolscom[3]="python2 setup.py install --prefix=/usr --optimize=1 --skip-build"
py2setuptoolscom[4]="rm /usr/bin/easy_install"
rtrncommands=(${py2setuptoolscom[@]})
} # end py2setuptoolsComms
#
py3setuptoolsComms () {
local py3setuptoolscom=""
py3setuptoolscom[0]="sed -i -e 's|^#\!.*/usr/bin/python|#!/usr/bin/python3|' setuptools/tests/test_resources.py"
py3setuptoolscom[1]="sed -i -e 's|^#\!.*/usr/bin/env python|#!/usr/bin/env python3|' setuptools/command/easy_install.py"
py3setuptoolscom[2]="python3 setup.py build"
py3setuptoolscom[3]="python3 setup.py install --prefix=/usr --optimize=1 --skip-build"
rtrncommands=(${py3setuptoolscom[@]})
} # end py3setuptoolsComms
#
pysolfcComms () {
local pysolfccom=""
pysolfccom[0]="find . -name \\*.py -exec sed -i -e 's|#!/usr/bin/env python|#!/usr/bin/env python2|' {} \\;"
pysolfccom[1]="python2 setup.py install"
pysolfccom[2]="ln -sv pysol.py /usr/bin/pysol"
rtrncommands=(${pysolfccom[@]})
} # end pysolssComms
#
pysolssComms () {
local pysolsscom=""
pysolsscom[0]="cd src"
pysolsscom[1]="./configure"
pysolsscom[2]="make PYTHON=python2"
pysolsscom[3]="python2 setup.py install"
rtrncommands=(${pysolsscom[@]})
} # end pysolssComms
#
sdl2Comms () {
local sdl2com=""
sdl2com[0]="./configure --prefix=/usr \\"
sdl2com[1]="            --enable-sdl-dlopen \\"
sdl2com[2]="            --disable-arts --disable-esd --disable-nas \\"
sdl2com[3]="            --enable-alsa --enable-pulseaudio-shared \\"
sdl2com[4]="            --enable-video-wayland \\"
sdl2com[5]="            --disable-rpath"
sdl2com[6]="make"
sdl2com[7]="make install"
rtrncommands=(${sdl2com[@]})
} # end sdl2Comms
#
squidComms () {
local squidcom=""
squidcom[0]="patch -p0 <../squid-r13407.patch"
squidcom[1]="./configure \\"
squidcom[2]="    --prefix=/usr \\"
squidcom[3]="    --sbindir=/usr/bin \\"
squidcom[4]="    --datadir=/usr/share/squid \\"
squidcom[5]="    --sysconfdir=/etc/squid \\"
squidcom[6]="    --libexecdir=/usr/lib/squid \\"
squidcom[7]="    --localstatedir=/var \\"
squidcom[8]="    --with-logdir=/var/log/squid \\"
squidcom[9]="    --with-pidfile=/run/squid.pid \\"
squidcom[10]="    --enable-auth \\"
squidcom[11]="    --enable-auth-basic \\"
squidcom[12]="    --enable-auth-ntlm \\"
squidcom[13]="    --enable-auth-digest \\"
squidcom[14]="    --enable-auth-negotiate \\"
squidcom[15]='    --enable-removal-policies="lru,heap" \'
squidcom[16]='    --enable-storeio="aufs,ufs,diskd" \'
squidcom[17]="    --enable-delay-pools \\"
squidcom[18]="    --enable-arp-acl \\"
squidcom[19]="    --enable-ssl \\"
squidcom[20]="    --enable-snmp \\"
squidcom[21]="    --enable-linux-netfilter \\"
squidcom[22]="    --enable-ident-lookups \\"
squidcom[23]="    --enable-useragent-log \\"
squidcom[24]="    --enable-cache-digests \\"
squidcom[25]="    --enable-referer-log \\"
squidcom[26]="    --enable-htcp \\"
squidcom[27]="    --enable-carp \\"
squidcom[28]="    --enable-epoll \\"
squidcom[29]="    --with-large-files \\"
squidcom[30]="    --with-default-user=proxy \\"
squidcom[31]="    --enable-async-io \\"
squidcom[32]="    --enable-truncate \\"
squidcom[33]="    --enable-icap-client \\"
squidcom[34]="    --enable-ssl-crtd \\"
squidcom[35]="    --disable-arch-native \\"
squidcom[36]="    --disable-strict-error-checking"
squidcom[37]="make"
squidcom[38]="make install"
squidcom[39]="cp ${blfsBuildFiles}/${blfsfiles}/conf-files/squid.conf /etc/squid"
squidcom[40]='cat > /etc/pam.d/squid << "SQUIDEOF"'
squidcom[41]="auth              required        pam_unix.so"
squidcom[42]="account           required        pam_unix.so"
squidcom[43]="SQUIDEOF"
rtrncommands=(${squidcom[@]})
} # end squidComms
#
systemdComms () {
local systemdcom=""
systemdcom[0]="sed -e '/install-touch-usr-hook:/d' \\"
systemdcom[1]="    -e '/touch -c/d' \\"
systemdcom[2]="    -i Makefile.in"
systemdcom[3]="./configure --prefix=/usr \\"
systemdcom[4]="            --libexecdir=/usr/lib \\"
systemdcom[5]="            --localstatedir=/var \\"
systemdcom[6]="            --sysconfdir=/etc \\"
systemdcom[7]="            --enable-introspection \\"
systemdcom[8]="            --enable-gtk-doc \\"
systemdcom[9]="            --with-rootprefix= \\"
systemdcom[10]="            --with-dbuspolicydir=/etc/dbus-1/system.d \\"
systemdcom[11]="            --with-rootlibdir=/usr/lib \\"
systemdcom[12]='            --with-firmware-path="/usr/lib/firmware/updates:/usr/lib/firmware" \'
systemdcom[13]="            --docdir=/usr/share/doc/systemd-${SYSTEMD_VERSION} \\"
systemdcom[14]="            --disable-static"
systemdcom[15]="make"
systemdcom[16]="make install"
systemdcom[17]='sed -i "s@0775 root lock@0755 root root@g" /usr/lib/tmpfiles.d/legacy.conf'
systemdcom[18]="rm -r /usr/lib/rpm"
rtrncommands=(${systemdcom[@]})
} # end systemdComms
#
v4lComms () {
local v4lcom=""
v4lcom[0]="source /etc/profile.d/qt4.sh"
v4lcom[1]="./configure --prefix=/usr --sysconfdir=/etc --sbindir=/usr/bin"
v4lcom[2]="make"
v4lcom[3]="MAKEFLAGS="-j1" make install"
v4lcom[4]="rm /usr/bin/ivtv-ctl"
rtrncommands=(${v4lcom[@]})
} # v4lComms
#
webkitgtkComms () {
local webkitgtkcom=""
webkitgtkcom[0]="mkdir build3"
webkitgtkcom[1]="cd build3"
webkitgtkcom[2]="../configure --prefix=/usr --enable-introspection \\"
webkitgtkcom[3]="             --libexecdir=/usr/lib/webkitgtk \\"
webkitgtkcom[4]="             --disable-gtk-doc"
webkitgtkcom[5]="make"
webkitgtkcom[6]="make install"
webkitgtkcom[7]="rm -rf /usr/share/gtk-doc/html/webkit{,dom}gtk-3.0"
webkitgtkcom[8]="if [ -e /usr/share/gtk-doc/html/webkitdomgtk ]; then"
webkitgtkcom[9]="  mv -v /usr/share/gtk-doc/html/webkitdomgtk{,-3.0}"
webkitgtkcom[10]="fi"
webkitgtkcom[11]="if [ -e /usr/share/gtk-doc/html/webkitgtk ]; then"
webkitgtkcom[12]="  mv -v /usr/share/gtk-doc/html/webkitgtk{,-3.0}"
webkitgtkcom[13]="fi"
rtrncommands=(${webkitgtkcom[@]})
} # end webkitgtkComms
#
x264Comms () {
local x264com=""
x264com[0]="./configure --enable-shared --enable-pic"
x264com[1]="make"
x264com[2]="make bindir=/usr/bin \\"
x264com[3]="     libdir=/usr/lib \\"
x264com[4]="     includedir=/usr/include \\"
x264com[5]="     install"
rtrncommands=(${x264com[@]})
} # end x264Comms
#
x265Comms () {
local x265com=""
x265com[0]='cd multicoreware-x265-*/build/linux'
x265com[1]='[ "$(uname -m)" = x86_64 ] && LDFLAGS+=",-z,noexecstack"'
x265com[2]='cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=/usr ../..'
x265com[3]="make"
x265com[4]="make install"
rtrncommands=(${x265com[@]})
} # end x265Comms
#
yajlComms () {
local yajlcom=""
yajlcom[0]="cmake -DCMAKE_INSTALL_PREFIX=/usr ."
yajlcom[1]="make"
yajlcom[2]="make install"
rtrncommands=(${yajlcom[@]})
} # end yajlComms
#
GetInternalCommands () {
# $1 is the function name that creates the commands
# get access to the build array
rtrnBuild=""
getBuild
return_val=$?
if [ $return_val -eq $RETURN_PARAM ]; then # no build file present
  return $RETURN_PARAM
else
  buildScripts=(${rtrnBuild[@]})
  declare -a rtrncommands=""
  eval $1
  commandScripts=(${rtrncommands[@]})
  numclines=${#commandScripts[@]}
  countg=0 # initialize commands counter
  cont=0
  for line in "${commandScripts[@]}"
  do
    case "$line" in
       sed*)
# test if sed has continuation line
         case "$line" in
           *\\)
             cacheit[cont++]="$line"
             ((countg++))
           ;;
           *)
             echo "$line"
             ((countg++))
           ;;
         esac
       ;;
       *configure*|*autogen.sh*)
         break
       ;;
       cmake*) # configure commands for libproxy, mariadb
         break
       ;;
       *bootstrap*) # boost
         break
       ;;
       make*) # no configure script
         break
       ;;
       *"setup.py build"*|*"setup.py install"*) # python modules
         break
       ;;
       *"build/linux"*) # chromium
         break
       ;;
       *)
         case "$line" in
            *\\) # if a continuation line then store in cache
             cacheit[cont++]="$line"
             ((countg++))
            ;;
            *)
             if [ $cont -gt 0 ]; then # continuation line found
               for (( l=0; l<$cont; l++ )); do
                 echo "${cacheit[l]}"
               done
               echo "$line"
               cont=0
               ((countg++)) # count # of commands written to output
               [ $countg -eq $numclines ] && return 0
             else
               echo "$line"
               ((countg++)) # count # of commands written to output
               [ $countg -eq $numclines ] && return 0
             fi
            ;;
          esac
       ;;
    esac
  done
#
  rtr=""
  combineScripts commandScripts[@] buildScripts[@]
  scriptOut=(${rtr[@]})
  for t in "${scriptOut[@]}"; do
    echo $t
  done
  if [ $countg -ne $numclines ]; then # output remaining commands
    contin=false
    for (( k=$countg; k<$numclines; k++ )); do
      if [[ "${commandScripts[k]}" == install* ]]; then #don't install docs
        case ${commandScripts[k]} in
            *\\) # continuation line
                contin=true
            ;;
            */usr/share/doc*) # doc so don't write
                continue
            ;;
            *) # not a doc so write it
                echo ${commandScripts[k]}
            ;;
        esac
      else
        if $contin; then
          if [[ "${commandScripts[k]}" == *\\ ]]; then # more continuation
            :
          else
            contin=false
          fi
        else
          echo ${commandScripts[k]}
        fi
      fi
    done
  fi
  return 0
fi
} # end GetInternalCommands
#
CreateBuildDirasroot () {  #1 is the build dir
cat << "EOF"
CreateBuildDirasroot () {
BuildDirasroot=$1
if [ ! -e $BuildDirasroot ]; then install -d $BuildDirasroot; fi
cd $BuildDirasroot
CUR_DIR=".."
}
EOF
} # end CreateBuildDirasroot
#
Header () {
echo "writing the script to '$Output'"
cat > $Output << "EOF"
#!/bin/bash
#
if [ $UID -ne 0 ]; then echo Please run this script as root. ; exit 1; fi
#
EOF
if [[ "$Section" == blfs ]]; then
  echo 'bsToInstall=$1' >> $Output
else
echo "RETURN_PARAM=$RETURN_PARAM # exit with an error
RETURN_NOTSET=$RETURN_NOTSET # no dependencies set
RETURN_DEPNOTMET=$RETURN_DEPNOTMET # package dependency not met
RETURN_ALLDEPSMET=$RETURN_ALLDEPSMET # all dependencies met" >> $Output
fi
echo "me=\$0
LFS=$LFS" >> $Output
if [ "$BOOK_VERSION" = KBLFS ]; then
  gitinfo=$(echo $GITINFO | awk 'BEGIN{ RS = "|" }; {print $0}')
  echo "GITINFO=\"$gitinfo\"" >> $Output
else
  echo "SVNINFO=\"$SVNINFO\"" >> $Output
fi
echo "srcrootdir=$srcrootdir
blfsfiles=${blfsBuildFiles}/${blfsfiles}
BuildLog=$BuildLog
build=$build # name of the build file for each package
Section=$cursection
PKGUSERDIR=$PKGUSERDIR
SYSTEMD=$SYSTEMD
AS_ROOT=$as_root
INSTALLPKG=true # by default install the packages
if [ \"\$1\" = noinstall ]; then INSTALLPKG=false; fi # do not install, look at deps. only" >> $Output
if $as_root; then CreateBuildDirasroot >> $Output; fi
} # end Header
#
pkguser () {
cat >> $Output << "EOF"
pkguser_ () {
# make sure pkgusers can write to the logfile
chgrp install $BuildLog
chmod 664 $BuildLog
#
cat > /etc/pkgusr/bash_profile << "BashProfile"
export PATH=/usr/lib/pkgusr:/bin:/usr/bin:/opt/jdk/bin:/opt/ant/bin:/opt/qt4/bin
export PROMPT_COMMAND='PS1="package \u:"$(pwd)"> "'
cd
EOF
echo "PkgUserDir=${PKGUSERDIR}/${cursection}" >> $Output
cat >> $Output << "EOF"
complete -o default -o nospace -A user su finger pinky
export PkgName=$LOGNAME
EOF
echo "if [ -e \${PkgUserDir}/\${LOGNAME}/$build -a ! -e ~/.\${LOGNAME} ]; then
  cd
  bash \${PkgUserDir}/\${LOGNAME}/$build" >> $Output
cat >> $Output << "EOF"
  exit
fi
BashProfile
install -v -m0755 -d ${PkgUserDir}/${LOGNAME}
}
EOF
} # end of pkguser
#
updatePkgUser () {
# this function is called immediately before a core package that is to be reinstalled.
# these are shadow, coreutils, systemd with gudev and dbus-launch
cat >> $Output << "EOF"
updatePkgUser_ () {
cat > /etc/pkgusr/bash_profile << "BashProfile"
export PATH=/usr/lib/pkgusr:/bin:/usr/bin
export PROMPT_COMMAND='PS1="package \u:"$(pwd)"> "'
cd
EOF
echo "PkgUserDir=${PKGUSERDIR}/${cursection}" >> $Output
cat >> $Output << "EOF"
complete -o default -o nospace -A user su finger pinky
export PkgName=$LOGNAME
buildit=false
case $PkgName in
  systemd)
EOF
echo "      if [ -e \${PkgUserDir}/\${LOGNAME}/$build -a ! -e ~/.\${LOGNAME}_gudev ]; then" >> $Output
cat >> $Output << "EOF"
        buildit=true
      fi
  ;;
  dbus)
EOF
echo "      if [ -e \${PkgUserDir}/\${LOGNAME}/$build -a ! -e ~/.\${LOGNAME}_launch ]; then" >> $Output
cat >> $Output << "EOF"
        buildit=true
      fi
  ;;
  *)
EOF
echo "      if [ -e \${PkgUserDir}/\${LOGNAME}/$build -a ! -e ~/.\${LOGNAME} ]; then" >> $Output
cat >> $Output << "EOF"
        buildit=true
      fi
  ;;
esac
if $buildit; then
  cd
EOF
echo "  bash \${PkgUserDir}/\${LOGNAME}/$build"  >> $Output
cat >> $Output << "EOF"
  exit
fi
BashProfile
install -v -m0755 -d ${PkgUserDir}/${LOGNAME}
}
EOF
} # end updatePkgUser
#
delSrcFile () {
echo "cd \$curdir
cd ..
rm -rf \$curdir
rm -rf .cache"
} # end of delSrcFile
#
chromium_setup () {
    cat << "EOF"
chromium_setup () {
# setup the configure variable _chromium_conf
#
if [ -f /blfsBuildFiles/blfsfiles/conf-files/_chromium_conf ]; then
  . /blfsBuildFiles/blfsfiles/conf-files/_chromium_conf
else
  echo "_chromium_conf not found in /blfsBuildFiles/blfsfiles/conf-files/"
  echo "Place it there to continue"
  exit 1
fi
} # end chromium_setup
EOF
} # end chromium_setup
#
php_setup () {
    cat << "EOF"
php_setup () {
# setup the configure variables _phpconfig and _phpextensions for php
#
if [ -f /blfsBuildFiles/blfsfiles/conf-files/php.conf ]; then
  . /blfsBuildFiles/blfsfiles/conf-files/php.conf
else
  echo "php.conf not found in /blfsBuildFiles/blfsfiles/conf-files/"
  echo "Place it there to continue"
  exit 1
fi
} # end php_setup
EOF
} # end php_setup
#
Function () {
echo "${FuncName}_ () {
PkgName=$pkgname
SrcName=$srcname
cursection=$cursection
PkgUserDir=${PKGUSERDIR}/${cursection}" >> $Output
if $as_root; then 
  case $pkgname in
    coreutils|systemd|dbus)
      echo "sourcedir=${PKGUSERDIR}/${cursection}/${pkgname}" >> $Output
    ;;
    shadow)
      echo "sourcedir=${srcrootdir}/security" >> $Output
    ;;
    *)
      echo "sourcedir=${srcrootdir}/${cursection}" >> $Output
    ;;
  esac
fi
#
case $pkgname in
   blfs-btscrpts)
      cat >> $Output << "EOF"
bsToInstall=$bsToInstall
EOF
   ;;
esac
#
echo "starttime=\$( date +%s )" >> $Output
# check whether already installed
case $pkgname in
   blfs-btscrpts)
      cat >> $Output << "EOF"
if [ -e "${PkgUserDir}/${PkgName}/.${bsToInstall}" ]; then
  echo "skipping ${PkgName}/${bsToInstall}"
  return
fi
EOF
   ;;
   dbus) # check for name .dbus_launch
      cat >> $Output << "EOF"
if [ -e "${PkgUserDir}/${PkgName}/.${PkgName}_launch" ]; then
  echo "skipping ${PkgName}"
  return
fi
EOF
   ;;
   systemd) # check for name .systemd_gudev
      cat >> $Output << "EOF"
if [ -e "${PkgUserDir}/${PkgName}/.${PkgName}_gudev" ]; then
  echo "skipping ${PkgName}"
  return
fi
EOF
   ;;
   *)
      cat >> $Output << "EOF"
if [ -e "${PkgUserDir}/${PkgName}/.${PkgName}" ]; then
  echo "skipping $PkgName"
  return
fi
EOF
   ;;
esac
# check for dependencies
case $pkgname in
   firewall) # no need to check dependencies
   echo "BuildScript=true" >> $Output
   ;;
   *)
cat >> $Output << "EOF"
# check for dependencies
BuildScript=false
FuncName=$( echo $PkgName | sed -e s/-//g -e s/_//g )
DepRtrn=""
PkgDepend
return_val=$?
if [[ $return_val -eq $RETURN_PARAM || $return_val -eq $RETURN_NOTSET ]]; then
  if $INSTALLPKG; then echo "No dependencies - building script for $PkgName"; fi
  BuildScript=true
elif [[ $return_val -eq 0 ]]; then # test if dependencies met
EOF
# next case for xfce
    case $pkgname in
      glib-networking|grilo-plugins|gst-plgns-good0|gvfs|ibus|libcanberra|libsoup|webkitgtk)
          if [ "$GNOME_OR_XFCE" = xfce ]; then
            cat >> $Output << "EOF"
  rtrPlessArray=""
EOF
            case $pkgname in
              glib-networking)
                cat >> $Output << "EOF"
  delElementPattern DepRtrn[@] "gnomeplatform/gset-dsktp-schms"
EOF
              ;;
              grilo-plugins)
                cat >> $Output << "EOF"
  delElementPattern DepRtrn[@] "gnomeplatform/totem-pl-parser"
EOF
              ;;
              gvfs|libsoup)
                cat >> $Output << "EOF"
  delElementPattern DepRtrn[@] "gnomeplatform/libgnome-keyring"
EOF
              ;;
              ibus)
                cat >> $Output << "EOF"
  delElementPattern DepRtrn[@] "gnomeplatform/dconf"
EOF
              ;;
              webkitgtk)
                cat >> $Output << "EOF"
  delElementPattern DepRtrn[@] "networks/geoclue"
  subElementPattern DepRtrn[@] "gnomeplatform/libsecret" "xfce/libsecret"
EOF
              ;;
              gst-plgns-good0)
                cat >> $Output << "EOF"
  delElementPattern DepRtrn[@] "gnomeplatform/gconf"
EOF
              ;;
            esac
            cat >> $Output << "EOF"
  unset DepRtrn
  DepRtrn=(${rtrPlessArray[@]})
EOF
          fi
      ;;
    esac
# end case xfce
cat >> $Output << "EOF"
  rtrnDepNotMet=""
  testDeps DepRtrn[@]
  ret_val=$?
  if [ $ret_val -eq $RETURN_ALLDEPSMET ]; then
    if $INSTALLPKG; then echo "All dependencies met - building script for $PkgName"; fi
    BuildScript=true
  fi
fi
EOF
   ;;
esac
# end case testing dependencies
echo "if \$BuildScript; then
if \$INSTALLPKG; then" >> $Output

if ! $as_root; then
  echo 'install -v -d ${PkgUserDir}/${PkgName}' >> $Output
  echo "touch \${PkgUserDir}/\${PkgName}/$build" >> $Output
  cat >> $Output << "EOF"
echo "#!/bin/bash
EOF
  echo 'BuildLog=$BuildLog" > ${PkgUserDir}/${PkgName}/'$build >> $Output
  if [[ "$pkgname" == "blfs-btscrpts" ]]; then
    echo "echo \"bsToInstall=\$bsToInstall\" >> \${PkgUserDir}/\${PkgName}/$build" >> $Output
  fi
  echo "cat >> \${PkgUserDir}/\${PkgName}/$build << \"IPS\"" >>$Output
  cat >> $Output << "EOF"
set +h
PkgName=$LOGNAME
CUR_DIR=$HOME
EOF
  if [[ "$Section" == x || "$pkgname" == libdrm || "$pkgname" == freeglut || "$pkgname" == glu ]]; then
    echo "source /etc/profile.d/xorg.sh" >> $Output
  fi
  echo "SrcName=$srcname" >> $Output
# define sourcedir in the build file
  case $pkgname in
    avr-binutils)
      echo "sourcedir=${PKGUSERDIR}/core/binutils
blfsfiles=${blfsBuildFiles}/${blfsfiles}" >> $Output
    ;;
    avr-gcc)
      echo "sourcedir=${PKGUSERDIR}/core/gcc" >> $Output
    ;;
    chromium)
      echo "sourcedir=${srcrootdir}/${Section}
export PATH=\$PATH:/usr/src/browser/chromium/depot_tools # add location of depot_tools" >> $Output
    ;;
    cups|gnm-scrnsaver|gnome-shell|openjdk|squid|systemd|$xlib|xml-sax) # need to define blfsfiles to apply patches, add files
      echo "sourcedir=${srcrootdir}/${Section}
blfsfiles=${blfsBuildFiles}/${blfsfiles}" >> $Output
    ;;
    dbus|systemd)
       : # source is already in $PKGUSERDIR
    ;;
    firewall) # no source file
      cat >> $Output << "EOF"
starttime=$( date +%s )
EOF
    ;;
    nvidia-libgl|nvidia) # src should already be in nvidia-utils
       echo "sourcedir=${PkgUserDir}/nvidia-utils" >> $Output
    ;;
    python3) # include the version
       echo "sourcedir=${srcrootdir}/${Section}
Python3vers=$Python3vers" >> $Output
    ;;
    *)
      echo "sourcedir=${srcrootdir}/${Section}" >> $Output
    ;;
  esac
# end defining sourcedir
else # building as root
  echo "starttime=\$( date +%s )" >> $Output
  cat >> $Output << "EOF"
CreateBuildDirasroot ${PkgUserDir}/${PkgName}
EOF
  if [[ "$Section" == x || "$pkgname" == libdrm || "$pkgname" == freeglut || "$pkgname" == glu ]]; then
    echo "source /etc/profile.d/xorg.sh" >> $Output
  elif [[ "$pkgname" == python3 ]]; then
    echo "Python3vers=$Python3vers" >> $Output
  fi
fi # end as_root
# case to unpack sources
case $pkgname in
  cacerts)
     cat >> $Output << "EOF"
starttime=$( date +%s )
EOF
  ;;
  firewall) # don't need to unpack sources
     :
  ;;
  *)
unpack >> $Output
# include the setproxy function to set up the proxy values in the build script
if $needsproxy; then
  setproxy >> $Output
  echo "setproxy" >> $Output
  needsproxy=false
fi
cat >> $Output << "EOF"
unpack
retval=$?
if [ $retval -eq 1 ]; then # unpack failed so abort
  echo "Failed to unpack source for package $PkgName. Exiting now."
  exit 1
fi
EOF
  case $pkgname in # need to set up some env variables
    chromium)
      echo "curdir=\$( echo \$PWD )" >> $Output
      chromium_setup >> $Output
      cat >> $Output << "EOF"
chromium_setup
EOF
    ;;
    nvidia) # add the kernel version details
      echo "curdir=\$( echo \$PWD )
_extramodules=$_extramodules
_kernver=${rtrkernum}" >> $Output
    ;;
    nvidia-utils) # need to add the create_links function for sonames
      create_links >> $Output
      echo "curdir=\$( echo \$PWD )" >> $Output
    ;;
    php)
      echo "curdir=\$( echo \$PWD )" >> $Output
      php_setup >> $Output
      cat >> $Output << "EOF"
php_setup
EOF
    ;;
    $xproto|$xlib|$xapp|$xfont)
      cursec=${pkgname//x7/}
echo "cursec=$cursec" >> $Output
    ;;
    *)
      echo "curdir=\$( echo \$PWD )" >> $Output
      case $pkgname in
         avahi|vlc)
            echo "source /etc/profile.d/qt4.sh" >> $Output
         ;;
         apache-ant|icedtea-web)
            echo "source /etc/profile.d/openjdk.sh" >> $Output
            if $as_root; then
              echo "export PATH=\$PATH:/opt/jdk/bin" >> $Output
            fi
         ;;
         py2-atspi|py3-atspi)
            echo "srcdir=\$( echo \$curdir | awk -F\\/ '{print \$NF}')" >> $Output
         ;;
      esac
    ;;
  esac
  ;;
esac
# end case unpacking sources
WriteScript
closefunction
} # end of Function
#
closefunction () {
case $pkgname in
  aspell)  # install a dictionary (english by default)
    cat >> $Output << "EOF"
cd ..
language="aspell6-en"
dictionary="${language}-7.1-0.tar.bz2"
EOF
    cat >> $Output << "EOF"
wgetopts="-e use_proxy=yes -e http_proxy=$http_proxy -e ftp_proxy=$ftp_proxy"
if [ ! -e $dictionary ]; then
  wget $wgetopts ftp://ftp.gnu.org/gnu/aspell/dict/en/${dictionary}
fi
cd $(tar vxf ${language}*.tar.*z* | awk -F\/ 'END{print $1}')
dictdir=$( echo $PWD )
./configure
make
make install
#end install dict
EOF
  ;;
  gimp) # install the help file
    cat >> $Output << "EOF"
cd ..
if [ -e $helpfile ]; then
  cd $(tar vxf ${SrcName}help*.tar.*z* | awk -F\/ 'END{print $1}')
  helpdir=$( echo $PWD )
  ./configure --prefix=/usr
  sed -i -e 's/ca da de el en en_GB es fr it ja ko nl nn pt_BR ru sl sv zh_CN/en/' Makefile
  sed -i -e 's/ca da de el en en_GB es fr it ja ko nl nn pt_BR ru sl sv zh_CN/en/' quickreference/Makefile
 make
  make install
else
  echo "Help file $helpfile not present"
fi
EOF
  ;;
esac
case $pkgname in
    blfs-btscrpts)
      if $as_root; then
        echo 'touch ${PkgUserDir}/${PkgName}/.${bsToInstall}' >> $Output
      else
        echo 'touch ~/.${bsToInstall}' >> $Output
      fi
    ;;
    $xproto|$xlib|$xapp|$xfont)
      if $as_root; then
        echo 'set +e
touch ${PkgUserDir}/${PkgName}/.${PkgName}' >> $Output
      else
        echo "set +
touch ~/.${pkgname}" >> $Output
      fi
    ;;
    dbus) # need to know when dbus-launch has been installed
      if $as_root; then
        echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}_launch' >> $Output
      else
        echo "touch ~/.${pkgname}_launch" >> $Output
      fi
    ;;
    nvidia-utils) # create the sonames for library files
      cat >> $Output << "EOF"
create_links /usr/lib libcuda
create_links /usr/lib libnvcuvid
create_links /usr/lib libnvidia-cfg
create_links /usr/lib libnvidia-eglcore
create_links /usr/lib libnvidia-encode
create_links /usr/lib libnvidia-fbc
create_links /usr/lib libnvidia-glcore
create_links /usr/lib libnvidia-glsi
create_links /usr/lib libnvidia-ifr
create_links /usr/lib libnvidia-ml
create_links /usr/lib libnvidia-tls
create_links /usr/lib/nvidia libEGL
create_links /usr/lib/nvidia libGLESv1_CM
create_links /usr/lib/nvidia libGLESv2
create_links /usr/lib/nvidia libGL
EOF
      if $as_root; then
        echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}' >> $Output
      else
        echo "touch ~/.${pkgname}" >> $Output
      fi
    ;;
    systemd) # need to know when systemd with gudev has been installed
      if $as_root; then
        echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}_gudev' >> $Output
      else
        echo "touch ~/.${pkgname}_gudev" >> $Output
      fi
    ;;
    *)
      if $as_root; then
        echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}' >> $Output
      else
        echo "touch ~/.${pkgname}" >> $Output
      fi
    ;;
esac
cat >> $Output << "EOF"
endtime=$( date +%s )
EOF
case $pkgname in
  aspell) # delete the dictionary dir as well
     delSrcFile >> $Output
     echo "if [ -e \$dictdir ]; then rm -rf \$dictdir; fi" >> $Output
  ;;
  avr-binutils)
     delSrcFile >> $Output
     echo "rm -rf binutils-build" >> $Output
  ;;
  avr-gcc)
     delSrcFile >> $Output
     echo "rm -rf gcc-build" >> $Output
  ;;
  blfs-btscrpts|cacerts|firewall|java-hamcrest|$xapp|$xfont|$xlib|$xproto|xterm)
     : # don't delete any files
  ;;
  firefox) # delete Desktop and .distlib dirs
     delSrcFile >> $Output
     echo "rm -rf Desktop .distlib" >> $Output
  ;;
  gimp) # delete the help dir as well
     delSrcFile >> $Output
     echo "if [ -e \$helpdir ]; then rm -rf \$helpdir; fi" >> $Output
  ;;
  krb5) # del the .gnupg dir
     delSrcFile >> $Output
     echo "if [ -d .gnupg ]; then rm -rf .gnupg; fi" >> $Output
  ;;
  openjdk) # del all the dirs
     delSrcFile >> $Output
     echo "rm -rf *-\${_repo_ver}.tar.gz" >> $Output
  ;;
  py2-atspi|py3-atspi)
     delSrcFile >> $Output
     echo "rm -rf python*" >> $Output
  ;;
  xorg-server) # del .links dir
     echo "rm -rf .links" >> $Output
  ;;
  *)
     delSrcFile >> $Output
  ;;
esac
cat >> $Output << "EOF"
elapsedtime=$( expr $endtime - $starttime )
echo "${PkgName} $unpacktime $elapsedtime" >> $BuildLog
EOF
if ! $as_root; then
echo "IPS" >> $Output
setuplinks # setup any preprocessing commands - then test doFirst and links
if [[ ! -z $doFirst || ! -z $links ]]; then resolvelinks; fi # not null
if [ "$pkgname" = evolution ]; then # write out the functions to get version #
float_test
evolutionVersion
fi
cat >> $Output << "EOF"
if [ "$(grep -q ^$PkgName\: /etc/passwd;echo $?)" != 0 ]; then
  if [ "$(grep -q ^install3\: /etc/group;echo $?)" = 0 ]; then # install3 exists
    numcharInstall install3
    if [ $numchars -gt 2030 ]; then
      echo "You'll have to make yet another install group - install4"
      echo "Update /usr/sbin/installpkg as before"
      exit 1
    fi
  elif [ "$(grep -q ^install2\: /etc/group;echo $?)" = 0 ]; then
    numcharInstall install2
    if [ $numchars -gt 2030 ]; then
      echo "Install2 has nearly reached the limit of 2048 chars"
      echo "Make another install group - install3, in /etc/group"
      echo "Update /usr/sbin/installpkg to use install3"
      exit 1
    fi
  else
    numcharInstall install
    if [ $numchars -gt 2030 ]; then # limit of 2048. Create a new install group
      echo "install group has nearly reached the limit of 2048 chars"
      echo "create a new install group called install2. To do this, edit"
      echo "/etc/group and insert install2:x:9999:"
      echo "Then change install in /usr/sbin/installpkg to install2"
      echo "You'll find it at the end of the useradd line."
      exit 1
    fi
  fi
EOF
case $pkgname in
  apache)
   cat >> $Output << "EOF"
    installpkg $PkgName $cursection 25
EOF
  ;;
  colord)
   cat >> $Output << "EOF"
    installpkg $PkgName $cursection 71
EOF
  ;;
  avahi)
   cat >> $Output << "EOF"
    installpkg $PkgName $cursection 84
EOF
  ;;
  gdm)
   cat >> $Output << "EOF"
    installpkg $PkgName $cursection 21
EOF
  ;;
  *)
   cat >> $Output << "EOF"
    installpkg $PkgName $cursection
EOF
  ;;
esac
cat >> $Output << "EOF"
fi
EOF
if [[ "$pkgname" == nautilus || "$pkgname" == gcr || "$pkgname" == brasero ]]; then
echo "setMime $pkgname # need to own everything under /usr/share/mime" >> $Output
fi
if [[ ! -z $doFirst || ! -z $links ]]; then # preprocessing
cat >> $Output << "EOF"
resolvelinks
EOF
fi
cat >> $Output << "EOF"
su $PkgName
EOF
case $pkgname in
   blfs-btscrpts)
    cat >> $Output << "EOF"
if [ ! -e $PkgUserDir/$PkgName/.$bsToInstall ]; then
  echo "${bsToInstall} failed"
  exit 1
fi
EOF
   ;;
   *)
cat >> $Output << "EOF"
if [ ! -e $PkgUserDir/$PkgName/.$PkgName ]; then
  echo "${PkgName} failed"
  exit 1
fi
EOF
   ;;
esac
echo "chown \$PkgName:\$PkgName \${PkgUserDir}/\${PkgName}/$build" >> $Output
# evolution now installed so get the version #
if [ "$pkgname" = evolution ]; then
cat >> $Output << "EOF"
evolutionVersion
EOF
fi
#
#set required dirs to be install dirs if installing as a package user 
#
case $pkgname in
    aisleriot)
           cat >> $Output << "EOF"
chgrp install /usr/share/icons/HighContrast/scalable
chmod g+w,o+t /usr/share/icons/HighContrast/scalable
chgrp install /usr/share/icons/HighContrast/scalable/apps
chmod g+w,o+t /usr/share/icons/HighContrast/scalable/apps
EOF
    ;;
    alsa-lib)
           cat >> $Output << "EOF"
chgrp install /usr/lib/alsa-lib
chmod g+w,o+t /usr/lib/alsa-lib
chgrp install /usr/share/alsa
chmod g+w,o+t /usr/share/alsa
EOF
    ;;
    alsa-utils)
           cat >> $Output << "EOF"
chgrp install /usr/share/sounds
chmod g+w,o+t /usr/share/sounds
if [ -d /usr/lib/udev ]; then
  chgrp install /usr/lib/udev
  chmod g+w,o+t /usr/lib/udev
  chgrp install /usr/lib/udev/rules.d
  chmod g+w,o+t /usr/lib/udev/rules.d
fi
if [ -d /usr/lib/systemd/system/basic.target.wants ]; then
  chgrp install /usr/lib/systemd/system/basic.target.wants
  chmod g+w,o+t /usr/lib/systemd/system/basic.target.wants
fi
if [ -e /usr/lib/systemd/system/alsa-restore.service ]; then
  sed -i 's/oneshop/oneshot/' /usr/lib/systemd/system/alsa-restore.service
fi
if [ ! -d /var/lib/alsa ]; then
  install -v -m0755 -d /var/lib/alsa
  chown alsa-utils:alsa-utils /var/lib/alsa
fi
if [ "$SYSTEMD" = yes ]; then
  if [ ! -d /etc/pm/sleep.d ]; then install -v -m0755 -d /etc/pm/sleep.d; fi
  install -D -m755 ${blfsfiles}/conf-files/90alsa /etc/pm/sleep.d/90alsa
  chown alsa-utils:alsa-utils /etc/pm/sleep.d/90alsa
fi
EOF
    ;;
    apache)
           cat >> $Output << "EOF"
chgrp install /usr/lib/httpd/modules
chmod g+w,o+t /usr/lib/httpd/modules
EOF
    ;;
    apr) # /usr/include/apr-1
          cat >> $Output << "EOF"
chgrp install /usr/include/apr-1 #for apr-util
chmod g+w,o+t /usr/include/apr-1
chgrp install /srv
chmod g+w,o+t /srv
chgrp install /var/log
chmod g+w,o+t /var/log
EOF
    ;;
    archive-zip)  #perl
echo "case \$(uname -m) in
   x86_64) archi=x86_64-linux
   ;;
   *)      archi=i686-linux
   ;;
esac
chgrp install /usr/lib/perl5/site_perl/${perlvers}/\$archi/auto
chmod g+w,o+t /usr/lib/perl5/site_perl/${perlvers}/\$archi/auto" >> $Output
    ;;
    aspell)
          cat >> $Output << "EOF"
echo "*************************************************************"
echo "*                                                           *"
echo "* English dictionary installed - edit script to change this *"
echo "*                                                           *"
echo "*************************************************************"
EOF
    ;;
    at-spi2-atk)
          cat >> $Output << "EOF"
chgrp install /usr/lib/gnome-settings-daemon-3.0
chmod g+w,o+t /usr/lib/gnome-settings-daemon-3.0
chgrp install /usr/lib/gnome-settings-daemon-3.0/gtk-modules
chmod g+w,o+t /usr/lib/gnome-settings-daemon-3.0/gtk-modules
chgrp install /usr/lib/gtk-2.0
chmod g+w,o+t /usr/lib/gtk-2.0
chgrp install /usr/lib/gtk-2.0/modules
chmod g+w,o+t /usr/lib/gtk-2.0/modules
EOF
    ;;
    at-spi2-core)
          cat >> $Output << "EOF"
chgrp install /etc/xdg
chmod g+w,o+t /etc/xdg
chgrp install /etc/xdg/autostart # for polkit-gnome
chmod g+w,o+t /etc/xdg/autostart
EOF
    ;;
    attr)   #/usr/include/sys
          cat >> $Output << "EOF"
chgrp install /usr/include/sys # for acl
chmod g+w,o+t /usr/include/sys
EOF
    ;;
    avahi)
           cat >> $Output << "EOF"
chgrp install /usr/share/applications
chmod g+w,o+t /usr/share/applications
EOF
    ;;
    babl) # /usr/share/gtk-doc/html
          cat >> $Output << "EOF"
chgrp install /usr/share/gtk-doc
chmod g+w,o+t /usr/share/gtk-doc
chgrp install /usr/share/gtk-doc/html # for gnutls
chmod g+w,o+t /usr/share/gtk-doc/html
EOF
    ;;
    baobab)
          cat >> $Output << "EOF"
chgrp install /usr/share/help/{id,it,ru}
chmod g+w,o+t /usr/share/help/{id,it,ru}
sed -i '/MimeType/d' /usr/share/applications/org.gnome.baobab.desktop
EOF
    ;;
    bind)
          cat >> $Output << "EOF"
mknod /srv/named/dev/null c 1 3
mknod /srv/named/dev/urandom c 1 9
chmod 666 /srv/named/dev/{null,urandom}
chmod 770 /srv/named
rndc-confgen -r /dev/urandom -b 512 > /etc/rndc.conf
sed '/conf/d;/^#/!d;s:^# ::' /etc/rndc.conf > /srv/named/etc/named.conf
EOF
    ;;
    brasero)
          cat >> $Output << "EOF"
chgrp install /usr/lib/nautilus/extensions-3.0
chmod g+w,o+t /usr/lib/nautilus/extensions-3.0
chgrp install /usr/share/mime/packages
chmod g+w,o+t /usr/share/mime/packages
chgrp install /usr/share/help/{ro,zh_HK,zh_TW}
chmod g+w,o+t /usr/share/help/{ro,zh_HK,zh_TW}
EOF
    ;;
    caribou)
          cat >> $Output << "EOF"
chgrp install /usr/lib/gtk-3.0/modules
chmod g+w,o+t /usr/lib/gtk-3.0/modules
EOF
    ;;
    clutter)
          cat >> $Output << "EOF"
chgrp install /usr/include/clutter-1.0
chmod g+w,o+t /usr/include/clutter-1.0
EOF
    ;;
    colord)
           cat >> $Output << "EOF"
chgrp install /usr/include/colord-1 # for colord-gtk
chmod g+w,o+t /usr/include/colord-1
mkdir -pv /var/lib/colord/icc
chown -R colord:colord /var/lib/colord
EOF
    ;;
    consolekit)
          cat >> $Output << "EOF"
chgrp install /usr/share/dbus-1/interfaces # for upower
chmod g+w,o+t /usr/share/dbus-1/interfaces
EOF
    ;;
    cups)
           cat >> $Output << "EOF"
chgrp install /usr/lib/cups/driver # for gutenprint
chmod g+w,o+t /usr/lib/cups/driver
chgrp install /usr/lib/cups/filter
chmod g+w,o+t /usr/lib/cups/filter
chgrp install /usr/share/cups
chmod g+w,o+t /usr/share/cups
chgrp install /usr/share/cups/model # for ghostscript
chmod g+w,o+t /usr/share/cups/model
chgrp install /usr/share/cups/data # for cups-filters
chmod g+w,o+t /usr/share/cups/data
chgrp install /usr/share/cups/drv
chmod g+w,o+t /usr/share/cups/drv
chgrp install /usr/share/cups/mime # for cups-filters
chmod g+w,o+t /usr/share/cups/mime
chgrp install /usr/share/cups/ppdc
chmod g+w,o+t /usr/share/cups/ppdc
chgrp install /usr/share/cups/usb
chmod g+w,o+t /usr/share/cups/usb
chgrp install /etc/cups
chmod g+w,o+t /etc/cups
chgrp install /usr/lib/cups/backend
chmod g+w,o+t /usr/lib/cups/backend # for samba symlink smb
cat > /etc/cups/printers.conf << "EOFCUPS"
# Printer configuration file for CUPS v1.6.1
# Written by cupsd
# DO NOT EDIT THIS FILE WHEN CUPSD IS RUNNING
<Printer Dell_3130cn_Color_Laser>
UUID urn:uuid:051a0c0e-3e62-3936-7af9-0e901f7d8cfd
Info Dell 3130cn Color Laser
Location main
MakeModel Dell 3130cn Foomatic/pxlcolor (recommended)
DeviceURI usb://Dell/3130cn%20Color%20Laser?serial=0932091440
State Idle
StateTime 1361307988
Type 8400924
Accepting Yes
Shared Yes
JobSheets none none
QuotaPeriod 0
PageLimit 0
KLimit 0
OpPolicy default
ErrorPolicy retry-job
</Printer>
EOFCUPS
# change ownership of cups files as needed
chown root:lp /etc/cups/printers.conf
chmod 600 /etc/cups/printers.conf
chown root:lp /etc/cups/cupsd.conf
chown root:lp /etc/cups/cupsd.conf.default
chown root:lp /etc/cups/interfaces
chown root:lp /etc/cups/ppd
chown root:lp /etc/cups/snmp.conf
chown root:lp /etc/cups/ssl
chown lp:lpadmin /run/cups/certs
chown root:lp /var/cache/cups
chown root:lp /var/cache/cups/rss
chown root:lp /var/spool/cups
chown root:lp /var/spool/cups/*
chown root /usr/sbin/cupsd
chown root /usr/lib/cups/cgi-bin
chown root /usr/lib/cups/cgi-bin/*.cgi
chown root /usr/lib/cups/filter/{commandtops,pstops}
chown root /usr/lib/cups/notifier
chown root /usr/lib/cups/notifier/dbus
if [ "$SYSTEMD" = yes ]; then
  rm -rf /etc/rc*.d
  rm -rf /etc/init.d/cups
  cat > /etc/pam.d/cups << "EOFPAM"
# Begin /etc/pam.d/cups

auth		required	pam_unix.so
account		required	pam_unix.so
session		required	pam_unix.so

# End /etc/pam.d/cups
EOFPAM
sed -i 's|^Exec=htmlview http://localhost:631/|Exec=xdg-open http://localhost:631/|g' /usr/share/applications/cups.desktop
ln -s cups.service /usr/lib/systemd/system/cupsd.service
chown -h cups:cups /etc/pam.d/cups /usr/lib/systemd/system/cupsd.service
fi
EOF
    ;;
    cups-filters)
           cat >> $Output << "EOF"
chown root:install /usr/lib/cups/backend
chmod 1775  /usr/lib/cups/backend
chown root /usr/lib/cups/backend/usb
chown root /usr/lib/cups/filter/{bannertopdf,pdftopdf,pdftops,pstopdf}
EOF
    ;;
    cvs) #/opt /etc/profile.d/extrapaths.sh
          cat >> $Output << "EOF"
chgrp install /opt
chmod g+w,o+t /opt
chgrp install /etc/profile.d
chmod g+w,o+t /etc/profile.d
chgrp install /etc/profile.d/extrapaths.sh
chmod 664 /etc/profile.d/extrapaths.sh
chgrp install /etc/ld.so.conf
chmod 664 /etc/ld.so.conf
EOF
    ;;
    cyrus-sasl)
       if [ "$SYSTEMD" = yes ]; then
          cat >> $Output << "EOF"
install -Dm644 ${blfsfiles}/conf-files/saslauthd.conf.d /etc/conf.d/saslauthd
install -Dm644 ${blfsfiles}/service/saslauthd.service /usr/lib/systemd/system/saslauthd.service
install -Dm644 ${blfsfiles}/conf-files/sastmpfiles.conf /usr/lib/tmpfiles.d/saslauthd.conf
chown cyrus-sasl:cyrus-sasl {/etc/conf.d/saslauthd,/usr/lib/{systemd/system/saslauthd.service,tmpfiles.d/saslauthd.conf}}
EOF
       fi
    ;;
    dbus)
          cat >> $Output << "EOF"
chgrp install /usr/lib/dbus-1.0
chmod g+w,o+t /usr/lib/dbus-1.0
chgrp install /usr/include/dbus-1.0/dbus
chmod g+w,o+t /usr/include/dbus-1.0/dbus
chgrp install /etc/dbus-1/system.d
chmod g+w,o+t /etc/dbus-1/system.d
chgrp install /usr/share/dbus-1
chmod g+w,o+t /usr/share/dbus-1
chgrp install /usr/share/dbus-1/services
chmod g+w,o+t /usr/share/dbus-1/services
chgrp install /usr/share/dbus-1/system-services
chmod g+w,o+t /usr/share/dbus-1/system-services
chown root:messagebus /usr/lib/dbus-1.0/dbus-daemon-launch-helper
chmod 4750 /usr/lib/dbus-1.0/dbus-daemon-launch-helper  # set uid root binary
EOF
    ;;
    dconf)
          cat >> $Output << "EOF"
chgrp install /usr/share/applications
chmod g+w,o+t /usr/share/applications
chgrp install /usr/share/icons/HighContrast
chmod g+w,o+t /usr/share/icons/HighContrast
for req in 16 22 24 32 48 256; do
chgrp install /usr/share/icons/HighContrast/${req}x${req}
chmod g+w,o+t /usr/share/icons/HighContrast/${req}x${req}
chgrp install /usr/share/icons/HighContrast/${req}x${req}/apps
chmod g+w,o+t /usr/share/icons/HighContrast/${req}x${req}/apps
done
EOF
    ;;
    docbook-xml)
          cat >> $Output << "EOF"
chgrp install /usr/share/xml/docbook
chmod g+w,o+t /usr/share/xml/docbook
chgrp install /etc/xml/catalog
chgrp install /etc/xml/docbook
chmod 664 /etc/xml/catalog
chmod 664 /etc/xml/docbook
EOF
    ;;
    eog)
          cat >> $Output << "EOF"
chgrp install /usr/share/help/th # for gedit
chmod g+w,o+t /usr/share/help/th
EOF
    ;;
    epiphany)
          cat >> $Output << "EOF"
chgrp install /usr/share/epiphany
chmod g+w,o+t /usr/share/epiphany
EOF
    ;;
    evince)
          cat >> $Output << "EOF"
chgrp install /usr/lib/nautilus/extensions-3.0 # in case brasero not installed
chmod g+w,o+t /usr/lib/nautilus/extensions-3.0
chgrp install /usr/lib/mozilla/plugins
chmod g+w,o+t /usr/lib/mozilla/plugins
EOF
    ;;
    evolution)
          cat >> $Output << "EOF"
chgrp install /usr/lib/evolution/$evolVers/plugins
chmod g+w,o+t /usr/lib/evolution/$evolVers/plugins
chgrp install /usr/share/help/mk
chmod g+w,o+t /usr/share/help/mk
EOF
    ;;
    exo)
          cat >> $Output << "EOF"
chgrp install /usr/share/xfce4
chmod g+w,o+t /usr/share/xfce4
EOF
    ;;
    extutls-dpnds)
echo "case \$(uname -m) in
   x86_64) archi=x86_64-linux
   ;;
   *)      archi=i686-linux
   ;;
esac
chgrp install /usr/lib/perl5/site_perl/${perlvers}/ExtUtils
chmod g+w,o+t /usr/lib/perl5/site_perl/${perlvers}/ExtUtils
chgrp install /usr/lib/perl5/site_perl/${perlvers}/\$archi/auto/ExtUtils
chmod g+w,o+t /usr/lib/perl5/site_perl/${perlvers}/\$archi/auto/ExtUtils" >> $Output
    ;;
    file-roller)
          cat >> $Output << "EOF"
chgrp install /usr/lib/nautilus/extensions-3.0
chmod g+w,o+t /usr/lib/nautilus/extensions-3.0
EOF
    ;;
    firefox)
          cat >> $Output << "EOF"
chgrp install /usr/lib/mozilla/plugins
chmod g+w,o+t /usr/lib/mozilla/plugins
EOF
    ;;
    fontconfig)
          cat >> $Output << "EOF"
chgrp install /usr/share/xml # for iso-codes
chmod g+w,o+t /usr/share/xml
chgrp install /usr/share/fontconfig/conf.avail
chmod g+w,o+t /usr/share/fontconfig/conf.avail
chgrp install /etc/fonts
chmod g+w,o+t /etc/fonts
chgrp install /etc/fonts/conf.d # for xfont
chmod g+w,o+t /etc/fonts/conf.d
EOF
    ;;
    foomatic)
          cat >> $Output << "EOF"
chown root:install /usr/lib/cups/backend
chmod g+w,o+t /usr/lib/cups/backend
chown root /usr/lib/cups/filter
chmod 755  /usr/lib/cups/filter
chown root /usr/bin/foomatic-rip
EOF
    ;;
    freetype) #/var/cache
          cat >> $Output << "EOF"
chgrp install /var/cache
chmod g+w,o+t /var/cache
chgrp install /usr/lib/udev
chmod g+w,o+t /usr/lib/udev
EOF
echo "case \$(uname -m) in
   x86_64) archi=x86_64-linux
   ;;
   *)      archi=i686-linux
   ;;
esac
chgrp install /usr/lib/perl5/${perlvers}/\$archi
chmod g+w,o+t /usr/lib/perl5/${perlvers}/\$archi
chgrp install /usr/lib/perl5/site_perl/${perlvers}
chmod g+w,o+t /usr/lib/perl5/site_perl/${perlvers}
chgrp install /usr/lib/perl5/site_perl/${perlvers}/\$archi
chmod g+w,o+t /usr/lib/perl5/site_perl/${perlvers}/\$archi" >> $Output
    ;;
    garcon)
           cat >> $Output << "EOF"
chgrp install /etc/xdg
chmod g+w,o+t /etc/xdg
chgrp install /etc/xdg/menus
chmod g+w,o+t /etc/xdg/menus
EOF
    ;;
    gconf)
          cat >> $Output << "EOF"
chgrp install /etc/gconf
chmod g+w,o+t /etc/gconf
chgrp install /etc/gconf/gconf.xml.defaults
chmod g+w,o+t /etc/gconf/gconf.xml.defaults
EOF
    ;;
    gcr)
          cat >> $Output << "EOF"
chgrp install /usr/share/mime/{application,audio,image,inode,message,model,multipart,packages,text,video,x-content,x-epoc}
chmod g+w,o+t /usr/share/mime/{application,audio,image,inode,message,model,multipart,packages,text,video,x-content,x-epoc}
EOF
    ;;
    gdk-pixbuf)
          cat >> $Output << "EOF"
chgrp install /usr/lib/gdk-pixbuf-2.0/2.10.0/loaders # for librsvg
chmod g+w,o+t /usr/lib/gdk-pixbuf-2.0/2.10.0/loaders
EOF
    ;;
    gdm)
          cat >> $Output << "EOF"
if [ "$SYSTEMD" = no ]; then
  usermod -a -G audio gdm
  usermod -a -G video gdm
fi
if [ -e /etc/inittab ]; then
  sed -i 's/id:3:initdefault:/id:5:initdefault:/' \
    /etc/inittab
fi
chgrp install /usr/share/help/{id,it,ja}
chmod g+w,o+t /usr/share/help/{id,it,ja}
EOF
    ;;
    gedit)
          cat >> $Output << "EOF"
chgrp install /usr/share/help/{bg,da,ja,lv,th,zh_HK,zh_TW}
chmod g+w,o+t /usr/share/help/{bg,da,ja,lv,th,zh_HK,zh_TW}
EOF
    ;;
    geoclue)
          cat >> $Output << "EOF"
chgrp install /usr/lib/geoclue
chmod g+w,o+t /usr/lib/geoclue
EOF
    ;;
    gimp)
          cat >> $Output << "EOF"
gtk-update-icon-cache
update-desktop-database
chgrp install /usr/lib/gimp/2.0/plug-ins
chmod g+w,o+t /usr/lib/gimp/2.0/plug-ins
chgrp install /usr/share/{applications,appdata}
chmod g+w,o+t /usr/share/{applications,appdata}
EOF
    ;;
    git)
          cat >> $Output << "EOF"
cat > /root/.gitconfig << "GITEOF"
[user]
	name = John Burrell
	email = John_burrell@hotmail.com
[core]
	autocrlf = false
	filemode = false
GITEOF
git config --global http.sslCAPath /etc/ssl/certs
chgrp install /usr/share/locale/pt_PT
chmod g+w,o+t /usr/share/locale/pt_PT
install -D -m 644 ${blfsfiles}/service/git-daemon@.service /usr/lib/systemd/system/git-daemon@.service
install -D -m 644 ${blfsfiles}/service/git-daemon.socket /usr/lib/systemd/system/git-daemon.socket
chown git:git /usr/lib/systemd/system/git-daemon*
EOF
    ;;
    glib)
          cat >> $Output << "EOF"
chgrp install /usr/share/glib-2.0/schemas
chmod g+w,o+t /usr/share/glib-2.0/schemas
chgrp install /usr/lib/gio/modules # for dconf
chmod g+w,o+t /usr/lib/gio/modules
chgrp install /usr/share/bash-completion/completions
chmod g+w,o+t /usr/share/bash-completion/completions
EOF
    ;;
    gnm-thems-stndrd)
           cat >> $Output << "EOF"
chgrp install /usr/share/icons/HighContrast/scalable/apps
chmod g+w,o+t /usr/share/icons/HighContrast/scalable/apps
EOF
    ;;
    gnm-user-share)
           cat >> $Output << "EOF"
chgrp install /usr/lib/nautilus/extensions-3.0
chmod g+w,o+t /usr/lib/nautilus/extensions-3.0
EOF
    ;;
    gnome-bckgrnds)
           cat >> $Output << "EOF"
chgrp install /usr/share/gnome-background-properties
chmod g+w,o+t /usr/share/gnome-background-properties
EOF
    ;;
    gnome-bluetooth)
          cat >> $Output << "EOF"
chgrp install /usr/share/help/th
chmod g+w,o+t /usr/share/help/th
/usr/bin/update-desktop-database /usr/share/applications
install -m644 -D ${blfsfiles}/conf-files/61-gnome-bluetooth-rfkill.rules \
                 /usr/lib/udev/rules.d/61-gnome-bluetooth-rfkill.rules
chown gnome-bluetooth:gnome-bluetooth /usr/lib/udev/rules.d/61-gnome-bluetooth-rfkill.rules
EOF
    ;;
    gnome-calculator)
          cat >> $Output << "EOF"
chgrp install /usr/share/gnome-shell/search-providers
chmod g+w,o+t /usr/share/gnome-shell/search-providers
chgrp install /usr/share/help/ro
chmod g+w,o+t /usr/share/help/ro
EOF
    ;;
    gnome-colr-mngr)
          cat >> $Output << "EOF"
chgrp install /usr/share/help/ml
chmod g+w,o+t /usr/share/help/ml
EOF
    ;;
    gnome-desktop)
          cat >> $Output << "EOF"
chgrp install /usr/share/help/* # for gnome-user-docs
chmod g+w,o+t /usr/share/help/*
chgrp install /usr/share/gnome
chmod g+w,o+t /usr/share/gnome
chgrp rarian /usr/share/help/rarian.document
chmod 644 /usr/share/help/rarian.document
EOF
    ;;
    gnome-doc-utils)
          cat >> $Output << "EOF"
chgrp install /usr/share/gnome/help
chmod g+w,o+t /usr/share/gnome/help
EOF
    ;;
    gnome-icon-thme)
          cat >> $Output << "EOF"
chgrp install /usr/share/icons/gnome
chmod g+w,o+t /usr/share/icons/gnome
chgrp install /usr/share/icons/gnome/{256x256,48x48,8x8}
chmod g+w,o+t /usr/share/icons/gnome/{256x256,48x48,8x8}
chgrp install /usr/share/icons/gnome/*/*
chmod g+w,o+t /usr/share/icons/gnome/*/*
EOF
    ;;
    gnome-menus)
          cat >> $Output << "EOF"
chgrp install /usr/share/desktop-directories
chmod g+w,o+t /usr/share/desktop-directories
chgrp install /etc/xdg/menus
chmod g+w,o+t /etc/xdg/menus
EOF
    ;;
    gnm-power-mngr)
          cat >> $Output << "EOF"
chgrp install /usr/share/appdata
chmod g+w,o+t /usr/share/appdata
EOF
    ;;
    gnome-session)
          cat >> $Output << "EOF"
chgrp install /usr/share/gnome-session/sessions
chmod g+w,o+t /usr/share/gnome-session/sessions
chgrp install /usr/share/xsessions
chmod g+w,o+t /usr/share/xsessions
EOF
    ;;
    gnome-shell)
          cat >> $Output << "EOF"
chgrp install /usr/share/gnome-shell # if gnome-shell installed first
chmod g+w,o+t /usr/share/gnome-shell
chgrp install /usr/lib/mozilla/plugins
chmod g+w,o+t /usr/lib/mozilla/plugins
EOF
    ;;
    gnome-user-docs)
          cat >> $Output << "EOF"
chgrp install /usr/share/help/{as,hi,kn,lv,mr,nl}
chmod g+w,o+t /usr/share/help/{as,hi,kn,lv,mr,nl}
EOF
    ;;
    gobject-intro)   #/usr/share/gir-1.0
          cat >> $Output << "EOF"
chgrp install /usr/share/gir-1.0 # for json-glib
chmod g+w,o+t /usr/share/gir-1.0
chgrp install /usr/lib/girepository-1.0
chmod g+w,o+t /usr/lib/girepository-1.0
EOF
    ;;
    gperf) # reset /usr/share/info/dir permissions
          cat >> $Output << "EOF"
chgrp install /usr/share/info/dir
chmod 664 /usr/share/info/dir
EOF
    ;;
    gset-dsktp-schms)
           cat >> $Output << "EOF"
chgrp install /usr/share/GConf
chmod g+w,o+t /usr/share/GConf
chgrp install /usr/share/GConf/gsettings
chmod g+w,o+t /usr/share/GConf/gsettings
EOF
    ;;
    gstreamer)
           cat >> $Output << "EOF"
chgrp install /usr/include/gstreamer-1.0/gst # for plugins
chmod g+w,o+t /usr/include/gstreamer-1.0/gst
chgrp install /usr/lib/gstreamer-1.0
chmod g+w,o+t /usr/lib/gstreamer-1.0
EOF
    ;;
    gstreamer0)
          cat >> $Output << "EOF"
chgrp install /usr/include/gstreamer-0.10/gst # for plugins
chmod g+w,o+t /usr/include/gstreamer-0.10/gst
chgrp install /usr/lib/gstreamer-0.10
chmod g+w,o+t /usr/lib/gstreamer-0.10
EOF
    ;;
    gst-plgns-base)
           cat >> $Output << "EOF"
chgrp install /usr/include/gstreamer-1.0/gst/video
chmod g+w,o+t /usr/include/gstreamer-1.0/gst/video
chgrp install /usr/share/gst-plugins-base
chmod g+w,o+t /usr/share/gst-plugins-base
EOF
    ;;
    gst-plgns-base0)
           cat >> $Output << "EOF"
chgrp install /usr/include/gstreamer-0.10/gst/interfaces
chmod g+w,o+t /usr/include/gstreamer-0.10/gst/interfaces
chgrp install /usr/include/gstreamer-0.10/gst/video
chmod g+w,o+t /usr/include/gstreamer-0.10/gst/video
chgrp install /usr/share/gst-plugins-base
chmod g+w,o+t /usr/share/gst-plugins-base
EOF
    ;;
    gst-plgns-bad)
          cat >> $Output << "EOF"
chgrp install /usr/include/gstreamer-1.0/gst/interfaces
chmod g+w,o+t /usr/include/gstreamer-1.0/gst/interfaces
EOF
    ;;
    gst-plgns-ugly)
          cat >> $Output << "EOF"
chgrp install /usr/share/gstreamer-1.0/presets
chmod g+w,o+t /usr/share/gstreamer-1.0/presets
EOF
    ;;
    gtk-doc)
          cat >> $Output << "EOF"
chgrp install /usr/share/help/*
chmod g+w,o+t /usr/share/help/*
if [ -e /usr/share/help/rarian.document ]; then
  chown rarian:rarian /usr/share/help/rarian.document
  chmod 644 /usr/share/help/rarian.document
fi
EOF
    ;;
    gtk-engines)
          cat >> $Output << "EOF"
chgrp install /usr/share/themes/Crux
chmod g+w,o+t /usr/share/themes/Crux
chgrp install /usr/share/themes/Clearlooks
chmod g+w,o+t /usr/share/themes/Clearlooks
EOF
    ;;
    gtkplus3)
          cat >> $Output << "EOF"
chgrp install /usr/lib/gtk-3.0
chmod g+w,o+t /usr/lib/gtk-3.0
chgrp install /usr/lib/gtk-3.0/3.0.0 # for gnome-themes-standard
chmod g+w,o+t /usr/lib/gtk-3.0/3.0.0
chgrp install /usr/lib/gtk-3.0/3.0.0/immodules # for ibus
chmod g+w,o+t /usr/lib/gtk-3.0/3.0.0/immodules
chgrp install /usr/share/applications
chmod g+w,o+t /usr/share/applications
EOF
    ;;
    gtkplus2)
          cat >> $Output << "EOF"
chgrp install /usr/share/themes
chmod g+w,o+t /usr/share/themes
chgrp install /usr/share/themes/Default
chmod g+w,o+t /usr/share/themes/Default
chgrp install /usr/share/themes/Emacs
chmod g+w,o+t /usr/share/themes/Emacs
chgrp install /usr/lib/gtk-2.0/2.10.0
chmod g+w,o+t /usr/lib/gtk-2.0/2.10.0
chgrp install /usr/lib/gtk-2.0/2.10.0/engines
chmod g+w,o+t /usr/lib/gtk-2.0/2.10.0/engines
chgrp install /usr/lib/gtk-2.0/modules
chmod g+w,o+t /usr/lib/gtk-2.0/modules
chgrp install /usr/lib/gtk-2.0/2.10.0/immodules # for ibus
chmod g+w,o+t /usr/lib/gtk-2.0/2.10.0/immodules
EOF
    ;;
    gutenprint)
          cat >> $Output << "EOF"
chown root /usr/lib/cups/driver
chmod 755  /usr/lib/cups/driver
chown root /usr/lib/cups/filter
chmod 755  /usr/lib/cups/filter
EOF
    ;;
    gvfs)
          cat >> $Output << "EOF"
chgrp install /usr/share/GConf/gsettings
chmod g+w,o+t /usr/share/GConf/gsettings
EOF
    ;;
    hcolr-icon-thme)
          cat >> $Output << "EOF"
chgrp install /usr/share/icons
chmod g+w,o+t /usr/share/icons
chgrp install /usr/share/icons/hicolor
chmod g+w,o+t /usr/share/icons/hicolor
chgrp install /usr/share/icons/hicolor/*/apps
chmod g+w,o+t /usr/share/icons/hicolor/*/apps
chgrp install /usr/share/icons/hicolor/*/actions
chmod g+w,o+t /usr/share/icons/hicolor/*/actions
chgrp install /usr/share/icons/hicolor/*/mimetypes # for color-manager
chmod g+w,o+t /usr/share/icons/hicolor/*/mimetypes
chgrp install /usr/share/icons/hicolor/*/devices
chmod g+w,o+t /usr/share/icons/hicolor/*/devices
chgrp install /usr/share/icons/hicolor/*/status
chmod g+w,o+t /usr/share/icons/hicolor/*/status
chgrp install /usr/share/icons/hicolor/*/emblems
chmod g+w,o+t /usr/share/icons/hicolor/*/emblems
chgrp install /usr/share/icons/hicolor/*/categories
chmod g+w,o+t /usr/share/icons/hicolor/*/categories
chgrp install /usr/share/icons/hicolor/*/stock/navigation
chmod g+w,o+t /usr/share/icons/hicolor/*/stock/navigation
chgrp install /usr/share/icons/hicolor/*/stock/media
chmod g+w,o+t /usr/share/icons/hicolor/*/stock/media
EOF
    ;;
    ibus)
          if [ "$GNOME_OR_XFCE" = gnome ]; then
            cat >> $Output << "EOF"
chgrp install /etc/dconf/profile
chmod g+w,o+t /etc/dconf/profile
chgrp install /etc/dconf/db
chmod g+w,o+t /etc/dconf/db
EOF
          fi
    ;;
    icon-nam-utls) #/usr/share/pkgconfig
          cat >> $Output << "EOF"
chgrp install /usr/share/pkgconfig
chmod g+w,o+t /usr/share/pkgconfig
EOF
    ;;
    inkscape)
          cat >> $Output << "EOF"
gtk-update-icon-cache
update-desktop-database
EOF
    ;;
    iso-codes)   #/usr/share/locale/LC_MESSAGES
           cat >> $Output << "EOF"
chgrp install /usr/share/pkgconfig # for usbutils
chmod g+w,o+t /usr/share/pkgconfig
chmod g+w,o+t /usr/share/locale/*/LC_MESSAGES
chgrp install /usr/share/xml # for docbook-xml
chmod g+w,o+t /usr/share/xml
EOF
    ;;
    java-hamcrest)
          cat >> $Output << "EOF"
chgrp install /usr/share/java
chmod g+w,o+t /usr/share/java
EOF
    ;;
    libatasmart)   #/usr/share/vala/vapi
          cat >> $Output << "EOF"
chgrp install /usr/share/vala # for vala
chmod g+w,o+t /usr/share/vala
chgrp install /usr/share/vala/vapi # for libgee
chmod g+w,o+t /usr/share/vala/vapi
EOF
    ;;
    libcanberra)
          cat >> $Output << "EOF"
chgrp install /usr/lib/gtk-3.0/modules
chmod g+w,o+t /usr/lib/gtk-3.0/modules
chgrp install /usr/share/gdm # for gdm
chmod g+w,o+t /usr/share/gdm
EOF
    ;;
    libcap)
          cat >> $Output << "EOF"
chmod -v 0755 /lib/libcap.so.2.22
EOF
    ;;
    libgpg-error)   #/usr/share/common-lisp/source
          cat >> $Output << "EOF"
chgrp install /usr/share/common-lisp/source # for gpgme
chmod g+w,o+t /usr/share/common-lisp/source
EOF
    ;;
    libgsf)
          cat >> $Output << "EOF"
chgrp install /usr/share/thumbnailers
chmod g+w,o+t /usr/share/thumbnailers
EOF
    ;;
    libgweather)
          cat >> $Output << "EOF"
chgrp install /usr/share/icons/gnome
chmod g+w,o+t /usr/share/icons/gnome
chgrp install /usr/share/icons/gnome/scalable
chmod g+w,o+t /usr/share/icons/gnome/scalable
EOF
    ;;
    libidn) # appdata-tools creates /usr/share/emacs/site-lisp/site-start.d
         cat >> $Output << "EOF"
chgrp install /usr/share/emacs/site-lisp
chmod g+w,o+t /usr/share/emacs/site-lisp
EOF
    ;;
    libsigcpp)   #/usr/share/devhelp/books
         cat >> $Output << "EOF"
chgrp install /usr/share/devhelp # for devhelp
chmod g+w,o+t /usr/share/devhelp
chgrp install /usr/share/devhelp/books # for glibmm
chmod g+w,o+t /usr/share/devhelp/books
EOF
    ;;
    libvdpau)
         cat >> $Output << "EOF"
chgrp install /usr/lib/vdpau
chmod g+w,o+t /usr/lib/vdpau
EOF
    ;;
    libxcb) # /usr/include/xcb
         cat >> $Output << "EOF"
chgrp install /usr/include/xcb
chmod g+w,o+t /usr/include/xcb
EOF
    ;;
    libxfce4ui)
          cat >> $Output << "EOF"
chgrp install /etc/xdg/xfce4
chmod g+w,o+t /etc/xdg/xfce4
chgrp install /etc/xdg/xfce4/xfconf/xfce-perchannel-xml
chmod g+w,o+t /etc/xdg/xfce4/xfconf/xfce-perchannel-xml
EOF
    ;;
    libxfce4util)
          cat >> $Output << "EOF"
chgrp install /usr/include/xfce4
chmod g+w,o+t /usr/include/xfce4
EOF
    ;;
    libxml2)
         cat >> $Output << "EOF"
chgrp install /usr/lib/cmake
chmod g+w,o+t /usr/lib/cmake
EOF
    ;;
    linux-pam)   #/etc/pam.d
         cat >> $Output << "EOF"
chown linux-pam:install /etc/pam.d
chmod g+w,o+t /etc/pam.d
chgrp install /usr/lib/security # for consolekit
chmod g+w,o+t /usr/lib/security
chgrp install /etc/security # for libpwquality
chmod g+w,o+t /etc/security
EOF
    ;;
    mutter)
           cat >> $Output << "EOF"
chgrp install /usr/share/gnome-control-center
chmod g+w,o+t /usr/share/gnome-control-center
chgrp install /usr/share/gnome-control-center/keybindings
chmod g+w,o+t /usr/share/gnome-control-center/keybindings
chgrp install /usr/share/gtk-doc/html/meta
chmod g+w,o+t /usr/share/gtk-doc/html/meta
EOF
    ;;
    nautilus)
          cat >> $Output << "EOF"
chgrp install /usr/lib/nautilus
chmod g+w,o+t /usr/lib/nautilus
chgrp install /usr/lib/nautilus/extensions-3.0
chmod g+w,o+t /usr/lib/nautilus/extensions-3.0
chgrp install /usr/share/gnome-shell
chmod g+w,o+t /usr/share/gnome-shell
chgrp install /usr/share/gnome-shell/search-providers
chmod g+w,o+t /usr/share/gnome-shell/search-providers
EOF
    ;;
    nautilus-sendto)
          cat >> $Output << "EOF"
if [ -e /usr/lib/nautilus-sendto/plugins ]; then
chgrp install /usr/lib/nautilus-sendto/plugins
chmod g+w,o+t /usr/lib/nautilus-sendto/plugins
fi
if [ -e /usr/lib/nautilus/extensions-3.0 ]; then
chgrp install /usr/lib/nautilus/extensions-3.0
chmod g+w,o+t /usr/lib/nautilus/extensions-3.0
fi
EOF
    ;;
    nmap)
          cat >> $Output << "EOF"
chgrp install /usr/share/man/fr/man1
chmod g+w,o+t /usr/share/man/fr/man1
chgrp install /usr/share/man/ja/man1
chmod g+w,o+t /usr/share/man/ja/man1
chgrp install /usr/share/man/sk/man1
chmod g+w,o+t /usr/share/man/sk/man1
if [ -e /usr/share/applications ]; then
  chgrp install /usr/share/applications
  chmod g+w,o+t /usr/share/applications
fi

EOF
    ;;
    nvidia-utils)
          cat >> $Output << "EOF"
chown root /usr/bin/nvidia-modprobe
chmod 4755 /usr/bin/nvidia-modprobe
EOF
    ;;
    openbox)
          cat >> $Output << "EOF"
chgrp install /usr/share/gnome
chmod g+w,o+t /usr/share/gnome
chgrp install /usr/share/gnome-session
chmod g+w,o+t /usr/share/gnome-session
chgrp install /usr/share/gnome-session/sessions
chmod g+w,o+t /usr/share/gnome-session/sessions
chgrp install /usr/share/xsessions
chmod g+w,o+t /usr/share/xsessions
EOF
    ;;
    openjdk)
          cat >> $Output << "EOF"
chgrp install /opt/jdk/jre
chmod g+w,o+t /opt/jdk/jre
chgrp install /opt/jdk/jre/lib
chmod g+w,o+t /opt/jdk/jre/lib
chgrp install /opt/jdk/jre/bin
chmod g+w,o+t /opt/jdk/jre/bin
chgrp install /opt/jdk/man
chmod g+w,o+t /opt/jdk/man
chgrp install /opt/jdk/man/man1
chmod g+w,o+t /opt/jdk/man/man1
chgrp install /opt/jdk/man/ja_JP.UTF-8
chmod g+w,o+t /opt/jdk/man/ja_JP.UTF-8
chown openjdk:openjdk /etc/profile.d/openjdk.sh
EOF
    ;;
    openldap)
          cat >> $Output << "EOF"
chgrp install /etc/openldap
chmod g+w,o+t /etc/openldap
EOF
    ;;
    openobex)
          cat >> $Output << "EOF"
chgrp install /usr/lib/cmake
chmod g+w,o+t /usr/lib/cmake
EOF
    ;;
    openssh)
       if [ "$SYSTEMD" = yes ]; then
          cat >> $Output << "EOF"
install -Dm644 ${blfsfiles}/service/sshdgenkeys.service /usr/lib/systemd/system/sshdgenkeys.service
install -Dm644 ${blfsfiles}/service/sshd.service /usr/lib/systemd/system/sshd.service
install -Dm644 ${blfsfiles}/service/sshd.socket /usr/lib/systemd/system/sshd.socket
install -Dm644 ${blfsfiles}/service/sshd@.service /usr/lib/systemd/system/sshd@.service
install -Dm644 ${blfsfiles}/conf-files/sshd.conf /usr/lib/tmpfiles.d
chown openssh:openssh /usr/lib/systemd/system/sshd*
chown openssh:openssh /usr/lib/tmpfiles.d/sshd.conf
EOF
       fi
    ;;
    openssl)   #/usr/share/gtk-doc/html
          cat >> $Output << "EOF"
chgrp install /run # for linux-pam
chmod g+w,o+t /run
chgrp install /etc/ssl # for cacerts
chmod g+w,o+t /etc/ssl
chgrp install /etc/ssl/certs
chmod g+w,o+t /etc/ssl/certs
EOF
    ;;
    p11-kit)
          cat >> $Output << "EOF"
chgrp install /usr/share/gtk-doc/html # for gegl
chmod g+w,o+t /usr/share/gtk-doc/html
chgrp install /usr/share/p11-kit/modules # for gnome-keyring
chmod g+w,o+t /usr/share/p11-kit/modules
chgrp install /usr/lib/pkcs11
chmod g+w,o+t /usr/lib/pkcs11
chgrp install /etc/pkcs11
chmod g+w,o+t /etc/pkcs11
EOF
    ;;
    pango)
          cat >> $Output << "EOF"
chgrp install /etc/pango # for pangox-compat
chmod g+w,o+t /etc/pango
chgrp install /usr/include/pango-1.0/pango
chmod g+w,o+t /usr/include/pango-1.0/pango
EOF
    ;;
    parole)
          cat >> $Output << "EOF"
chgrp install /usr/share/applications
chmod g+w,o+t /usr/share/applications
EOF
    ;;
    php)
          cat >> $Output << "EOF"
cat >> /etc/httpd/httpd.conf << "PHPEOF"
LoadModule php5_module /usr/lib/httpd/modules/libphp5.so
AddType application/x-httpd-php .php
AddType application/x-httpd-php-source .phps
PHPEOF
chown apache:apache /etc/httpd/httpd.conf
EOF
    ;;
    pidgin)
          cat >> $Output << "EOF"
gtk-update-icon-cache
update-desktop-database
EOF
          if [ "$GNOME_OR_XFCE" = gnome ]; then
            cat >> $Output << "EOF"
chgrp install /etc/gconf/schemas
chmod g+w,o+t /etc/gconf/schemas
EOF
          fi
    ;;
    polkit)
          cat >> $Output << "EOF"
groupadd -fg 27 polkitd # dedicated user to take control of polkitd
useradd -c "PolicyKit Daemon Owner" -d /etc/polkit-1 -u 27 \
        -g polkitd -s /bin/false polkitd
chgrp install /usr/share/polkit-1/actions # for colord
chmod g+w,o+t /usr/share/polkit-1/actions
chown root /usr/lib/polkit-1/polkit-agent-helper-1
chmod 4755 /usr/lib/polkit-1/polkit-agent-helper-1
chown root /usr/bin/pkexec
chmod 4755 /usr/bin/pkexec
chown polkitd /etc/polkit-1/rules.d
chmod 700 /etc/polkit-1/rules.d
chown polkitd:install /usr/share/polkit-1/rules.d
chmod 1775 /usr/share/polkit-1/rules.d
chgrp install /etc/dbus-1 # for dbus
chmod g+w,o+t /etc/dbus-1
chgrp install /etc/dbus-1/system.d
chmod g+w,o+t /etc/dbus-1/system.d
chgrp install /usr/share/dbus-1 # for dbus
chmod g+w,o+t /usr/share/dbus-1
chgrp install /usr/share/dbus-1/system-services
chmod g+w,o+t /usr/share/dbus-1/system-services
EOF
    ;;
    py2cairo)
          cat >> $Output << "EOF"
chgrp install /usr/include/pycairo
chmod g+w,o+t /usr/include/pycairo
EOF
    ;;
    pygobject2)
          cat >> $Output << "EOF"
chgrp install /usr/lib/python2.7/site-packages/gi
chmod g+w,o+t /usr/lib/python2.7/site-packages/gi
chgrp install /usr/lib/python2.7/site-packages/gi/repository
chmod g+w,o+t /usr/lib/python2.7/site-packages/gi/repository
chgrp install /usr/lib/python2.7/site-packages/gi/overrides
chmod g+w,o+t /usr/lib/python2.7/site-packages/gi/overrides
chgrp install /usr/lib/python2.7/site-packages/gtk-2.0
chmod g+w,o+t /usr/lib/python2.7/site-packages/gtk-2.0
chgrp install /usr/include/pygtk-2.0
chmod g+w,o+t /usr/include/pygtk-2.0
EOF
    ;;
    py2-gobject3)
          cat >> $Output << "EOF"
chgrp install /usr/lib/python2.7/site-packages/gi
chmod g+w,o+t /usr/lib/python2.7/site-packages/gi
chgrp install /usr/lib/python2.7/site-packages/gi/overrides
chmod g+w,o+t /usr/lib/python2.7/site-packages/gi/overrides
chgrp install /usr/include/pygobject-3.0
chmod g+w,o+t /usr/include/pygobject-3.0
EOF
    ;;
    py3-gobject3)
echo "chgrp install /usr/lib/python${pyseries}/site-packages/gi
chmod g+w,o+t /usr/lib/python${pyseries}/site-packages/gi
chgrp install /usr/lib/python${pyseries}/site-packages/gi/overrides
chmod g+w,o+t /usr/lib/python${pyseries}/site-packages/gi/overrides
chgrp install /usr/lib/python${pyseries}/site-packages/gi/overrides/__pycache__
chmod g+w,o+t /usr/lib/python${pyseries}/site-packages/gi/overrides/__pycache__" >> $Output
    ;;
    pygtk)
          cat >> $Output << "EOF"
chgrp install /usr/share/pygtk/2.0/defs
chmod g+w,o+t /usr/share/pygtk/2.0/defs
EOF
    ;;
    pysolfc)
          cat >> $Output << "EOF"
chgrp install /usr/share/applications
chmod g+w,o+t /usr/share/applications
EOF
    ;;
    python2)  #/usr/share/man
          cat >> $Output << "EOF"
chgrp install /usr/share/man
chmod g+w,o+t /usr/share/man
chgrp install /usr/lib/python2.7/site-packages #for python modules
chmod g+w,o+t /usr/lib/python2.7/site-packages
EOF
    ;;
    python3)  #/usr/share/man
echo "chgrp install /usr/lib/python${pyseries}/site-packages #for python modules
chmod g+w,o+t /usr/lib/python${pyseries}/site-packages" >> $Output
    ;;
    rarian)
           cat >> $Output << "EOF"
chgrp install /usr/share/help
chmod g+w,o+t /usr/share/help
EOF
    ;;
    ruby)
           echo "chgrp install /usr/lib/ruby/site_ruby/$rubyvers
chmod g+w,o+t /usr/lib/ruby/site_ruby/$rubyvers
chgrp install /usr/lib/ruby/site_ruby/$rubyvers/x86_64-linux
chmod g+w,o+t /usr/lib/ruby/site_ruby/$rubyvers/x86_64-linux
chgrp install /usr/lib/ruby/vendor_ruby/$rubyvers
chmod g+w,o+t /usr/lib/ruby/vendor_ruby/$rubyvers
chgrp install /usr/lib/ruby/vendor_ruby/$rubyvers/x86_64-linux
chmod g+w,o+t /usr/lib/ruby/vendor_ruby/$rubyvers/x86_64-linux" >> $Output
    ;;
    samba)
          cat >> $Output << "EOF"
ln -v -sf /usr/bin/smbspool /usr/lib/cups/backend/smb
EOF
    ;;
    sgml-common)
          cat >> $Output << "EOF"
chgrp install /usr/share/sgml
chmod g+w,o+t /usr/share/sgml # for opensp
EOF
    ;;
    shadow)  #/bin/su, etc setuid root
           cat >> $Output << "EOF"
chown root /bin/{su,passwd}
chmod 4755 /bin/{su,passwd}
chown root /usr/bin/{chage,chfn,chsh,expiry,gpasswd,newgrp}
chmod 4755 /usr/bin/{chage,chfn,chsh,expiry,gpasswd,newgrp}
chgrp install /etc/pam.d/system-session
chmod 664 /etc/pam.d/system-session # consolekit adds to it
EOF
    ;;
    shrd-mime-info)
          cat >> $Output << "EOF"
chgrp install /usr/share/mime
chmod g+w,o+t /usr/share/mime
chgrp install /usr/share/mime/packages
chmod g+w,o+t /usr/share/mime/packages
EOF
    ;;
    subversion) # write the PYTHONPATH variable to profile.d
          cat >> $Output << "EOF"
echo "export PYTHONPATH=/usr/lib/svn-python" >> /etc/profile.d/python3.sh
if [ "$SYSTEMD" = yes ]; then
  install -D -m 644 ${blfsfiles}/service/svnserve.service /usr/lib/systemd/system/svnserve.service
  install -D -m 644 ${blfsfiles}/conf-files/svnserve.tmpfiles /usr/lib/tmpfiles.d/svnserve.conf
  install -D -m 644 ${blfsfiles}/conf-files/svnserve.conf /etc/conf.d/svnserve
  chown subversion:subversion /usr/lib/systemd/system/svnserve.service
  chown subversion:subversion /usr/lib/tmpfiles.d/svnserve.conf
  chown subversion:subversion /etc/conf.d/svnserve
fi
EOF
    ;;
    sudo)
          cat >> $Output << "EOF"
chown root /usr/bin/{sudo,sudoedit}
chmod 4111 /usr/bin/{sudo,sudoedit}
chown root /usr/lib/sudo/sudoers.so
chown root /etc/sudoers
chown root /etc/sudoers.d
chmod 444  /etc/sudoers
chown root /var/lib/sudo
# add your username to /etc/sudoers so you can sudo
sed -i 's/root ALL=(ALL) ALL/root ALL=(ALL) ALL\njohn ALL=(ALL) ALL/' /etc/sudoers
EOF
    ;;
    systemd)
          cat >> $Output << "EOF"
chgrp install /usr/lib/systemd/system-sleep
chmod g+w,o+t /usr/lib/systemd/system-sleep
chgrp install /usr/lib/udev/hwdb.d
chmod g+w,o+t /usr/lib/udev/hwdb.d
chgrp install /usr/share/polkit-1
chmod g+w,o+t /usr/share/polkit-1
chgrp install /usr/share/polkit-1/actions
chmod g+w,o+t /usr/share/polkit-1/actions
chgrp install /usr/share/zsh/site-functions
chmod g+w,o+t /usr/share/zsh/site-functions
cat >> /etc/pam.d/system-session << "SYSEOF"
# Begin Systemd addition
    
session   required    pam_loginuid.so
session   optional    pam_systemd.so

# End Systemd addition
SYSEOF
cat > /etc/pam.d/systemd-user << "SYSEOF"
# Begin /etc/pam.d/systemd-user

account  required pam_access.so
account  include  system-account

session  required pam_env.so
session  required pam_limits.so
session  include  system-session

auth     required pam_deny.so
password required pam_deny.so

# End /etc/pam.d/systemd-user
SYSEOF
chown root:systemd-journal /var/log/journal
chmod 2755 /var/log/journal
EOF
    ;;
    tcl)   #/usr/share/man
         cat >> $Output << "EOF"
chgrp install /usr/share/man/mann
chmod g+w,o+t /usr/share/man/mann
chgrp install /usr/share/gdb/auto-load #for glib
chmod g+w,o+t /usr/share/gdb/auto-load
chgrp install /etc/bash_completion.d #for glib
chmod g+w,o+t /etc/bash_completion.d
EOF
    ;;
    telepathy-glib)
          cat >> $Output << "EOF"
chgrp install /usr/include/telepathy-1.0
chmod g+w,o+t /usr/include/telepathy-1.0
EOF
    ;;
    telepathy-idle)
          cat >> $Output << "EOF"
chgrp install /usr/share/telepathy/managers
chmod g+w,o+t /usr/share/telepathy/managers
EOF
    ;;
    telepathy-logr)
          cat >> $Output << "EOF"
chgrp install /usr/lib/telepathy # for telepathy-mission-control
chmod g+w,o+t /usr/lib/telepathy
chgrp install /usr/share/telepathy
chmod g+w,o+t /usr/share/telepathy
chgrp install /usr/share/telepathy/clients
chmod g+w,o+t /usr/share/telepathy/clients
EOF
    ;;
    thunar)
          cat >> $Output << "EOF"
chgrp install /usr/share/Thunar/sendto
chmod g+w,o+t /usr/share/Thunar/sendto
EOF
    ;;
    traceroute) # set suid root binary
          cat >> $Output << "EOF"
chown root /bin/traceroute
chmod 4755 /bin/traceroute
rm -fv /usr/share/man/man1/traceroute.1
EOF
    ;;
    twm)
          cat >> $Output << "EOF"
chgrp install /etc/X11/app-defaults
chmod g+w,o+t /etc/X11/app-defaults
EOF
    ;;
    eudev)
          cat >> $Output << "EOF"
chgrp install /usr/lib/udev/rules.d
chmod g+w,o+t /usr/lib/udev/rules.d
chgrp install /etc/udev
chmod g+w,o+t /etc/udev
EOF
    ;;
    upower)
          cat >> $Output << "EOF"
chgrp install /usr/share/dbus-1/interfaces
chmod g+w,o+t /usr/share/dbus-1/interfaces
EOF
    ;;
    usbutils) #/usr/share/pkgconfig
          cat >> $Output << "EOF"
chgrp install /usr/share/pkgconfig
chmod g+w,o+t /usr/share/pkgconfig
EOF
    ;;
    vala)
echo "chgrp install /usr/share/vala
chmod g+w,o+t /usr/share/vala
chgrp install /usr/share/vala-${valaseries}/vapi
chmod g+w,o+t /usr/share/vala-${valaseries}/vapi" >> $Output
    ;;
    vlc)
          cat >> $Output << "EOF"
gtk-update-icon-cache
update-desktop-database
chgrp install /usr/share/applications
chmod g+w,o+t /usr/share/applications
EOF
    ;;
    weston)
           cat >> $Output << "EOF"
chown root /usr/bin/weston-launch
chmod u+s /usr/bin/weston-launch
EOF
    ;;
    $xapp)
           cat >> $Output << "EOF"
chgrp install /usr/share/terminfo/x #for xterm
chmod g+w,o+t /usr/share/terminfo/x
EOF
    ;;
    xboard)
           cat >> $Output << "EOF"
gtk-update-icon-cache
update-desktop-database
EOF
    ;;
    xclock)
           cat >> $Output << "EOF"
chgrp install /etc/sysconfig
chmod g+w,o+t /etc/sysconfig
chgrp install /etc/X11
chmod g+w,o+t /etc/X11
chgrp install /etc/X11/app-defaults
chmod g+w,o+t /etc/X11/app-defaults
EOF
    ;;
    xcursor-themes)
           cat >> $Output << "EOF"
chgrp install /usr/share/icons
chmod g+w,o+t /usr/share/icons
EOF
    ;;
    xfce4-xkb-plugin)
          cat >> $Output << "EOF"
chgrp install /usr/share/xfce4/panel-plugins
chmod g+w,o+t /usr/share/xfce4/panel-plugins
EOF
    ;;
    xfce4-panel)
          cat >> $Output << "EOF"
chgrp install /usr/lib/xfce4/panel/plugins
chmod g+w,o+t /usr/lib/xfce4/panel/plugins
chgrp install /usr/share/xfce4/panel/plugins
chmod g+w,o+t /usr/share/xfce4/panel/plugins
EOF
    ;;
    xfce4-terminal)
          cat >> $Output << "EOF"
chgrp install /usr/share/man/el/man1
chmod g+w,o+t /usr/share/man/el/man1
EOF
    ;;
    xfconf)
          cat >> $Output << "EOF"
chgrp install /usr/lib/xfce4
chmod g+w,o+t /usr/lib/xfce4
EOF
    ;;
    xfce4pwrmngr)
          cat >> $Output << "EOF"
chgrp install /etc/xdg/autostart
chmod g+w,o+t /etc/xdg/autostart
EOF
    ;;
    $xfont)
           cat >> $Output << "EOF"
chgrp install /usr/share/fonts
chmod g+w,o+t /usr/share/fonts
EOF
    ;;
    xkeyboard-config)
           cat >> $Output << "EOF"
chgrp install /usr/share/X11/xkb
chmod g+w,o+t /usr/share/X11/xkb
EOF
    ;;
    $xlib)
           cat >> $Output << "EOF"
chgrp install /usr/share/X11
chmod g+w,o+t /usr/share/X11
EOF
    ;;
    xml-parser)  #perl
echo "case \$(uname -m) in
   x86_64) archi=x86_64-linux
   ;;
   *)      archi=i686-linux
   ;;
esac
chgrp install /usr/lib/perl5/site_perl/${perlvers}/\$archi/XML
chmod g+w,o+t /usr/lib/perl5/site_perl/${perlvers}/\$archi/XML
chgrp install /usr/lib/perl5/site_perl/${perlvers}/\$archi/auto/XML
chmod g+w,o+t /usr/lib/perl5/site_perl/${perlvers}/\$archi/auto/XML
chgrp install /usr/lib/perl5/${perlvers}/\$archi/perllocal.pod
chmod 664 /usr/lib/perl5/${perlvers}/\$archi/perllocal.pod" >> $Output
    ;;
    xml-sax)
echo "chgrp install /usr/lib/perl5/site_perl/${perlvers}/XML/SAX/ParserDetails.ini
chmod 664 /usr/lib/perl5/site_perl/${perlvers}/XML/SAX/ParserDetails.ini" >> $Output
    ;;
    xml-sax-base)
echo "case \$(uname -m) in
   x86_64) archi=x86_64-linux
   ;;
   *)      archi=i686-linux
   ;;
esac
chgrp install /usr/lib/perl5/site_perl/${perlvers}/XML
chmod g+w,o+t /usr/lib/perl5/site_perl/${perlvers}/XML
chgrp install /usr/lib/perl5/site_perl/${perlvers}/XML/SAX
chmod g+w,o+t /usr/lib/perl5/site_perl/${perlvers}/XML/SAX
chgrp install /usr/lib/perl5/site_perl/${perlvers}/\$archi/auto/XML/SAX
chmod g+w,o+t /usr/lib/perl5/site_perl/${perlvers}/\$archi/auto/XML/SAX" >> $Output
    ;;
    xorg-evdev)
               cat >> $Output << "EOF"
chgrp install /usr/lib/xorg/modules/input
chmod g+w,o+t /usr/lib/xorg/modules/input
EOF
    ;;
    xorg-intel)
               cat >> $Output << "EOF"
chgrp install /usr/lib/xorg/modules/drivers
chmod g+w,o+t /usr/lib/xorg/modules/drivers
chown root /usr/lib/xf86-video-intel-backlight-helper
chmod u+s /usr/lib/xf86-video-intel-backlight-helper
EOF
    ;;
    xorg-modeset|xorg-nouveau)
               cat >> $Output << "EOF"
chgrp install /usr/lib/xorg/modules/drivers
chmod g+w,o+t /usr/lib/xorg/modules/drivers
EOF
    ;;
    xorg-server)
           cat >> $Output << "EOF"
chgrp install /usr/include/xorg
chmod g+w,o+t /usr/include/xorg
chgrp install /usr/share/X11/xorg.conf.d
chmod g+w,o+t /usr/share/X11/xorg.conf.d
chgrp install /usr/lib/xorg
chmod g+w,o+t /usr/lib/xorg
chgrp install /usr/lib/xorg/modules
chmod g+w,o+t /usr/lib/xorg/modules
chgrp install /usr/lib/xorg/modules/multimedia
chmod g+w,o+t /usr/lib/xorg/modules/multimedia
chgrp install /usr/lib/xorg/modules/extensions
chmod g+w,o+t /usr/lib/xorg/modules/extensions
chown root /usr/bin/Xorg.bin # setuid root binary
chmod 4755 /usr/bin/Xorg.bin
EOF
    ;;
    $xproto) # /usr/include/X11
           cat >> $Output << "EOF"
chgrp install /usr/include/X11
chmod g+w,o+t /usr/include/X11
chgrp install /usr/include/X11/extensions
chmod g+w,o+t /usr/include/X11/extensions
chgrp install /usr/include/X11/fonts
chmod g+w,o+t /usr/include/X11/fonts
chgrp install /usr/include/GL # for MesaLib
chmod g+w,o+t /usr/include/GL
chgrp install /usr/include/GL/internal
chmod g+w,o+t /usr/include/GL/internal
EOF
    ;;
    xterm)
           cat >> $Output << "EOF"
cd ${PkgUserDir}/${PkgName}/${PkgName}*
make install-ti # have to do this as root
cd ..
for flToDlt in *.tgz; do
  dltfile=${flToDlt%.tgz}
done
rm -rf $dltfile
chown xterm:xterm /usr/share/terminfo/x/xterm-65
chown xterm:xterm /usr/share/terminfo/x/xterm+app+pc
chown xterm:xterm /usr/share/terminfo/x/xterm-boldso
chown xterm:xterm /usr/share/terminfo/x/xterm+decedit
chown xterm:xterm /usr/share/terminfo/x/xterm-ic
chown xterm:xterm /usr/share/terminfo/x/xterm+kbs
chown xterm:xterm /usr/share/terminfo/x/xterm-mono
chown xterm:xterm /usr/share/terminfo/x/xterm+noapp+pc
chown xterm:xterm /usr/share/terminfo/x/xterm-nrc
chown xterm:xterm /usr/share/terminfo/x/xterm+pce0
chown xterm:xterm /usr/share/terminfo/x/xterm+pce1
chown xterm:xterm /usr/share/terminfo/x/xterm+pce3
chown xterm:xterm /usr/share/terminfo/x/xterm+pcf1
chown xterm:xterm /usr/share/terminfo/x/xterm+pcf3
chown xterm:xterm /usr/share/terminfo/x/xterm+pcfn
chown xterm:xterm /usr/share/terminfo/x/xterm+pcfN
chown xterm:xterm /usr/share/terminfo/x/xterm-rep
chown xterm:xterm /usr/share/terminfo/x/xterm+tmux
chown xterm:xterm /usr/share/terminfo/x/xterm-vi
chown xterm:xterm /usr/share/terminfo/x/xterm-xmc
chgrp install /usr/share/pixmaps # for evol-data-server
chmod g+w,o+t /usr/share/pixmaps
cat >> /etc/X11/app-defaults/XTerm << "XTERMEOF"
*VT100*locale: true
*VT100*faceName: Monospace
*VT100*faceSize: 10
*backarrowKeyIsErase: true
*ptyInitialErase: true
XTERMEOF
EOF
    ;;
    yelp-xsl)
          cat >> $Output << "EOF"
chgrp install /usr/share/yelp-xsl/xslt/common/domains
chmod g+w,o+t /usr/share/yelp-xsl/xslt/common/domains
EOF
    ;;
    zenity)
          cat >> $Output << "EOF"
chgrp install /usr/share/help/{bg,da,ja,ru} # for gnome-terminal
chmod g+w,o+t /usr/share/help/{bg,da,ja,ru}
EOF
    ;;
esac
fi # end ! as_root
#
# the following are needed whether root or package user
case $pkgname in
    acpid)
          cat >> $Output << "EOF"
if [ "$SYSTEMD" = yes ]; then
  install -Dm644 ${blfsfiles}/conf-files/anything /etc/acpi/events/anything
  install -Dm755 ${blfsfiles}/conf-files/handler.sh /etc/acpi/handler.sh
  install -Dm644 ${blfsfiles}/service/acpid.socket /usr/lib/systemd/system/acpid.socket
  install -Dm644 ${blfsfiles}/service/acpid.service /usr/lib/systemd/system/acpid.service
  if ! $AS_ROOT; then
    chown acpid:acpid /etc/acpi/{handler.sh,events/anything}
    chown acpid:acpid /usr/lib/systemd/system/{acpid.socket,acpid.service}
  fi
fi
EOF
    ;;
    alsa-utils)
          cat >> $Output << "EOF"
touch /var/lib/alsa/asound.state
usermod -a -G audio john # replace john with your username
/usr/sbin/alsactl -L store
EOF
    ;;
    avr-libc)
          cat >> $Output << "EOF"
chgrp root /usr
chmod 755 /usr
EOF
    ;;
    apache)
          cat >> $Output << "EOF"
if [ "$SYSTEMD" = yes ]; then
  install -m644 ${blfsfiles}/service/httpd.service /usr/lib/systemd/system/httpd.service
  install -Dm644 ${blfsfiles}/conf-files/httpd.conf /usr/lib/tmpfiles.d
  chown apache:apache /usr/lib/systemd/system/httpd.service
  chown apache:apache /usr/lib/tmpfiles.d/httpd.conf
fi
EOF
    ;;
    apache-ant)
          cat >> $Output << "EOF"
cat > /etc/profile.d/apache_ant.sh << "EOFANT"
export PATH=$PATH:/opt/ant/bin
export ANT_HOME=/opt/ant
EOFANT
EOF
if ! $as_root; then
          cat >> $Output << "EOF"
chown apache-ant:apache-ant /etc/profile.d/apache_ant.sh
EOF
fi
    ;;
    bind)
          cat >> $Output << "EOF"
chown -R named:named /srv/named
echo "****************************************"
echo "Edit /etc/resolv.conf to suit your needs"
echo "****************************************"
if [ "$SYSTEMD" = yes ]; then
  install -D -m644 ${blfsfiles}/conf-files/tmpfiles.d /usr/lib/tmpfiles.d/named.conf
  install -D -m644 ${blfsfiles}/service/named.service /usr/lib/systemd/system
  chown named:named /usr/lib/tmpfiles.d/named.conf
  chown named:named /usr/lib/systemd/system/named.service
fi
install -D -m640 -o 0 -g 20 ${blfsfiles}/conf-files/named.conf /etc/named.conf
install -d -m770 -o 0 -g 20 /var/named
install    -m640 -o 0 -g 20 ${blfsfiles}/zone/root.hint /var/named
install    -m640 -o 0 -g 20 ${blfsfiles}/zone/127.0.0.zone /var/named
install    -m640 -o 0 -g 20 ${blfsfiles}/zone/localhost.zone /var/named
EOF
    ;;
    bluez)
          cat >> $Output << "EOF"
if [ "$SYSTEMD" = yes ]; then
  sed -i 's#/usr/sbin/#/usr/bin/#' \
         /usr/lib/systemd/system/bluetooth.service
fi
EOF
    ;;
    chromium)
          cat >> $Output << "EOF"
install -Dm644 ${blfsfiles}/conf-files/chromium.default /etc/chromium/default
install -Dm644 ${blfsfiles}/conf-files/chromium.desktop /usr/share/applications/chromium.desktop
install -D ${blfsfiles}/conf-files/chromium.sh /usr/bin/chromium
chown root /usr/lib/chromium/chrome-sandbox
chmod 4755 /usr/lib/chromium/chrome-sandbox
EOF
if ! $as_root; then
          cat >> $Output << "EOF"
chown chromium:chromium /etc/chromium/default
chown chromium:chromium /usr/share/applications/chromium.desktop
chown chromium:chromium /usr/bin/chromium
EOF
fi
    ;;
    cracklib)
          cat >> $Output << "EOF"
install -m644 ${blfsfiles}/allwords /usr/share/dict
create-cracklib-dict /usr/share/dict/allwords
if ! $AS_ROOT; then chown cracklib:cracklib /usr/share/dict/allwords; fi
EOF
    ;;
    cups)
       if $as_root; then # already done this if a package-user
          cat >> $Output << "EOF"
cat > /etc/cups/printers.conf << "EOFCUPS"
# Printer configuration file for CUPS v1.6.1
# Written by cupsd
# DO NOT EDIT THIS FILE WHEN CUPSD IS RUNNING
<Printer Dell_3130cn_Color_Laser>
UUID urn:uuid:051a0c0e-3e62-3936-7af9-0e901f7d8cfd
Info Dell 3130cn Color Laser
Location main
MakeModel Dell 3130cn Color Laser v3017.104 PS
DeviceURI usb://Dell/3130cn%20Color%20Laser?serial=0932091440
State Idle
StateTime 1355080729
Type 8388612
Accepting Yes
Shared Yes
JobSheets none none
QuotaPeriod 0
PageLimit 0
KLimit 0
OpPolicy default
ErrorPolicy retry-job
</Printer>
EOFCUPS
chown root:lp /etc/cups/printers.conf
chmod 600 /etc/cups/printers.conf
EOF
       fi
          cat >> $Output << "EOF"
gtk-update-icon-cache
EOF
    ;;
    dhcpcd)
          cat >> $Output << "EOF"
if [ "$SYSTEMD" = yes ]; then
  install -Dm644 ${blfsfiles}/service/dhcpcd_.service /usr/lib/systemd/system/dhcpcd@.service
  install -Dm644 ${blfsfiles}/service/dhcpcd.service /usr/lib/systemd/system/dhcpcd.service
  if ! $AS_ROOT; then chown dhcpcd:dhcpcd /usr/lib/systemd/system/{dhcpcd@.service,dhcpcd.service}; fi
fi
EOF
    ;;
    docutils)
          cat >> $Output << "EOF"
# move these because of a py3-docutils conflict
for _f in /usr/bin/rst2*.py; do
  mv -v "$_f" "${_f%.py}2.py"
done
mv /usr/bin/rstpep2html.py /usr/bin/rstpep2html2.py
EOF
    ;;
    firewall) # add more rules for the squid proxy server
          cat >> $Output << "EOF"
sed -i '/^# End/d' /etc/rc.d/rc.iptables
cat >> /etc/rc.d/rc.iptables << "ADDRULES"
# permit Squid box out to the Internet
iptables -t mangle -A PREROUTING -p tcp --dport 80 -s  192.168.1.120 -j ACCEPT
# mark everything else on port 80 to be routed to the Squid box
iptables -t mangle -A PREROUTING -i wlp4s0 -p tcp --dport 80 -j MARK --set-mark 2
iptables -t mangle -A PREROUTING -m mark --mark 2 -j ACCEPT
# Ensure that traffic from inside the network is allowed to loop back inside
iptables -t filter -A FORWARD -i wlp4s0 -o wlp4s0 -p tcp --dport 80 -j ACCEPT

# End /etc/rc.d/rc.iptables
ADDRULES
EOF
    ;;
    firefox)
          cat >> $Output << "EOF"
gtk-update-icon-cache -qf /usr/share/icons/hicolor
EOF
    ;;
    freetype)
          cat >> $Output << "EOF"
ln -svf freetype2 /usr/include/freetype
EOF
    ;;
    gnome-session)
          cat >> $Output << "EOF"
cat > ~/.xinitrc << "EOL"
dbus-launch --exit-with-session gnome-session
EOL
cat > /etc/profile.d/gnome.sh << "EOW"
export XDG_DATA_DIRS=/usr/share
export XDG_CONFIG_DIRS=/etc/xdg
export XDG_MENU_PREFIX=""
EOW
EOF
    ;;
    gnome-shell)
          cat >> $Output << "EOF"
mkdir -pv /usr/share/gnome-shell/modes
EOF
if ! $as_root; then
          cat >> $Output << "EOF"
chown gnome-shell:gnome-shell /usr/share/gnome-shell/modes
EOF
fi
    ;;
    gpm)
          cat >> $Output << "EOF"
if [ "$SYSTEMD" = yes ]; then
  install -m644 ${blfsfiles}/service/gpm.service /usr/lib/systemd/system/gpm.service
  if ! $AS_ROOT; then chown gpm:gpm /usr/lib/systemd/system/gpm.service; fi
fi
cat > /etc/profile.d/gpm.sh << "GPMEOF"
case $( /usr/bin/tty ) in
    /dev/tty[0-9]*) [ -n "$(pgrep gpm)" ] && /usr/bin/disable-paste ;;
esac
GPMEOF
EOF
    ;;
    guile)
          cat >> $Output << "EOF"
mv /usr/lib/libguile-*-gdb.scm /usr/share/gdb/auto-load/usr/lib
EOF
    ;;
    harfbuzz) # need to reinstall freetype after harfbuzz
          cat >> $Output << "EOF"
if [ -e ${PkgUserDir}/freetype/.freetype ]; then
  rm -rf ${PkgUserDir}/freetype/{.freetype,build}
fi
echo 'Will reinstall freetype when next executing libraries.sh'
EOF
    ;;
    iptables)
          cat >> $Output << "EOF"
if [ "$SYSTEMD" = yes ]; then
  install -v -d /etc/iptables
  install -v -d /etc/conf.d
# remove the procps version of sysctl.conf
  rm -rf /etc/sysctl.conf
  install -D -m644 ${blfsfiles}/conf-files/sysctl.conf /etc
  install -D -m644 ${blfsfiles}/conf-files/iptables.conf.d /etc/conf.d/iptables
  install -D -m644 ${blfsfiles}/iptables.rules /etc/iptables/iptables.rules
  install -Dm644 ${blfsfiles}/service/{iptables.service,ip6tables.service} /usr/lib/systemd/system
  if ! $AS_ROOT; then
    chown iptables:iptables /etc/{sysctl.conf,conf.d/iptables,iptables/iptables.rules}
    chown iptables:iptables /usr/lib/systemd/system/{iptables.service,ip6tables.service}
  fi
fi
EOF
    ;;
    jdkbin)
          cat >> $Output << "EOF"
cat > /etc/profile.d/openjdk.sh << "JDKEOF"
# Begin /etc/profile.d/openjdk.sh

# Set JAVA_HOME directory
JAVA_HOME=/opt/jdk

# Set ANT_HOME directory
ANT_HOME=/opt/ant

# Adjust PATH
pathappend $JAVA_HOME/bin PATH
pathappend $ANT_HOME/bin PATH

pathappend $JAVA_HOME/include       C_INCLUDE_PATH
pathappend $JAVA_HOME/include/linux C_INCLUDE_PATH
pathappend $JAVA_HOME/include       CPLUS_INCLUDE_PATH
pathappend $JAVA_HOME/include/linux CPLUS_INCLUDE_PATH

# Auto Java CLASSPATH
# Copy jar files to, or create symlinks in this directory

AUTO_CLASSPATH_DIR=/usr/share/java

pathprepend . CLASSPATH

for dir in `find ${AUTO_CLASSPATH_DIR} -type d 2>/dev/null`; do
    pathappend $dir CLASSPATH
done

for jar in `find ${AUTO_CLASSPATH_DIR} -name "*.jar" 2>/dev/null`; do
    pathappend $jar CLASSPATH
done

export JAVA_HOME ANT_HOME CLASSPATH C_INCLUDE_PATH CPLUS_INCLUDE_PATH
unset AUTO_CLASSPATH_DIR dir jar

# End /etc/profile.d/openjdk.sh
JDKEOF
cat >> /etc/profile.d/extrapaths.sh << "EXTRAEOF"
# Begin Java addition
if ! [ -n $MANPATH ]; then
  MANPATH=:/opt/jdk/man
else
  pathappend /opt/jdk/man       MANPATH
fi
# End Java addition
EXTRAEOF
cat >> /etc/man_db.conf << "MANDBEOF"
MANDATORY_MANPATH     /opt/jdk/man
MANPATH_MAP           /opt/jdk/bin     /opt/jdk/man
MANDB_MAP             /opt/jdk/man     /var/cache/man/jdk
MANDBEOF
mkdir -p /var/cache/man
mandb -c /opt/jdk/man
if ! $AS_ROOT; then
  chgrp install /opt/jdk/jre
  chmod 1775 /opt/jdk/jre
  chgrp install /opt/jdk/jre/{lib,bin}
  chmod 1775 /opt/jdk/jre/{lib,bin}
  chgrp install /opt/jdk/man/man1
  chmod 1775 /opt/jdk/man/man1
fi
EOF
if $as_root; then
  echo "chown -h -R root:root /opt/\${SrcName}bin" >> $Output
else
  echo "chown -h -R jdkbin:jdkbin /opt/\${SrcName}bin
chown jdkbin:jdkbin /etc/profile.d/openjdk.sh" >> $Output
fi
    ;;
    krb5)
          cat >> $Output << "EOF"
if [ "$SYSTEMD" = yes ]; then
  install -m 644 ${blfsfiles}/service/krb5-{kadmind.service,kdc.service,kpropd.service,kpropd@.service,kpropd.socket} /usr/lib/systemd/system
  if ! $AS_ROOT; then chown krb5:krb5 /usr/lib/systemd/system/krb5-*; fi
fi
EOF
    ;;
    libgphoto2)
          cat >> $Output << "EOF"
rm -rf  /usr/include/gphoto2/gphoto2
rm -rf /opt/qt # qt4 will create this symlink
if [ ! -d /usr/lib/udev/rules.d ]; then
  install -v -m0755 -d /usr/lib/udev/rules.d
fi
touch /usr/lib/udev/rules.d/40-gphoto.rules
if ! $AS_ROOT; then
  chown libgphoto2:libgphoto2 /usr/lib/udev/rules.d/40-gphoto.rules
  chgrp install /opt/qt4
  chmod 1775 /opt/qt4
  chgrp install /opt/qt4/bin
  chmod 1775 /opt/qt4/bin
fi
EOF
    ;;
    libvirt)
          cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/conf-files/libvirtd.conf.d /etc/conf.d/libvirtd
install -D -m644 ${blfsfiles}/conf-files/libvirtd-guests.conf.d /etc/conf.d/libvirt-guests
if [ "$SYSTEMD" = yes ]; then
  install -D -m644 ${blfsfiles}/conf-files/libvirt.tmpfiles.d /usr/lib/tmpfiles.d/libvirt.conf
fi
EOF
if ! $as_root; then
          cat >> $Output << "EOF"
chown libvirt:libvirt /etc/conf.d/{libvirtd,libvirt-guests}
EOF
  if [ "$SYSTEMD" = yes ]; then
          cat >> $Output << "EOF"
chown libvirt:libvirt /usr/lib/tmpfiles.d/libvirt.conf
EOF
  fi
fi
    ;;
    linux-pam)   #/etc/pam.d
          cat >> $Output << "EOF"
chown root /usr/bin/unix_chkpwd
chmod -v 4755 /usr/bin/unix_chkpwd
cat > /etc/pam.d/other << "PAMEND"
# Begin /etc/pam.d/other
auth            required        pam_unix.so     nullok
account         required        pam_unix.so
session         required        pam_unix.so
password        required        pam_unix.so     nullok
# End /etc/pam.d/other
PAMEND
cat > /etc/security/limits.conf << "_EOT"
# Begin /etc/security/limits.conf

*               -       rtprio          0
*               -       nice            0
@audio          -       rtprio          65
@audio          -       nice           -10
@audio          -       memlock         40000

# End /etc/security/limits.conf
_EOT
if ! $AS_ROOT; then chown linux-pam:linux-pam /etc/security/limits.conf; fi
EOF
    ;;
    lvm2)
           cat >> $Output << "EOF"
if [ "$SYSTEMD" = yes ]; then
  install -D -m644 ${blfsfiles}/service/dmeventd.service /usr/lib/systemd/system/dmeventd.service
  install -D -m644 ${blfsfiles}/service/dmeventd.socket /usr/lib/systemd/system/dmeventd.socket
  ln -sf ../dmeventd.socket /usr/lib/systemd/system/sockets.target.wants/dmeventd.socket
  install -D -m644 ${blfsfiles}/service/lvm-monitoring.service /usr/lib/systemd/system/lvm-monitoring.service
  install -D -m644 ${blfsfiles}/service/lvmetad.service /usr/lib/systemd/system/lvmetad.service
  install -D -m644 ${blfsfiles}/service/lvmetad.socket /usr/lib/systemd/system/lvmetad.socket
  ln -sf ../lvmetad.socket /usr/lib/systemd/system/sockets.target.wants/lvmetad.socket
  if ! $AS_ROOT; then
    chown lvm2:lvm2 /usr/lib/systemd/system/{dmeventd.*,lvm*}
    chown -h lvm2:lvm2 /usr/lib/systemd/system/sockets.target.wants/{dmeventd.*,lvmetad.*}
  fi
fi
EOF
    ;;
    mariadb)
          cat >> $Output << "EOF"
if [ "$SYSTEMD" = yes ]; then
  install -Dm755 ${blfsfiles}/service/mariadb-post.sh /usr/bin/mysqld-post
  install -m644 ${blfsfiles}/service/mariadb.service /usr/lib/systemd/system/mysqld.service
  install -m644 ${blfsfiles}/conf-files/mariadb-tmpfile.conf /usr/lib/tmpfiles.d/mysql.conf
  if ! $AS_ROOT; then
    chown mariadb:mariadb /usr/lib/systemd/system/mysqld.service
    chown mariadb:mariadb /usr/bin/mysqld-post
    chown mariadb:mariadb /usr/lib/tmpfiles.d/mysql.conf
  fi
  echo "*****************************************************************"
  echo "*                                                               *"
  echo "* The mysql root password is currently blank.                   *"
  echo "* The first time you start the mysql daemon, do                 *"
  echo "* /usr/bin/mysql_secure_installation to set up the password     *"
  echo "*                                                               *"
  echo "*****************************************************************"
else
  echo "*****************************************************************"
  echo "*                                                               *"
  echo "* The mysql root password is currently blank.                   *"
  echo "* After this do: mysqld_safe --user=mysql 2>&1 >/dev/null &     *"
  echo "* to start the mysql server                                     *" 
  echo "* and /usr/bin/mysql_secure_installation to set up the password *"
  echo "*                                                               *"
  echo "*****************************************************************"
fi
groupadd -g 40 mysql
useradd -c "MySQL Server" -d /srv/mysql -g mysql -s /bin/false -u 40 mysql
mysql_install_db --basedir=/usr --datadir=/srv/mysql --user=mysql
chgrp -v mysql /srv/mysql{,/test,/mysql}
install -v -m755 -o mysql -g mysql -d /var/run/mysqld
EOF
    ;;
    nettle) # remove static libs
          cat >> $Output << "EOF"
rm -f /usr/lib/{libhogweed,libnettle}.a
EOF
    ;;
    nvidia)
echo "depmod \$(cat /usr/lib/modules/${_extramodules}/version)" >> $Output
    ;;
    openjdk)
          cat >> $Output << "EOF"
cd /opt/jdk
bin/keytool -list -keystore jre/lib/security/cacerts
install -m644 ${blfsfiles}/mkcacerts /opt/jdk/bin
chmod -c 0755 /opt/jdk/bin/mkcacerts
if [ -e /opt/jdk/jre/lib/security/cacerts ]; then
  mv /opt/jdk/jre/lib/security/cacerts /opt/jdk/jre/lib/security/cacerts-old
fi
/opt/jdk/bin/mkcacerts -d "/etc/ssl/certs/"  -k "/opt/jdk/bin/keytool" \
                       -s "/usr/bin/openssl" -o "/opt/jdk/jre/lib/security/cacerts"
EOF
if ! $as_root; then
  echo "chown openjdk:openjdk /opt/jdk/{bin/mkcacerts,jre/lib/security/cacerts}" >> $Output
fi
    ;;
    openssl) # install /etc/pam.d for linux-pam
          cat >> $Output << "EOF"
install -v -m755 -d /etc/pam.d
EOF
    ;;
    pciutils) # run update-pciids
          cat >> $Output << "EOF"
update-pciids
EOF
    ;;
    pulseaudio)
          cat >> $Output << "EOF"
groupadd -g 58 pulse
groupadd -g 59 pulse-access
useradd -c "Pulseaudio User" -d /var/run/pulse -g pulse \
        -s /bin/false -u 58 pulse
usermod -a -G audio pulse
sed -e '/exit-idle-time/iexit-idle-time=0' \
    -i  /etc/pulse/daemon.conf
EOF
    ;;
    py3cairo) # put the python symlink back to python2
          cat >> $Output << "EOF"
rm /usr/bin/python
ln -svf python2 /usr/bin/python
if ! $AS_ROOT; then chown -h python2:python2 /usr/bin/python; fi
EOF
    ;;
    python2)
          cat >> $Output << "EOF"
mv /usr/bin/2to3{,-2.7}
EOF
    ;;
    python3)
          cat >> $Output << "EOF"
cat > /etc/profile.d/python3.sh << "PYEOF"
EOF
echo "export PYTHONDOCS=/usr/share/doc/python-${Python3vers}/html" >> $Output
          cat >> $Output << "EOF"
PYEOF
if ! $AS_ROOT; then chown python3:python3 /etc/profile.d/python3.sh; fi
EOF
    ;;
    qemu)
          cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/conf-files/65-kvm.rules /usr/lib/udev/rules.d/
chmod u+s /usr/lib/qemu/qemu-bridge-helper
echo "allow br0" > /etc/qemu/bridge.conf.sample
EOF
if ! $as_root; then
          cat >> $Output << "EOF"
chown qemu:qemu /usr/lib/udev/rules.d/65-kvm.rules
chown qemu:qemu /etc/qemu/bridge.conf.sample
EOF
fi
    ;;
    qt4)
          cat >> $Output << "EOF"
mv /opt/qt{4,-4.8.6}
ln -sfv qt-4.8.6 /opt/qt4
EOF
    ;;
    samba) # install systemd files
          cat >> $Output << "EOF"
if [ "$SYSTEMD" = yes ]; then
  install -m644 ${blfsfiles}/service/{samba.service,nmbd.service,smbd.service,smbd@.service,swat@.service,winbindd.service} /usr/lib/systemd/system
  install -m644 ${blfsfiles}/service/{smbd.socket,swat.socket} /usr/lib/systemd/system/
  install -m644 ${blfsfiles}/conf-files/samba.conf.d /etc/conf.d/samba
  install -D -m644 ${blfsfiles}/conf-files/samba.conf /usr/lib/tmpfiles.d/samba.conf
  if ! $AS_ROOT; then
    chown samba:samba /usr/lib/systemd/system/{samba.service,nmbd.service,smbd.service,smbd@.service,swat@.service,winbindd.service,smbd.socket,swat.socket}
    chown samba:samba /etc/conf.d/samba
    chown samba:samba /usr/lib/tmpfiles.d/samba.conf
  fi
fi
install -D -m644 ${blfsfiles}/conf-files/samba.pam /etc/pam.d/samba
install -d -m1777 /var/spool/samba
if ! $AS_ROOT; then
  chown samba:samba /etc/pam.d/samba
  chown samba:samba /var/spool/samba
fi
EOF
    ;;
    speechd)
          cat >> $Output << "EOF"
if [ "$SYSTEMD" = yes ]; then
  install -Dm644 ${blfsfiles}/service/speechd.service /usr/lib/systemd/system/speech-dispatcherd.service
  if ! $AS_ROOT; then chown speechd:speechd /usr/lib/systemd/system/speech-dispatcherd.service; fi
  install -v -d /var/log/speech-dispatcher
fi
EOF
    ;;
    squid)
          cat >> $Output << "EOF"
touch /var/cache/squid/cache.log
if $AS_ROOT; then # create the proxy user
  groupadd -g 38 proxy && useradd -c "Squid Cache User" -d /var/cache/squid -u 38 -g proxy -s /bin/false proxy
fi
chown -R proxy:proxy /var/cache/squid
install -v -d /var/log/squid
touch /var/log/squid/access.log
chown -R proxy:proxy /var/log/squid
if [ "$SYSTEMD" = yes ]; then
  install -Dm644 ${blfsfiles}/service/squid.service /usr/lib/systemd/system/squid.service
  install -Dm644 ${blfsfiles}/conf-files/squid.tmpfiles /usr/lib/tmpfiles.d/squid.conf
  if ! $AS_ROOT; then
    chown squid:squid /usr/lib/systemd/system/squid.service
    chown squid:squid /usr/lib/tmpfiles.d/squid.conf
  fi
else
  cp ${blfsfiles}/squid /etc/rc.d/init.d
  chmod 755 /etc/rc.d/init.d/squid
  for rcnum in 0 1 2 6; do
    ln -svf ../init.d/squid /etc/rc.d/rc${rcnum}.d/K29squid
  done
  for rcnum in 3 4 5; do
    ln -svf ../init.d/squid /etc/rc.d/rc${rcnum}.d/S35squid
  done
  if ! $AS_ROOT; then 
    chown squid:squid /etc/rc.d/init.d/squid
    chown -h squid:squid /etc/rc.d/*/K29squid
    chown -h squid:squid /etc/rc.d/*/S35squid
  fi
fi
echo "Set up the cache dirs"
squid -z > /dev/null 2>&1
EOF
    ;;
    tk) # delete .python2 and 3 because they need to be reinstalled with tk support
          cat >> $Output << "EOF"
rm ${PkgUserDir}/{python2/.python2,python3/.python3}
EOF
    ;;
    upower) # make sure /var/lib/upower exists
          cat >> $Output << "EOF"
if [ ! -d /var/lib/upower ]; then
    install -v -m0755 -d /var/lib/upower
    if ! $AS_ROOT; then chgrp upower /var/lib/upower; fi
fi
EOF
    ;;
    xfce4-session)
          cat >> $Output << "EOF"
echo "exec dbus-launch --exit-with-session xfce4-session" > ~/.xinitrc
echo john ${HOSTNAME} = NOPASSWD: /usr/lib/xfce4/session/xfsm-shutdown-helper \
  >> /etc/sudoers
echo "********************************************************************"
echo "Change last line in /etc/sudoers file to your username and hostname"
echo "********************************************************************"
EOF
    ;;
    $xlib)
          if [[ "$XORG_PREFIX" != "/usr" ]]; then # set up symlinks
            cat >> $Output << "EOF"
ln -sv $XORG_PREFIX/lib/X11 /usr/lib/X11
ln -sv $XORG_PREFIX/include/X11 /usr/include/X11
ln -sv $XORG_PREFIX /usr/X11R6
EOF
          fi
    ;;
esac
if [[ "$Section" != blfs ]]; then
cat >> $Output << "EOF"
ldconfig
else
  echo -e "\033[1mCan install $PkgName\033[0m"
fi
else
echo -e "\e[1;32mCan't install $PkgName\e[0m"
echo -e "\e[0;34munmet dependencies are:"; tput sgr0
echo -e '\e[0;31m'${rtrnDepNotMet[@]}; tput sgr0
fi
EOF
fi
cat >> $Output << "EOF"
}
EOF
} #end closefunction
#
setuplinks () { # setup preprocessing
case $pkgname in
    alsa-utils)
        doFirst="chgrp install /usr/share/man/* && chmod g+w,o+t /usr/share/man/*"
        links=""
    ;;
    appdata-tools)
        doFirst=""
        links="/usr/share/aclocal/appdata-xml.m4 /usr/bin/appdata-validate" #remove, installed by appstream-glib
    ;;
    avahi)
        doFirst="groupadd -fg 86 netdev"
        links=""
    ;;
    avr-binutils)
        doFirst="if [ ! -d /usr/x86_64-unknown-linux-gnu ]; then
  install -v -m755 -d /usr/x86_64-unknown-linux-gnu
fi
chgrp install /usr/{x86_64-unknown-linux-gnu,lib/ldscripts} && chmod g+w,o+t /usr/{x86_64-unknown-linux-gnu,lib/ldscripts}"
        links=""
    ;;
    avr-gcc)
        doFirst="chgrp install /usr/lib/gcc && chmod g+w,o+t /usr/lib/gcc"
        links=""
    ;;
    avr-libc)
        doFirst="chgrp install /usr && chmod g+w,o+t /usr"
        links=""
    ;;
    bind)
        doFirst='groupadd -g 20 named && useradd -c "BIND Owner" -g named -s /bin/false -u 20 named && install -d -m777 -o named -g named /srv/named'
        links=""
    ;;
    chromium)
        doFirst="ln -svf libncurses.so.5.9 /usr/lib/libtinfo.so.5"
        links=""
    ;;
    colord)
        doFirst="chgrp install /usr/share/{color,locale/pt_PT/LC_MESSAGES} && chmod 1775 /usr/share/{color,locale/pt_PT/LC_MESSAGES}"
        links="/usr/share/glib-2.0/schemas/gschemas.compiled"
    ;;
    cracklib)
        doFirst="chgrp install /usr/share/dict && chmod 1775 /usr/share/dict"
        links=""
    ;;
    cups)
        doFirst='useradd -c "Print Service User" -d /var/spool/cups -g lp -s /bin/false -u 9 lp && groupadd -g 19 lpadmin && usermod -a -G lpadmin john && chgrp install /var/spool && chmod g+w,o+t /var/spool'
        links="/etc/cups/{cupsd.conf,cupsd.conf.default,interfaces,ppd,snmp.conf,ssl} /run/cups/certs /var/{cache/cups,cache/cups/rss,spool/cups,spool/cups/*} /usr/sbin/cupsd /usr/lib/cups/{cgi-bin,cgi-bin/*.cgi} /usr/lib/cups/filter/{commandtops,pstops} /usr/lib/cups/{notifier,notifier/dbus}"
    ;;
    cups-filters)
        doFirst=""
        links="/usr/lib/cups/backend /usr/lib/cups/filter"
    ;;
    dbus)
        doFirst='groupadd -g 18 messagebus && useradd -c "D-Bus Message Daemon User" -d /var/run/dbus -u 18 -g messagebus -s /bin/false messagebus'
        links=""
    ;;
    faad2)
        doFirst="chgrp install /usr/share/man && chmod g+w,o+t /usr/share/man"
        links=""
    ;;
    farstream)
        doFirst=""
        links="/usr/lib/gstreamer-1.0/{libfsrawconference.*,libfsrtpconference.*,libfsmsnconference.*,libfsfunnel.*,libfsrtcpfilter.*,libfsvideoanyrate.*}"
    ;;
    firewall)
        doFirst="chgrp install /etc/rc.d && chmod 1775 /etc/rc.d"
        links=""
    ;;
    foomatic)
        doFirst="if [ -e /usr/share/man/man1/foomatic-rip.1 ]; then rm /usr/share/man/man1/foomatic-rip.1; fi"
        links="/usr/lib/cups/filter /usr/lib/cups/backend"
    ;;
    gconf|gvfs|geoclue)
        doFirst=""
        links="/usr/share/glib-2.0/schemas/gschemas.compiled /usr/lib/gio/modules/giomodule.cache"
    ;;
    gdk-pixbuf)
        doFirst=""
        links="/usr/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache"
    ;;
    glib)
        doFirst=""
        links="/usr/share/aclocal/{glib-2.0.m4,glib-gettext.m4,gsettings.m4}"
    ;;
    gnome-clocks)
        doFirst=""
        links="/usr/share/glib-2.0/schemas/gschemas.compiled /usr/share/icons/hicolor/icon-theme.cache /usr/share/icons/HighContrast/icon-theme.cache"
    ;;
    gnm-thems-stndrd)
        doFirst=""
        links="/usr/share/icons/HighContrast/icon-theme.cache"
    ;;
    gperf) # has to re-create /usr/share/info/dir
        doFirst=""
        links="/usr/share/info/dir"
    ;;
    gtkplus2)
        doFirst=""
        links="/usr/bin/gtk-update-icon-cache /usr/share/man/man1/gtk-update-icon-cache.1"
    ;;
    gtkplus3) # has to own /usr/bin/gtk-update-icon-cache
        doFirst=""
        links="/usr/share/glib-2.0/schemas/gschemas.compiled /usr/share/icons/hicolor/icon-theme.cache /usr/bin/gtk-update-icon-cache /usr/share/man/man1/gtk-update-icon-cache.1"
    ;;
    gutenprint)
        doFirst=""
        links="/usr/lib/cups/driver /usr/lib/cups/filter"
    ;;
    jdkbin) # has to create dir under /opt
        doFirst="chgrp install /opt && chmod 1775 /opt"
        links=""
    ;;
    libcanberra)
        doFirst=""
        links="/etc/gconf/gconf.xml.defaults/*"
    ;;
    librsvg)
        doFirst=""
        links="/usr/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache"
    ;;
    libvdpau)
        doFirst="if [ -d /usr/lib/vdpau ]; then # Nvidia already installed these
  chgrp install /usr/lib/vdpau
  chmod 1775    /usr/lib/vdpau
  chown -h libvdpau:libvdpau /usr/lib/{libvdpau.so,libvdpau.so.1}
fi"
        links=""
    ;;
    mutter)
        doFirst=""
        links="/usr/share/GConf/gsettings/mutter-schemas.convert /usr/share/gnome-control-center/keybindings/50-mutter-{navigation.xml,system.xml,windows.xml} /usr/share/man/man1/mutter.1 /usr/share/gtk-doc/html/meta/* /usr/share/glib-2.0/schemas/gschemas.compiled"
    ;;
    nautilus-sendto)
        doFirst=""
        links="/usr/share/glib-2.0/schemas/gschemas.compiled /usr/lib/nautilus-sendto/plugins/{libnstburn.la,libnstburn.so,libnstgajim.la,libnstgajim.so,libnstpidgin.la,libnstpidgin.so,libnstremovable_devices.la,libnstremovable_devices.so} /usr/bin/nautilus-sendto"
    ;;
    net-tools) # overwrites these installed by inetutils
        doFirst=""
        links="/bin/{hostname,dnsdomainname} /sbin/ifconfig"
    ;;
    nvidia)
        doFirst="chgrp install /usr/lib/modules && chmod 1775 /usr/lib/modules"
        links=""
    ;;
    nvidia-libgl)
        doFirst="rm -rf /usr/lib/xorg/modules/extensions/libglx.so
rm -rf /usr/lib/{libGL.so,libGL.so.1,libEGL.so,libEGL.so.1,libGLESv1_CM.so,libGLESv1_CM.so.1,libGLESv2.so,libGLESv2.so.2}"
        links=""
    ;;
    nvidia-utils)
        doFirst="rm -rf /usr/lib/nvidia/xorg/modules/extensions/libglx.so"
        links=""
    ;;
    openjdk)
        doFirst=""
        links="/opt/jdk"
    ;;
    openobex)
        doFirst="groupadd -g 90 plugdev"
        links=""
    ;;
    openssh)
        doFirst="install -v -m700 -d /var/lib/sshd && chown -v root:sys /var/lib/sshd && groupadd -g 50 sshd && useradd -c 'sshd PrivSep' -d /var/lib/sshd -g sshd -s /bin/false -u 50 sshd"
        links=""
    ;;
    php) # needs to write to /etc/httpd/httpd.conf
        doFirst="chgrp install /etc/httpd && chmod 1775 /etc/httpd"
        links="/etc/httpd/httpd.conf"
    ;;
    polkit)
        doFirst=""
        links="/usr/lib/polkit-1/polkit-agent-helper-1 /usr/bin/pkexec /etc/polkit-1/rules.d /usr/share/polkit-1/rules.d"
    ;;
    py3cairo) # change symlink python so it points to python3, not python2
        doFirst="rm /usr/bin/python && ln -svf python3 /usr/bin/python"
        links=""
    ;;
    py3-dbus) # give access to /usr/include/dbus-1.0/dbus/dbus-python.h
        doFirst=""
        links="/usr/include/dbus-1.0/dbus/dbus-python.h /usr/share/doc/{dbus-python-1.2.0,dbus-python-1.2.0/*} /usr/lib/pkgconfig/dbus-python.pc"
    ;;
    py2-gobject3)
        doFirst=""
        links="/usr/lib/python2.7/site-packages/gi/{repository/*,overrides/*,_gi*,*.p*}"
    ;;
    py3-gobject3)
        doFirst=""
        links="/usr/include/pygobject-3.0/pygobject.h /usr/lib/pkgconfig/pygobject-3.0.pc"
    ;;
    python2) # on reinstall, needs to own /usr/bin/2to3
        doFirst=""
        links="/usr/bin/2to3"
    ;;
    samba)
        doFirst="chgrp install /usr/lib/perl5 && chmod 1775 /usr/lib/perl5"
        links=""
    ;;
    shadow)
        doFirst=""
        links="/bin/su /bin/passwd /etc/pam.d/other /etc/pam.d/system-auth"
    ;;
    shrd-mime-info)
        doFirst="if [ -d /usr/share/mime/packages ]; then
  chgrp install /usr/share/mime/packages
  chmod 1775 /usr/share/mime/packages
fi"
        links="/usr/share/mime/packages/freedesktop.org.xml"
    ;;
    squid)
        doFirst='groupadd -g 38 proxy && useradd -c "Squid Cache User" -d /var/cache/squid -u 38 -g proxy -s /bin/false proxy'
        links=""
    ;;
    sudo)
        doFirst="chgrp install /var/lib && chmod 1775 /var/lib"
        links=""
    ;;
    systemd)
        doFirst=""
        links="/etc/pam.d/systemd-user"
    ;;
    talloc)
        doFirst="if [ -e /usr/lib/python2.7/site-packages/talloc.so ]; then chown talloc:talloc /usr/lib/python2.7/site-packages/talloc.so; fi"
        links=""
    ;;
    tdb) # these files were installed by samba
        doFirst=""
        links="/usr/bin/{tdbbackup,tdbdump,tdbrestore,tdbtool} /usr/lib/python2.7/site-packages/tdb.so /usr/share/man/man8/{tdbbackup.8,tdbdump.8,tdbrestore.8,tdbtool.8}"
    ;;
    traceroute)
        doFirst="if [ -e /bin/traceroute ]; then rm /bin/traceroute; fi"
        links=""
    ;;
    xboard)
        doFirst=""
        links="/usr/share/mime/packages/xboard.xml"
    ;;
    xorg-server)
        doFirst="if [ -e /etc/sysconfig/createfiles ]; then
  chown root:install /etc/sysconfig/createfiles
  chmod 664 /etc/sysconfig/createfiles
fi"
        links=""
    ;;
    at-spi2-atk|caribou|gdm|gnome-chess|gnome-keyring|gnome-shell|gnome-shell-ext|gset-dsktp-schms|gst-plgns-bad|gst-plgns-bad0|ibus|libgnomekbd|telepathy-logr|yelp)
        doFirst=""
        links="/usr/share/glib-2.0/schemas/gschemas.compiled"
    ;;
    epiphany|evol-data-server|folks|gnome-calculator|gnome-contacts|gnome-dictionary|gnome-set-daemon|metacity|tpthymisscntrl)
        doFirst=""
        links="/usr/share/glib-2.0/schemas/gschemas.compiled"
    ;;
    gnm-power-mngr|gnome-sys-monitr|gnome-scrnshot|gucharmap|mousetweaks|vino|gedit|epiphany-ext)
        doFirst=""
        links="/usr/share/glib-2.0/schemas/gschemas.compiled"
    ;;
    gst-plgns-good|aisleriot|file-roller|evince|gnome-applets|evolution|ntwrk-mngr-applt|empathy|gnome-nettool|libpeas|totem|libgweather|gcr|goa|gnome-session|gnome-terminal|tracker)
        doFirst=""
        links="/usr/share/glib-2.0/schemas/gschemas.compiled /etc/gconf/gconf.xml.defaults/* /usr/share/icons/hicolor/icon-theme.cache"
    ;;
    dconf|nautilus|gnome-bluetooth|gnm-user-share|gnome-cntrl-cntr|baobab|alacarte|brasero|cheese|eog|gnome-disk-util|gnome-serch-tool|gnome-system-mon|gnome-pwr-mngr|netwrk-mngr-app|rhythmbox)
        doFirst=""
        links="/usr/share/glib-2.0/schemas/gschemas.compiled /usr/share/icons/hicolor/icon-theme.cache"
    ;;
    gnome-icon-thme|gnm-icn-thme-ext|gnm-icn-thme-sym)
        doFirst=""
        links="/usr/share/icons/gnome/icon-theme.cache"
    ;;
    accerciser|gnome-colr-mngr|gnome-tweak-tool|xfce4-session)
        doFirst=""
        links="/usr/share/icons/hicolor/icon-theme.cache"
    ;;
    *)
        doFirst=""
        links=""
    ;;
esac
} # end setuplinks
#
resolvelinks() {
echo "resolvelinks () {
$doFirst
for link in $links; do
  if [ -e "\$link" ]; then
    chown -h \$PkgName:\$PkgName \$link # change owner to package user so can overwrite
  fi
done
return
}" >> $Output
} #end resolvelinks
#
perlmodwrite () {
# $1 is the package name, $2 is the src version.tar.gz name, $3 is the cpan URL, $4 is the awk print number, usually 1
needsproxy=true # will use wget so need to set wgetopts
cat << "EOF"
wgetopts="-e use_proxy=yes -e http_proxy=$http_proxy -e ftp_proxy=$ftp_proxy"
EOF
echo "$1=\${SrcName}$2
if [ ! -e \$$1 ]; then
  wget \$wgetopts ${3}/\${${1}}
fi
cd \$(tar vxf \$$1 | awk -F\/ 'END{print \$$4}')" >> $Output
} # end perlmodwrite
#
wgetwrite () {
# $1 is the file to download and $2 is the URL
cat << "EOF"
wgetopts="-e use_proxy=yes -e http_proxy=$http_proxy -e ftp_proxy=$ftp_proxy -e https_proxy=$https_proxy"
EOF
echo "srcpkg=\"${1}\""
case $srcname in
   ccache-|docutils-|iw-|setuptools-) # needs --no-check-certificate on wget
           echo "if [ -e \${sourcedir}/\${srcpkg} ]; then # src exists so copy it to current dir
  cp \${sourcedir}/\${SrcName}*.* . 
elif [ -e \${HOME}/\${srcpkg} ]; then # src exists in current dir - use that
  echo \"\$srcpkg already in current dir - will use that\"
else
  wget \$wgetopts $ncc ${2}\${srcpkg}
  if [ \$? -ne 0 ]; then
    echo \"Failed to download \$srcpkg\"
    echo \"Aborting\"
    exit 1
  fi
fi" >> $Output
   ;;
   *)
           echo "if [ -e \${sourcedir}/\${srcpkg} ]; then # src exists so copy it to current dir
  cp \${sourcedir}/\${SrcName}*.* . 
elif [ -e \${HOME}/\${srcpkg} ]; then # src exists in current dir - use that
  echo \"\$srcpkg already in current dir - will use that\"
else
  wget \$wgetopts ${2}\${srcpkg}
  if [ \$? -ne 0 ]; then
    echo \"Failed to download \$srcpkg\"
    echo \"Aborting\"
    exit 1
  fi
fi" >> $Output
   ;;
esac
case $srcname in
   chromium)
           cat << "EOF"
cd src
EOF
   ;;
   espeak-) # a zip file downloaded
           cat << "EOF"
espeakDir="${srcpkg%.zip}"
unzip $srcpkg
cd $espeakDir
EOF
   ;;
   portaudio-) # untars to portaudio
     echo "tar zxf \$srcpkg
cd portaudio" >> $Output
   ;;
   *)
     echo "cd \$(tar vxf \$srcpkg | awk -F\/ 'END{print \$1}')" >> $Output
   ;;
esac
} # end wgetwrite
#
tryWgetSrc () {
cat << "EOF"
  if hash wget 2>/dev/null; then # wget installed so try and get the source
    echo "Can't find the src file"
    echo "Enter the url and filename and I'll try and wget it:"
    read URLFileName
    ipadd=$(ip addr | grep 192 | awk '{print $2}' | awk -F\/ '{print $1}')
    proxyset=http://${ipadd}:3128/
    http_proxy=$proxyset
    ftp_proxy=$proxyset
    https_proxy=$proxyset
    wgetopts="-e use_proxy=yes -e http_proxy=$http_proxy -e ftp_proxy=$ftp_proxy -e https_proxy=$https_proxy"
    wget $wgetopts $URLFileName
  else
    echo "No source file found for $SrcName - exit now"
    exit 1
  fi
EOF
} # end tryWgetSrc
#
gnmPkgVers () {
# $1 is the source name
# $2 is the compressed source package name
# $3 is the extension name to trim to, usually tar
local srcnm=$1
local spkg=$2
local trm=$3
local fext="${spkg#*${srcnm}}" # this is vers # plus .tar.xz or similar
local vnum="${fext%.${trm}*}" # this is the full vers # e.g 0.16.2
gnmvers=$(echo $vnum | awk -F\. '{print $1"."$2}') # this is the required version in gnome
revsrcnm=${srcnm%?} # src name without the trailing -
} # end gnmPkgVers
#
setHostProxy () {
ipadd=$(ip addr | grep 192 | awk '{print $2}' | awk -F\/ '{print $1}')
proxyset=http://${ipadd}:3128/
http_proxy=$proxyset
ftp_proxy=$proxyset
all_proxy=socks://${ipadd}:3128/
https_proxy=$proxyset
hostwgetopts="-e use_proxy=yes -e http_proxy=$http_proxy -e ftp_proxy=$ftp_proxy"
} # end setHostProxy
#
setproxy () {
# need a function to setup the proxy settings in the build script
    cat << "EOF"
setproxy () {
ipadd=$(ip addr | grep 192 | awk '{print $2}' | awk -F\/ '{print $1}')
proxyset=http://${ipadd}:3128/
http_proxy=$proxyset
ftp_proxy=$proxyset
https_proxy=$proxyset
} # end setproxy
EOF
} # end setproxy
#
gnmComsWrite () {
local srcnm=$1
local pkgVersion=$2
gnmPkgVers $srcnm $pkgVersion tar
local pkgurl=${gnomeSource}/${revsrcnm}/${gnmvers}/
wgetwrite $pkgVersion $pkgurl
} # end gnmComsWrite
#
create_links () {
    cat << "EOF"
create_links() {
# create soname links
# $1 is the lib dir
# $2 is the library file to fix
local trimto="so"
local _truefile=""
local _soname=""
local _base=""
for libfile in $(find "$1" -name "${2}.so*"); do
  if [ -L $libfile ]; then
    case $libfile in
       *[0-9])
           _soname=$libfile
           _base=$(echo ${_soname} | sed -r 's/(.*).so.*/\1.so/')
       ;;
       *so)
           _base=$libfile
           _soname=${_base}.1
       ;;
       *".la")
           : # ignore la files
       ;;
       *)
           echo "sym link is $libfile"
       ;;
    esac
  elif [ -f $libfile ]; then
    _truefile=$libfile
  fi
  if [ -z $_soname ]; then
    _soname="${_truefile%${trimto}*}so.1"
    _base=$(echo ${_soname} | sed -r 's/(.*).so.*/\1.so/')
  fi
done
[[ -e "${_soname}" ]] || ln -s $_truefile $_soname
[[ -e "${_base}" ]] || ln -s $_soname $_base
chown -h nvidia-utils:nvidia-utils $_soname $_base
} # create_links
EOF
} # create_links
#
unpack () {
    cat << "EOF"
unpack () {
starttime=$( date +%s )
EOF
case $srcname in
   apache-ant-)
    cat << "EOF"
if [ -e ${sourcedir}/${SrcName}*-src.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* . # cp any patches as well
  cp ${sourcedir}/hamcrest-1.3.tgz .
  if [ $? -ne 0 ]; then
    echo "*** file hamcrest-1.3.tgz not present in $sourcedir ***
    echo "place it there to continue"
    exit 1
  fi
  cp ${sourcedir}/junit-4.11.jar .
  if [ $? -ne 0 ]; then
    echo "*** file junit-4.11.jar not present in $sourcedir ***
    echo "place it there to continue"
    exit 1
  fi
elif [ -e ${HOME}/${SrcName}*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
cd $(tar vxf ${SrcName}*-src.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   avr-binutils-) # usr the core/binutils source file
    cat << "EOF"
cp ${blfsfiles}/patches/avr/binutils*.patch .
cd $(tar vxf ${sourcedir}/binutils-*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   avr-gcc-) # use the core/gcc source file
    cat << "EOF"
cd $(tar vxf ${sourcedir}/gcc-*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   boost_)
    cat << "EOF"
if [ -e ${sourcedir}/${SrcName}*.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
elif [ -e ${HOME}/${SrcName}*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   certdata.txt) # copy certdata.txt to pkguser dir
    cat << "EOF"
if [ -e ${sourcedir}/${SrcName} ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName} .
elif [ -e ${HOME}/${SrcName} ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
EOF
   ;;
   chromium-)
# need depot_tools to use ninja
    cat << "EOF"
if [ ! -d depot_tools ]; then # download using git
  git clone https://chromium.googlesource.com/chromium/tools/depot_tools
fi
EOF
    needsproxy=true
    pkgvers=${srcname}39.0.2171.95.tar.xz
    pkgURL=https://commondatastorage.googleapis.com/chromium-browser-official/
    wgetwrite $pkgvers $pkgURL
   ;;
   coreutils-) # don't need to copy the source - already in place
    cat << "EOF"
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   cracklib-|libnl-) #  not cracklib-words or libnl-docs
    cat << "EOF"
if [ -e ${sourcedir}/${SrcName}[0-9]*.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
elif [ -e ${HOME}/${SrcName}[0-9]*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
cd $(tar vxf ${SrcName}[0-9]*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   cups-1.) # need a patch from patches/pst
    cat << "EOF"
cp ${blfsfiles}/patches/pst/*.patch .
if [ -e ${sourcedir}/${SrcName}*.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
elif [ -e ${HOME}/${SrcName}*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
# sources not in the book
   avr-libc-|ccache-|dialog|docutils-|dotconf-|espeak-|foomatic-filters-|iw-|libcdio-|libgphoto2-|libproxy-|libunwind-|libvirt-|media-player-info-|netctl-|nss-mdns-|pa_stable_|pycairo-|PySolFC-|pysol-sound-server-|ragel-|SDL2-|setuptools-|snappy-|speech-dispatcher-|tdb-|v4l-utils-|wavpack-|x264-|x265-)
     needsproxy=true # will use wget so need to set wgetopt
     case $srcname in
        avr-libc-)
            pkgvers=${srcname}1.8.0.tar.bz2
            pkgURL=http://download.savannah.gnu.org/releases/avr-libc/
        ;;
        ccache-)
            pkgvers=${srcname}3.2.1.tar.xz
            pkgURL=http://www.samba.org/ftp/ccache/
        ;;
        dialog)
            pkgvers=${srcname}.tar.gz
            pkgURL=ftp://invisible-island.net/dialog/
        ;;
        docutils-)
            pkgvers=${srcname}0.12.tar.gz
            pkgURL=http://downloads.sourceforge.net/docutils/
        ;;
        dotconf-)
            pkgvers=${srcname}1.3.tar.gz
            pkgURL=ftp://ftp.uwsg.indiana.edu/linux/gentoo/distfiles/
        ;;
        espeak-)
            pkgvers=${srcname}1.48.04-source.zip
            pkgURL=http://sourceforge.net/projects/espeak/files/espeak/espeak-1.48/
        ;;
        farstream-)
            pkgvers=${srcname}0.2.4.tar.gz
            pkgURL=http://freedesktop.org/software/farstream/releases/farstream/
        ;;
        foomatic-filters-)
            pkgvers=${srcname}4.0-current.tar.gz
            pkgURL=http://www.openprinting.org/download/foomatic/
        ;;
        iw-)
            pkgvers=${srcname}3.17.tar.xz
            pkgURL=https://www.kernel.org/pub/software/network/iw/
        ;;
        libcdio-)
            pkgvers=${srcname}0.93.tar.gz
            pkgURL=http://ftp.gnu.org/gnu/libcdio/
        ;;
        libgphoto2-)
            pkgvers=${srcname}2.5.5.1.tar.bz2
            pkgURL=http://sourceforge.net/projects/gphoto/files/libgphoto/2.5.5.1/
        ;;
        libproxy-)
            pkgvers=${srcname}0.4.11.tar.gz 
            pkgURL=http://libproxy.googlecode.com/files/
        ;;
        libunwind-)
            pkgvers=${srcname}1.1.tar.gz
            pkgURL=http://download.savannah.gnu.org/releases/libunwind/
        ;;
        libvirt-)
             pkgvers=${srcname}1.2.4.tar.gz
             pkgURL=http://libvirt.org/sources/
        ;;
        media-player-info-)
            pkgvers=${srcname}22.tar.gz
            pkgURL=http://www.freedesktop.org/software/media-player-info/
        ;;
        netctl-)
            pkgvers=${srcname}1.9.tar.xz
            pkgURL=ftp://ftp.archlinux.org/other/packages/netctl/
        ;;
        nss-mdns-)
            pkgvers=${srcname}0.10.tar.gz
            pkgURL=http://pkgs.fedoraproject.org/repo/pkgs/nss-mdns/nss-mdns-0.10.tar.gz/03938f17646efbb50aa70ba5f99f51d7/
        ;;
        pa_stable_) # portaudio
            pkgvers=${srcname}v19_20140130.tgz
            pkgURL=http://www.portaudio.com/archives/
        ;;
        pycairo-) # src for py3cairo
            pkgvers=${srcname}1.10.0.tar.bz2
            pkgURL=http://cairographics.org/releases/
        ;;
        PySolFC-)
            pkgvers=${srcname}2.0.tar.bz2
            pkgURL=http://downloads.sourceforge.net/pysolfc/
        ;;
        pysol-sound-server-)
            pkgvers=${srcname}3.01.tar.bz2
            pkgURL=http://www.pysol.org/download/pysol/
        ;;
        ragel-)
            pkgvers=${srcname}6.9.tar.gz
            pkgURL=http://fossies.org/linux/misc/
        ;;
        SDL2-)
            pkgvers=${srcname}2.0.3.tar.gz
            pkgURL=http://www.libsdl.org/release/
        ;;
        setuptools-)
            pkgvers=${srcname}3.6.tar.gz
            pkgURL=https://pypi.python.org/packages/source/s/setuptools/
        ;;
        snappy-)
            pkgvers=${srcname}1.1.1.tar.gz
            pkgURL=http://snappy.googlecode.com/files/
        ;;
        speech-dispatcher-)
            pkgvers=${srcname}0.8.1.tar.gz
            pkgURL=http://devel.freebsoft.org/pub/projects/speechd/
        ;;
        tdb-)
            pkgvers=${srcname}1.3.2.tar.gz
            pkgURL=http://www.samba.org/ftp/tdb/
        ;;
        v4l-utils-)
            pkgvers=${srcname}1.6.0.tar.bz2
            pkgURL=http://linuxtv.org/downloads/v4l-utils/
        ;;
        wavpack-)
            pkgvers=${srcname}4.70.0.tar.bz2
            pkgURL=http://wavpack.com/
        ;;
        x264-)
            pkgvers=last_stable_x264.tar.bz2
            pkgURL=ftp://ftp.videolan.org/pub/x264/snapshots/
        ;;
        x265-)
            pkgvers=1.1.tar.bz2
            pkgURL=https://bitbucket.org/multicoreware/x265/get/
        ;;
     esac
     wgetwrite $pkgvers $pkgURL
   ;;
   dbus-1) # don't need to copy the src if using systemd
     if [ "$SYSTEMD" = yes ]; then
       cat << "EOF"
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
     else
       cat << "EOF"
if [ -e ${sourcedir}/${SrcName}*.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* . # cp any patches as well
elif [ -e ${HOME}/${SrcName}*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
     fi
   ;;
   firefox-)
    cat << "EOF"
if [ -e ${sourcedir}/${SrcName}*.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
EOF
    cat << "EOF"
elif [ -e ${HOME}/${SrcName}*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   ghostscript-) # get the fonts too
     needsproxy=true # will use wget so need to set wgetopts
     cat << "EOF"
wgetopts="-e use_proxy=yes -e http_proxy=$http_proxy -e ftp_proxy=$ftp_proxy"
if [ -e ${sourcedir}/${SrcName}[0-9]*.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
elif [ -e ${HOME}/${SrcName}[0-9]*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
fontloc=http://downloads.sourceforge.net/gs-fonts
standardfonts=ghostscript-fonts-std-8.11.tar.gz
extraFont=gnu-gs-fonts-other-6.0.tar.gz
if [ ! -e $standardfonts ]; then
  wget $wgetopts ${fontloc}/gs-fonts/${standardfonts}
fi
if [ ! -e $extraFont ]; then
  wget $wgetopts ${fontloc}/gs-fonts/${extraFont}
fi
count=0
for fl in *fonts*; do
  fontfile[$count]=$fl
  ((count++))
done
cd $(tar vxf ${SrcName}[0-9]*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   gimp-) # make sure the help file is present. If not download it
     needsproxy=true # will use wget so need to set wgetopts
     cat << "EOF"
wgetopts="-e use_proxy=yes -e http_proxy=$http_proxy -e ftp_proxy=$ftp_proxy"
if [ -e ${sourcedir}/${SrcName}[0-9]*.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
elif [ -e ${HOME}/${SrcName}[0-9]*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
helpfile=gimp-help-2.8.2.tar.bz2
if [ ! -e $helpfile ]; then # download it
  wget $wgetopts http://mirror.hessmo.com/gimp/pub/gimp/help/${helpfile}
fi
cd $(tar vxf ${SrcName}[0-9]*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   git-|gnome-icon-theme-|gnome-shell-|docbook-xsl-|freetype-|polkit-|poppler-) #  git man-pages and htmldocs, gnome-icon-theme-extras and symbolic, gnome-shell-extensions, docbook-xml, freetype-doc, polkit-gnome, poppler-data
    cat << "EOF"
if [ -e ${sourcedir}/${SrcName}[0-9]*.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
elif [ -e ${HOME}/${SrcName}[0-9]*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
cd $(tar vxf ${SrcName}[0-9]*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
# get these libraries from gnome
   pangox-compat-)
     needsproxy=true # will use wget so need to set wgetopts
     gnmvers=""
     revsrcnm=""
     case $srcname in
#       glib-)
#          pkgvers=${srcname}2.42.0.tar.xz
#       ;;
#       glibmm-)
#          pkgvers=${srcname}2.40.0.tar.xz
#       ;;
#       glib-networking-)
#          pkgvers=${srcname}2.40.1.tar.xz
#       ;;
#       gobject-introspection-)
#          pkgvers=${srcname}1.40.0.tar.xz
#       ;;
#       json-glib-)
#          pkgvers=${srcname}1.0.2.tar.xz
#       ;;
#       libgee-)
#          pkgvers=${srcname}0.15.3.tar.xz
#       ;;
#       libglade-)
#          pkgvers=${srcname}2.6.4.tar.bz2
#       ;;
       pangox-compat-)
          pkgvers=${srcname}0.0.2.tar.xz
       ;;
#       rest-)
#          pkgvers=${srcname}0.7.92.tar.xz
#       ;;
     esac
     gnmComsWrite $srcname $pkgvers
   ;;
# get these x libraries sources if they're out of kilter with blfs
#  atk-|clutter-gtk-|gtk-vnc-)
#     needsproxy=true # will use wget so need to set wgetopts
#     gnmvers=""
#     revsrcnm=""
#     case $srcname in
#       atk-)
#          pkgvers=${srcname}2.12.0.tar.xz
#       ;;
#       at-spi2-atk)
#          pkgvers=${srcname}2.12.1.tar.xz
#       ;;
#       at-spi2-core-)
#          pkgvers=${srcname}2.12.0.tar.xz
#       ;;
#       clutter-gtk-)
#          pkgvers=${srcname}1.5.2.tar.xz
#       ;;
#       clutter-1.)
#          pkgvers=${srcname}.18.2.tar.xz
#          srcname=${srcname%??} # remove the 1.
#       ;;
#       cogl-)
#          pkgvers=${srcname}1.18.0.tar.xz
#       ;;
#       gdk-pixbuf-)
#          pkgvers=${srcname}2.30.7.tar.xz
#       ;;
#       gtk+-3.)
#          pkgvers=${srcname}.12.2.tar.xz
#          srcname=${srcname%??} # remove the 3.
#       ;;
#       gtkmm-3.)
#          pkgvers=${srcname}.12.0.tar.xz
#          srcname=${srcname%??} # remove the 3.
#       ;;
#       gtk-vnc-)
#          pkgvers=${srcname}0.5.3.tar.xz
#       ;;
#     esac
#     gnmComsWrite $srcname $pkgvers
#   ;;
#   cairomm-|colord-gtk-)
#     needsproxy=true # will use wget so need to set wgetopts
#     case $srcname in
#       cairomm-)
#          pkgvers=${srcname}1.11.2.tar.gz
#          pkgURL=http://cairographics.org/releases/
#       ;;
#       colord-gtk-)
#          pkgvers=${srcname}0.1.25.tar.xz
#          pkgURL=http://www.freedesktop.org/software/colord/releases/
#       ;;
#     esac
#     wgetwrite $pkgvers $pkgURL
#   ;;
# get gnomeplatform sources
    gnome-common-|gnome-js-common-|libgnome-keyring-|gnome-doc-utils-|yelp-tools-|seed-)
#   GConf-|dconf-|evolution-data-server-|folks-|gcr-|gjs-|gnome-common-|gnome-doc-utils-|gnome-js-common-|gnome-online-accounts-|gsettings-desktop-schemas-|gtkhtml-|gtksourceview-|libgdata-|libgnome-keyring-|libgnomekbd-|libgtop-|libgweather-|libpeas-|libsecret-|libwnck-|polkit-gnome-|seed-|totem-pl-parser-|vte-|yelp-tools-|yelp-xsl-)
     needsproxy=true # will use wget so need to set wgetopts
     gnmvers=""
     revsrcnm=""
     case $srcname in
#       GConf-)
#          pkgvers=${srcname}3.2.6.tar.xz
#       ;;
#       dconf-)
#          pkgvers=${srcname}0.20.0.tar.xz
#       ;;
#       evolution-data-server-)
#          pkgvers=${srcname}3.12.1.tar.xz
#       ;;
#       folks-)
#          pkgvers=${srcname}0.9.6.tar.xz
#       ;;
#       gcr-)
#          pkgvers=${srcname}3.12.0.tar.xz
#       ;;
#       gjs-)
#          pkgvers=${srcname}1.40.1.tar.xz
#       ;;
       gnome-common-)
          pkgvers=${srcname}3.14.0.tar.xz
       ;;
       gnome-doc-utils-)
          pkgvers=${srcname}0.20.10.tar.xz
       ;;
       gnome-js-common-)
          pkgvers=${srcname}0.1.2.tar.bz2
       ;;
#       gnome-online-accounts-)
#          pkgvers=${srcname}3.12.1.tar.xz
#       ;;
#       gsettings-desktop-schemas-)
#          pkgvers=${srcname}3.12.0.tar.xz
#       ;;
#       gtkhtml-)
#          pkgvers=${srcname}4.8.1.tar.xz
#       ;;
#       gtksourceview-)
#          pkgvers=${srcname}3.12.1.tar.xz
#       ;;
#       libgdata-)
#          pkgvers=${srcname}0.15.0.tar.xz
#       ;;
       libgnome-keyring-)
          pkgvers=${srcname}3.12.0.tar.xz
       ;;
#       libgnomekbd-)
#          pkgvers=${srcname}3.6.0.tar.xz
#       ;;
#       libgtop-)
#          pkgvers=${srcname}2.30.0.tar.xz
#       ;;
#       libgweather-)
#          pkgvers=${srcname}3.12.1.tar.xz
#       ;;
#       libpeas-)
#          pkgvers=${srcname}1.10.0.tar.xz
#       ;;
#       libsecret-)
#          pkgvers=${srcname}0.18.tar.xz
#       ;;
#       libwnck-)
#          pkgvers=${srcname}3.4.7.tar.xz
#       ;;
#       polkit-gnome-)
#          pkgvers=${srcname}0.105.tar.xz
#       ;;
#       seed-)
#          pkgvers=${srcname}3.8.1.tar.xz
#       ;;
#       totem-pl-parser-)
#          pkgvers=${srcname}3.10.2.tar.xz
#       ;;
#       vte-)
#          pkgvers=${srcname}0.36.1.tar.xz
#       ;;
       yelp-tools-)
          pkgvers=${srcname}3.14.1.tar.xz
       ;;
#       yelp-xsl-)
#          pkgvers=${srcname}3.12.0.tar.xz
#       ;;
     esac
     gnmComsWrite $srcname $pkgvers
   ;;
   xf86-video-modesetting-)
     needsproxy=true # will use wget so need to set wgetopts
     case $srcname in
#       accountsservice-)
#          pkgvers=${srcname}0.6.37.tar.xz
#          pkgURL=http://www.freedesktop.org/software/accountsservice/
#       ;;
#       libwacom-)
#          pkgvers=${srcname}0.9.tar.bz2
#          pkgURL=http://downloads.sourceforge.net/linuxwacom/
#       ;;
       xf86-video-modesetting-)
          pkgvers=${srcname}0.9.0.tar.bz2
          pkgURL=http://xorg.freedesktop.org/releases/individual/driver/
       ;;
     esac
     wgetwrite $pkgvers $pkgURL
   ;;
# get gnomedesktop sources
    cantarell-fonts-)
#   cantarell-fonts-|caribou-|geocode-glib-|gnome-backgrounds-|gnome-bluetooth-|gnome-control-center-|gnome-desktop-|gnome-icon-theme-extras-|gnome-icon-theme-symbolic-|gnome-icon-theme-|gnome-keyring-|gnome-menus-|gnome-power-manager-|gnome-session-|gnome-settings-daemon-|gnome-shell-|gnome-terminal-|gnome-themes-standard-|gnome-user-docs-|gnome-user-share-|gnome-video-effects-|gvfs-|mutter-|nautilus-sendto-|nautilus-|network-manager-applet-|yelp-|zenity-)
     needsproxy=true # will use wget so need to set wgetopts
     gnmvers=""
     revsrcnm=""
     case $srcname in
       cantarell-fonts-)
          pkgvers=${srcname}0.0.16.tar.xz
       ;;
#       caribou-)
#          pkgvers=${srcname}0.4.13.tar.xz
#       ;;
#       geocode-glib-)
#          pkgvers=${srcname}3.12.0.tar.xz
#       ;;
#       gnome-backgrounds-)
#          pkgvers=${srcname}3.12.1.tar.xz
#       ;;
#       gnome-bluetooth-)
#          pkgvers=${srcname}3.12.0.tar.xz
#       ;;
#       gnome-control-center-)
#          pkgvers=${srcname}3.12.1.tar.xz
#       ;;
#       gnome-desktop-)
#          pkgvers=${srcname}3.12.1.tar.xz
#       ;;
#       gnome-icon-theme-extras-)
#          pkgvers=${srcname}3.12.0.tar.xz
#       ;;
#       gnome-icon-theme-symbolic-)
#          pkgvers=${srcname}3.12.0.tar.xz
#       ;;
#       gnome-icon-theme-)
#          pkgvers=${srcname}3.12.0.tar.xz
#          gnmComsWrite $srcname $pkgvers
#       ;;
#       gnome-keyring-)
#          pkgvers=${srcname}3.12.0.tar.xz
#       ;;
#       gnome-menus-)
#          pkgvers=${srcname}3.10.1.tar.xz
#       ;;
#       gnome-power-manager-)
#          pkgvers=${srcname}3.12.0.tar.xz
#       ;;
#       gnome-session-)
#          pkgvers=${srcname}3.12.1.tar.xz
#       ;;
#       gnome-settings-daemon-)
#          pkgvers=${srcname}3.12.2.tar.xz
#       ;;
#       gnome-shell-)
#          cat << "EOF"
#cp ${blfsfiles}/patches/gnomedesktop/${SrcName}*.patch .
#EOF
#          pkgvers=${srcname}3.12.1.tar.xz
#       ;;
#       gnome-terminal-)
#          pkgvers=${srcname}3.12.1.tar.xz
#       ;;
#       gnome-themes-standard-)
#          pkgvers=${srcname}3.12.0.tar.xz
#       ;;
#       gnome-user-docs-)
#          pkgvers=${srcname}3.12.1.tar.xz
#       ;;
#       gnome-user-share-)
#          pkgvers=${srcname}3.10.2.tar.xz
#       ;;
#       gnome-video-effects-)
#          pkgvers=${srcname}0.4.1.tar.xz
#       ;;
#       gvfs-)
#          pkgvers=${srcname}1.20.1.tar.xz
#       ;;
#       mutter-)
#          pkgvers=${srcname}3.12.1.tar.xz
#       ;;
#       nautilus-sendto-)
#          pkgvers=${srcname}3.8.1.tar.xz
#       ;;
#       nautilus-)
#          pkgvers=${srcname}3.12.0.tar.xz
#       ;;
#       network-manager-applet-)
#          pkgvers=${srcname}0.9.8.10.tar.xz
#       ;;
#       yelp-)
#          pkgvers=${srcname}3.12.0.tar.xz
#       ;;
#       zenity-)
#          pkgvers=${srcname}3.12.1.tar.xz
#       ;;
     esac
     gnmComsWrite $srcname $pkgvers
   ;;
# get gnomeapps sources
   aisleriot-|alacarte-|gnome-chess-|gnome-search-tool-|gnome-system-log-)
#   aisleriot-|alacarte-|baobab-|brasero-|eog-|evince-|evolution-|gdm-|gedit-|gnome-calculator-|gnome-chess-|gnome-clocks-|gnome-color-manager-|gnome-dictionary-|gnome-disk-utility-|gnome-nettool-|gnome-search-tool-|gnome-system-log-|gucharmap-)
     needsproxy=true # will use wget so need to set wgetopts
     gnmvers=""
     revsrcnm=""
     case $srcname in
       aisleriot-)
          pkgvers=${srcname}3.14.1.tar.xz
       ;;
       alacarte-)
          pkgvers=${srcname}3.11.91.tar.xz
       ;;
#       baobab-)
#          pkgvers=${srcname}3.12.1.tar.xz
#       ;;
#       brasero-)
#          pkgvers=${srcname}3.11.3.tar.xz
#       ;;
#       eog-)
#          pkgvers=${srcname}3.12.1.tar.xz
#       ;;
#       evince-)
#          pkgvers=${srcname}3.12.1.tar.xz
#       ;;
#       evolution-)
#          pkgvers=${srcname}3.12.1.tar.xz
#       ;;
#       gdm-)
#          pkgvers=${srcname}3.12.1.tar.xz
#       ;;
#       gedit-)
#          pkgvers=${srcname}3.12.1.tar.xz
#       ;;
#       gnome-calculator-)
#          pkgvers=${srcname}3.12.1.tar.xz
#       ;;
       gnome-chess-)
          pkgvers=${srcname}3.14.0.tar.xz
       ;;
#       gnome-clocks-)
#          pkgvers=${srcname}3.12.0.tar.xz
#       ;;
#       gnome-color-manager-)
#          pkgvers=${srcname}3.12.1.tar.xz
#       ;;
#       gnome-dictionary-)
#          pkgvers=${srcname}3.10.0.tar.xz
#       ;;
#       gnome-disk-utility-)
#          pkgvers=${srcname}3.12.1.tar.xz
#       ;;
#       gnome-nettool-)
#          pkgvers=${srcname}3.8.1.tar.xz
#       ;;
       gnome-search-tool-)
          pkgvers=${srcname}3.6.0.tar.xz
       ;;
       gnome-system-log-)
          pkgvers=${srcname}3.9.90.tar.xz
       ;;
#       gucharmap-)
#          pkgvers=${srcname}3.12.0.tar.xz
#       ;;
     esac
     gnmComsWrite $srcname $pkgvers
   ;;
   gnuchess-|xboard-)
     needsproxy=true # will use wget so need to set wgetopts
     case $srcname in
       gnuchess-)
          pkgvers=${srcname}6.1.1.tar.gz
          pkgURL=ftp://ftp.gnu.org/pub/gnu/chess/
       ;;
       xboard-)
          pkgvers=${srcname}4.8.0.tar.gz
          pkgURL=http://ftp.gnu.org/gnu/xboard/
       ;;
     esac
     wgetwrite $pkgvers $pkgURL
   ;;
   hamcrest-)
     needsproxy=true # will use wget so need to set wgetopts
     cat << "EOF"
wgetopts="-e use_proxy=yes -e http_proxy=$http_proxy -e ftp_proxy=$ftp_proxy"
pkgver=1.3
corejar=${SrcName}core-${pkgver}.jar
libraryjar=${SrcName}library-${pkgver}.jar
generatorjar=${SrcName}generator-${pkgver}.jar
integrationjar=${SrcName}integration-${pkgver}.jar
pkgURL=https://hamcrest.googlecode.com/files/
wgetopts="${wgetopts} --no-check-certificate"
if [ ! -e $corejar ]; then
  wget $wgetopts ${pkgURL}${corejar}
fi
if [ ! -e $libraryjar ]; then
  wget $wgetopts ${pkgURL}${libraryjar}
fi
if [ ! -e $generatorjar ]; then
  wget $wgetopts ${pkgURL}${generatorjar}
fi
if [ ! -e $integrationjar ]; then
  wget $wgetopts ${pkgURL}${integrationjar}
fi
EOF
   ;;
   jdk8u-) # download files to build jdk8-openjdk
     needsproxy=true # will use wget so need to set wgetopts
     cat << "EOF"
wgetopts="-e use_proxy=yes -e http_proxy=$http_proxy -e ftp_proxy=$ftp_proxy"
_java_ver=8
_jdk_update=25
_jdk_build=18
pkgver=${_java_ver}.u${_jdk_update}
_repo_ver=jdk${_java_ver}u${_jdk_update}-b${_jdk_build}
_url_src=http://hg.openjdk.java.net/jdk8u/jdk8u
# if more than one patch, conventional test will fail with wild card, so use array
#patchfile=(${sourcedir}/${SrcName}${_icedtea_ver}*.patch)
#homepatch=(${HOME}/${SrcName}${_icedtea_ver}*.patch)
#if [ -e "${patchfile[0]}" ]; then # patch(es) exists so copy to current dir
#  cp ${sourcedir}/${SrcName}${_icedtea_ver}*.patch .
#elif [ -e "${homepatch[0]}" ]; then # patch(es) exists in current dir
#  echo "Patch(es) already in current dir"
#else
#  echo "No patches found for $SrcName. Should there be some?"
#fi
if [ ! -e ${SrcName}${_repo_ver}.tar.gz ]; then
  wget $wgetopts -O ${SrcName}${_repo_ver}.tar.gz ${_url_src}/archive/${_repo_ver}.tar.gz
fi
if [ ! -e corba.tar.gz ]; then
  wget $wgetopts -O corba.tar.gz ${_url_src}/corba/archive/${_repo_ver}.tar.gz
fi
if [ ! -e hotspot.tar.gz ]; then
  wget $wgetopts -O hotspot.tar.gz ${_url_src}/hotspot/archive/${_repo_ver}.tar.gz
fi
if [ ! -e jdk.tar.gz ]; then
  wget $wgetopts -O jdk.tar.gz ${_url_src}/jdk/archive/${_repo_ver}.tar.gz
fi
if [ ! -e jaxws.tar.gz ]; then
  wget $wgetopts -O jaxws.tar.gz ${_url_src}/jaxws/archive/${_repo_ver}.tar.gz
fi
if [ ! -e jaxp.tar.gz ]; then
  wget $wgetopts -O jaxp.tar.gz ${_url_src}/jaxp/archive/${_repo_ver}.tar.gz
fi
if [ ! -e langtools.tar.gz ]; then
  wget $wgetopts -O langtools.tar.gz ${_url_src}/langtools/archive/${_repo_ver}.tar.gz
fi
if [ ! -e nashorn.tar.gz ]; then
  wget $wgetopts -O nashorn.tar.gz ${_url_src}/nashorn/archive/${_repo_ver}.tar.gz
fi
# download the icedtea-web tar file for the icon
if [ ! -e icedtea-web-1.5.2.tar.gz ]; then
  wget $wgetopts http://icedtea.classpath.org/download/source/icedtea-web-1.5.2.tar.gz
fi
#cp -v ${blfsfiles}/patches/java/*.patch . # 2 patches to apply
cd $(tar vxf ${SrcName}${_repo_ver}.tar.*z* | awk -F\/ 'END{print $1}')
tar zxf ../corba.tar.gz
tar zxf ../hotspot.tar.gz
tar zxf ../jaxp.tar.gz
tar zxf ../jaxws.tar.gz
tar zxf ../jdk.tar.gz
tar zxf ../langtools.tar.gz
tar zxf ../nashorn.tar.gz
for subrepo in corba hotspot jdk jaxws jaxp langtools nashorn; do
  ln -s ${subrepo}-${_repo_ver} ${subrepo}
done
EOF
   ;;
   jasper-|docbook-xml-) # src is a zip file
    cat << "EOF"
if [ -e ${sourcedir}/${SrcName}*.zip ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
elif [ -e ${HOME}/${SrcName}*.zip ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
EOF
    case $srcname in
       docbook-xml*)
           cat << "EOF"
for f in *.zip; do
docbookDir="${f%.zip}"
done
mkdir -pv $docbookDir
cd $docbookDir
unzip ../${SrcName}*.zip
EOF
       ;;
       *)
         cat << "EOF"
unzip ${SrcName}*.zip
cd ${SrcName}*
EOF
       ;;
    esac
   ;;
   jdk-${jdkvers}-)
    cat << "EOF"
if [ -e ${sourcedir}/${SrcName}*.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* . # cp any patches as well
elif [ -e ${HOME}/${SrcName}*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
  echo "No source file found for $SrcName"
  echo "Please download it from the Oracle website"
  echo "exit now"
  exit 1
fi
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   junit4_)
    cat << "EOF"
if [ -e ${sourcedir}/${SrcName}*.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* . # cp any patches as well
  cp ${sourcedir}/hamcrest-1.3.tgz .
elif [ -e ${HOME}/${SrcName}*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   krb5-) # untars to a tar.gz and a tar.gz.asc
    cat << "EOF"
if [ -e ${sourcedir}/${SrcName}*.* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
elif [ -e ${HOME}/${SrcName}*.* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
tar xvf ${SrcName}*.tar
# check the gpg key
EOF
    echo "gpg2 --verify krb5-${krb5vers}.tar.gz.asc krb5-${krb5vers}.tar.gz
gpg --pgp2 --keyserver pgp.mit.edu --recv-keys 0x749D7889
gpg2 --verify krb5-${krb5vers}.tar.gz.asc krb5-${krb5vers}.tar.gz
#" >> $Output
    cat << "EOF"
rm *.asc
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   libreoffice-) # don't need the translations. need --no-overwrite-dir when untaring
    cat << "EOF"
if [ -e ${sourcedir}/${SrcName}[0-9]*.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
elif [ -e ${HOME}/${SrcName}[0-9]*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
rm -rf libreoffice-translations*
cd $(tar vxf ${SrcName}[0-9]*.tar.*z* --no-overwrite-dir | awk -F\/ 'END{print $1}')
EOF
   ;;
   libusb-|grilo-|mutter-) # don't want libusb-compat, grilo-plugins
    cat << "EOF"
if [ -e ${sourcedir}/${SrcName}[0-9]*.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}[0-9]*.tar.*z* .
elif [ -e ${HOME}/${SrcName}[0-9]*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   Linux-PAM-) # do not want to untar the docs
    cat << "EOF"
if [ -e ${sourcedir}/${SrcName}?.?.?.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
elif [ -e ${HOME}/${SrcName}?.?.?.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
cd $(tar vxf ${SrcName}?.?.?.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
# add this LLVM bit if you want the clang compiler
   llvm-)
     needsproxy=true # will use wget so need to set wgetopts
     cat << "EOF"
wgetopts="-e use_proxy=yes -e http_proxy=$http_proxy -e ftp_proxy=$ftp_proxy"
releasevers=3.5.0
clangSrc=cfe-${releasevers}.src.tar.xz
compilerrt=compiler-rt-${releasevers}.src.tar.xz
if [ ! -e $clangSrc ]; then
  wget $wgetopts http://llvm.org/releases/${releasevers}/${clangSrc}
fi
if [ ! -e $compilerrt ]; then
  wget $wgetopts http://llvm.org/releases/${releasevers}/${compilerrt}
fi
cp ${sourcedir}/${SrcName}*.* .
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   LVM2.|sg3_utils-|zip|icu4c-|cdparanoia-III-|xterm-|sgml-common-|openldap-) # a .tgz src file
    cat << "EOF"
if [ -e ${sourcedir}/${SrcName}*.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
elif [ -e ${HOME}/${SrcName}*.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
cd $(tar vxf ${SrcName}*.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   MesaLib-) # extract to Mesa-xxx not MesaLib
     cat << "EOF"
if [ -e ${sourcedir}/${SrcName}*.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
elif [ -e ${HOME}/${Srcame}*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
tar xf ${SrcName}*.tar.*z*
cd Mesa-*
EOF
   ;;
   nasm-) # don't need the docs file
    cat << "EOF"
if [ -e ${sourcedir}/${SrcName}*[0-9].tar.*z* ]; then
  cp ${sourcedir}/${SrcName}*.* .
elif [ -e ${HOME}/${SrcName}*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
rm -rf ${SrcName}*doc.tar.*z*
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   NVIDIA-Linux-x86_64-)
     needsproxy=true # will use wget so need to set wgetopts
     cat << "EOF"
pkgver=343.22
_pkg=${SrcName}${pkgver}-no-compat32
wgetopts="-e use_proxy=yes -e http_proxy=$http_proxy -e ftp_proxy=$ftp_proxy"
if [ -e ${sourcedir}/${SrcName}*.run ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
elif [ -e ${HOME}/${SrcName}*.run ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
   wget $wgetopts ftp://download.nvidia.com/XFree86/Linux-x86_64/${pkgver}/${_pkg}.run
fi
sh ${_pkg}.run --extract-only
cd ${_pkg}
EOF
   ;;
   OpenJDK-)
    cat << "EOF"
if [ -e ${sourcedir}/${SrcName}*-bin.tar.*z* ]; then # binary exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
elif [ -e ${HOME}/${SrcName}*-bin.tar.*z* ]; then # binary exists in current dir - use that
  echo "$SrcName binary already in current dir - will use that"
else
  echo "No binary file found for $SrcName - exit now"
  exit 1
fi
cd $(tar vxf ${SrcName}*-bin.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   php-) # wget the docs (single html)
     needsproxy=true # will use wget so need to set wgetopts
     cat << "EOF"
wgetopts="-e use_proxy=yes -e http_proxy=$http_proxy -e ftp_proxy=$ftp_proxy"
if [ -e ${sourcedir}/${SrcName}*.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
elif [ -e ${HOME}/${SrcName}*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
phpManual=php_manual_en.html.gz
if [ ! -e $phpManual ]; then
wget $wgetopts -O $phpManual http://us.php.net/get/${phpManual}/from/this/mirror
fi
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   Python-3.) # get the docs as well
     needsproxy=true # will use wget so need to set wgetopts
     cat << "EOF"
wgetopts="-e use_proxy=yes -e http_proxy=$http_proxy -e ftp_proxy=$ftp_proxy"
pythondocs="python-${Python3vers}-docs-html.tar.bz2"
if [ ! -e $pythondocs ]; then
  wget $wgetopts --no-check-certificate http://docs.python.org/3/archives/${pythondocs}
fi
if [ -e ${sourcedir}/${SrcName}*.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
elif [ -e ${HOME}/${SrcName}*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   shadow_) # use original src
     cat << "EOF"
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   smpeg-) # get the source from svn
#     needsproxy=true
     cat << "EOF"
     smpegPkgVers=release_0_4_5
     svn co svn://svn.icculus.org/smpeg/tags/${smpegPkgVers}
     cd $smpegPkgVers
EOF
   ;;
   squid-) # need a patch
     needsproxy=true
     cat << "EOF"
wgetopts="-e use_proxy=yes -e http_proxy=$http_proxy -e ftp_proxy=$ftp_proxy -e https_proxy=$https_proxy"
srcpkg="squid-3.4.10.tar.xz"
cp ${blfsfiles}/patches/networks/squid*.patch .
if [ -e ${sourcedir}/${srcpkg} ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* . 
elif [ -e ${HOME}/${srcpkg} ]; then # src exists in current dir - use that
  echo "$srcpkg already in current dir - will use that"
else
  wget $wgetopts http://www.squid-cache.org/Versions/v3/3.4/${srcpkg}
fi
cd $(tar vxf $srcpkg | awk -F\/ 'END{print $1}')
EOF
   ;;
   systemd-) # don't need to copy the src, already in place
    cat << "EOF"
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   tcl*) # there is -src and -html so specify src
     cat << "EOF"
if [ -e ${sourcedir}/${SrcName}*-src.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
elif [ -e ${HOME}/${SrcName}*-src.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
cd $(tar vxf ${SrcName}*-src.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
# get these Perl modules from cpan
   ExtUtils-Depends-|ExtUtils-PkgConfig-|Glib-|Tie-IxHash-|Archive-Zip-|URI-|XML-LibXML-|XML-NamespaceSupport-|XML-SAX-|XML-SAX-Base-|XML-SAX-Expat-|XML-Simple-)
     case $srcname in
        ExtUtils-Depends-)
            srcvar1="extutilsdependsSrc"
            srcExt="0.402.tar.gz"
            cpanURL="http://search.cpan.org/CPAN/authors/id/X/XA/XAOC"
            awkpnum="1"
        ;;
        ExtUtils-PkgConfig-)
            srcvar1="extutilspkgconfigSrc"
            srcExt="1.15.tar.gz"
            cpanURL="http://search.cpan.org/CPAN/authors/id/X/XA/XAOC"
            awkpnum="1"
        ;;
        Glib-)
            srcvar1="glibSrc"
            srcExt="1.306.tar.gz"
            cpanURL="http://search.cpan.org/CPAN/authors/id/X/XA/XAOC"
            awkpnum="1"
        ;;
        Tie-IxHash-)
            srcvar1="tieixhashSrc"
            srcExt="1.23.tar.gz"
            cpanURL="http://search.cpan.org/CPAN/authors/id/C/CH/CHORNY"
            awkpnum="1"
        ;;
        Archive-Zip-)
            srcvar1="archivezipSrc"
            srcExt="1.39.tar.gz"
            cpanURL="http://cpan.metacpan.org/authors/id/P/PH/PHRED"
            awkpnum="1"
        ;;
        URI-)
            srcvar1="uriSrc"
            srcExt="1.65.tar.gz"
            cpanURL="http://search.cpan.org/CPAN/authors/id/E/ET/ETHER/"
            awkpnum="1"
        ;;
        XML-LibXML-)
            srcvar1="xmllibxmlSrc"
            srcExt="2.0117.tar.gz"
            cpanURL="http://search.cpan.org/CPAN/authors/id/S/SH/SHLOMIF"
            awkpnum="1"
        ;;
        XML-NamespaceSupport-)
            srcvar1="xmlnamespaceSrc"
            srcExt="1.11.tar.gz"
            cpanURL="http://search.cpan.org/CPAN/authors/id/P/PE/PERIGRIN"
            awkpnum="1"
         ;;
         XML-SAX-)
            srcvar1="xmlsaxSrc"
            srcExt="0.99.tar.gz"
            cpanURL="http://search.cpan.org/CPAN/authors/id/G/GR/GRANTM"
            awkpnum="1"
         ;;
         XML-SAX-Base-)
            srcvar1="xmlsaxbaseSrc"
            srcExt="1.08.tar.gz"
            cpanURL="http://search.cpan.org/CPAN/authors/id/G/GR/GRANTM"
            awkpnum="1"
         ;;
         XML-SAX-Expat-)
            srcvar1="xmlsaxexpatSrc"
            srcExt="0.51.tar.gz"
            cpanURL="http://search.cpan.org/CPAN/authors/id/B/BJ/BJOERN"
            awkpnum="1"
         ;;
         XML-Simple-)
            srcvar1="xmlsimpleSrc"
            srcExt="2.20.tar.gz"
            cpanURL="http://cpan.org/authors/id/G/GR/GRANTM"
            awkpnum="1"
        ;;
      esac
      perlmodwrite $srcvar1 $srcExt $cpanURL $awkpnum
   ;;
   xcb-util-)
    cat << "EOF"
if [ -e ${sourcedir}/${SrcName}[0-9]*.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}[0-9]*.* .
elif [ -e ${HOME}/${SrcName}[0-9]*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
cd $(tar vxf ${SrcName}[0-9]*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   $xlib) # need patch(es) from patches/x
    cat << "EOF"
cp -r ${sourcedir}/${SrcName}/* . # copy the md5 file, sources and any patches
cp ${blfsfiles}/patches/x/libXfont*.patch .
EOF
   ;;
   $xproto|$xapp|$xfont)
    cat << "EOF"
cp -r ${sourcedir}/${SrcName}/* . # copy the md5 file, sources and any patches
EOF
   ;;
   yajl-) # git the source
    cat << "EOF"
if [ ! -d yajl ]; then
 git clone git://github.com/lloyd/yajl
fi
cd yajl
EOF
   ;;
   *) # tar.xz,gz,bz2,tgz
    cat << "EOF"
if [ -e ${sourcedir}/${SrcName}*.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* . # cp any patches as well
elif [ -e ${HOME}/${SrcName}*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat << "EOF"
fi
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
esac
    cat << "EOF"
endtime=$( date +%s )
unpacktime=$( expr $endtime - $starttime )
starttime=$( date +%s )
}
EOF
} # end unpack
#
WriteScript () {
# remove docs statements and && and some other stuff
case $pkgname in
    accountsservice)
     if [ "$SYSTEMD" = yes ]; then
       GetInternalCommands accountsserviceComms >> $Output
     fi
    ;;
    acl)
     if ! $as_root; then
       GetCommands \
        | sed -e 's/INSTALL_USER=root/INSTALL_USER=acl/' \
              -e 's/INSTALL_GROUP=root/INSTALL_GROUP=acl/' \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_BIN_DIR)/d' getfacl\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_BIN_DIR)/d' setfacl\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_BIN_DIR)/d' chacl\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(MAN_DEST)/d' man\/man1\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(MAN_DEST)/d' man\/man3\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(MAN_DEST)/d' man\/man5\/Makefile" \
              -e "/make install/i\  sed -i '0,/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_INC_DIR)/{//d;}' include\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_INC_DIR)\\\/sys/d' include\/Makefile" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
     else
       GetCommands \
        | sed -e 's/\(.*\)&&$/\1/' \
        >> $Output
     fi
    ;;
    acpid)
       GetCommands \
        | sed -e '/\/etc\/acpi\/events\/lid/,/make install-acpid/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    aisleriot)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static \\\n\              --with-card-theme-formats=svg,pysol \\\n\              --with-pysol-card-theme-path=\/usr\/share\/PySolFC/' \
        >> $Output
    ;;
    alacarte|cantarell-fonts|dialog|dotconf|ffmpegthumnaler|gnome-chess|gnome-clocks|gnome-common|gnome-serch-tool|gnuchess|hcolr-icon-thme|libcdio|libgphoto2|libinput|librest|libunwind|portaudio|pygtk|pyatspi|ragel|seed|shrd-mime-info|yelp-tools)
       GetInternalCommands basicComms >> $Output
    ;;
    alsa-lib)
       GetCommands \
        | sed -e '/make doc/,/install -m644 src\/.libs\/libasound.a/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    alsa-utils)
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e 's#\./configure#\./configure --with-udev-rules-dir=/usr/lib/udev/rules.d \\\n\   --with-systemdsystemunitdir=/usr/lib/systemd/system#' \
                  -e '/make install-alsa/d' \
                  -e '/make install/a\  cd alsactl\n\  make 90-alsa-restore.rules\n\  install -D -m644 90-alsa-restore.rules \/usr\/lib\/udev\/rules.d' \
                  -e '/alsactl/,/usermod/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/make install-alsa/d' \
                  -e '/alsactl/,/usermod/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
    ;;
    apache)
       if ! $as_root; then
         GetCommands \
          | sed -e '/groupadd/,/-s \/bin\/false/d' \
                -e '/make install-httpd/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/make install-httpd/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    appstream-glib)
      GetCommands \
       | sed -e 's/disable-static/disable-static --disable-dep11/' \
             -e 's/\(.*\)&&$/\1/' \
       >> $Output
    ;;
    attr)
     if ! $as_root; then
       GetCommands \
        | sed -e 's/INSTALL_USER=root/INSTALL_USER=attr/' \
              -e 's/INSTALL_GROUP=root/INSTALL_GROUP=attr/' \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_BIN_DIR)/d' attr\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_BIN_DIR)/d' getfattr\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_BIN_DIR)/d' setfattr\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(MAN_DEST)/d' man\/man1\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(MAN_DEST)/d' man\/man2\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(MAN_DEST)/d' man\/man3\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(MAN_DEST)/d' man\/man5\/Makefile" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
     else
       GetCommands \
        | sed -e 's/\(.*\)&&$/\1/' \
        >> $Output
     fi
    ;;
    at-spi2-atk)
       GetCommands \
        | sed -e '/glib-compile-schemas \/usr\/share\/glib-2.0\/schemas/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    at-spi2-core)
       GetCommands \
        | sed -e 's/sysconfdir=\/etc/sysconfdir=\/etc --libexecdir=\/usr\/lib\/at-spi2-core/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    avahi)
       if ! $as_root; then
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e '/groupadd/,/groupadd/d' \
                  -e '/--with-distro=none/a\              --with-autoipd-user=avahi \\\n\              --with-autoipd-group=avahi \\' \
                  -e 's/\/lib\/systemd/\/usr\/lib\/systemd/' \
                  -e '/systemctl enable avahi/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/groupadd/,/groupadd/d' \
                  -e '/--disable-qt4        \\/d' \
                  -e '/make install-avahi/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       else
         GetCommands \
          | sed -e '/--disable-qt4        \\/d' \
                -e '/make install-avahi/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    avr-binutils)
         GetInternalCommands avrbinutilsComms >> $Output
    ;;
    avr-gcc)
         GetInternalCommands avrgccComms >> $Output
    ;;
    avr-libc)
      GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static --host=avr/' \
        >> $Output
    ;;
    bind)
       if ! $as_root; then
         GetCommands \
          | sed -e '/patch -Np1 -i/d' \
                -e '/bin\/tests\/system\/ifconfig.sh/d' \
                -e '/groupadd/,/install -d -m770 -o named -g named/d' \
                -e '/mknod/,/chmod/d' \
                -e '/rndc-confgen/,/sed/d' \
                -e '/resolv.conf.bak/,/dig www.linuxfromscratch.org/d' \
                -e '/dig www.linuxfromscratch.org/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/patch -Np1 -i/d' \
                -e '/bin\/tests\/system\/ifconfig.sh/,/grep -A1/d' \
                -e '/cp \/etc\/resolv.conf/,/dig www.linuxfromscratch.org/d' \
                -e '/dig www.linuxfromscratch.org/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    blfs-btscrpts)
        GetInternalCommands blfsbtscrptsComms >> $Output
    ;;
    bluez)
       if [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e '/patch -Np1 -i/a autoreconf -vfi' \
                -e 's/enable-library/enable-library --libexecdir=\/usr\/lib/' \
                -e '/cat > \/etc\/bluetooth\/rfcomm/,/systemctl enable bluetooth/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/make install-bluetooth/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    bridge-utils)
       GetCommands \
        | sed -e '/make install-service-bridge/d' \
              -e '/cat > \/etc\/sysconfig/,/EOF/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    cacerts)
        GetcacertsCommands \
        | sed -e '/wget \$URL/i wgetopts="-e use_proxy=yes -e http_proxy=\$http_proxy -e ftp_proxy=\$ftp_proxy"' \
              -e 's/wget \$URL/wget \$wgetopts $URL/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    cairo) # add enable-tee for mozilla apps
       GetCommands \
        | sed -e 's/disable-static/disable-static \\\n\              --enable-tee \\\n\              --enable-gl \\\n\              --enable-egl \\\n\              --enable-pdf \\\n\              --enable-gobject/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    caribou)
       GetInternalCommands basicComms \
        | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/caribou/' \
              -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
        >> $Output
    ;;
    ccache)
       GetInternalCommands ccacheComms >> $Output
    ;;
    chromium)
       GetInternalCommands chromeComms >> $Output
    ;;
    cogl)
       GetCommands \
        | sed -e '/patch -Np1/d '\
              -e 's/gles2/gles2 \\\n              --enable-{kms,wayland}-egl-platform \\\n              --enable-wayland-egl-server/' \
              -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    clutter)
       GetCommands \
        | sed -e 's/egl-backend/egl-backend \\\n              --enable-wayland-backend \\\n              --enable-wayland-compositor \\\n              --enable-evdev-input/' \
              -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    colord)
       if [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e '/groupadd/,/-g colord -s \/bin\/false colord/d' \
                -e 's/disable-static/disable-static \\\n              --libexecdir=\/usr\/lib\/colord \\\n              --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/groupadd/,/-g colord -s \/bin\/false colord/d' \
                -e 's/disable-static/disable-static --libexecdir=\/usr\/lib\/colord/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    colord-gtk)
       GetInternalCommands basicComms \
        | sed -e 's/--prefix=\/usr/--prefix=\/usr \\\n\              --enable-vala/' \
        >> $Output
    ;;
    coreutils)
        GetInternalCommands coreutilsComms >> $Output
    ;;
    cracklib)
       GetCommands \
        | sed -e 's/--prefix=\/usr/--prefix=\/usr --sbindir=\/usr\/bin/' \
              -e 's/--with-default-dict=\/lib/--with-default-dict=\/usr\/lib/' \
              -e '/mv -v/,/ln -sfv ..\/..\/lib/d' \
              -e 's/install -v -m755 -d      \/lib/install -v -m755 -d      \/usr\/lib/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    cups)
       if ! $as_root; then
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e '/useradd/,/usermod/d' \
                  -e 's/\/lib\/systemd/\/usr\/lib\/systemd/' \
                  -e '/systemctl enable/d' \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BUILDROOT)\\\\\$(DBUSDIR)\\\/system.d; \\\\\\\/d' desktop\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LOCALEDIR)/d' locale\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(MANDIR)\\\/man1/d' man\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(MANDIR)\\\/man5/d' man\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(MANDIR)\\\/man7/d' man\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(AMANDIR)\\\/man\\\\\$(MAN8DIR)/d' man\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BINDIR)/d' Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' cups\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' filter\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' cgi-bin\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' ppdc\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' scheduler\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BINDIR)/d' test\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BINDIR)/d' berkeley\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(SBINDIR)/d' berkeley\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) \\\\\$(BINDIR)/d' ppdc\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(SBINDIR)/d' scheduler\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(SBINDIR)/d' systemv\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BINDIR)/d' systemv\/Makefile" \
                  -e '/gtk-update-icon-cache/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/useradd/,/usermod/d' \
                  -e '/sed -i/d' \
                  -e '/make install-cups/d' \
                  -e "/make install/ i sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BUILDROOT)\\\\\$(DBUSDIR)\\\/system.d; \\\\\\\/d' desktop\/Makefile" \
                  -e "/make install/ i sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LOCALEDIR)/d' locale\/Makefile" \
                  -e "/make install/ i sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(MANDIR)\\\/man1/d' man\/Makefile" \
                  -e "/make install/ i sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(MANDIR)\\\/man5/d' man\/Makefile" \
                  -e "/make install/ i sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(MANDIR)\\\/man7/d' man\/Makefile" \
                  -e "/make install/ i sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(AMANDIR)\\\/man\\\\\$(MAN8DIR)/d' man\/Makefile" \
                  -e "/make install/ i sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BINDIR)/d' Makefile" \
                  -e "/make install/ i sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' cups\/Makefile" \
                  -e "/make install/ i sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' filter\/Makefile" \
                  -e "/make install/ i sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' cgi-bin\/Makefile" \
                  -e "/make install/ i sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' ppdc\/Makefile" \
                  -e "/make install/ i sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' scheduler\/Makefile" \
                  -e "/make install/ i sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BINDIR)/d' test\/Makefile" \
                  -e "/make install/ i sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BINDIR)/d' berkeley\/Makefile" \
                  -e "/make install/ i sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(SBINDIR)/d' berkeley\/Makefile" \
                  -e "/make install/ i sed -i '/\\\\\$(INSTALL_DIR) \\\\\$(BINDIR)/d' ppdc\/Makefile" \
                  -e "/make install/ i sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(SBINDIR)/d' scheduler\/Makefile" \
                  -e "/make install/ i sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(SBINDIR)/d' systemv\/Makefile" \
                  -e "/make install/ i sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BINDIR)/d' systemv\/Makefile" \
                  -e '/gtk-update-icon-cache/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       else
         GetCommands \
          | sed -e '/sed -i/d' \
                -e '/patch -Np1 -i/d' \
                -e '/aclocal/i patch -Np1 -i ../cups-systemd-socket.patch\npatch -Np1 -i ../cups-no-export-ssllibs.patch\npatch -Np1 -i ../cups-no-gcrypt.patch\npatch -Np1 -i ../cups-no-gzip-man.patch\npatch -Np1 -i ../cups-dbus-utf8.patch\npatch -Np1 -i ../get-ppd-file-for-statically-configured-ipp-shared-queues.patch\npatch -Np0 -i ../cups-1.6.0-fix-install-perms.patch\npatch -Np1 -i ../cups-1.6.2-statedir.patch\npatch -Np1 -i ../cups-res_init.patch\npatch -Np1 -i ../cups-avahi-address.patch\npatch -Np1 -i ../cups-enum-all.patch\npatch -Np1 -i ../cups-final-content-type.patch' \
                -e '/make install-cups/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    cups-filters)
       GetCommands \
        | sed -e '/systemctl enable cups-browsed/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    curl)
       GetCommands \
        | sed -e '/cat >> tests/,/EOF/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    cvs)
       GetCommands \
        | sed -e '/make -C doc html txt/d' \
              -e "/sed -e 's\/rsh};\/ssh};/,/-i src\/sanity.sh/d" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    cyrus-sasl)
       GetCommands \
        | sed -e 's/\.\/configure/CFLAGS+="-fPIC" \.\/configure/' \
              -e '/make install-saslauthd/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    db)
       if ! $as_root; then
         GetCommands \
          | sed -e 's/root:root/db:db/' \
              -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    dbus)
       GetInternalCommands dbusComms >> $Output
    ;;
    dbus-glib)
       GetCommands \
        | sed -e 's/disable-static/disable-static --enable-bash-completion=no/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    dconf)
       GetCommands \
        | sed -e 's/sysconfdir=\/etc/sysconfdir=\/etc --libexecdir=\/usr\/lib\/dconf/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    dhcpcd)
       if [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e '/make install-dhcpcd/d' \
                -e '/systemctl start/,/systemctl enable/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/make install-service-dhcpcd/d' \
                -e '/cat > \/etc\/sysconfig\/ifconfig.eth0/,/EOF/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi 
    ;;
    docbook-xml)
       GetCommands \
        | sed -e '/chown -R root:root/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    docbook-xsl)
       GetCommands \
        | sed -e '/tar -xf/d' \
              -e '/install -v -m644 -D README/ i install -v -d \/usr\/share\/doc\/docbook-xsl-1.77.1' \
              -e '/cp -v -R doc/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    dsktp-file-utls)
       GetCommands \
        | sed -e '/update-desktop-database/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    esound)
       GetCommands \
        | sed -e '/chown -v root:root \/usr\/share\/doc\/esound-0.2.41/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    espeak)
       GetInternalCommands espeakComms >> $Output
    ;;
    evol-data-server)
       GetInternalCommands basicComms \
        | sed -e 's/--libexecdir=\/usr\/lib/--libexecdir=\/usr\/lib\/evolution-data-server \\\n\              --enable-vala-bindings --disable-uoa --disable-examples/' \
        >> $Output
    ;;
    evince)
       GetCommands \
        | sed -e 's/disable-static/disable-static --libexecdir=\/usr\/lib\/evince/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    evolution)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static \\\n\              --enable-nss=yes \\\n\              --with-openldap=yes \\\n\              --enable-smime=yes \\\n\              --with-krb5=\/usr \\\n\              --disable-schemas-compile \\\n\              --disable-bogofilter \\\n\              --disable-spamassassin \\\n\              --disable-text-highlight \\\n\              --disable-pst-import \\\n\              --disable-gtkspell/' \
        >> $Output
    ;;
    faac)
       GetCommands \
        | sed -e '/Front_Left/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    faad2)
       GetCommands \
        | sed -e '/sample.wav/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    ffmpeg)
       GetCommands \
        | sed -e '/pushd doc/,/unset DOCNAME/d' \
              -e '/make fate-rsync SAMPLES=fate-suite/,/grep \^TEST/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    firefox)
       GetCommands \
        | sed -e '/DBus-Glib/,/GStreamer 1.x.y/d' \
              -e 's/\#ac_add_options --enable-gstreamer/ac_add_options --enable-gstreamer/' \
              -e 's/\#ac_add_options --enable-startup-notification/ac_add_options --enable-startup-notification/' \
              -e 's/ac_add_options --disable-pulseaudio/\#ac_add_options --disable-pulseaudio/' \
              -e '/make -C firefox-build-dir install/d' \
              -e '/gtk-update-icon-cache -qf/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    fluxbox)
       GetCommands \
        | sed -e '/echo startfluxbox/d' \
              -e 's@~/.fluxbox@/home/john/.fluxbox@g' \
              -e '/cp -v \/usr\/share\/fluxbox\/menu/d' \
              -e '/cp \/usr\/share\/fluxbox\/styles/,/echo \"background.pixmap/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    folks)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static \\\n\              --enable-vala \\\n\              --disable-libsocialweb-backend\\\n\              --disable-fatal-warnings/' \
        >> $Output
    ;;
    foomatic)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static \\\n\    --enable-dbus/' \
        >> $Output
    ;;
    fontconfig)
        GetCommands \
        | sed -e '/install -v -dm755/,/\/usr\/share\/{man\/man/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    freeglut)
       GetCommands \
        | sed -e '/configure_commands()/ised -i "s\/smooth_opengl3 \/\/" progs\/demos\/Makefile.\*\nautoreconf -vfi' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gconf)
       GetCommands \
        | sed -e 's/disable-static/disable-static --libexecdir=\/usr\/lib\/GConf/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gcr)
       GetCommands \
        | sed -e 's/sysconfdir=\/etc/sysconfdir=\/etc --libexecdir=\/usr\/lib\/gcr/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gdk-pixbuf)
       GetCommands \
        | sed -e '/gdk-pixbuf-query-loaders/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gdm)
       GetInternalCommands basicComms \
        | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/gdm/' \
              -e 's/disable-static/disable-static \\\n\              --with-at-spi-registryd-directory=\/usr\/lib\/at-spi2-core \\\n\              --with-check-accelerated-directory=\/usr\/lib\/gnome-session \\\n\              --with-authentication-agent-directory=\/usr\/lib\/polkit-gnome \\\n\              --with-systemd/' \
        >> $Output
    ;;
    gedit)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    geoclue)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib\/geoclue/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    geoclue2)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    ghostscript)
       GetCommands \
        | sed -e 's/LIBS=-lz/LIBS=-lz --with-install-cups/' \
              -e '/bin\/gs/d' \
              -e '/tar -xvf/ i for (( i=0; i<\${#fontfile[@]}; i++ )); do' \
              -e 's/\*\*EDITME<font-tarball>EDITME\*\*/\${fontfile[\$i]}/' \
              -e '/tar -xvf/ a done' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gimp)
       GetCommands \
        | sed -e 's/ --without-gvfs//' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    git)
       if ! $as_root; then
         GetCommands \
          | sed -e "/configure_commands()/ i sed -i \"/ifndef NO_GETTEXT/{ N; s/ifndef NO_GETTEXT\\\n\\\t\\\\\$(INSTALL) -d -m 755 '\\\\\$(DESTDIR_SQ)\\\\\$(localedir_SQ)'// }\" Makefile" \
                -e "/configure_commands()/ i sed -i '/(cd po\\\/build\\\/locale \\\&\\\&/,/endif/d' Makefile" \
                -e 's/etc\/gitconfig/etc\/gitconfig \\\n\              --libexecdir=\/usr\/lib/' \
                -e '/make html/,/make man/d' \
                -e '/make install-man/d' \
                -e 's/\(.*\)&&$/\1/' \
          | awk '{if ($1 == "make" && $2 =="install")
print "  "$1" "$2"\n  cd po/build\n  for code in locale/*\n  do\n   if [ ! -d /usr/share/${code}/LC_MESSAGES ]; then\n     install -v -d /usr/share/${code}/LC_MESSAGES\n   fi\n   cp ${code}/LC_MESSAGES/git.mo /usr/share/${code}/LC_MESSAGES/\n  done\n  cd ../..";
else
print $0;
}' \
        >> $Output
       else
         GetCommands \
          | sed -e '/make html/,/make man/d' \
                -e '/make install-man/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    gjs)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr --disable-tests \\\n\              --libexecdir=\/usr\/lib/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output 
    ;;
    glib-networking)
       GetCommands \
        | sed -e 's/disable-static/disable-static --libexecdir=\/usr\/lib\/glib-networking/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gmime)
       GetCommands \
        | sed -e '/pushd/,/popd/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnm-power-mngr)
       GetInternalCommands basicComms \
        | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/gnome-power-manager/' \
        >> $Output
    ;;
    gnome-bluetooth)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static \\\n\              --disable-desktop-update \\\n\              --disable-icon-update/' \
              -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
        >> $Output
    ;;
    gnome-calculator)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib\/gnome-calculator/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnome-cntrl-cntr)
       GetInternalCommands basicComms \
        | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/gnome-control-center/' \
              -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
        >> $Output
    ;;
    gnome-colr-mngr)
       GetInternalCommands basicComms\
        | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/gnome-color-manager/' \
              -e 's/disable-static/disable-static --disable-man-pages/' \
              -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' -e 's/    if test \"\$export_dynamic\" = yes && test -n \"\$export_dynamic_flag_spec\"; then/      func_append compile_command \" -Wl,-O1,--as-needed\"\\\\n      func_append finalize_command \" -Wl,-O1,--as-needed\"\\\\n\\\\0/' libtool" \
        >> $Output
    ;;
    gnome-desktop)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib\/gnome-desktop/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnome-keyring)
       if [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e 's/with-pam-dir=\/lib/with-pam-dir=\/usr\/lib/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    gnome-session)
       GetInternalCommands basicComms \
        | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/gnome-session/' \
              -e 's/disable-static/disable-static --enable-systemd/' \
        >> $Output
    ;;
    gnome-set-daemon)
       GetInternalCommands basicComms \
        | sed -e 's@libexecdir=/usr/lib@libexecdir=/usr/lib/gnome-settings-daemon@' \
              -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
        >> $Output
    ;;
    gnome-shell)
       GetInternalCommands basicComms \
        | sed -e 's@libexecdir=/usr/lib@libexecdir=/usr/lib/gnome-shell@' \
              -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
        >> $Output
    ;;
    gnome-system-mon)
       GetCommands \
        | sed -e '/enable-systemd/i\              --libexecdir=\/usr\/lib\/gnome-system-monitor \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnome-terminal)
       GetCommands \
        | sed -e 's/disable-migration/libexecdir=\/usr\/lib\/gnome-terminal/' \
              -e 's/disable-search-provider/with-nautilus-extension/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnm-user-share)
       GetInternalCommands basicComms \
        | sed -e 's@libexecdir=/usr/lib@libexecdir=/usr/lib/gnome-user-share@' \
        >> $Output
    ;;
    gnupg)
       GetCommands \
        | sed -e '/sysconfdir=\/etc/i\              --sbindir=\/usr\/bin \\\n\              --libexecdir=\/usr\/lib\/gnupg \\' \
              -e '/makeinfo --html/,/make -C doc/d' \
              -e '/install -v -m755 -d \/usr\/share\/doc/i ln -s gpg2 \/usr\/bin\/gpg\n ln -s gpgv2 \/usr\/bin\/gpgv\n rm \/usr\/share\/gnupg\/com-certs.pem' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnutls)
       GetCommands \
        | sed -e '/\/usr\/share\/doc\//d' \
              -e '/cp -v -R/,/make -C doc\/reference/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    goa)
       GetCommands \
        | sed -e 's/disable-static/disable-static --libexecdir=\/usr\/lib\/gnome-online-accounts/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gom)
       GetCommands \
        | sed -e '/disable-static/i\              --libexecdir=\/usr\/lib\/gnome-online-miners \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gperf)
       GetCommands \
        | sed -e '/makeinfo/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gpm)
       if [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e '/make install-gpm/i chmod 755 /usr/lib/libgpm.so.*' \
                -e '/make install-gpm/d' \
                -e '/install -v -dm755 \/etc\/systemd/,/echo \"ExecStart/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/make install-gpm/d' \
                -e 's/\*\*EDITME<yourdevice>EDITME\*\*/\/dev\/input\/mice/' \
                -e 's/\*\*EDITME<yourprotocol>EDITME\*\*/imps2/' \
                -e 's/\*\*EDITME<additional options>EDITME\*\*//' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    gset-dsktp-schms)
       GetCommands \
        | sed -e '/glib-compile-schemas/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gsl)
       GetCommands \
        | sed -e '/make html/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gstreamer0)
       GetCommands \
        | sed -e 's/disable-static/disable-static --libexecdir=\/usr\/lib/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gstreamer)
       GetCommands \
        | sed -e 's/prefix=\/usr \\/prefix=\/usr \\\n\              --libexecdir=\/usr\/lib \\/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gst-plgns-bad)
       GetCommands \
        | sed -e '/with-package-name/i\              --with-gtk=3.0 \\\n\              --disable-examples \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gtkplus2)
       GetCommands \
        | sed -e '/gtk-query-immodules-2.0/d' \
              -e '/cat/,/End root commands/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gtkplus3)
       GetCommands \
        | sed -e 's/disable-wayland/enable-wayland/' \
              -e '/gtk-query-immodules-3.0/,/glib-compile-schemas/d' \
              -e 's/\*\*EDITMEAdwaitaEDITME\*\*/Adwaita Cupertino/' \
              -e 's/\*\*EDITMEgnomeEDITME\*\*/gnome/' \
              -e 's/\*\*EDITMEClearwaitaEDITME\*\*/Adwaita Cupertino/' \
              -e 's/\*\*EDITMEelementaryEDITME\*\*/gnome/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gtk-vnc)
       GetInternalCommands gtkvncComms >> $Output
    ;;
    guile)
       GetCommands \
        | sed -e '/makeinfo/d' \
              -e '/mv \/usr\/lib\/libguile-\*-gdb.scm/d' \
              -e '/find examples -name/d' \
              -e '/for DIRNAME/,/unset DIRNAME/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gutenprint)
       GetCommands \
        | sed -e '/systemctl restart/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gvfs)
       GetCommands \
        | sed -e 's/disable-gphoto2/libexecdir=\/usr\/lib\/gvfs \\\n\              --with-bash-completion-dir=\/usr\/share\/bash-completion\/completions/' \
              -e '/glib-compile-schemas/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    ibus)
       if [ "$GNOME_OR_XFCE" = gnome ]; then
         GetCommands \
          | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib\/ibus/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else # xfce so disable dconf
         GetCommands \
          | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib\/ibus --disable-dconf/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    icedtea-web)
       GetCommands \
        | sed -e 's/{JAVA_HOME}\/man/{JAVA_HOME}\/man --with-firefox=\/usr\/bin\/firefox/' \
              -e '/ln -s/i install -m644 javaws.desktop /usr/share/applications' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    icon-nam-utls)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib\/icon-naming-utils/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    inkscape)
       GetCommands \
        | sed -e '/gtk-update-icon-cache/,/update-desktop-database/d' \
              -e 's/\(.*\)&&[[:blank:]]*$/\1/' \
        >> $Output
    ;;
    iptables)
       GetCommands \
        | sed -e 's/sbindir=\/sbin/sbindir=\/usr\/bin/' \
              -e 's/--with-xtlibdir=\/lib/--with-xtlibdir=\/usr\/lib/' \
              -e "/configure_commands()/ i sed -i -e '\/sbin\\\/ldconfig/d' \\\\\n       -e '/\${INSTALL} -dm0755 \"\${DESTDIR}\${bindir}\";/d' iptables\/Makefile.in" \
              -e 's/..\/..\/sbin\/xtables-multi/xtables-multi/' \
              -e '/for file in ip4tc/,/make install-iptables/d' \
              -e 's/\(.*\)&&[[:blank:]]*$/\1/' \
        >> $Output
    ;;
    iw)
       GetInternalCommands iwComms >> $Output
    ;;
    java-hamcrest)
       GetInternalCommands hamcrestComms >> $Output
    ;;
    jdkbin)
       GetCommands \
        | sed -e 's/OpenJDK-'"${jdkcomvers}"'-bin/\${SrcName}bin/g' \
              -e '/chown/,/export PATH/d' \
              -e '/mv -v/a ln -svf ${SrcName}bin /opt/jdk' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    js)
       GetCommands \
        | sed -e '/js-17.0/,/chmod -v 644/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    json-c)
       GetCommands \
        | sed -e '/make install/a\   cp json_object_iterator.h /usr/include/json' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    junit)
       GetCommands \
        | sed -e '/chown -R root:root/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    krb5)
       GetCommands \
        | sed -e '/gpg/d' \
              -e '/mv -v/d' \
              -e '/ln -v -sf/d' \
              -e '/cat > \/etc\/krb5.conf/,/make install-krb5/d' \
              -e '/unset LIBRARY/i install -dm 755 \/var\/lib\/krb5kdc\ninstall -pm 644 config-files\/kdc.conf \/var\/lib\/krb5kdc\/kdc.conf\ninstall -pm 644 config-files\/krb5.conf \/etc\/krb5.conf\ninstall -m 644 util\/ac_check_krb5.m4 \/usr\/share\/aclocal' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libassuan)
        GetCommands \
        | sed -e '/make -C doc pdf ps/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libcanberra)
       if [ "$GNOME_OR_XFCE" = xfce ]; then
         GetCommands \
          | sed -e 's/oss/oss --disable-schemas-install/' \
                -e '/systemctl enable canberra/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       elif [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e 's/oss/oss \\\n   --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system/' \
                -e '/systemctl enable canberra/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    libdaemon)
        GetCommands \
        | sed -e '/make -C doc doxygen/d' \
              -e '/install -v -m644 doc\/reference\/man/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libdvdcss)
       GetCommands \
        | sed -e '/doxygen.cfg/d' \
              -e '/make -C doc\/latex pdf/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libgcrypt)
        if [ "$SYSTEMD" = yes ]; then
          GetCommands \
          | sed -e '/make -C doc pdf ps html/,/makeinfo --plaintext/d' \
                -e '/mv -v/,/ln -sfv/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
        else
          GetCommands \
          | sed -e '/make -C doc pdf ps html/,/makeinfo --plaintext/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
        fi
    ;;
    libgda)
       GetCommands \
        | sed -e '/--enable-system-sqlite/ i --with-java=no \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libglade)
       GetInternalCommands basicComms \
        | sed -e '/make install/a\  install -m755 libglade-convert \/usr\/bin/' \
        >> $Output
    ;;
    libgnome-keyring)
       GetInternalCommands basicComms \
        | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/gnome-keyring/' \
        >> $Output
    ;;
    libgpg-error)
        if [ "$SYSTEMD" = yes ]; then
          GetCommands \
           | sed -e '/mv -v/,/ln -sfv/d' \
                 -e 's/\(.*\)&&$/\1/' \
           >> $Output
        else
          GetCommands \
           | sed -e 's/\(.*\)&&$/\1/' \
           >> $Output
        fi 
    ;;
    libgweather)
       GetInternalCommands basicComms \
        | sed -e 's/--prefix=\/usr/--prefix=\/usr --enable-locations-compression/' \
        >> $Output
    ;;
    libical)
       GetCommands \
        | sed -e '/mkdir build/i if [ ! -d build ]; then' \
              -e '/cd build/i fi' \
              -e '/make docs/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libidl)
       GetCommands \
        | sed -e '/make pdf ps/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libidn)
       GetCommands \
        | sed -e '/cp/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libisoburn)
       GetCommands \
        | sed -e '/doxygen/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libksba)
       GetCommands \
        | sed -e '/makeinfo/,/make -C doc/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libmbim)
       GetCommands \
        | sed -e 's/disable-static/disable-static \\\n              --libexecdir=\/usr\/lib\/libmbim/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libmm-glib)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static \\\n              --sbindir=\/usr\/bin \\\n              --with-udev-base-dir=\/usr\/lib\/udev \\\n              --with-polkit=permissive \\\n              --enable-gtk-doc \\\n              --without-mbim \\\n              --without-qmi/' \
        >> $Output
    ;;
    libmusicbrainz)
       GetCommands \
        | sed -e '/doxygen/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libpeas)
       GetInternalCommands basicComms \
        | sed -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
        >> $Output
    ;;
    libproxy)
       GetInternalCommands libproxyComms >> $Output
    ;;
    libpwquality)
       GetCommands \
        | sed -e '/disable-python-bindings/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libqmi)
       GetCommands \
        | sed -e 's/disable-static/disable-static \\\n              --libexecdir=\/usr\/lib\/libqmi/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libreoffice)
       GetCommands \
        | sed -e '/tar -xf libreoffice/,/cd libreoffice/d' \
              -e '/ln -sv ..\/..\/libreoffice-translations/d' \
              -e 's/\*\*EDITME<PREFIX>EDITME\*\*/\/usr/' \
              -e 's/en-US pt-BR"/en-US"      /' \
              -e 's/--enable-python=system/--disable-python      /' \
              -e '/with-system-clucene/d' \
              -e '/with-system-graphite/d ' \
              -e '/--with-system-odbc/d' \
              -e '/chown -cR 0:0 dictionaries/d' \
              -e '/dict-pt-BR/,/unset i/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libsoup)
       if [ "$GNOME_OR_XFCE" = xfce ]; then
         GetCommands \
          | sed -e 's/disable-static/disable-static --without-gnome/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    libtasn1)
        GetCommands \
        | sed -e '/make -C doc\/reference install-data-local/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libtheora)
       GetCommands \
        | sed -e '/cd examples/,/done/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libtirpc)
       GetCommands \
        | sed -e '/mv -v/,/ln -sfv/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libusb|cpio)
       GetCommands \
        | sed -e 's/bindir=\/bin/bindir=\/usr\/bin/' \
              -e '/enable-mt/i\              --libexecdir=\/usr\/lib  \\' \
              -e 's/libexec/lib/' \
              -e '/make -C doc /d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libvirt)
      GetInternalCommands libvirtComms \
       | sed -e "/make install/i\  sed -i 's|/etc/sysconfig/|/etc/conf.d/|' daemon/libvirtd.service tools/libvirt-guests.service\n  sed -i 's|@sbindir@|/usr/bin|g' src/virtlockd.service\n  sed -i 's|#group =.*|group=\"kvm\"|' src/qemu/qemu.conf" \
       >> $Output
    ;;
    libxcb)
       GetCommands \
        | sed -e "/make install/i\  sed -i -e 's/libxcb\\\/install-sh/libxcb\\\/libxcb-1.9.1\\\/install-sh/' doc\\\/Makefile" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libxml2)
       GetCommands \
        | sed -e '/tar xf ../d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    linux-pam)
       GetCommands \
        | sed -e 's/libdir=\/usr\/lib/libdir=\/usr\/lib --sbindir=\/usr\/bin/' \
              -e 's/securedir=\/lib/securedir=\/usr\/lib/' \
              -e '/chmod -v 4755/,/done/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    llvm) # with clang
       GetCommands \
        | sed -e '/make -C docs/d' \
              -e '/install -v -m644 docs/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    lvm2)
       if [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e 's/--enable-udev_sync/--enable-udev_sync \\\n\              --with-udev-prefix=\/usr \\\n\              --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system \\\n\              --with-default-pid-dir=\/run \\\n\              --with-default-dm-run-dir=\/run \\\n\              --with-default-run-dir=\/run\/lvm \\\n\              --enable-dmeventd \\\n\              --enable-lvmetad \\\n\              --enable-udev_rules \\\n\              --with-default-locking-dir=\/run\/lock\/lvm/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    mediaplayrinfo)
       GetInternalCommands mpiComms >> $Output
    ;;
    mesalib)
       GetCommands \
        | sed -e '/enable-gbm/i\              --enable-vdpau               \\' \
              -e 's/r300,r600,radeonsi,//' \
              -e '/with-gallium-drivers/i\              --with-dri-drivers=i965      \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    metacity)
       GetInternalCommands basicComms \
        | sed -e 's@libexecdir=/usr/lib@libexecdir=/usr/lib/metacity@' \
        >> $Output
    ;;
    midori)
       GetCommands \
        | sed -e '/DCMAKE_INSTALL_DOCDIR=/i\              -DUSE_GTK3=1 \\' \
              -e 's/\(.*\)&&$/\1/' \
         >> $Output
    ;;
    modem-manager)
       GetCommands \
        | sed -e 's/disable-static/disable-static \\\n\              --without-mbim \\\n\              --without-qmi/' \
              -e '/systemctl enable ModemManager/d' \
              -e 's/\(.*\)&&$/\1/' \
         >> $Output
    ;;
    mutter)
       GetInternalCommands basicComms \
        | sed -e 's@libexecdir=/usr/lib@libexecdir=/usr/lib/mutter@' \
              -e 's/disable-static/disable-static --enable-compile-warnings=no/' \
              -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
        >> $Output
    ;;
    mariadb)
       GetCommands \
        | sed -e '/groupadd/,/useradd/d' \
              -e '/mysql_install_db/,/make install-mysql/d' \
              -e 's/\(.*\)&&$/\1/' \
         >> $Output
    ;;
    nasm)
       GetCommands \
        | sed -e '/tar -xf/d' \
              -e '/cp -v doc\/info\//,/install-info/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    nautilus)
       GetCommands \
        | sed -e 's/packagekit/packagekit --libexecdir=\/usr\/lib\/nautilus/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    neon)
       GetCommands \
        | sed -e 's/disable-static/disable-static \\\n\              --with-expat --with-ssl=openssl \\\n\              --with-ca-certificates=\/etc\/ssl\/ca-bundle.crt/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    netctl)
       GetInternalCommands netctlComms >> $Output
    ;;
    ntificatn-demon)
       GetInternalCommands basicComms \
        | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/notification-daemon/' \
        >> $Output
    ;;
    networkmanager)
       if [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e '/--disable-ppp/i\              --libexecdir=\/usr\/lib\/networkmanager \\\n\              --sbindir=\/usr\/bin \\\n\              --with-dhcpcd=\/usr\/bin\/dhcpcd \\\n\              --with-iptables=\/usr\/bin\/iptables \\\n\              --with-udev-dir=\/usr\/lib\/udev \\\n\              --disable-static \\' \
                -e '/systemctl enable/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/disable-ppp/disable-ppp --libexecdir=\/usr\/lib\/networkmanager --sbindir=\/usr\/bin/' \
                -e '/make install-networkmanager/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    netwrk-mngr-app)
       GetCommands \
        | sed -e '/sysconfdir=/i\              --libexecdir=\/usr\/lib\/networkmanager \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    nss)
       GetCommands \
        | sed -e '/cd ..\/dist/d' \
              -e '/install -v -m755 Linux\*\/lib/i\  cd ..\/dist' \
              -e '/cp -v -RL/ i cd ..\/dist' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    nss-mdns)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static \\\n\              --disable-lynx/' \
        >> $Output
    ;;
    nvidia)
       GetInternalCommands nvidiaComms >> $Output
    ;;
    nvidia-libgl)
       GetInternalCommands nvlibglComms >> $Output
    ;;
    nvidia-utils)
       GetInternalCommands nvutilsComms >> $Output
    ;;
    opal)
       GetCommands \
        | sed -e "/make install/ i\  sed -i '/mkdir -p \\\\\$(DESTDIR)\\\\\$(libdir); chmod 755 \\\\\$(DESTDIR)\\\\\$(libdir)/d' Makefile" \
              -e "/make install/ i\  sed -i '/mkdir -p \\\\\$(DESTDIR)\\\\\$(libdir)\\\/pkgconfig ; chmod 755 \\\\\$(DESTDIR)\\\\\$(libdir)\\\/pkgconfig/d' Makefile" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    openbox)
       GetCommands \
        | sed -e '/disable-static/i\              --libexecdir=\/usr\/lib\/openbox \\' \
              -e 's/openbox ~\/.config/openbox \/home\/john\/.config/' \
              -e '/ls -d \/usr\/share\/themes/,/lxpanel/d' \
              -e '/exec openbox-session/,/EOF/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    openjdk)
       GetCommands \
        | sed -e '/corba.tar.xz/,/jtreg/d' \
              -e 's/OpenJDK-1.8.0.25/jdk8-openjdk/g' \
              -e '/chown -R root:root/d' \
              -e '/pt_BR/d' \
              -e 's/jdk8-openjdk-bin/jdk8-openjdk/' \
              -e '/cat > \/etc\/profile.d\/openjdk.sh/,/\/opt\/jdk\/jre\/lib\/security\/cacerts/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    openldap)
       GetCommands \
        | sed -e '/groupadd/,/ldapsearch/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    openobex)
       if ! $as_root; then
         GetCommands \
          | sed -e '/groupadd/d' \
              -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    openssh)
       if ! $as_root; then
         GetCommands \
          | sed -e '/install -v -m700 -d \/var\/lib\/sshd/,/-s \/bin\/false -u 50 sshd/d' \
                -e '/with-md5-passwords/i\              --sbindir=/usr/bin \\\n\              --libexecdir=/usr/lib/ssh \\\n\              --with-ssl-engine \\\n\              --with-pam \\' \
                -e '/ssh-keygen/,/echo "ChallengeResponseAuthentication/d' \
                -e '/make install-sshd/,/systemctl start sshd.socket/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/with-md5-passwords/i\              --sbindir=/usr/bin \\\n\              --libexecdir=/usr/lib/ssh \\\n\              --with-ssl-engine \\\n\              --with-pam \\' \
                -e '/ssh-keygen/,/echo "ChallengeResponseAuthentication/d' \
                -e '/make install-sshd/,/systemctl start sshd.socket/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    openssl)
       GetCommands \
        | sed -e '/\/usr\/share\/doc\/openssl/d' \
              -e '/cp -v -r doc/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    pango)
       GetCommands \
        | sed -e '/pango-querymodules/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    pangox-compat)
        GetInternalCommands basicComms >> $Output
    ;;
    parted)
       GetCommands \
        | sed -e '/make -C doc html/,/dvips/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    pcre)
       if [ "$SYSTEMD" = yes ]; then 
         GetCommands \
          | sed -e '/mv -v/,/ln -sfv/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands  >> $Output
       fi
    ;;
    php)
       rtrnCom="" # need the version of php used in the book commands
       getComms $pkgname $xmlsec
       numcomms=${#rtrnCom[@]}
       phpXBookVers ${rtrnCom[numcomms-10]}
       GetCommands \
        | sed -e '/install -v -m644 p/a\  install -v -m755 -d \/usr\/share\/doc\/php-'"${phpvers}"'' \
              -e '/tar -xvf/,/no-same-owner/d' \
              -e "s/$phpXbookvers/$phpvers/" \
              -e '/make install-php/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    pidgin)
       GetCommands \
        | sed -e '/disable-avahi/d' \
              -e '/disable-gstreamer/d' \
              -e '/disable-idn/,/disable-nm/d' \
              -e 's/disable-vv        \\/disable-vv/' \
              -e '/disable-tcl/d' \
              -e '/gtk-update-icon-cache/,/update-desktop-database/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    pinentry)
       GetCommands \
        | sed -e 's/--prefix=\/usr/--prefix=\/usr \\\n\  --enable-pinentry-curses \\\n\  --disable-pinentry-gtk \\\n\  --disable-pinentry-qt \\\n\  --enable-fallback-curses/' \
              -e '/makeinfo --html/,/make -k -C doc/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    polkit)
       if ! $as_root; then
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e '/groupadd/,/-g polkitd -s \/bin\/false polkitd/d' \
                  -e 's/--with-authfw=shadow/--libexecdir=\/usr\/lib\/polkit-1 \\\n\              --enable-libsystemd-login=yes/' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/groupadd/,/-g polkitd -s \/bin\/false polkitd/d' \
                  -e '/--with-authfw=shadow/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       else
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e 's/--with-authfw=shadow/--libexecdir=\/usr\/lib\/polkit-1 \\\n\              --enable-libsystemd-login=yes/' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/--with-authfw=shadow/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       fi
    ;;
    polkit-gnome)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr \\\n\              --sysconfdir=\/etc \\\n\              --localstatedir=\/var \\\n\              --libexecdir=\/usr\/lib\/polkit-gnome \\\n\              --disable-static/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    ptlib)
       GetCommands \
        | sed -e "/make install/i\  sed -e '/mkdir -p \$(DESTDIR)\$(LIBDIR)\\\/pkgconfig/d' \\\\" \
              -e "/make install/i\      -e '/chmod 755 \$(DESTDIR)\$(LIBDIR)\\\/pkgconfig/d' -i Makefile" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    pulseaudio)
       GetCommands \
        | sed -e '/groupadd/,/usermod -a -G/d' \
              -e '/with-module-dir/i\              --libexecdir=/usr/lib \\\n\              --disable-default-build-tests \\' \
              -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    py2-atspi)
       GetInternalCommands py2atspiComms >> $Output
    ;;
    py3-atspi)
       GetInternalCommands py2atspiComms \
        | sed -e 's/python2/python3/' \
        >> $Output
    ;;
    py2-xdg|py3-xdg|docutils)
       GetInternalCommands pyComms >> $Output
    ;;
    py2-dbus)
       GetInternalCommands py2dbusComms >> $Output
    ;;
    py3-dbus)
       GetInternalCommands py3dbusComms >> $Output
    ;;
    py2-gobject3)
       GetInternalCommands basicComms \
        | sed -e "/configure_commands()/i sed -i '/Werror=format/d' configure" \
              -e 's/disable-static/disable-static --with-python=\/usr\/bin\/python2/' \
        >> $Output
    ;;
    py3-gobject3)
       GetInternalCommands basicComms \
        | sed -e "/configure_commands()/i sed -i '/Werror=format/d' configure" \
              -e 's/disable-static/disable-static --with-python=\/usr\/bin\/python3/' \
        >> $Output
    ;;
    py2-setuptools)
       GetInternalCommands py2setuptoolsComms >> $Output
    ;;
    py3-setuptools)
       GetInternalCommands py3setuptoolsComms >> $Output
    ;;
    pysolfc)
       GetInternalCommands pysolfcComms >> $Output
    ;;
    pysolss)
       GetInternalCommands pysolssComms >> $Output
    ;;
    python2)
       GetCommands \
        | sed -e '/make -C Doc html/d' \
              -e '/cp -rfv Doc/d' \
              -e '/tar --strip-components=1/d' \
              -e '/-xvf ../d' \
              -e '/export PYTHONDOCS=/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    python3)
       GetCommands \
        | sed -e '/tar --strip/ i install -v -m755 -d /usr/share/doc/python-${Python3vers}/html' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    qemu)
       GetCommands \
        | sed -e '/prefix=\/usr                \\/a\              --libexecdir=\/usr\/lib\/qemu   \\\n\              --localstatedir=\/var       \\' \
              -e '/egrep/,/export/d' \
              -e '/qemu-img create/,/chmod +x \/etc\/qemu-ifdown/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    qt4)
       GetCommands \
        | sed -e '/export QT4PREFIX=\/usr/d' \
              -e '/mv \/opt\/qt/,/export QT4BINDIR=\$QT4PREFIX\/lib/d' \
              -e '/ldconfig/d' \
              -e 's/\(.*\)&&$/\1/' \
              -e 's/prl \]/prl \] \&\&/' \
        >> $Output
    ;;
    ruby)
       GetCommands \
        | sed -e '/cp -v template/,/doxygen/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    samba)
        if [ "$SYSTEMD" = yes ]; then
          GetCommands \
           | sed -e 's/pammodulesdir=\/lib/pammodulesdir=\/usr\/lib/' \
                 -e 's/wrapper/wrapper --with-sockets-dir=\/run\/samba \\\n\      --with-ads \\\n\      --with-winbind \\\n\      --with-acl-support \\\n\      --enable-gnutls \\\n\      --with-pam --with-configdir=\/etc\/samba \\\n\      --with-lockdir=\/var\/cache\/samba/' \
                 -e '/mv -v \/usr\/lib\/libnss_win{s,bind}.so/,/ln -v -sf ..\/..\/lib\/libnss_wins.so.2/d' \
                 -e '/groupadd -g 99 nogroup/,/make install-winbindd/d' \
                 -e '/systemctl stop smbd/,/systemctl start smbd.socket/d' \
                 -e 's/\(.*\)&&$/\1/' \
          >> $Output
        else
          GetCommands \
           | sed -e '/groupadd -g 99 nogroup/,/make install-winbindd/d' \
                 -e 's/\(.*\)&&$/\1/' \
          >> $Output
        fi
    ;;
    sdl)
       GetCommands \
        | sed -e '/cd test/,/make/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    sdl2)
       GetInternalCommands sdl2Comms >> $Output
    ;;
    seamonkey)
       GetCommands \
        | sed -e '/Yasm/,/disable-libnotify/d' \
              -e 's/\# ac_add_options --enable-startup-notification/ac_add_options --enable-startup-notification/' \
              -e 's/\# ac_add_options --enable-system-sqlite/ac_add_options --enable-system-sqlite/' \
              -e 's/\# ac_add_options --enable-system-libevent/ac_add_options --enable-system-libevent/' \
              -e 's/\# ac_add_options --with-system-libvpx/ac_add_options --with-system-libvpx/' \
              -e 's/\# ac_add_options --with-system-nspr/ac_add_options --with-system-nspr/' \
              -e 's/\# ac_add_options --with-system-nss/ac_add_options --with-system-nss/' \
              -e '/make -C moz-build-dir install/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    sgml-common)
       GetCommands \
        | sed -e '/install-catalog --remove/,/\/etc\/sgml\/sgml-ent.cat/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    shadow)
        # assume cracklib support with Linux-PAM
        # don't install foreign man pages
        if ! $as_root; then
          GetCommands \
          | sed -e '/DICTPATH\\t\/lib\/cracklib/d' \
              -e "/configure_commands()/i sed -i -e 's\/po cs da de es fi fr hu id it ja ko pl pt_BR ru sv tr \\\\\\\//' \\\\\n -e 's\/zh_CN zh_TW\/\/' \\\\\n -e 's\/po cs da de es fi fr hu id it ja ko pl pt_BR ru sv tr\//'  man/Makefile.in" \
              -e '/mv -v \/usr\/bin\/passwd/d' \
              -e 's/\(.*\)&&$/\1/' \
          >> $Output
        else
          GetCommands \
          | sed -e '/DICTPATH\\t\/lib\/cracklib/d' \
              -e "/configure_commands()/i sed -i -e 's\/po cs da de es fi fr hu id it ja pl pt_BR ru sv tr \\\\\\\//' \\\\\n -e 's\/zh_CN zh_TW\/\/' \\\\\n -e 's\/po cs da de es fi fr hu id it ja pl pt_BR ru sv tr\//'  man/Makefile.in" \
              -e '/mv -v \/usr\/bin\/passwd/d' \
              -e 's/\(.*\)&&$/\1/' \
          >> $Output
        fi
    ;;
    smpeg)
       GetInternalCommands basicComms \
        |sed -e '/prefix=\/usr/i\  \.\/autogen.sh' \
             -e 's/prefix=\/usr/prefix=\/usr --mandir=\/usr\/share\/man/' \
        >> $Output
    ;;
    snappy)
       GetInternalCommands basicComms \
        | sed -e 's/\.\/configure/CXXFLAGS+=\\ -DNDEBUG \.\/configure/' \
        >> $Output
    ;;
    speechd)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static --without-flite/' \
        >> $Output
    ;;
    sqlite)
       GetCommands \
        | sed -e '/unzip/d' \
              -e '/cp -v -R sqlite-doc/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    squid)
       GetInternalCommands squidComms >> $Output
    ;;
    subversion)
       GetCommands \
        | sed -e 's/disable-static/disable-static \\\n\              --with-apr=\/usr --with-apr-util=\/usr \\\n\              --with-apache-libexecdir=\/usr\/lib\/httpd\/modules \\\n\              --with-ruby-sitedir=\/usr\/lib\/ruby\/vendor_ruby/' \
              -e '/cp -v -R sqlite-doc/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    sudo)
       GetCommands \
        | sed -e "/configure_commands()/i sed -e 's/\$(INSTALL_OWNER)//g' \\\\\n    -i lib/util/Makefile.in \\\\\n    -i plugins/group_file/Makefile.in \\\\\n    -i plugins/sudoers/Makefile.in \\\\\n    -i plugins/system_group/Makefile.in \\\\\n    -i src/Makefile.in \\\\\n    -i include/Makefile.in \\\\\n    -i doc/Makefile.in" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    systemd)
       GetCommands \
        | sed -e '/export SYSTEMD_VERSION=/d' \
              -e "/patch -Np1 -i/i export SYSTEMD_VERSION=$SYSTEMD_VERSION" \
              -e "/configure_commands()/i sed -e '/install-touch-usr-hook/d' \\\\\n    -e '/touch -c/d' \\\\\n    -i Makefile.in" \
              -e 's/rootlibdir=\/lib/rootlibdir=\/usr\/lib/' \
              -e '/enable-split-usr/d' \
              -e '/systemctl start rescue.target/d' \
              -e '/mv -v \/usr\/lib/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    tcl)
       GetCommands \
        | sed -e '/cp      -v -R       ../d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    tdb)
       GetInternalCommands basicComms \
        | sed -e "/configure_commands()/i sed -i -e 's#python#python2#g' buildtools/bin/waf" \
              -e 's/sysconfdir=\/etc/sysconfdir=\/etc\/samba/' \
              -e 's/usr\/lib \\/usr\/lib/' \
              -e '/--disable-static/d' \
        >> $Output
    ;;
    telepathy-gabl|telepathy-haze|telepathy-idle|telepathy-logr|tpthymisscntrl|telepathy-salut)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib\/telepathy/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    traceroute)
       GetCommands \
        | sed -e '/mv \/usr\/bin\/traceroute/d' \
              -e '/rm -fv \/usr\/share\/man\/man1\/traceroute.1/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    tracker)
       GetCommands \
        | sed -e '/disable-static/i\              --libexecdir=/usr/lib/tracker \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    udisks)
       if [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e 's/--disable-static/--disable-static --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    unzip)
       GetCommands \
        | sed -e '/This.block.must.be.edited/,/End.of.editable.block/d' \
        >> $Output
    ;;
    upower)
       GetCommands \
        | sed -e '/disable-static/i\              --libexecdir=\/usr\/lib\/upower \\' \
              -e '/systemctl enable upower/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    v4l-utils)
       GetInternalCommands v4lComms >> $Output
    ;;
    vlc)
       GetCommands \
        | sed -e 's/--prefix=\/usr/--prefix=\/usr --disable-lua/' \
              -e '/gtk-update-icon-cache/,/update-desktop-database/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    vte)
       GetCommands \
        | sed -e 's/introspection/introspection --libexecdir=\/usr\/lib\/vte/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    wavpack)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static --enable-mmx/' \
        >> $Output
    ;;
    wayland)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static --disable-documentation/' \
        >> $Output
    ;;
    webkitgtk)
         GetInternalCommands webkitgtkComms >> $Output
    ;;
    weston)
       GetCommands \
        | sed -e "/configure_commands/i sed -e '/chown root \\\\\$(DESTDIR)\\\\\$(bindir)\\\/weston-launch/d' \\\\\n\    -e '/chmod u+s \\\\\$(DESTDIR)\\\\\$(bindir)\\\/weston-launch/d' -i Makefile.in " \
              -e 's/--prefix=\/usr/--prefix=\/usr --libexecdir=\/usr\/lib\/weston/' \
              -e 's/\(.*\)&&$/\1/' \
          >> $Output
    ;;
    which)
       GetCommands \
        | sed -e '/cat/,/chown/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    wpa_supplicant)
       if [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e 's/BINDIR=\/sbin LIBDIR=\/lib/BINDIR=\/usr\/bin LIBDIR=\/usr\/lib/' \
                -e 's/qmake-qt4/\/opt\/qt4\/bin\/qmake/' \
                -e 's/\/lib\/systemd/\/usr\/lib\/systemd/' \
                -e '/update-desktop-database/d' \
                -e '/systemctl enable wpa_supplicant/d' \
                -e '/wpa_passphrase/,/systemctl start wpa_supplicant/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/update-desktop-database/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    x264)
       GetInternalCommands x264Comms >> $Output
    ;;
    x265)
       GetInternalCommands x265Comms >> $Output
    ;;
    $xapp)
        GetXCommands \
        | sed -e 's/bash -e/set -e/' \
              -e '/for package in/ i cd $cursec' \
              -e '/configure/i\  for curFile in .\/*; do\n  permval=$(stat -c %a $curFile)\n  if [ $permval -eq 555 ]; then\n   chmod 755 $curFile\n  fi\n  done' \
              -e 's/XORG_CONFIG/XORG_CONFIG --disable-selective-werror 2>\&1 | tee ..\/\${packagedir}-configure.log/' \
              -e 's/as_root make install/make install 2>\&1 | tee ..\/\${packagedir}-install.log/' \
              -e '/exit/d' \
              -e 's/\(.*\)&&$/\1/' \
         | awk '{
if( $1 == "make" && $2 == "")
  print "  "$1" 2>&1 | tee ../${packagedir}-make.log";
else
  print $0;
}' \
       >> $Output
    ;;
    xboard)
       GetInternalCommands basicComms \
        | sed -e "/configure_commands()/i sed -i 's/fairymax/gnuchess/g' {xaw,gtk}/xboard.h xboard.conf" \
              -e 's/disable-static/disable-static \\\n\              --with-gtk \\\n\              --enable-zippy/' \
              -e '/make install/a\  install -Dm755 cmail /usr/bin/cmail' \
       >> $Output
    ;;
    xfce4-xkb-plugin)
       GetCommands \
        | sed -e '/disable-static/i\              --libexecdir=\/usr\/lib \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    xfce4-session)
       GetCommands \
        | sed -e '/.xinitrc/d' \
              -e '/\*\*EDITMEUSERNAMEEDITME\*\*/,/sudoers/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    $xlib)
        GetXCommands \
        | sed -e 's/bash -e/set -e/' \
              -e '/for package in/ i cd $cursec' \
              -e '/case $packagedir in/i\  for curFile in .\/*; do\n  permval=$(stat -c %a $curFile)\n  if [[ $permval -eq 555 || $permval -eq 444 ]]; then\n   chmod 755 $curFile\n  fi\n  done' \
              -e 's/disable-devel-docs/disable-devel-docs 2>\&1 | tee ..\/\${packagedir}-configure.log/' \
              -e 's/appdefaultdir=\/etc\/X11\/app-defaults/appdefaultdir=\/etc\/X11\/app-defaults 2>\&1 | tee ..\/\${packagedir}-configure.log/' \
              -e 's/as_root make install/    make install 2>\&1 | tee ..\/\${packagedir}-install.log/' \
              -e '/as_root \/sbin\/ldconfig/d' \
              -e '/exit/d' \
              -e '/ln -sv \$XORG_PREFIX/d' \
              -e 's/\(.*\)&&$/\1/' \
        | awk '{
if ($1 == "./configure" && $2 == "$XORG_CONFIG")
{
  icount++;
  if (icount == 3)
    print "      "$1" "$2" 2>&1 | tee ../${packagedir}-configure.log";
  else
    print $0;
}
else if ($1 == "make" && $2 == "")
  print "      "$1" 2>&1 | tee ../${packagedir}-make.log";
else
  print $0;
}' \
       >> $Output
    ;;
    xml-sax) # need a response file to a question
        GetCommands \
         | sed -e '/configure_commands()/i cp \${blfsfiles}/xml-sax-response ..' \
               -e 's/Makefile.PL/Makefile.PL < ..\/xml-sax-response/' \
               -e 's/\(.*\)&&$/\1/' \
         >> $Output
    ;;
    xorg-intel)
        GetCommands \
         | sed -e 's/enable-kms-only/enable-kms-only --libexecdir=\/usr\/lib/' \
               -e 's/\(.*\)&&$/\1/' \
         >> $Output
    ;;
    xorg-server)
        GetCommands \
         | sed -e '/--enable-install-setuid/d' \
               -e 's/suid-wrapper/suid-wrapper --libexecdir=\/usr\/bin \\\n\              --sysconfdir=\/etc\/X11/' \
               -e 's/\(.*\)&&$/\1/' \
         >> $Output
    ;;
    xorg-vmmouse)
        GetCommands \
         | sed -e 's/\/xf86-input-vmmouse/patch -Np1 -i \.\.\/xf86-input-vmmouse/' \
               -e 's/--with-udev-rules-dir=\/lib/--with-udev-rules-dir=\/usr\/lib/' \
               -e 's/\(.*\)&&$/\1/' \
         >> $Output
    ;;
    $xproto|$xfont)
        GetXCommands \
         | sed -e 's/bash -e/set -e/' \
              -e '/for package in/ i cd $cursec' \
              -e '/.\/configure \$XORG_CONFIG/i\  for curFile in .\/*; do\n  permval=$(stat -c %a $curFile)\n  if [[ $permval -eq 555 || $permval -eq 444 ]]; then\n   chmod 755 $curFile\n  fi\n  done' \
              -e 's/.\/configure \$XORG_CONFIG/.\/configure \$XORG_CONFIG 2>\&1 | tee ..\/\${packagedir}-configure.log/' \
              -e 's/as_root make install/make install 2>\&1 | tee ..\/\${packagedir}-install.log/' \
              -e 's/as_root rm -rf \$packagedir/rm -rf \$packagedir/' \
              -e '/exit/d' \
              -e 's/\(.*\)&&$/\1/' \
         | awk '{
if( $1 == "make" && $2 == "")
  print "  "$1" 2>&1 | tee ../${packagedir}-make.log";
else
  print $0;
}' \
       >> $Output
    ;;
    xterm)
        GetCommands \
         | sed -e '/make install-ti/d' \
               -e '/cat/,/EOF/d' \
               -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    yajl)
       GetInternalCommands yajlComms >> $Output
    ;;
    zenity)
       GetInternalCommands basicComms \
        | sed -e 's/\.\/configure/\.\/autogen.sh/' \
        >> $Output
    ;;
    *)
        GetCommands \
        | sed -e 's/\(.*\)&&$/\1/' \
        >> $Output
        return_val=$?
        if [ $return_val -eq $RETURN_PARAM ]; then # no build file
          echo "No build file available in ${LFS}${srcrootdir}/pkguser"
          echo "Please place the build file there"
          exit 1
        fi
    ;;
esac
} # end WriteScript
#
cleanstart () {
for Script in ${Section}.sh; do
  for loc in $LFS ~/; do
    if [ -e $loc/$Script ]; then rm $loc/$Script;fi
  done
done
} #end cleanstart
#
PkgDepend () {
cat >> $Output << "EOF"
PkgDepend () {
declare -a ndep
declare -a tdep
foundDep=false
dpName=${FuncName}dep # package dependencies
depfile=${blfsfiles}/dependencies/${Section}-dependencies
if [ ! -e $depfile ]; then
 return $RETURN_PARAM
else
  while read depline
  do
    case $depline in
      $dpName*)
        foundDep=true
        ic=0
        ndep=""
        tdep=""
        stordep=""
        ndeps=($depline)
        for (( i=1; i<${#ndeps[@]}-1; i++ )); do
          tdep[ic++]=${ndeps[i]}
        done
      ;;
    esac
  done < $depfile
  if ! $foundDep; then # no deps found for this package
    return $RETURN_NOTSET
  else
    DepRtrn=(${tdep[@]})
    return 0
  fi
fi
} # end PkgDepend
EOF
} # end PkgDepend
#
testDeps () {
cat >> $Output << "EOF"
testDeps () {
declare -a tstDeps=("${!1}")
declare -a stordep
countdep=0
for (( k=0; k<${#tstDeps[@]}; k++ )); do
  pfile=$(echo ${tstDeps[k]} | awk 'BEGIN {FS="/"}{print $2}')
  case $pfile in
    systemd_gudev)
        tstDeps[k]="core/systemd"
    ;;
    dbus_launch)
        tstDeps[k]="core/dbus"
    ;;
    eudev_extras)
        tstDeps[k]="core/eudev"
    ;;
  esac
  testfile=${PKGUSERDIR}/${tstDeps[k]}/.${pfile}
  if [ ! -f $testfile ]; then 
    if [ "$SYSTEMD" = yes ]; then 
      case $pfile in 
         expat|intltool|attr|acl|gperf|libcap|xml-parser)
           : # already installed in lfs
         ;;
         consolekit|eudev_extras)
           : # not present in a systemd system
         ;;
         *)
           stordep[countdep++]=${tstDeps[k]} # package dependency not met
         ;;
      esac
    else
      case $pfile in
         netctl|systemd_gudev)
           : # not required if not systemd
         ;;
         *) 
           stordep[countdep++]=${tstDeps[k]}
         ;;
      esac
    fi
  fi
done
if [ $countdep -gt 0 ]; then # some dependencies not met
  rtrnDepNotMet=(${stordep[@]})
  return $RETURN_DEPNOTMET
else
  return $RETURN_ALLDEPSMET # all dependencies met
fi
} # end testDeps
EOF
} # end testDeps
#
numcharInstall () { # get the number of chars in the install group
cat >> $Output << "EOF"
numcharInstall () {
group="/etc/group"
grpname=$1
while read line; do
  case $line in
    $grpname*)
         numchars=$( printf $line | wc -c ) # should be <= 2048
         return 0
    ;;
  esac
done < $group
} # end numcharInstall
EOF
} # end numcharInstall
#
setMime () {
cat >> $Output << "EOF"
setMime () {
# sets everything under /usr/share/mime to owner $1
onr=$1
chown $onr:$onr /usr/share/mime/{aliases,generic-icons,globs,globs2,icons,magic,mime.cache,subclasses,treemagic,types,version,XMLnamespaces}
chown -R $onr:$onr /usr/share/mime/{application,audio,image,inode,message,model,multipart,packages,text,video,x-content,x-epoc}
} # end setMime
EOF
} # end setMime
#
SetXorgVars () {
mkdir -p ${LFS}/etc/profile.d
if [ ! -e ${LFS}/etc/profile.d/xorg.sh ]; then
  xorgsh="${LFS}/etc/profile.d/xorg.sh"
  echo "XORG_PREFIX=$XORG_PREFIX" >> $xorgsh
  cat >> $xorgsh << "EOF"
XORG_CONFIG="--prefix=$XORG_PREFIX \
             --sysconfdir=/etc \
             --mandir=$XORG_PREFIX/share/man \
             --localstatedir=/var"
VDPAU_DRIVER=nouveau
export XORG_PREFIX XORG_CONFIG VDPAU_DRIVER
EOF
  chmod 644 $xorgsh
  if [ "$XORG_PREFIX" != "/usr" ]; then
    cat >> $xorgsh << "EOF"
pathappend $XORG_PREFIX/bin PATH
pathappend $XORG_PREFIX/lib/pkgconfig PKG_CONFIG_PATH
pathappend $XORG_PREFIX/share/pkgconfig PKG_CONFIG_PATH
export PATH PKG_CONFIG_PATH
EOF
    echo "${XORG_PREFIX}/lib" >> ${LFS}/etc/ld.so.conf
    sed 's@/usr/X11R6@<PREFIX>@g' -i ${LFS}/etc/man_db.conf
    case $(uname -m) in
        x86_64)
             install -v -m755 -d ${LFS}$XORG_PREFIX
             install -v -m755 -d ${LFS}$XORG_PREFIX/lib
             ln -s lib ${LFS}$XORG_PREFIX/lib64
        ;;
    esac
  fi
fi
} # end SetXorgVars
#
altFileNames () {
IFS=' '
declare -a pkgnm=""
declare -a srcnm=""
declare -a cmdnm=""
secFiles=${BLFSBUILDFILES}/files/${1}-files
if [ ! -e $secFiles ]; then
  return $RETURN_PARAM
else
  ic=0
  while read n1 n2 n3 n4; do
# don't include a line if it begins with #
    case $n1 in
       \#*)
           : # do nothing
       ;;
       *)
           pkgnm[ic++]=$n2
           srcnm[ic++]=$n3
           cmdnm[ic++]=${n4%??} # strip last 2 chars
       ;;
    esac
  done < $secFiles
fi
rtrnPkg=(${pkgnm[@]})
rtrnSrc=(${srcnm[@]})
rtrnCmd=(${cmdnm[@]})
return 0
} # end altFileNames
#
pkgInSection () {
pkgToTest=$1
InSection=$2
pkgFiles=${BLFSBUILDFILES}/files/${InSection}-files
if [ ! -e $pkgFiles ]; then # try and get the section-files
  if [ ! -e ${LFS}/${blfsfilesTar} ]; then
    echo "The file $blfsfilesTar should be in $LFS"
    echo "Please place it there in order to continue"
    echo "Exiting now"
    exit 1
  else # tar file exists so unpack it
    if [ ! -d ${LFS}${blfsBuildFiles} ]; then 
      install -v -m0755 -d ${LFS}${blfsBuildFiles}
    fi
    if [ -d $BLFSBUILDFILES ]; then
      rm -rf $BLFSBUILDFILES
    fi
    unpackBLFSfiles # files define pkg names and dependencies
  fi
else # section files exist - but first test if tar file present
  if [ -e ${LFS}/${blfsfilesTar} ]; then # ask if want to replace the build files
    echo "**Warning** - $blfsfilesTar present and $BLFSBUILDFILES exists."
    echo "Replace $BLFSBUILDFILES with the contents of $blfsfilesTar? (Y/n)"
    read reply
      case $reply in
         [nN]|[nN][Oo])
            echo "okay - continuing with existing $BLFSBUILDFILES"
         ;;
         *)
            echo "okay replacing $BLFSBUILDFILES"
            rm -rf ${LFS}${blfsBuildFiles}
            mkdir -pv ${LFS}${blfsBuildFiles}
            unpackBLFSfiles
         ;;
      esac
  fi 
fi
# test again if the section-files exist
if [ ! -e $pkgFiles ]; then
  echo "Couldn't find $pkgFiles"
  if [ "$InSection" = all ]; then
    echo "You've requested ALL sections"
    echo "You must specify the section that contains $pkgToTest and"
  fi
  echo "make sure it's in $BLFSBUILDFILES"
  exit 1
fi
while read aline; do
pkg_is=$(echo $aline | awk -F= '{print $1}')
  case $pkg_is in
     $pkgToTest)
          return 0
     ;;
  esac
done < $pkgFiles
return $RETURN_PARAM
} # end pkgInSection
#
delElement () { # deletes an element from a specified position in an array
cat >> $Output << "EOF"
delElement () {
# array input in $1, position to delete is $2
declare -a arrayIn=("${!1}")
pos=$2
arrayIn=(${arrayIn[@]:0:$pos} ${arrayIn[@]:$(($pos + 1))})
rtrDelArray=(${arrayIn[@]})
} # end delElement
EOF
} # end delElement
#
delElementPattern () { # deletes an array element that matches a pattern
cat >> $Output << "EOF"
delElementPattern () {
# array input in $1, pattern to delete is $2
declare -a arrayInput=("${!1}")
patToMatch=$2
declare -a delPatArray=( ${arrayInput[@]/$patToMatch*/} )
rtrPlessArray=(${delPatArray[@]})
} # end delElementPattern
EOF
} # end delElementPattern
#
subElementPattern () { # substitutes a pattern with a given string
cat >> $Output << "EOF"
subElementPattern () {
# array input in $1, pattern to substitute is $2, string is $3
declare -a arrayInput=("${!1}")
patToMatch=$2
subString=$3
declare -a subPatArray=( ${arrayInput[@]/$patToMatch*/$subString} ) # honour white space too
rtrPlessArray=(${subPatArray[@]})
} # end subElementPattern
EOF
} # end subElementPattern
#
min2 () { # return min of two integers
if [ -z "$2" ]
then
  return $RETURN_PARAM
fi
if [ "$1" -eq "$2" ]
then
  return $1
else
  if [ "$1" -lt "$2" ]
  then
    return $1
  else
    return $2
  fi
fi
} # end min2
#
# Return the value of an operation e.g addition: z=$(float_val "$x + $y")
float_val () {
     echo | awk 'END { print '"$1"'; }'
}
#
# Return status code of a comparison e.g. float_test "$x > $y" && num=$x
# or float_test "$x < $y" && num=$y to find greater of two floating point numbers
float_test () {
echo "float_test () {
     echo | awk 'END { exit ( !( '\"\$1\"')); }'
}" >> $Output
}
#
Start () {
declare -a PkgName=("${!2}")
declare -a SrcName=("${!3}")
declare -a CommandName=("${!4}")
Section=$1
secFiles=${BLFSBUILDFILES}/files/${Section}-files
cursection=$Section
if ! $single_package; then
  cleanstart
  Output=${LFS}/${Section}.sh
else
  if [ -e ${LFS}/${SINGLE_PACKAGE}.sh ]; then rm ${LFS}/${SINGLE_PACKAGE}.sh; fi
  Output=${LFS}/${SINGLE_PACKAGE}.sh
fi
Getxmlsec $Section
if [[ "$Section" == x ]]; then SetXorgVars; fi
REPODIR=${BLFS_BOOK_LOC_DIR}/$version
Header
if ! $as_root; then
  pkguser # need it if installing as a package user
  numcharInstall
fi
if [ "$Section" != blfs ]; then
  PkgDepend
  testDeps
fi
if [[ "$Section" = networks || "$Section" = sysutils || "$Section" = xlibs || "$Section" = multimedia ]]; then
  delElementPattern
fi
if [ "$Section" = xlibs ]; then subElementPattern; fi # for webkitgtk if xfce
if [[ "$Section" == gnomeplatform || "$Section" == gnomedesktop || "$Section" == gnomeapps ]]; then
  setMime
fi
numpkgs=${#PkgName[@]}
for (( pkgn=0; pkgn<$numpkgs; pkgn++ )); do
  if $single_package; then # find the package
    if [[ "$SINGLE_PACKAGE" == "${PkgName[$pkgn]}" ]]; then # found the package
      pkgname=${PkgName[pkgn]}
      FuncName=$( echo $pkgname | sed -e s/-//g -e s/_//g )
      srcname=${SrcName[pkgn]}
      commandname=${CommandName[pkgn]}
      if [[ "$cursection" != "$Section" ]]; then # section changed - reset
        cursection=$Section
        if ! $as_root; then pkguser; fi
      fi
      Output=$LFS/${SINGLE_PACKAGE}.sh
      case $pkgname in
        coreutils|dbus|shadow|systemd) # these are core LFS
           cursection=core
           if ! $as_root; then updatePkgUser; fi
           Function
        ;;
        *)
           Function
        ;;
      esac
      break
    fi
  elif [[ "$Section" = browser ]]; then
    if [[ "$BROWSER" == "${PkgName[$pkgn]}" ]]; then
      pkgname=${PkgName[pkgn]}
      FuncName=$( echo $pkgname | sed -e s/-//g -e s/_//g )
      srcname=${SrcName[pkgn]}
      commandname=${CommandName[pkgn]}
      Output=$LFS/${Section}.sh
      Function
      break
    fi
  else
    pkgname=${PkgName[pkgn]}
    FuncName=$( echo $pkgname | sed -e s/-//g -e s/_//g )
    srcname=${SrcName[pkgn]}
    commandname=${CommandName[pkgn]}
    if [[ "$cursection" != "$Section" ]]; then # section changed - reset
      cursection=$Section
      if ! $as_root; then pkguser; fi
    fi
    Output=$LFS/${Section}.sh
    case $pkgname in
       coreutils|dbus|shadow|systemd) # installed in core LFS
          cursection=core
          if ! $as_root; then updatePkgUser; fi
          Function
       ;;
       jdkbin)
          if $jdkoracle; then srcname=jdk-${jdkvers}-; fi
          Function
       ;;
       *)
          Function
       ;;
    esac
  fi
done
#
tmpFile=/tmp/$(date +%d%B%Y_%H:%M)tmp.file
awk '/_\ \(\)\ \{/ {print $1}' $Output >> $tmpFile
#
# this next section allows you to change the order of, or remove, a package
#
while read eachFunc; do
  case $eachFunc in
      expat_|eudev_|intltool_|attr_|acl_|gperf_|libcap_|xmlparser_|firewall_|consolekit_) # test if systemd used
          if [ "$SYSTEMD" = no ]; then echo $eachFunc >> $Output; fi
      ;;
      systemd_) # don't use if SYSTEMD is no
          if [ "$SYSTEMD" = yes ]; then echo $eachFunc >> $Output; fi
      ;;
      *)
          echo $eachFunc >> $Output
  esac
done < $tmpFile
rm $tmpFile
chmod 700 $Output
if $single_package; then
  fpkgnme=${LFS}/${SINGLE_PACKAGE}.sh
else
  fpkgnme=${LFS}/${Section}.sh
fi
sed -e 's@BuildLog='$LFS'@BuildLog=@' -i $fpkgnme
# remove any test statements and the root and edit comments
sed -e '/make check/d' \
    -e '/make -j1 check/d' \
    -e '/make -j1 test/d' \
    -e '/make -k check/d' \
    -e '/make -kj1 check/d' \
    -e '/make test/d' \
    -e '/\# End root commands/d' \
    -e '/\# Run this as root/d' \
    -e '/\# This block must be edited to suit your needs./d' \
    -e '/\# End of editable block./d' \
    -i $fpkgnme
} # end Start
#
GetKernelVersion () {
local moddir="${LFS}/usr/lib/modules"
IFS=' 
'
local foundmod=($(ls $moddir | grep ^[0-9])) # get all dirs beginning with numeric
local nummod=${#foundmod[@]}
rtrkernum=""
if [ $nummod -eq 1 ]; then
  rtrkernum=${foundmod[0]}
  return 0
elif [ $nummod -eq 0 ]; then
  echo "No numerical dir in /usr/lib/modules found."
  echo "Couldn't determine the kernel version."
  return $RETURN_PARAM
else
  echo "Found these numerical dirs in /usr/lib/modules:"
  for ((i=0; i<$nummod; i++)); do
    echo "${foundmod[i]}"
  done
  echo "So couldn't determine the kernel version"
  return $RETURN_MTOV
fi
} # end GetKernelVersion
#
GetSeriesNum () {
# $1 is the version number
local versnumber=$1
rtrseries=""
IFS='.' # parse using a .
digitarray=($versnumber)
rtrseries="${digitarray[0]}.${digitarray[1]}"
unset IFS
} # GetSeriesNum
#
GetPkgVersion () {
# $1 is the location of the src package
# $2 is the name of the package
# $3 is the name to trim against - usually tar
rtrvers=""
GetVersionNum $1 $2 $3
retval=$?
if [ $retval -eq $RETURN_PARAM ]; then
  echo "*** Directory $1 doesn't exist ***"
  return $RETURN_PARAM
elif [ $retval -eq $RETURN_FNF ]; then
  echo "*** No file found containing the name $2 and $3 found ***"
  return $RETURN_FNF
elif [ $retval -eq $RETURN_MTOV ]; then
  echo "*** More than one version of $2 found in $1 ***"
  return $RETURN_MTOV
else
    return 0
fi
} # GetPkgVersion
#
GetVersionNum () {
# $1 is the location of the src package
# $2 is the name of the package
# $3 is the name to trim against - usually tar
local pkgloc=$1
local pkgnm=$2
local trimto=$3
local found
local fileExt
local num
local pkgvers=""

if [ ! -e $pkgloc ]; then return $RETURN_PARAM; fi # pkg loc does not exist
IFS='
'
# test if more than one version is present in pkgloc
found=($( ls -l $pkgloc | grep ${pkgnm}[0-9].*.${trimto}.*z* | awk '{print $NF}' ))
num=${#found[@]}
if [ $num -gt 1 ]; then return $RETURN_MTOV; fi # more than one version present

if [ -z $found ]; then # might be a patch file
  found=$( ls -l $pkgloc | grep ${pkgnm}[0-9].*${trimto} | awk '{print $NF}' )
fi
if [ -z $found ]; then return $RETURN_FNF; fi # file not found

fileExt="${found#*${pkgnm}}"
pkgvers="${fileExt%${trimto}*}"
rtrvers=($pkgvers)
return 0
} # end GetVersionNum
#
phpXBookVers () {
# $1 the command to parse for the version #
fileis=$(echo $1 | awk -F\/ '{print $5}')
phpXbookvers="${fileis#php-}"
} # end phpXBookVers
#
evolutionVersion () {
echo "evolutionVersion () {
baseval=0.0 # assume version # will be > 0
evoldir="/usr/lib/evolution"
for evers in \${evoldir}/*; do # loop through all files in the directory
  evoltest=\$( echo \$evers | awk -F\/ '{print \$NF}' )
  if [[ \"\$evoltest\" =~ ^[0-9]+([.][0-9]+)?$ ]]; then # a number so test its value
    float_test \"\$evoltest > \$baseval\" && evolVers=\$evoltest
    baseval=\$evolVers
  fi
done
}" >> $Output
} # end evolutionVersion
#
GetjdkComVers () {
jdkfile=${DumpedCommands}/general/???-java
local pkgnm="OpenJDK-"
local trimto="-bin"
while read cmdLine; do
  if [[ ${cmdLine:0:1} != '#' ]]; then # ignore line if it has a hash at the start
    jdkcomfnd=$( echo $cmdLine | awk -F\/ '{print $NF}' | grep ${pkgnm}[0-9] )
    if [ ! -z $jdkcomfnd ]; then break; fi
  fi
done < $jdkfile
jdkExt="${jdkcomfnd#*${pkgnm}}"
jdkcomvers="${jdkExt%${trimto}*}"
} # end GetjdkComvers
#
# ***main program***  - call the functions
#
configEdit # option to change the config file
retval=$?
if [ $retval -eq $RETURN_PARAM ]; then
 echo "Cancel pressed. Exiting now"
 exit 1
fi
source $cfg # make sure config file values are current
# check compatible values
if [[ "$BOOK_VERSION" == KBLFS && "$BOOK" == svn ]]; then
  echo "BOOK_VERSION is $BOOK_VERSION but BOOK is $BOOK"
  echo "These are incompatible values"
  echo "Either change BOOK to git or change BOOK_VERSION to an svn source."
  echo "Exiting now."
  exit 1
elif [[ "$BOOK" == git && "$BOOK_VERSION" != KBLFS ]]; then
  echo "BOOK_VERSION is $BOOK_VERSION but BOOK is $BOOK"
  echo "These are incompatible values"
  echo "Either change BOOK to svn or change BOOK_VERSION to KBLFS."
  echo "Exiting now."
  exit 1
fi
SECTION=$(echo ${SECTION,,*}) # convert SECTION to lower case
SOURCES=$(echo ${SOURCES,,*}) # convert SOURCES to lower case
xversion=$XVERSION # set up the x version
as_root=false
if [ "$AS_ROOT" = yes ]; then as_root=true; fi
#
if [[ "$SINGLE_PACKAGE" == no ]]; then
  single_package=false
else
  single_package=true
  pkgnamenohyph=$( echo ${SINGLE_PACKAGE/-/} ) # remove any - in package name
  pkgInSection $pkgnamenohyph $SECTION
  retv=$?
  if [ $retv -eq $RETURN_PARAM ]; then
    echo "Package $SINGLE_PACKAGE not found in section $SECTION"
    echo "exiting now"
    exit 1
  else
    echo "Package $SINGLE_PACKAGE found in section $SECTION"
    echo "Will produce a script called $SINGLE_PACKAGE.sh for this single package"
  fi
fi
#
# get the book
#
bookDir=$BLFS_BOOK_LOC_DIR
book_version=$BOOK_VERSION
if [[ "$book_version" = systemd || "$book_version" = KBLFS ]]; then bookDir=${bookDir}/SYSTEMD; fi
#
if [ "$BOOK" = svn ]; then
  GetSvnUrl # make sure the svn url is set
  if [ "$book_version" != blank ]; then #check if the requested book is present locally
    ChkLocalBook ${bookDir} ${book_version}
    if [ "$?" -eq $RETURN_PARAM ]; then
      echo "Exiting now"
      exit 1
    fi
    SetBLFSBook
  else #version set to blank so ask for which book
    WhichBLFSBook # choose which BLFS version to download the xml files
    # check if the requested book is already present locally
    ChkLocalBook $bookDir ${book_version}
    if [ "$?" -eq $RETURN_PARAM ]; then
      echo "Exiting now"
      exit 1
    fi
  fi
  if [ "$SOURCES" = download ]; then CleanLocalREPO $bookDir/${book_version}; fi # delete any files in local book repository
  CheckoutBook  $bookDir/${book_version} # svn the requested book xml files
  SVNINFO="$(svn info $bookDir/${book_version} | awk '{printf $0"|"}')"
# Note, tagged | on the end so it can be used as a record separator later
# e.g.
# echo $SVNINFO | awk 'BEGIN{ RS = "|" }; {print $0}'
# will 'reconstitute it
elif [ "$BOOK" = git ]; then # download the xml from git
# first check the latest commit
  latestCommit=$(git ls-remote ${BOOK_URL}.git refs/heads/master | cut -f 1)
# check if a local book already exits
  ChkLocalBook $bookDir ${book_version}
  if [ "$?" -eq $RETURN_PARAM ]; then # git commit already present locally
    echo "Exiting now"
    exit 1
  else
    echo "Will get the book from $BOOK_URL"
    echo "and place it in $bookDir"
    rm -rf ${bookDir}/${book_version} # must not exist before cloning
    mkdir -pv ${bookDir}/${book_version}
    git clone ${BOOK_URL}.git ${bookDir}/${book_version}
    GetGitInfo ${bookDir}/${book_version}
    version=$book_version
  fi
else  # local book requested. Make sure it exists
  if [ "$book_version" = "blank" ]; then # need to choose book version
    GetLocalREPO $bookDir/${book_version}
    return_val=$?
    if [ $return_val -eq $RETURN_PARAM ]; then #no local book found
      echo "You did not choose a local $REPO book"
      echo "Change the local dir of the book or svn it. Exiting now"
      exit 1
    else # config file would have changed so source it
      source $cfg
      LocalBook ${bookDir} ${book_version}
    fi
  else
    ChkLocalBookExists $bookDir ${book_version}
    return_val=$?
    if [ $return_val -eq $RETURN_PARAM ]; then #no local book found
      echo "The requested book was not found at $bookDir."
      echo "Change the local dir of the book or svn it. Exiting now"
      exit 1
    else
      LocalBook ${bookDir} ${book_version} # set values for locally stored book xml
      echo "Local book found for $book_version at '$bookDir'"
    fi
  fi
fi
case $BOOK in
    git)
        DumpCommands $REPO ${bookDir}/${book_version} commit
    ;;
    svn)
        DumpCommands $REPO ${bookDir}/${book_version} Revision
    ;;
    local) # check for .git or .svn
        if [ -d ${bookDir}/${book_version}/.git ]; then
          GetGitInfo ${bookDir}/${book_version}
          DumpCommands $REPO ${bookDir}/${book_version} commit
        elif [ -d ${bookDir}/${book_version}/.svn ]; then
          DumpCommands $REPO ${bookDir}/${book_version} Revision
        else
          echo "No .git or .svn directory found in ${bookDir}/${book_version}"
          echo "Couldn't get book commands - aborting"
          exit 1
        fi
     ;;
     *)
        echo "BOOK value should be git, svn or local."
        echo "Aborting"
        exit 1
     ;;
esac
#
if ! $single_package; then # test if the build files dir exists
  if [ ! -d $BLFSBUILDFILES ]; then # doesn't exist so try and build it
    if [ ! -e ${LFS}/${blfsfilesTar} ]; then
      echo "The file $blfsfilesTar should be in $LFS"
      echo "Please place it there in order to continue"
      echo "Exiting now"
      exit 1
    else # tar file exists so unpack it
      if [ ! -d ${LFS}${blfsBuildFiles} ]; then
        mkdir -pv ${LFS}${blfsBuildFiles}
      fi
      unpackBLFSfiles # files define pkg names and dependencies
    fi
  else # build files exist - test if tar file present
    if [ -e ${LFS}/${blfsfilesTar} ]; then # ask if want to replace the build files
      echo "**Warning** - $blfsfilesTar present and $BLFSBUILDFILES exists."
      echo "Replace $BLFSBUILDFILES with the contents of $blfsfilesTar? (Y/n)"
      read reply
        case $reply in
           [nN]|[nN][Oo])
              echo "okay - continuing with existing $BLFSBUILDFILES"
           ;;
           *)
              echo "okay replacing $BLFSBUILDFILES"
              rm -rf ${LFS}${blfsBuildFiles}
              mkdir -pv ${LFS}${blfsBuildFiles}
              unpackBLFSfiles
           ;;
        esac
    fi
  fi
fi
#
# update the proxy settings for wget
#
setHostProxy
#
SetupSections # create the array SectionsAll. Contains the sections to build
for (( ij=0; ij<$numSections; ij++ )); do # loop through each section to get the sources
  Section=${SectionsALL[$ij]}
  skipSection=false
  if [ "$GNOME_OR_XFCE" = gnome ]; then # skip section xfce
    if [ "$Section" = xfce ]; then skipSection=true; fi
  else # requested xfce so skip all the gnome sections
    if [[ "$Section" == gnomeplatform || "$Section" == gnomedesktop || "$Section" == gnomeapps ]]; then
    skipSection=true
    fi
  fi
  if $skipSection; then
    :
  else # build the section
    rtrnPkg=""
    rtrnSrc=""
    rtrnCmd=""
    altFileNames $Section # get pkg name, src name and command name for each package in this section
    return_val=$?
    if [ $return_val -eq $RETURN_PARAM ]; then
      echo "no ${Section}-files  file found. It should be in ${BLFSBUILDFILES}/files"
      echo "Place it there in order to continue. Exiting now"
      exit 1
    fi
    if [[ "$SOURCES" = download || "$SOURCES" = downloads ]]; then # download the sources for this section
      if [ "$CLEAN_SRC_DIR" = yes ]; then
        CleanSourceDir $Section # clean the sources file if not empty
        if [ "$Section" = x ]; then # delete the x subdirs
          rm -rf ${SOURCEDIR}/${Section}/${xproto}
          rm -rf ${SOURCEDIR}/${Section}/${xlib}
          rm -rf ${SOURCEDIR}/${Section}/${xapp}
          rm -rf ${SOURCEDIR}/${Section}/${xfont}
        fi
      else
        if [ ! -d ${SOURCEDIR}/${Section} ]; then
          install -v -m0755 -d ${SOURCEDIR}/${Section}
        fi
      fi
      if [[ "$Section" = browser && "$BROWSER" = chromium ]]; then
        echo "Chromium source will be downloaded using wget"
      else
        GetListFile $bookDir $WgetList #get wget-list file
        SortWgetList $Section rtrnPkg[@] rtrnSrc[@] # URL list of files for this section
        GetSources $Section $sortedfile $SOURCEURL # download the sources in the $sortedfile file
      fi
    fi
# check all the requested src files are present
    if [[ "$Section" = browser && "$BROWSER" = chromium ]]; then
      : # do nothing
    else
      if [ -e ${SOURCEDIR}/${Section}/${sortedfile} ]; then
        ChkSrcPresent ${SOURCEDIR}/${Section} ${SOURCEDIR}/${Section}/${sortedfile}
      else
         echo "No ${sortedfile} file in ${SOURCEDIR}/${Section}"
         echo "Cannot check presence of source files"
      fi
      ret_val=$?
      if [ $ret_val -eq $RETURN_PARAM ]; then 
        echo "Not all requested files in ${SOURCEDIR}/${Section}/${sortedfile} have been downloaded."
        echo "If the required sources are not being downloaded with wget in the script, then"
        echo "you will have to download them yourself and place in ${SOURCEDIR}/${Section}"
        echo "Do you want to continue? (Y/n)"
        read reply
        case $reply in
           [yY]|[yY][Ee][Ss])
                echo "okay continuing"
           ;;  
           [nN]|[nN][Oo])
                echo "Exiting now"
                exit 1
           ;;  
           *)  
                echo "okay continuing"
           ;;  
        esac
      fi
      ChkEmptySrcFiles $Section # check for empty source files
      return_val=$?
      if [ $return_val -eq $RETURN_PARAM ]; then
        echo "Dir ${LFS}${srcrootdir}/${Section} is empty or has empty files."
        echo "If the required sources are not being downloaded with wget in the script, then"
        echo "you will have to download them to ${LFS}${srcrootdir}/${Section}"
        echo "Continuing to make the script(s) for section $Section"
      fi
    fi
    if [ "$Section" = browser ]; then
      if [ "$BROWSER" = firefox ]; then
        if [ -z $ffoxvers ]; then # null, so fill
          firefoxloc="${LFS}${srcrootdir}/browser"
          if [ -d $firefoxloc ]; then
            : # okay, so continue
          else
            firefoxloc="${LFS}${PKGUSERDIR}/browser/firefox"
            if [ -d $firefoxloc ]; then
              : # okay, so continue
            else
              echo "Requested Firefox version but cannot find source location"
              echo "Modify this script to include the correct source location"
              echo "Exiting now"
              exit 1
            fi           
          fi
          rtrvers=""
          GetPkgVersion $firefoxloc firefox- .source
          if [ ! -z $rtrvers ]; then
            ffoxvers=$rtrvers
            echo "Firefox version is $ffoxvers"
          else
            echo "*** failed to get Firefox version ***"
          fi
        fi
      fi
    fi
    if ! $single_package; then
      case $Section in
        avr)
          rtrvers=""
          GetPkgVersion ${LFS}${PKGUSERDIR}/core/gcc gcc- .tar # for gcc version
          if [ ! -z $rtrvers ]; then
            gccvers=$rtrvers
            echo "gcc version is $gccvers"
          else
            echo "*** failed to get gcc version ***"
          fi
        ;;
        java)
          OracleVers="jdk-8u25"
          jdksrcDir=""
          jdkbinSrcdir="/home/john/Downloads"
          if [ ! -e ${LFS}${srcrootdir}/java/${OracleVers}* ]; then # ask to copy it
            echo "No Oracle version $OracleVers found in ${LFS}${srcrootdir}/java"
            echo "Do you want to put it there? (Y/n)"
            read reply
            case $reply in
               [yY]|[yY][Ee][Ss])
                    echo "Directory holding jdk file (default is $jdkbinSrcdir)"
                    read jdksrcDir
                    if [ -z $jdksrcDir ]; then jdksrcDir=$jdkbinSrcdir; fi
                    echo "okay copying from $jdksrcDir"
                    if [ -e ${jdksrcDir}/${OracleVers}* ]; then
                      cp -v ${jdksrcDir}/${OracleVers}* ${LFS}${srcrootdir}/java/
                    else
                      echo "no Oracle version found in $jdkbinSrcdir"
                      echo " You'll need to download it"
                    fi
               ;;
               [nN]|[nN][Oo])
                    echo "Continuing without copying Oracle jdk"
               ;;
               *)
                    echo "Directory holding jdk file (default is $jdkbinSrcdir)"
                    read jdksrcDir
                    if [ -z $jdksrcDir ]; then jdksrcDir=$jdkbinSrcdir; fi
                    echo "okay copying from $jdksrcDir"
                    if [ -e ${jdksrcDir}/${OracleVers}* ]; then
                      cp -v ${jdksrcDir}/${OracleVers}* ${LFS}${srcrootdir}/java/
                    else
                      echo "no Oracle version found in $jdkbinSrcdir"
                      echo " You'll need to download it"
                    fi
               ;;
            esac
          fi
          if [ -e ${LFS}${srcrootdir}/java/${OracleVers}* ]; then # oracle version exists
            trimto=-linux
            jdktitle=jdk-
            jdkoracle=true
          else
            case $(uname -m) in
              x86_64)
                 trimto=-x86_64
              ;;
              *)
                 trimto=-i686
              ;;
            esac
            jdktitle=OpenJDK-
            jdkoracle=false
          fi
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/java $jdktitle $trimto
          if [ ! -z $rtrvers ]; then
            jdkvers=$rtrvers
            echo "jdk binary version is $jdkvers"
          else
            echo "*** failed to get Oracle jdk binary version ***"
          fi
          GetjdkComVers # get the OpenJDK version from the commands
        ;;
        libraries)
          rtrvers=""
          GetPkgVersion ${LFS}${PKGUSERDIR}/core/perl perl- .tar
          if [ ! -z $rtrvers ]; then
            perlvers=$rtrvers
            echo "perl version is $perlvers"
          else
            echo "*** failed to get perl version ***"
          fi
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/libraries freetype- .tar
          if [ ! -z $rtrvers ]; then
            freetypevers=$rtrvers
            echo "freetype version is $freetypevers"
          else
            echo "*** failed to get freetype version ***"
          fi
        ;;
        nvidia)
          rtrkernum=""
          GetKernelVersion
          if [ "$?" -eq $RETURN_MTOV ]; then
            echo "*** Warning - Couldn't get the kernel version number ***"
          else
            echo "kernel version from modules dir is $rtrkernum"
            GetSeriesNum $rtrkernum
            echo "kernel series is $rtrseries"
            _extramodules="extramodules-${rtrseries}"
          fi
        ;;
        programming)
          rtrvers=""
          GetPkgVersion ${LFS}${PKGUSERDIR}/core/perl perl- .tar
          if [ ! -z $rtrvers ]; then
            perlvers=$rtrvers
            echo "perl version is $perlvers"
          else
            echo "*** failed to get perl version ***"
          fi
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/programming php- .tar
          if [ ! -z $rtrvers ]; then
            phpvers=$rtrvers
            echo "php version is $phpvers"
          else
            echo "*** failed to get php version ***"
          fi
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/programming Python-2. .tar
          if [ ! -z $rtrvers ]; then
            Python2vers=2.$rtrvers
            echo "Python2 version is $Python2vers"
          else
            echo "*** failed to get Python-2 version ***"
          fi
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/programming Python-3. .tar
          if [ ! -z $rtrvers ]; then
            Python3vers=3.$rtrvers
            GetSeriesNum $Python3vers
            pyseries=$rtrseries
            echo "Python3 version is $Python3vers"
            echo "Python series is $pyseries"
          else
            echo "*** failed to get Python-3 version ***"
          fi
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/programming git- .tar
          if [ ! -z $rtrvers ]; then
            gitvers=$rtrvers
            echo "git version is $gitvers"
          else
            echo "*** failed to get git version ***"
          fi
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/programming vala- .tar
          if [ ! -z $rtrvers ]; then
            valavers=$rtrvers
            GetSeriesNum $valavers
            valaseries=$rtrseries
            echo "Vala version is $valavers"
            echo "Vala series is $valaseries"
          else
            echo "*** failed to get vala version ***"
          fi
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/programming ruby- .tar
          if [ ! -z $rtrvers ]; then
            rubyvers=$rtrvers
            echo "Ruby version is $rubyvers"
          else
            echo "*** failed to get ruby version ***"
          fi
        ;;
        security)
          rtrvers=""
          GetPkgVersion ${LFS}${PKGUSERDIR}/core/coreutils coreutils- .tar
          if [ ! -z $rtrvers ]; then
            coreutilsvers=$rtrvers
            echo "coreutils version is $coreutilsvers"
          else
            echo "*** failed to get coreutils version ***"
          fi
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/security krb5- -signed
          if [ ! -z $rtrvers ]; then
            krb5vers=$rtrvers
            echo "krb5 version is $krb5vers"
          else
            echo "*** failed to get krb5 version ***"
          fi
        ;;
        sysutils)
          if [ "$SYSTEMD" = yes ]; then
            rtrvers=""
            GetPkgVersion ${LFS}${PKGUSERDIR}/core/systemd systemd- .tar
            if [ ! -z $rtrvers ]; then
              SYSTEMD_VERSION=$rtrvers
              echo "systemd version is $SYSTEMD_VERSION"
            else
              echo "*** failed to get systemd version ***"
              echo "Check source file is in ${LFS}${PKGUSERDIR}/core/systemd"
            fi
          fi
        ;;
      esac
    else
      case $SINGLE_PACKAGE in
        freetype)
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/libraries freetype- .tar
          if [ ! -z $rtrvers ]; then
            freetypevers=$rtrvers
            echo "freetype version is $freetypevers"
          else
            echo "*** failed to get freetype version ***"
          fi
        ;;
        git)
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/programming git- .tar
          if [ ! -z $rtrvers ]; then
            gitvers=$rtrvers
            echo "git version is $gitvers"
          else
            echo "*** failed to get git version ***"
          fi
        ;;
        php)
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/programming php- .tar
          if [ ! -z $rtrvers ]; then
            phpvers=$rtrvers
            echo "php version is $phpvers"
          else
            echo "*** failed to get php version ***"
          fi
        ;;
        python2)
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/programming Python-2. .tar
          if [ ! -z $rtrvers ]; then
            Python2vers=2.$rtrvers
            echo "Python2 version is $Python2vers"
          else
            echo "*** failed to get Python-2 version ***"
          fi
        ;;
        python3)
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/programming Python-3. .tar
          if [ ! -z $rtrvers ]; then
            Python3vers=3.$rtrvers
            echo "Python3 version is $Python3vers"
          else
            echo "*** failed to get Python-3 version ***"
          fi
        ;;
        jdkbin)
          case $(uname -m) in
            x86_64)
               trimto=-linux
            ;;
            *)
               trimto=-i686
            ;;
          esac
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/java OpenJDK- $trimto
          if [ ! -z $rtrvers ]; then
            jdkvers=$rtrvers
            echo "jdk binary version is $jdkvers"
          else
            echo "*** failed to get Oracle jdk binary version ***"
          fi
        ;;
      esac
    fi
    Start $Section rtrnPkg[@] rtrnSrc[@] rtrnCmd[@] # build the script for this section
  fi
done
