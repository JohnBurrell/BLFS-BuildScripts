#!/bin/bash
#
if [ $UID -ne 0 ]; then echo Please run this script as root. ; exit 1; fi
LFS=$LFS
if [[ ! -d $LFS || "$LFS" = "" ]]; then
  echo "'$LFS' is not a directory"
  echo "do: export LFS=/mnt/lfs"
  echo
  exit 1
fi

# repository will be for BLFS
REPO="BLFS"
blfscommands="/blfs-commands"
DumpedCommands=${LFS}${blfscommands}
Dumpedhtml=$LFS/blfs-html
WgetList="wget-list" # default name for the source list file
ncc="--no-check-certificate" # used with wgetopts in some packages
hostwgetopts="" # Options for wget on the host, e.g. proxy settings, certs.
wgetopts="" # Options for wget, e.g. proxy settings, certs etc on LFS
sortedfile="sortedfile" # name of the sorted WgetList file
anduin_src_root="http://anduin.linuxfromscratch.org/sources/BLFS/svn"
patch_root="http://www.linuxfromscratch.org/patches/blfs/svn" # patch url
gnomeSource="ftp://ftp.gnome.org/pub/gnome/sources" # url for gnome sources
RETURN_PARAM=65  # error return
RETURN_NOTSET=67 #  no dependencies set
RETURN_DEPNOTMET=69 # package dependency not met
RETURN_ALLDEPSMET=71 # all dependencies met
RETURN_FNF=73 # file not found
RETURN_MTOV=75 # more than one version of a file found
RETURN_GT=77 # used in test of which version is later. returned if $1 > $2
RETURN_EQ=79 # used in compare_versions - returned if versions are equal
srcrootdir=/blfs-sources # all source files are under this dir
blfsBuildFiles=/blfsBuildFiles # location of the pkgs, pkg-order and pkg-dependencies files
blfsfiles=blfsfiles # name of the subdir to the build files dir
blfsfilesTar=${blfsfiles}.tar.xz # tar file with files names and dependencies for each section
PKGUSERDIR=/usr/src # pkguser dir will be $PKGUSERDIR/$Section
BuildLog=${LFS}/BLFS-buildlog.log # keep a record of packages and times
if [ ! -e $BuildLog ]; then
  touch $BuildLog
fi
BLFSBUILDFILES=${LFS}${blfsBuildFiles}/${blfsfiles} # location of the blfs build files
SOURCEDIR=${LFS}${srcrootdir}
build="build" # name of the build file for each package
cfg=~/BLFS.conf # config file to hold required params
#initialize the config variables
BLFS_BOOK_LOC_DIR=${HOME}/LFS_BOOK/${REPO} # define local dir for the downloaded book xml
SVN_URL="svn://svn.linuxfromscratch.org/${REPO}/" # svn url
BOOK_URL=$SVN_URL # use the svn book by default
BOOK_VERSION=$BOOK_VERSION
SOURCES=$SOURCES
SOURCEURL=$SOURCEURL
CLEAN_SRC_DIR=$CLEAN_SRC_DIR
UPDATEWGETLIST=$UPDATEWGETLIST
BOOK=$BOOK
SECTION=$SECTION
XORG_PREFIX=$XORG_PREFIX
XVERSION=$XVERSION
GNOME_OR_XFCE=$GNOME_OR_XFCE
BROWSER=$BROWSER
SINGLE_PACKAGE=$SINGLE_PACKAGE
AS_ROOT=$AS_ROOT # 'no' install as package user, 'yes' install as root
SYSTEMD=$SYSTEMD # 'yes' - use systemd. 'no' use sysvinit.
DESTDIR=$DESTDIR
if [ -e $cfg ]; then
  source $cfg # exists so source it
else
  touch $cfg #cfg is new
fi
if [ -z $BOOK_VERSION ]; then
  BOOK_VERSION="BOOK"
fi
if [ -z $SOURCES ]; then
  SOURCES="download"
fi
if [ -z $SOURCEURL ]; then
  SOURCEURL="url_in_book"
fi
if [ -z $CLEAN_SRC_DIR ]; then
  CLEAN_SRC_DIR="no"
fi
if [ -z $UPDATEWGETLIST ]; then
  UPDATEWGETLIST="no"
fi
if [ -z $BOOK ]; then
  BOOK="svn"
fi
if [ -z $SECTION ]; then
  SECTION="libraries"
fi
if [ -z $XORG_PREFIX ]; then
  XORG_PREFIX="/usr"
fi
if [ -z $XVERSION ]; then
  XVERSION="7.7-1"
fi
if [ -z $GNOME_OR_XFCE ]; then
  GNOME_OR_XFCE="gnome"
fi
if [ -z $BROWSER ]; then
  BROWSER="firefox"
fi
if [ -z $SINGLE_PACKAGE ]; then
  SINGLE_PACKAGE="no"
fi
if [ -z $AS_ROOT ]; then
  AS_ROOT="no"
fi
if [ -z $SYSTEMD ]; then
  SYSTEMD="no"
fi
if [ -z $DESTDIR ]; then
  DESTDIR="no"
fi
# store the values in a new config file
if [ -e $cfg ]; then
  rm $cfg
  touch $cfg
fi
#ensure compatible values
if [[ "$BOOK_VERSION" = systemd && "$SYSTEMD" = no ]]; then SYSTEMD="yes"; fi
echo "BLFS_BOOK_LOC_DIR=$BLFS_BOOK_LOC_DIR" | tee $cfg
echo "BOOK_URL=$BOOK_URL" | tee -a $cfg
echo "BOOK_VERSION=$BOOK_VERSION" | tee -a $cfg
echo "SOURCES=$SOURCES" | tee -a $cfg
echo "SOURCEURL=$SOURCEURL" | tee -a $cfg
echo "CLEAN_SRC_DIR=$CLEAN_SRC_DIR" | tee -a $cfg
echo "UPDATEWGETLIST=$UPDATEWGETLIST" | tee -a $cfg
echo "BOOK=$BOOK" | tee -a $cfg
echo "SECTION=$SECTION" | tee -a $cfg
echo "XORG_PREFIX=$XORG_PREFIX" | tee -a $cfg
echo "XVERSION=$XVERSION" | tee -a $cfg
echo "GNOME_OR_XFCE=$GNOME_OR_XFCE" | tee -a $cfg
echo "BROWSER=$BROWSER" | tee -a $cfg
echo "SINGLE_PACKAGE=$SINGLE_PACKAGE" | tee -a $cfg
echo "AS_ROOT=$AS_ROOT" | tee -a $cfg
echo "SYSTEMD=$SYSTEMD" | tee -a $cfg
echo "DESTDIR=$DESTDIR" | tee -a $cfg
#
# set up names of x subdirs
#
xVers="x7" # current version of x
xproto="${xVers}proto"
xlib="${xVers}lib"
xapp="${xVers}app"
xfont="${xVers}font"
xdriver="${xVers}driver" # current xdriver command name in the book
#
# functions
#
_log() {                      # turn on debugging commands with _DEBUG=true
  if [ "$_DEBUG" = true ]; then
    echo 1>&2 "$@"
  fi
} # end _log
#
configEdit () {
local DIALOG_OK=0
local DIALOG_CANCEL=1
local DIALOG_HELP=2
local DIALOG_EXTRA=3
local DIALOG_ITEM_HELP=4
local DIALOG_ESC=255
local HEIGHT=0
local WIDTH=0
#
display_configFile () {
  dialog \
    --backtitle "BLFS config file editor" \
    --title "Config File Contents" \
    --textbox "$1" $HEIGHT $WIDTH
}
#
_edit () {
local value
local newval
local exit_status
local tochange
local display
#
itemMenu=$(awk -F\= '{print $1,$2}' $cfg)
exec 3>&1
tochange=$(dialog \
    --backtitle "BLFS config file editor" \
    --title "Item Menu" \
    --menu "Select item to edit" 0 0 0 $itemMenu \
    2>&1 1>&3)
exit_status=$?
exec 3>&-
case $exit_status in
  $DIALOG_CANCEL)
    return 0
  ;;
  $DIALOG_ESC)
    echo "Program aborted." >&2
    exit 1
  ;;
  $DIALOG_OK)
    if [ "$tochange" = BLFS_BOOK_LOC_DIR ]; then
      display="Enter the local directory to store the BLFS Book"
    elif [ "$tochange" = BOOK_URL ]; then
      display="Enter the url of the BLFS book. Default is the svn url"
    elif [ "$tochange" = BOOK_VERSION ]; then
      display="BLFS book version. For the current book, type BOOK, for BLFS-systemd type systemd (type blank to get a list)."
    elif [ "$tochange" = BOOK ]; then
      display="Enter svn or local (if local the book must be in $BLFS_BOOK_LOC_DIR)"
    elif [ "$tochange" = SOURCES ]; then
      display="Type download or local (if local, source files must be in ${LFS}${srcrootdir}/${SECTION})"
    elif [ "$tochange" = SOURCEURL ]; then
      display="Type anduin or url_in_book"
    elif [ "$tochange" = CLEAN_SRC_DIR ]; then
      display="If yes, all files in $WgetList in ${LFS}${srcrootdir}/${SECTION} will be deleted. Default is no"
    elif [ "$tochange" = UPDATEWGETLIST ]; then
      display="If yes, urls in the wget-list file will be replaced with any later versions. Default is no"
    elif [ "$tochange" = SECTION ]; then
      display="options are blfs, security, virtualization, libraries, genutils, sysutils, programming, java, networks, server, x, xlibs, windowmanager, gnomeplatform, telepathy, gnomedesktop, gnomeapps, xfce, xfcegnome, browser, office, xsoftware, multimedia, pst, avr or ALL"
    elif [ "$tochange" = XORG_PREFIX ]; then
      display="Choose the installation prefix for Xorg"
    elif [ "$tochange" = XVERSION ]; then
      display="Enter the current X version in the BLFS book"
    elif [ "$tochange" = GNOME_OR_XFCE ]; then
      display="type gnome or xfce - you can install one or the other, not both"
    elif [ "$tochange" = BROWSER ]; then
      if [ "$SECTION" = browser ]; then
        display="Type firefox, seamonkey or chromium"
      else
        display="Type firefox, seamonkey or chromium. Set SECTION to browser to install it."
      fi
    elif [ "$tochange" = SINGLE_PACKAGE ]; then
      if [[ "$SECTION" = ALL || "$SECTION" = all ]]; then
      display="Name of the package to install. There is no section ALL, so change it to the correct section for the package you have specified."
      else
      display="Name of the package to install. It must be in $SECTION. If specified, this will take precedence. Type no to switch off this option"
      fi
    elif [ "$tochange" = "AS_ROOT" ]; then
      display="If yes, install packages as root. If no, install as package user"
    elif [ "$tochange" = "SYSTEMD" ]; then
      display="Set to yes if LFS was installed using systemd. Otherwise set to no."
    elif [ "$tochange" = DESTDIR ]; then
      display="Set to yes to install a package to a specified directory. Otherwise set to no."
    fi
    value=$(awk -F\= -v x=$tochange '$1==x {print $2}' $cfg)
  ;;
esac
exec 3>&1
newval=$(dialog \
    --backtitle "BLFS config file editor" \
    --title "Change value" \
    --clear \
    --inputbox "$display" 0 0 $value \
    2>&1 1>&3)
case ${newval+x$newval} in
  (x)
     dialog --infobox "Value can't be empty" 0 0
     sleep 2
     exit_status=1
  ;;
  ("")
     dialog --infobox "Value can't be unset" 0 0
     sleep 2
     exit_status=1
  ;;
  (x*[![:blank:]]*)
     exit_status=$? # non blank
  ;;
  (*)
     dialog --infobox "Value can't be blank" 0 0
     sleep 2
     exit_status=1
  ;;
esac
exec 3>&-
case $exit_status in
  $DIALOG_CANCEL)
    return 0
  ;;
  $DIALOG_ESC)
    echo "Program aborted." >&2
    exit 1
  ;;
  $DIALOG_OK)
    dialog \
    --backtitle "BLFS config file editor" \
    --title "Confirmation" \
    --yesno "Commit ?" 0 0
    exit_status=$?
    case $exit_status in
       1)
          dialog \
          --backtitle "BLFS config file editor" \
          --infobox "Value not changed" 0 0
          sleep 1
       ;;
       0)
          awk -v x=$tochange -v n=$newval '
               BEGIN {FS=OFS="="}$1==x {$2=n} {print}
               ' $cfg > $cfg.tmp
          mv $cfg.tmp $cfg
# if BOOK_VERSION is set to systemd, make sure SYSTEMD=yes
          case $tochange in
             BOOK_VERSION)
               if [[ "$BOOK_VERSION" = systemd && "$SYSTEMD" = no ]]; then
                 tochange="SYSTEMD"
                 newval="yes"
                 awk -v x=$tochange -v n=$newval '
                    BEGIN {FS=OFS="="}$1==x {$2=n} {print}
                    ' $cfg > $cfg.tmp
                 mv $cfg.tmp $cfg
               fi
             ;;
          esac
       ;;
    esac
  ;;
esac
return 0
}

_main () {
while true; do
  exec 3>&1
  selection=$(dialog \
    --backtitle "BLFS config file editor" \
    --title "Menu" \
    --clear \
    --cancel-label "Cancel" \
    --menu "Please choose an option:" $HEIGHT $WIDTH 4 \
            1 "View the config file" \
            2 "Edit config file" \
            3 "Exit from this menu" 2>&1 1>&3)
  exit_status=$?
  exec 3>&-
  case $exit_status in
    $DIALOG_CANCEL)
      echo "Cancel pressed. Exit program"
      exit 1
    ;;
    $DIALOG_ESC)
      echo "Program aborted."
      exit 1
    ;;
    $DIALOG_OK)
      case $selection in
        1)
           display_configFile $cfg
        ;;
        2)
           _edit
           display_configFile $cfg
        ;;
        3)
          echo "Exit and process config file"
          return 0
        ;;
      esac
  esac
done
}
_main
} #end configEdit
#
GetAllSections () {
local allsec=""
secfile=${BLFSBUILDFILES}/allSections
if [ ! -e $secfile ]; then
  return $RETURN_PARAM
else
IFS='
'
allsec=( $( < $secfile ) )
rtrnSec=(${allsec[@]})
return 0
fi
} # end GetAllSections
#
SetupSections () {
numSections=1
if [ "$SECTION" = all ]; then
  rtrnSec=""
  GetAllSections
  return_val=$?
  if [ $return_val -eq $RETURN_PARAM ]; then
    echo "Error reading in allSections file."
    echo "Make sure file allSections is in $BLFSBUILDFILES"
    echo "Exiting now"
    exit 1
  else
    SectionsALL=(${rtrnSec[@]})
    numSections=${#SectionsALL[@]}
  fi
else
  SectionsALL[0]=$SECTION
fi
} # end SetupSections
#
GetLocalREPO () {
bookdir=$1
#
# create a list of local BLFS books - only works relative to $bookdir
unset Paths
for Path in $( find $bookdir -name index.xml -exec dirname {} ';' ); do
  if [ -e $Path/.svn ]; then
    Paths="$Paths $Path"
  fi
done
PathCount=$( echo $Paths | awk '{print NF}' )
case $PathCount in
   0) echo >&2 "Couldn't find any local BLFS book in $bookdir"
      echo >&2 "Suggest you svn one or specify a different location"
      return $RETURN_PARAM
   ;;
   1) Path=$Paths
      svn info $Path >&2
      PS3="Is this correct? : "
      select confirm in Yes No; do
        case $confirm in
          '') echo >&2 "Please enter 1 for Yes or 2 for No"
          ;;
          ?*) break
          ;;
        esac
      done
      case $confirm in
         No) echo >&2 "This is the only BLFS book in $bookdir"
             return $RETURN_PARAM
         ;;
        Yes) 
            BOOK_VERSION=$(echo $Path | awk 'BEGIN {FS="/"}{print $5}')
            tochange="BOOK_VERSION"
            awk -v x=$tochange -v n=$BOOK_VERSION '
               BEGIN {FS=OFS="="}$1==x {$2=n} {print}
               ' $cfg > $cfgtmp
            mv $cfgtmp $cfg
            return 0
         ;;
      esac
   ;;
   *)
      PS3="which is your $REPO svn repo? : "
      select Path in $( echo $Paths | sed 's@'$HOME'@~@g'); do
        Path=$( echo $Path | sed 's@~@'$HOME'@' )
        case $Path in
         '') echo >&2 "Please select using number"
         ;;
         ?*) echo >&2 "You have selected svn repo"
             svn info $Path >&2
             PS3="Is this correct? : "
             select confirm in Yes No; do
               case $confirm in
                '') echo >&2 "Please enter 1 for Yes or 2 for No"
                ;;
                ?*) break
                ;;
               esac
             done
             case $confirm in
               No) 
                   return $RETURN_PARAM
               ;;
               Yes)
                   BOOK_VERSION=$(echo $Path | awk 'BEGIN {FS="/"}{print $5}')
                   tochange="BOOK_VERSION"
                   awk -v x=$tochange -v n=$BOOK_VERSION '
                   BEGIN {FS=OFS="="}$1==x {$2=n} {print}
                   ' $cfg > $cfgtmp
                   mv $cfgtmp $cfg
                   return 0
               ;;
             esac
         ;;
        esac
      done
   ;;
esac
} # end GetLocalREPO
#
ChkLocalBook () {
# $1 is the book dir
# $2 is the book version
localbookdir=${1}/${2}
ChkLocalBookExists $1 $2
return_val=$?
if [ $return_val -eq $RETURN_PARAM ]; then # requested book not present
  echo "Requested book not present locally. Will download it."
  return 0
else # book present, test if need to svn or git clone an update
  ChkLocalBookDetails $localbookdir
  return_val=$?
  if [ $return_val -eq $RETURN_PARAM ]; then
    return $RETURN_PARAM # same book already present locally
  else
    return 0
  fi
fi
} # end ChkLocalBook
#
ChkLocalBookExists () {
# $1 is the book dir
# $2 is the book version
local bookdir=${1}/${2}
#
svnorgit="svn"
if [ "$2" = KBLFS ]; then svnorgit="git"; fi
unset BookPath
if [ -d $bookdir ]; then
for BookPath in $( find $bookdir -name index.xml -exec dirname {} ';' ); do
  if [ -e ${BookPath}/.${svnorgit} ]; then #a book exists, check the version
    if [ "$BOOK_VERSION" = Current_Development -o "$BOOK_VERSION" = BOOK ]; then
      version="BOOK"
    else
      version=$BOOK_VERSION
    fi
    if [ $BookPath = $bookdir ]; then
      return 0 #requested version is present locally
    fi
  fi
done
else
  echo "Dir $bookdir not present locally."
fi
return $RETURN_PARAM #requested book not present locally
} #end ChkLocalBookExists
#
ChkLocalBookDetails () {
local bookdir=$1
#
if [[ "$BOOK_VERSION" = Current_Development || "$BOOK_VERSION" = BOOK || "$BOOK_VERSION" = systemd ]]; then
  # check the last svn date
  returned_array=( $(LastAccessSvn "$argument") )
  retval=$?
  if [ $retval -eq 0 ]; then # compare last svn date with today's date
    if [ ${returned_array[0]} -eq ${returned_array[1]} ]; then
      echo "same book already downloaded today"
      echo "To use it, set BOOK=local in the config file."
      echo "To download it again, delete $bookdir"
      return $RETURN_PARAM
    else
      return 0
    fi
  else
    echo "Could not retrieve date of last svn - no entries file found."
    echo "Will svn the requested book"
    return 0
  fi
elif [ "$BOOK_VERSION" = KBLFS ]; then # get the commit hash
  pushd $bookdir > /dev/null
    local -a localCommit=( $(git log --max-count=1) )
  popd > /dev/null
  if [ "$latestCommit" == "${localCommit[1]}" ]; then
    echo "The same commit is already present in $bookdir."
    echo "Set BOOK=local in the config file to use it."
    return $RETURN_PARAM
  else
    return 0
  fi
else # assume book is a release version so don't update it
  echo "Requested book is present locally and is a release version"
  echo "so update not necessary"
  return $RETURN_PARAM
fi
} # end ChkLocalBookDetails
#
CleanLocalREPO () { # del any files in the local directory
local bookdir=$1
if [ -d $bookdir ]; then #local dir exists
  if [ "$(ls -A $bookdir)" ]; then
    rm -rf ${bookdir}/${version} # delete contents of local book dir
  fi
else  # create it
  mkdir -pv $bookdir
fi
} # end CleanLocalREPO
#
GetSvnUrl () {
if [ "$BOOK_URL" = blank ]; then
  BOOK_URL="svn://svn.linuxfromscratch.org/${REPO}/"
fi
} # end GetSvnUrl
#
WhichBLFSBook () {
Ignore="bootscripts"
PS3="Please select the book version : "
select TAG in 'Current Development' $( svn ls ${BOOK_URL}tags | grep -vE "$Ignore" ); do
  case $TAG in
    '') echo >&2 "Please select a numbered option";;
    Current*)
      type=trunk
      version=BOOK
      BOOK_VERSION="Current_Development"
    ;;
    ?*)
      if [ "$BOOK_VERSION" = systemd ]; then
        type="branches"
        version="systemd"
      else
        type="tags"
        version=$TAG
        BOOK_VERSION=$TAG
      fi
    ;;
  esac
  BOOK_FULL_URL="${BOOK_URL}$type/$version"
  echo >&2 "You have selected '$TAG'"
  echo >&2 "$BOOK_FULL_URL"
  PS3="Is this correct? : "
  select confirm in Yes No; do
    case $confirm in
      '') echo >&2 "Please enter 1 for Yes or 2 for No";;
      ?*) break
    esac
  done
  case $confirm in
    No) PS3="Please select the book version : "
    ;;
# update the config file with the book version
    Yes) awk -v x=BOOK_VERSION -v n=$BOOK_VERSION '
             BEGIN {FS=OFS="="}$1==x {$2=n} {print}
             ' $cfg > $cfgtmp
             mv $cfgtmp $cfg
         break
    ;;
  esac
done
} #end WhichBLFSBook
#
SetBLFSBook () {
case $BOOK_VERSION in
   Current_Development)
         type="trunk"
         version="BOOK"
   ;;
   BOOK)
         type="trunk"
         version="BOOK"
   ;;
   systemd)
         type="branches"
         version="systemd"
   ;;
   *)
         type="tags"
         version=$BOOK_VERSION
   ;;
esac
} #end SetBLFSBook
#
LastAccessSvn () {
local passed_array   # Local variable
local bookdir=$BLFS_BOOK_LOC_DIR
if [ "$BOOK_VERSION" = systemd ]; then bookdir=${bookdir}/SYSTEMD; fi
BookLoc=${bookdir}/${version}
if [ -e ${BookLoc}/.svn/entries ]; then #check time of last svn
  EntriesDate=$( stat --printf=%y ${BookLoc}/.svn/entries | awk 'gsub(/-/,"") {printf $1}' )
  date=$(date +'%Y-%m-%d %H:%M:%S') # today's date
  read Y M D h m s <<< ${date//[-: ]/ }
  today=$Y$M$D
  passed_array=( $EntriesDate $today ) # return the last svn date and today
  echo "${passed_array[@]}"
  return 0
else
  return $RETURN_PARAM # no entries file found
fi
} # end LastAccessSvn
CheckoutBook () {
local bookdir=$1
#
Url="${BOOK_URL}${type}/${version}"
#
echo "Will svn the LFS book at $Url"
echo "and place it in $bookdir"
svn co $Url $bookdir # get the requested book
#
} # end CheckoutBook
#
LocalBook () {
# $1 is the book dir
# $2 is the book version
if [ "$2" = Current_Development -o "$2" = BOOK ]; then
  type="trunk"
  version="BOOK"
elif [ "$2" = systemd ]; then
  type="branches"
  version="systemd"
else
  type="tags"
  version=$2
fi
if [ "$2" != KBLFS ]; then
  SVNINFO="$(svn info ${1}/${2} | awk '{printf $0"|"}')"
fi
} # end LocalBook
#
CleanSourceDir () {
# $1 is the current section
DirToClean=${SOURCEDIR}/${1}
wgetFile=${DirToClean}/${WgetList}
sortedFile=${DirToClean}/${sortedfile}
if [ -d $DirToClean ]; then
  if [ "$(ls -A $DirToClean)" ]; then # dir has files in it
    if [ -e $wgetFile ]; then
      for File in ${DirToClean}/*; do
        fndfile=$( echo $File | awk -F\/ '{print $NF}' )
        if [ -e $wgetFile ]; then
          if [ "$( grep -q $fndfile $wgetFile ; echo $? )" = "0" ]; then
            rm -rf ${DirToClean}/${fndfile} # delete the file if in wget-list
          fi
        fi
      done
      if [ -e $wgetFile ]; then rm $wgetFile; fi
      if [ -e $sortedFile ]; then rm $sortedFile; fi
    else
      echo "List file $wgetFile not present. Cannot clean directory $DirToClean"
    fi
  else
     echo "directory $DirToClean is empty"
  fi
else
  install -v -m0755 -d $DirToClean
fi
} #end CleanSourceDir
#
ChkSrcPresent () {
# $1 is the directory to check and $2 is the sortedfile list of files
fileMissing=false
dirtochk=$1
sortedFile=$2
if [ -z $sortedFile ]; then
  echo "No sorted file present in ${SOURCEDIR}/${Section}"
  echo "sources are not available"
  return 0
fi
while read FileUrl; do
  if [[ ${FileUrl:0:1} != '#' ]]; then # ignore file if it has a hash at the start
    filetofind=$( echo $FileUrl | awk -F\/ '{print $NF}' )
    if [ ! -e ${dirtochk}/${filetofind} ]; then
      echo "file $filetofind not downloaded"
      fileMissing=true
    fi
  fi
done < $sortedFile
if $fileMissing; then
  return $RETURN_PARAM
else
  return 0
fi
} # end ChkSrcPresent
#
createMd5File () {
commandname=$1
xmlsec="x"
rtrnCom=""
filetoget=${1}fnames
getComms $filetoget $xmlsec
fileComm=(${rtrnCom[@]})
tempfile=$(date +%d%B%Y_%H:%M)tmp.file
printf "%s\n" "${fileComm[@]}" > ${SrcPath}/${1}/${tempfile} #write to a tmp file
currentdir=$( echo $PWD )
cd ${SrcPath}/${1}
source $tempfile
rm $tempfile
cd $currentdir
return 0
} # createMd5File
#
GetXtraFiles () {
commandname=$1
xmlsec="x"
rtrnCom=""
filetoget=${1}wget
getComms $filetoget $xmlsec
fileComm=(${rtrnCom[@]})
tempfile=$(date +%d%B%Y_%H:%M)tmp.file
printf "%s\n" "${fileComm[@]}" | sed -e 's/\(.*\)&&$/\1/' > ${SrcPath}/${1}/${tempfile}
currentdir=$( echo $PWD )
cd ${SrcPath}/${1}
source $tempfile # download the files
cd ..
rm $tempfile
cd $currentdir
return 0
} # end GetXtraFiles
#
SortWgetList () {
# this function creates the wget-list for a particular section and sorts it.
# $1 is the section name, $2 is the array of pkg names, $3 is the array of src names.
local section_name=$1
declare -a pkgname=("${!2}")
declare -a srcname=("${!3}")
local SrcPath=${SOURCEDIR}/${section_name}
#
# you can use your own wget-list file for a particular section.
# for e.g, you can download latest versions of gnome and the X libraries.
# Put the wget list files in the $blfsfilesTar dir.
#
#if [ "$section_name" = gnomeplatform ]; then
#  pkgfile=${BLFSBUILDFILES}/gnomeplatform-wget-list
#elif [ "$section_name" = gnomedesktop ]; then
#  pkgfile=${BLFSBUILDFILES}/gnomedesktop-wget-list
#elif [ "$section_name" = gnomeapps ]; then
#  pkgfile=${BLFSBUILDFILES}/gnomeapps-wget-list
#elif [ "$section_name" = xlibs ]; then
#  pkgfile=${BLFSBUILDFILES}/xlibs-wget-list
#else
  pkgfile=${SOURCEDIR}/${WgetList}
#fi
if [ ! -e "$pkgfile" ]; then
  echo "\""$pkgfile"\" does not exist. Please download wget-list"
  exit 1
else
  echo "will use $pkgfile to download the required source files"
fi
#
if [ ! -d $SrcPath ]; then install -v -m0755 -d $SrcPath; fi
if [ -e ${SrcPath}/${WgetList} ]; then rm ${SrcPath}/${WgetList}; fi
#
for (( ik=0; ik<${#srcname[@]}; ik++ )); do
  if $single_package; then # find the package
    if [[ "$SINGLE_PACKAGE" == "${pkgname[ik]}" ]]; then # found the package
      tomatch="/${srcname[ik]}[0-9]"
      grep $tomatch $pkgfile >> ${SrcPath}/${WgetList}
      break
    fi
  else # some packages need extra files downloaded
    case ${srcname[ik]} in
       cracklib-|libnl-|git-|docbook-xsl-|freetype-|poppler-) # need cracklib-words, libnl-docs, git-manpages, docbook-xsl-doc, freetype-doc, poppler-data
            tomatch="/${srcname[ik]}"
       ;;
       *)
            tomatch="/${srcname[ik]}[0-9]"
       ;;
    esac
    grep $tomatch $pkgfile  >> ${SrcPath}/${WgetList} # list of files in this section
  fi
done
# make sure there are no duplicate lines
if [ -e ${SrcPath}/${sortedfile} ]; then rm ${SrcPath}/${sortedfile}; fi
sort -u ${SrcPath}/${WgetList} > ${SrcPath}/${sortedfile}
case $BROWSER in
  firefox)
     sed -i '/seamonkey-/d' ${SrcPath}/${sortedfile}
  ;;
  seamonkey)
     sed -i '/firefox-/d' ${SrcPath}/${sortedfile}
  ;;
esac
# don't download icedtea-web in the java section
case $section_name in
  java)
     sed -i '/icedtea-web/d' ${SrcPath}/${sortedfile}
  ;;
esac
return 0
} # end SortWgetList
# convert char to ascii and vice versa
chr() {
  [ "$1" -lt 256 ] || return 1
  printf "\\$(printf '%03o' "$1")"
} # end of chr
#
ord() {
  LC_CTYPE=C printf '%d' "'$1"
} # end ord
#
GetAsciiVal () {
# $1 is the string to convert to ascii
local inputStr=$1
local sum=0
local value
for (( i=0; i<${#inputStr}; i++ )); do
  value=$(ord ${inputStr:$i:1})
  sum=$((sum+$value))
done
echo "$sum"
return 0
} # end GetAsciiVal
#
GetPubGnome () {
local pubgnome=""
pubgnomefile=${BLFSBUILDFILES}/latestpubgnomesources
if [ ! -e $pubgnomefile ]; then
  return $RETURN_PARAM
else
IFS='
'
pubgnome=( $( < $pubgnomefile ) )
rtrnPubGnome=(${pubgnome[@]})
return 0
fi
} # end GetPubGnome
#
updateSorted () {
# $1 is the array holding the list of "Click to enter 'version' strings"
# $2 is the url
# $3 is the package name, no version num but include the - after the name
# $4 is the file extension, .tar.xz, .tar.bz2, .tar.gz, .tgz or .zip
# $5 is the index number in ClickToDnld containing the filename
local ClickToEnter=("${!1}")
echo "in updateSorted"
local ClickToDnld # array containing list of "Click to download 'filename' strings"
local latestVer=${ClickToEnter[1]} # assumes the first one is the latest - note [0] is empty
latestVer=${latestVer#"Click to enter "} # version number
local url="${2}${latestVer}/" # new url for page to search
local pattern
case $3 in
   cracklib-words-)
     latestVer=${latestVer//-/}
     pattern="${3}${latestVer}${4}"
   ;;
   faad2-)
     pattern="${latestVer}/${latestVer}${4}"
   ;;
   sqlite-*)
     pattern=$3
     url=${url/e 3/e%203} # fix the space in the version number
   ;;
   tcl8.)
     pattern="${fnameonly}${latestVer}-html.tar.gz"
   ;;
   tk8.)
     pattern="${fnameonly}${latestVer}-src.tar.gz"
   ;;
   *)
     pattern="${3}${latestVer}${4}"
   ;;
esac
echo "url is $url"
echo "pattern is $pattern"
local foundPat=$(/usr/bin/php srcFileVers.php -- $pattern $url $3)
if [ "$foundPat" = "" ]; then
  return $RETURN_PARAM
fi
# page found so update array
readarray -t ClickToDnld <<< "$foundPat"
echo "ClickToDnld is ${ClickToDnld[@]}"
local indexnum=$5
local filename=${ClickToDnld[indexnum]} #  [0] is empty
echo "filename is $filename"
filename=${filename#*"Click to download "}
echo "filename is $filename"
rtrnFname=$filename
echo "exit updateSorted"
return 0
} # end updateSorted
#
compare_versions () {
#
# compares two version numbers
# returns $RETURN_GT if $1 > $2 
# return $RETURN_EQ if $1 = $2
# otherwise returns 0
# $3 is the separator to parse the version number, usually .
#
#oldIiFS=$IFS
local IFS="$3"
local a1=( $1 )
local a2=( $2 )
# some versions have a - in them, e.g. ImageMagick
local b1=$(IFS='-'; echo "${a1[*]}") # string b1 is now - delimited
local b2=$(IFS='-'; echo "${a2[*]}")
IFS='-' read -ra a1 <<< "$b1" # put delimited string back into array
IFS='-' read -ra a2 <<< "$b2"
#IFS=$oldIFS
#echo "a1 is ${a1[@]}"
#echo "a2 is ${a2[@]}"
local num_a1=${#a1[@]}
local num_a2=${#a2[@]}
#echo "numa1, numa2 are $num_a1 $num_a2"
local max=$(( $num_a1 > $num_a2 ? $num_a1 : $num_a2 ))
local im
for (( im=0; im<$max; im++ )); do
# deal with invalid octal. usbutils uses 00 type versioning.
  if [ "${a1[im]}" = "08" -o "${a1[im]}" = "09" ]; then a1[im]=${a1[im]#?}; fi
  if [ "${a2[im]}" = "08" -o "${a2[im]}" = "09" ]; then a2[im]=${a2[im]#?}; fi
  if [ "${a1[im]}" = "008" -o "${a1[im]}" = "009" ]; then a1[im]=${a1[im]#??}; fi
  if [ "${a2[im]}" = "008" -o "${a2[im]}" = "009" ]; then a2[im]=${a2[im]#??}; fi
#echo "a1 is ${a1[im]}"
#echo "a2 is ${a2[im]}"
  if [ "${a1[im]}" -eq "${a1[im]}" ] 2>/dev/null; then # is integer
    if [ "${a2[im]}" -eq "${a2[im]}" ] 2>/dev/null; then # can compare
      (("${a1[im]}" > "${a2[im]}")) && return $RETURN_GT
      (("${a2[im]}" > "${a1[im]}")) && return 0
    else
         return $RETURN_GT # a2 missing so a1 greater
    fi
  else
         return 0 # a2 greater
  fi
done
# if got here then a1 and a2 are equal
return $RETURN_EQ
} # end compare_versions
#
findMaxVers () {
# $1 is the array holding the filenames
# $2 is the extension of the file - xz, bz2, gz, patch.gz, tgz or zip
# $3 is the pattern to trim to
# $4 is the version used in the wget-file
# $5 is the package tar filename
local filesArray=("${!1}")
local extType=$2
local trimto=$3
local extension="tar.xz"
local maxVers=$4
local fname=$5
local instor=0 # the index of the max version file in the filesArray array
local foundit=false # true if $maxVers found in filesArray
#
case $extType in
   bz2)
     extension="tar.bz2"
   ;;
   gz)
     extension="tar.gz"
   ;;
   gz2)
     extension=".gz"
   ;;
   patch.gz)
     extension="patch.gz"
   ;;
   tgz)
     extension=".tgz"
   ;;
   zip)
     extension=".zip"
   ;;
   tar)
     extension=".tar"
   ;;
   lzma)
    extension="tar.lzma"
   ;;
esac
for ((in=0; in<${#filesArray[@]}; in++)); do
  case ${filesArray[in]} in
     *$extension) # parse the version number of all files of type $extension
        namePlusVer="${filesArray[in]%${trimto}*}" # name plus version
        case $fname in
           boost_*) # uses underscore
             justVers=${namePlusVer#boost_}
             case $justVers in
                *rc*) # release candidate - ignore
                  ret_val=0
                ;;
                *)
                  compare_versions $justVers $maxVers "_"
                  ret_val=$?
                ;;
             esac
           ;;
           cracklib-words-*)
             namePlusVer="${filesArray[in]%".gz"*}" # name plus version
             justVers="${namePlusVer#"cracklib-words-"}"
             compare_versions $justVers $maxVers "_"
             ret_val=$?
           ;;
           icu4c*)
             namePlusVer="${filesArray[in]%-src*}" # name plus version
             justVers=$(echo $namePlusVer | awk -F\- '{print $NF}')
             case $justVers in
                *rc*) # release candidate - ignore
                  ret_val=0
                ;;
                *)
                  compare_versions $justVers $maxVers "_"
                  ret_val=$?
                ;;
             esac
           ;;
           ImageMagick-*)
             justVers=${namePlusVer#"ImageMagick-"}
             case $justVers in
                *rc*) # release candidate - ignore
                  ret_val=0
                ;;
                *)
                  compare_versions $justVers $maxVers "."
                  ret_val=$?
                ;;
             esac
           ;;
           LVM2*)
             justVers=${namePlusVer#"LVM2."}
             case $justVers in
                *rc*) # release candidate - ignore
                  ret_val=0
                ;;
                *)
                  compare_versions $justVers $maxVers "."
                  ret_val=$?
                ;;
             esac
           ;;
           mozjs17*)
             justVers=${namePlusVer#mozjs}
             case $justVers in
                *rc*) # release candidate - ignore
                  ret_val=0
                ;;
                *)
                  compare_versions $justVers $maxVers "."
                  ret_val=$?
                ;;
             esac
           ;;
           speex-*) # latest version is 1.2rc2.tar.gz - can't handel that
             case ${filesArray[in]} in
                *1.2rc2*)
                  instor=$in
                ;;
             esac
             ret_val=0
           ;;
           "tcl"*"-html"*)
             justVers=${namePlusVer#"tcl8."}
             case $justVers in
                *rc*) # release candidate - ignore
                  ret_val=0
                ;;
                *)
                  compare_versions $justVers $maxVers "."
                  ret_val=$?
                ;;
             esac
           ;;
           whois_*)
             justVers=${namePlusVer#whois_}
             case $justVers in
                *rc*) # release candidate - ignore
                  ret_val=0
                ;;
                *)
                  compare_versions $justVers $maxVers "."
                  ret_val=$?
                ;;
             esac
           ;;
           wireless_tools*)
             justVers=$(echo $namePlusVer | awk -F\. '{print $NF}')
             case $justVers in
                *rc*) # release candidate - ignore
                  ret_val=0
                ;;
                *)
                  compare_versions $justVers $maxVers "."
                  ret_val=$?
                ;;
             esac
           ;;
           *)
             justVers=$(echo $namePlusVer | awk -F\- '{print $NF}')
#echo "justVers is $justVers"
#echo "maxVers is $maxVers"
             case $justVers in
                *rc*|*RC*|*c1*) # release candidate - ignore. gimp has RC, pyxdg has c1
                  ret_val=0
                ;;
                *)
                  compare_versions $justVers $maxVers "."
                  ret_val=$?
                ;;
             esac
           ;;
        esac
        if [ $ret_val -eq $RETURN_GT ]; then # justVers is >
          maxVers=$justVers
          foundit=true
          instor=$in # store the index of current max version
        elif [ $ret_val -eq $RETURN_EQ ]; then
          foundit=true
          instor=$in # versions are the same so store the index
        fi
     ;;
  esac
done
echo ${filesArray[instor]}
if [ "$maxVers" = "$4" ]; then # maxVers unchanged
  if ! $foundit; then
    return $RETURN_PARAM
  else
    return $RETURN_EQ
  fi
else
  return 0
fi
} # end findMaxVers
#
uniqueArray () {
# $1 is the array to sort
local unsorted_array=("${!1}")
#echo "unsorted is ${unsorted_array[@]}"
#echo "num terms in unsorted is ${#unsorted_array[@]}"
local ip
oldIFS=$IFS
IFS=$'\n'
local sorted_array=( $(printf "%s\n" "${unsorted_array[@]}" | sort -u) )
IFS=$oldIFS
#echo "sorted is ${sorted_array[@]}"
#echo "num terms in sorted is ${#sorted_array[@]}"
rtrnSorted=(${sorted_array[@]})
} # end uniqueArray
#
detExtType () {
# determine the extension type of a tar file
# the hierarchy is xz, bz2, gz, tgz and zip
local sortedVersions=("${!1}")
local isXZ=false
local isLZMA=false
local isBZ2=false
local isGZ=false
local isGZ2=false
local ispatchGZ=false
local isTGZ=false
local isZIP=false
local isTAR=false
local extType
#
for ((in=0; in<${#sortedVersions[@]}; in++)); do # decide which files to test, .xz, .bz2, .gz, .tgz or zip
  case ${sortedVersions[in]} in
     *tar.xz*)
        isXZ=true # if .xz file present, don't need to continue searching
        break
     ;;
     *.tar.lzma*) # e.g. curl
        isLZMA=true
        break
     ;;
     *tar.bz2*)
        isBZ2=true
     ;;
     *tar.gz*)
        isGZ=true
     ;;
     *.patch.gz*) # for libpng patch file
        ispatchGZ=true
        break
     ;;
     *[0-9].gz*) # for cracklib-words - no tar in name
        isGZ2=true
        trimto=".gz"
     ;;
     *.tgz*)
        isTGZ=true
     ;;
     *.zip*)
        isZIP=true
     ;;
     *-signed.tar) # for krb5
        isTAR=true
        break
     ;;
  esac
done
# Set extension type to use, based on the hierarchy of tar files
if $isXZ; then
  extType="xz"
elif $isLZMA; then
  extType="lzma"
elif $isBZ2; then
  extType="bz2"
elif $isGZ; then
  extType="gz"
elif $ispatchGZ; then
  extType="patch.gz"
elif $isGZ2; then
  extType="gz2"
elif $isTGZ; then
  extType="tgz"
elif $isZIP; then
  extType="zip"
elif $isTAR; then
  extType="tar"
else
  return $RETURN_PARAM
fi
echo $extType
return 0
} # end detExtType
#
GetLatestVers () {
# $1 is the section
# $2 is the sorted wget-list file
local section_name=$1
local sortedfile=$2
local SrcPath=${SOURCEDIR}/${section_name}
local nameseries
local trimto=".tar"
local ftrimto
local bittomatch
local fileToUse
local trimfname
local trimbit
local verToUse
local vernum
local in
local ic
local tarfname
local fnameonly
local url_bit
local urlstor
local isAnduin
local temppart
local extType
local toRemove
local tmparray
local numvals
local pnum
local instor
local asciiVal
local maxval
local doNothing=false # flag to not process pages for some packages
local readpubgnome=false # read the $BLFSBUILDFILES/latestpubgnomesources file once
local origextType
#
#use a tmp file to store the latest urls for each source package
local latest_tmpfile=$(date +%d%B%Y_%H:%M)tmp.file
while read url_line; do
  tarfname=$(echo $url_line |  awk -F\/ '{print $NF}')
  url_bit="${url_line%${tarfname}}" # the url in the wget-list file
  urlstor=$url_bit # store this, as url is changed in many cases
  fnameonly=$(echo $tarfname | awk -F\- '{print $1}') # filename, no version
  case $tarfname in
     alsa-*|appstream-glib-*|apr-util-*|Archive-Zip-*|cups-filters-*|cyrus-sasl-*|dbus-glib-*|dbus-python-*|docbook-xml-*|docbook-xsl-1*|dvd+rw-tools-*|fdk-aac-*|glib-networking-*|git-htmldocs-*|git-manpages-*|gobject-introspection-*|grilo-plugins-*|gtk-doc-*|iso-codes-*|json-c-*|json-glib-*|libgpg-error-*|libjpeg-turbo-*|libnl-doc-*|libusb-compat*|Linux-PAM-*|npapi-sdk-*|p11-kit-*|pm-utils-*|poppler-data-*|sgml-common-*|sqlite-autoconf-*|util-macros-*|xcb-proto-*|xcursor-themes-*|xkeyboard-config-*|XML-Simple-*|xorg-server-*)
       fnameonly=$(echo $tarfname | awk -F\- '{print $1"-"$2}')
     ;;
     clutter-gst-*|clutter-gtk-*|gdk-pixbuf-*|icedtea-web-*|notification-daemon-*|gtk-engines-*|startup-notification-*|xdg-utils-*)
       fnameonly=$(echo $tarfname | awk -F\- '{print $1"-"$2}')
     ;;
     boost_*)
       fnameonly=$(echo $tarfname | awk -F\_ '{print $1}') # separator is _
     ;;
     at-spi2-atk-*|at-spi2-core-*|desktop-file-utils-*|docbook-xsl-doc-*|gst-plugins-*|hicolor-icon-theme-*|icon-naming-utils-*|obex-data-server-*|shared-mime-info-*|xcb-util-image-*|xcb-util-keysyms-*|xcb-util-renderutil-*|xcb-util-wm-*|xf86-input-*|xf86-video-*)
       fnameonly=$(echo $tarfname | awk -F\- '{print $1"-"$2"-"$3}')
     ;;
     qt-everywhere-*)
       fnameonly=$(echo $tarfname | awk -F\- '{print $1"-"$2"-"$3"-"$4}')
     ;;
     LVM2*)
       fnameonly="LVM2"
     ;;
     mozjs17*)
       fnameonly=$(echo $tarfname | awk -F\17 '{print $1}')
     ;;
     tcl8*|tk8*)
       fnameonly=$(echo $fnameonly | awk -F\. '{print $1}') # gives tcl8, tk8
       fnameonly=${fnameonly%?} # tcl, tk
     ;;
     tidy-cvs*)
       fnameonly="${fnameonly}-cvs" # _ after the cvs
     ;;
     zip*)
       fnameonly="zip"
       ;;
  esac
  isAnduin=$(echo $url_line |  awk -F\/ '{print $3}')
  case $isAnduin in
     "anduin.linuxfromscratch.org")
       fileToUse=$url_line # assume it's the latest version
     ;;
     "www.linuxfromscratch.org")
       fileToUse=$url_line # is a patch file
     ;;
     *)
       case $isAnduin in
          "ftp.gnome.org") # use latest versions of gnome sources
             if ! $readpubgnome; then
               rtrnPubGnome=""
               GetPubGnome
               return_val=$?
               if [ $return_val -eq $RETURN_PARAM ]; then
                 echo "Error reading in latestpubgnomesources file."
                 echo "Make sure the file is in $BLFSBUILDFILES"
                 echo "Exiting now"
                 exit 1
               else
                 LatestPubGnomeVers=(${rtrnPubGnome[@]})
                 readpubgnome=true
               fi
             fi
             nameseries=$(echo $url_line |  awk -F\/ '{print $7"/"$8}')
             url_bit=${url_line%${nameseries}*}
             for (( in=0; in<${#LatestPubGnomeVers[@]}; in++ )); do
               bitToMatch=${LatestPubGnomeVers[in]}
               trimbit="/${bitToMatch%?}" # remove last char before looking for match in url
# note this doesn't work when version goes from (say) 3.19 to 3.20
               if [[ "$url_line" == *"$trimbit"* ]]; then # update the url
                 url_bit="${url_bit}${bitToMatch}/"
                 urlstor=$url_bit
                 trimfname=${bitToMatch/"/"/"-"}
                 trimfname=${trimfname}.
                 bitToMatch="${tarfname%${trimto}*}" # name plus version
                 fileToUse=$tarfname
                 verToUse=$(echo $bitToMatch | awk -F\- '{print $NF}')
                 fnameonly=${tarfname%"-${verToUse}"*} # all files have - as separator
                 vernum=$(echo $bitToMatch | awk -F\. '{print $NF}') # last bit of version
#echo "ftp.gnome.org/pub"
#echo "url_bit is $url_bit"
#echo "trimfname is $trimfname"
#echo "verToUse is $verToUse"
#echo "fnameonly is $fnameonly"
#echo "vernum is $vernum"
                 break
               fi
             done
          ;;
          "ftp.x.org") # x sources
             url_bit=${url_bit/ftp:/http:} # http generally faster
             trimto=".tar" # reset in case it's changed
             bitToMatch="${tarfname%${trimto}*}" # name plus version
             fileToUse=$tarfname
             verToUse=$(echo $bitToMatch | awk -F\- '{print $NF}')
             vernum=$(echo $bitToMatch | awk -F\. '{print $NF}') # last bit of version
             ftrimto="${vernum}${trimto}"
             trimfname="${tarfname%${ftrimto}*}"             
          ;;
          "downloads.sourceforge.net"|"sourceforge.net") # deal with redirection of url
             trimfname='download?source=files'
             trimto=".tar" # reset in case it's been updated
             verToUse=${tarfname%${trimto}*}
             fileToUse=$tarfname
             case $tarfname in
                acpid-*)
                  url_bit="http://sourceforge.net/projects/${fnameonly}2/files/" # acpid2
                  verToUse=${verToUse#${fnameonly}-}
                ;;
                boost_*)
                  url_bit="http://sourceforge.net/projects/${fnameonly}/files/"
                  verToUse=${verToUse#boost_}
                ;;
                bridge-utils-*)
                  url_bit="http://sourceforge.net/projects/${fnameonly}/files/${fnameonly}/"
                  verToUse=${verToUse#"${fnameonly}-utils-"}
                ;;
                cracklib-words-*)
                  trimto=".gz"
                  verToUse=${tarfname%${trimto}*}
                  verToUse=${verToUse#"${fnameonly}-words-"}
                  url_bit="http://sourceforge.net/projects/${fnameonly}/files/${fnameonly}-words/"
                  trimfname="cracklib-words/2008-"
                ;;
                docbook-xsl-1*)
                  url_bit="http://sourceforge.net/projects/docbook/files/docbook-xsl/"
                  verToUse=${verToUse#${fnameonly}-}
                  trimfname="docbook-xsl/1.78"
                ;;
                docbook-xsl-doc-*)
                  url_bit="http://sourceforge.net/projects/docbook/files/"
                  verToUse=${verToUse#${fnameonly}-}
                ;;
                faad2-*)
                  url_bit="http://sourceforge.net/projects/faac/files/faad2-src/" # faad is under faac
                  verToUse=${verToUse#${fnameonly}-}
                  trimfname="faad2-src/faad2-2."
                ;;
                fdk-aac-*)
                  url_bit="http://sourceforge.net/projects/opencore-amr/files/"
                  verToUse=${verToUse#${fnameonly}-}
                ;;
                freetype-doc*) # have to go one level deeper, download is for freetype, not doc
                  url_bit="http://sourceforge.net/projects/${fnameonly}/files/${fnameonly}-docs/"
                  verToUse=${verToUse#${fnameonly}-doc-}
                  trimfname="freetype-docs/2.5"
                ;;
                gptfdisk-*)
                  url_bit="http://sourceforge.net/projects/gptfdisk/files/gptfdisk/"
                  trimfname="gptfdisk/1.0"
                  verToUse=${verToUse#${fnameonly}-}
                ;;
                gutenprint-*)
                  url_bit="http://sourceforge.net/projects/gimp-print/files/"
                  verToUse=${verToUse#${fnameonly}-}
                ;;
                imlib2-*)
                  url_bit="http://sourceforge.net/projects/enlightenment/files/imlib2-src/"
                ;;
                lcms-*)
                  url_bit="http://sourceforge.net/projects/lcms/files/lcms/1.19/" # old file - won't be updated
                  verToUse="1.19"
                  trimfname="lcms-1.19.tar.gz"
                ;;
                lcms2-*)
                  url_bit="http://sourceforge.net/projects/lcms/files/lcms/"
                  verToUse=${verToUse#${fnameonly}-}
                  trimfname="projects/lcms/files/lcms/2."
                ;;
                libevent-*)
                  trimto="-stable"
                  url_bit="http://sourceforge.net/projects/levent/files/"
                  verToUse=${tarfname%${trimto}*}
                  verToUse=${verToUse#${fnameonly}-}
                ;;
                libjpeg-turbo-*)
                  url_bit="http://sourceforge.net/projects/${fnameonly}/files/"
                  verToUse=${verToUse#${fnameonly}-}
                ;;
                "libpng-"*"-apng.patch"*)
                  trimto="-apng"
                  url_bit="http://sourceforge.net/projects/${fnameonly}-apng/files/libpng16/"
                  verToUse=$(echo $tarfname | awk -F\- '{print $2}')
                  trimfname="projects/libpng-apng/files/libpng16/1.6."
                ;;
                libusb-compat*)
                  url_bit="http://sourceforge.net/projects/libusb/files/libusb-compat-0.1/"
                  verToUse=${verToUse#${fnameonly}-}
                  trimfname="projects/libusb/files/libusb-compat-0.1/libusb-compat-0.1"
                ;;
                openjpeg-1*)
                  url_bit="http://sourceforge.net/projects/openjpeg.mirror/files/"
                  verToUse=${verToUse#${fnameonly}-}
                  trimfname="projects/openjpeg.mirror/files/1.5"
                ;;
                openjpeg-2*)
                  url_bit="http://sourceforge.net/projects/openjpeg.mirror/files/"
                  verToUse=${verToUse#${fnameonly}-}
                  trimfname="projects/openjpeg.mirror/files/2.1"
                ;;
                openobex-*)
                  trimto="-Source"
                  verToUse=${tarfname%${trimto}*}
                  url_bit="http://sourceforge.net/projects/${fnameonly}/files/"
                  verToUse=${verToUse#${fnameonly}-}
                ;;
                OpenSP-*)
                  url_bit="http://sourceforge.net/projects/openjade/files/"
                  verToUse=${verToUse#${fnameonly}-}
                ;;
                "tcl"*"-html"*|"tk"*"-src"*)
                  url_bit="http://sourceforge.net/projects/tcl/files/Tcl/"
                  trimfname="tcl/files/Tcl/8.6."
                  case $fnameonly in
                     tcl)
                       trimto="-html"
                       verToUse=${tarfname%${trimto}*}
                       verToUse=${verToUse#${fnameonly}8.}
                     ;;
                     tk)
                       trimto="-src"
                       verToUse=${tarfname%${trimto}*}
                       verToUse=${verToUse#${fnameonly}8.}
                     ;;
                  esac
                ;;
                "tcl"*"-src"*)
                  trimto="-src"
                  url_bit="http://sourceforge.net/projects/${fnameonly}/files/"
                  verToUse=${tarfname%${trimto}*}
                  verToUse=${verToUse#${fnameonly}8.}
                ;;
                unzip60*)
                  fileToUse=$url_line
                  doNothing=true
                ;;
                xf86-input-wacom-*)
                  url_bit="http://sourceforge.net/projects/linuxwacom/files/"
                  verToUse=${verToUse#${fnameonly}-}
                ;;
                *)
                  url_bit="http://sourceforge.net/projects/${fnameonly}/files/"
                  verToUse=${verToUse#${fnameonly}-}
                ;;
             esac
          ;;
          *)
             trimto=".tar" # reset in case it's changed
             bitToMatch="${tarfname%${trimto}*}" # name plus version
             fileToUse=$tarfname
             verToUse=$(echo $bitToMatch | awk -F\- '{print $NF}')
             vernum=$(echo $bitToMatch | awk -F\. '{print $NF}') # last bit of version
             ftrimto="${vernum}${trimto}"
             trimfname="${tarfname%${ftrimto}*}"
             case $tarfname in
                a52dec-*)
                  url_bit="http://liba52.sourceforge.net/downloads.html"
                ;;
                bind-*)
                  url_bit="ftp://ftp.isc.org/isc/bind9/"
                  stortrim=$trimfname
                  trimfname="9.10."
                ;;
                bluez-*)
                  url_bit="http://www.bluez.org/download/"
                ;;
                cdparanoia-*)
                  trimto=".src"
                  bitToMatch="${tarfname%${trimto}*}"
                  verToUse=$(echo $bitToMatch | awk -F\- '{print $NF}')
                  vernum=$(echo $bitToMatch | awk -F\. '{print $NF}')
                  ftrimto="${vernum}${trimto}"
                  trimfname="${tarfname%${ftrimto}*}"
                ;;
                cmake-*)
                  url_bit="http://www.cmake.org/download/"
                ;;
                cups-filters-*)
                  trimfname="cups-filters-1.0.6" # limit the number retrieved
                ;;
                cups-*)
                  trimto="-source"
                  bitToMatch="${tarfname%${trimto}*}"
                  verToUse=$(echo $bitToMatch | awk -F\- '{print $NF}')
                  vernum=$(echo $bitToMatch | awk -F\. '{print $NF}')                  
                  ftrimto="${vernum}${trimto}"
                  trimfname="${tarfname%${ftrimto}*}"
                  url_bit="http://www.cups.org/"
                ;;
                curl-*)
                  trimfname="curl-7.42."
                ;;
                db-*) # can't find a suitable website to scrape
                  fileToUse=$url_line
                  doNothing=true
                ;;
                enchant-*) # the given url takes ages to scrape, so use an alternative
                  url_bit="http://www.abisource.com/downloads/enchant/1.6.0/"
                ;;
                exiv2-*)
                  url_bit="http://www.exiv2.org/download.html"
                ;;
                flac-*) # ftp slow, use http
                  url_bit="http://downloads.xiph.org/releases/flac/"
                ;;
                geoclue-0*)
                  url_bit="https://launchpad.net/geoclue/trunk/"
                ;;
                icedtea-web-*)
                  url_bit="http://icedtea.wildebeest.org/download/source/"
                ;;
                icu4c*)
                  trimto="-src"
                  bitToMatch="${tarfname%${trimto}*}"
                  vernum=$(echo $bitToMatch | awk -F\_ '{print $NF}') # separator is underscore
                  verToUse=$(echo $bitToMatch | awk -F\- '{print $NF}')
                  ftrimto="${vernum}${trimto}"
                  trimfname="${tarfname%${ftrimto}*}"
                ;;
                inkscape-*)
                  url_bit="https://launchpad.net/inkscape/"
                ;;
                ImageMagick-*)
                  verToUse=${bitToMatch#${fnameonly}-}
                  vernum=$(echo $bitToMatch | awk -F\- '{print $NF}')
                  ftrimto="${vernum}${trimto}"
                  trimfname="${tarfname%${ftrimto}*}"
                ;;
                json-c-*)
                  url_bit="https://github.com/json-c/json-c/releases/"
                ;;
                krb5-*)
                  trimto="-signed"
                  bitToMatch="${tarfname%${trimto}*}"
                  vernum=$(echo $bitToMatch | awk -F\. '{print $NF}')
                  verToUse=$(echo $bitToMatch | awk -F\- '{print $NF}')
                  ftrimto="${vernum}${trimto}"
                  trimfname="${tarfname%${ftrimto}*}"
                ;;
                libass-*)
                  url_bit="https://github.com/libass/libass/releases/"
                ;;
                libdiscid-*) # ftp slow, use http
                  url_bit="http://ftp.musicbrainz.org/pub/musicbrainz/libdiscid/"
                ;;
                libepoxy-*)
                  url_bit="https://crux.nu/files/"
                ;;
                libical-*)
                  url_bit="https://github.com/libical/libical/releases/tag/v1.0.1/"
                ;;
                libmad-*) # old package from 2004
                  fileToUse=$url_line
                  doNothing=true
                ;;
                libmpeg2-*) # ftp too slow, use http
                  url_bit="http://libmpeg2.sourceforge.net/downloads.html"
                ;;
                libmusicbrainz-*)
                  url_bit="https://github.com/metabrainz/libmusicbrainz/releases/"
                ;;
                libndp-*)
                  url_bit="http://libndp.org/"
                ;;
                libogg-*) # very slow - use http not ftp
                  url_bit="http://downloads.xiph.org/releases/ogg/"
                ;;
                libpciaccess-*) # can be slow, use alternative
                  url_bit="http://www.t2-project.org/packages/libpciaccess.html"
                ;;
                libwebp-*)
                  url_bit="http://downloads.webmproject.org/releases/webp/index.html"
                ;;
                libxkbcommon-*)
                  url_bit="http://xkbcommon.org/"
                  trimfname="0.5."
                ;;
                libzeitgeist-*)
                  url_bit="https://launchpad.net/libzeitgeist/"
                ;;
                links-*) # ftp slow, use http
                  url_bit="http://links.twibright.com/download.php"
                ;;
                "Linux-PAM-"*"-docs"*)
                  trimto="-docs"
                  trimfname="Linux-PAM-1." # want to catch 1.2 etc
                  bitToMatch="${tarfname%${trimto}*}" # name plus version
                  verToUse=$(echo $bitToMatch | awk -F\- '{print $NF}')
                ;;
                Linux-PAM-*)
                  trimfname="Linux-PAM-1." # want to catch 1.2 etc
                ;;
                llvm-*)
                  url_bit="http://sourceforge.net/projects/llvm.mirror/files/" # use sourceforge, it doesn't have any clang+llvm files
                  trimto=".src"
                  bitToMatch="${tarfname%${trimto}*}"
                  vernum=$(echo $bitToMatch | awk -F\. '{print $NF}')
                  verToUse=$(echo $bitToMatch | awk -F\- '{print $NF}')
                  ftrimto="${vernum}${trimto}"
                  trimfname="download?source=files"
                ;;
                Mako-*)
                  url_bit="https://pypi.python.org/pypi/Mako/"
                  trimfname=${trimfname/-/"/"}
                ;;
                mariadb-*)
                  url_bit="https://downloads.mariadb.org/"
                  trimfname="mariadb/10.0."
                  verToUse=$(echo $bitToMatch | awk -F\- '{print $NF}')
                ;;
                mesa-*)
                  url_bit="ftp://ftp.freedesktop.org/pub/mesa/"
                  trimfname="10.5."
                  verToUse=$(echo $bitToMatch | awk -F\- '{print $NF}')
                ;;
                mozjs17*)  # no - between name and version :(
                  verToUse="17.0.0"
                ;;
                "nasm"*"-xdoc"*)
                  trimto="-xdoc"
                  bitToMatch="${tarfname%${trimto}*}"
                  vernum=$(echo $bitToMatch | awk -F\. '{print $NF}')
                  verToUse=$(echo $bitToMatch | awk -F\- '{print $NF}')
                  ftrimto="${vernum}${trimto}"
                  trimfname="${tarfname%${ftrimto}*}"
                ;;
                newt-*)
                  url_bit="https://fedorahosted.org/releases/n/e/newt/"
                ;;
                nmap-*)
                  url_bit="https://nmap.org/download.html"
                ;;
                openssh-*)
                  verToUse=${verToUse/p[0-9]/} # remove the p[0-9] to compare versions
                  pnum=${vernum#?} # have to put this back at the end before .tar
                ;;
                openssl-*)
                  trimfname="openssl-1.0.2" # uses letters at the end, so use ascii value
                ;;
                poppler-0*)
                  trimfname="${trimfname%??}" # remove last two chars to match website latest version
                ;;
                qt-everywhere-*)
                  url_bit="http://download.qt.io/official_releases/qt/4.8/"
                  fileToUse=$url_line # this probably won't change as it's an old version
                  doNothing=true                  
                ;;
                setuptools-*)
                  url_bit="https://pypi.python.org/pypi/setuptools/"
                ;;
                sg3_utils-*)
                  url_bit="http://sg.danny.cz/sg/sg3_utils.html#mozTocId479511"
                  trimfname="sg3_utils-1.4"
                ;;
                shared-mime-info-*)
                  url_bit="http://people.freedesktop.org/~hadess/"
                ;;
                soundtouch-*)
                  url_bit="http://www.surina.net/soundtouch/sourcecode.html"
                ;;
                sqlite-*)
                  url_bit="http://sourceforge.net/projects/sqlite.mirror/files/"
                  trimfname="sqlite.mirror/files/SQLite%203.8"
                  verToUse=${verToUse#${fnameonly}-}
                ;;
                taglib-*)
                  url_bit="https://github.com/taglib/taglib/releases/"
                ;;
                telepathy-salut-*)
                  trimfname="telepathy-salut-0.99."
                ;;
                thunderbird-*)
                  fileToUse=$url_line # url has version number in it - I'll think about it!
                  doNothing=true
                ;;
                usbutils-*)
                  trimfname="usbutils-" # no . in version so trimming doesn't work
                ;;
                vlc-*)
                  url_bit="http://download.videolan.org/vlc/" # need to go up a level
                  trimfname="2.2."
                ;;
                whois_*)
                  verToUse=$(echo $bitToMatch | awk -F\_ '{print $NF}')
                ;;
                wireless_tools*)
                  url_bit="https://code.google.com/p/ceos/downloads/detail?name=wireless_tools.29.tar.gz&can=2&q="
                  verToUse=$vernum
                ;;
                wpa_supplicant-*)
                  url_bit="http://w1.fi/releases/"
                ;;
                xdg-utils-*)
                  fileToUse=$url_line # latest is a release candidate
                  doNothing=true
                ;;
                XML-Simple-*)
                  url_bit="http://www.cpan.org/authors/id/G/GR/GRANTM/" # url redirection
                ;;
                xterm-*)
                  fileToUse="${urlstor}xterm.tar.gz" # always latest version
                  doNothing=true
                ;;
                xvidcore-*)
                  url_bit="https://labs.xvid.com/source/"
                  trimfname="xvid.org/downloads/xvidcore-1.3"
                ;;
                *.tgz*)
                  trimto=".tgz"
                  bitToMatch="${tarfname%${trimto}*}"
                  vernum=$(echo $bitToMatch | awk -F\. '{print $NF}')
                  verToUse=$(echo $bitToMatch | awk -F\- '{print $NF}')
                  ftrimto="${vernum}${trimto}"
                  trimfname="${tarfname%${ftrimto}*}"
                  case $tarfname in
                     LVM2*) # no - between LVM2 and the version number
                       verToUse=${bitToMatch#"${fnameonly}."}
                       trimfname=${trimfname}1 # only want to retrieve the 100s plus
                     ;;
                     zip*)
                       verToUse=${bitToMatch#"${fnameonly}"}
                       trimfname=${bitToMatch%?}
                     ;;
                  esac
                ;;
                *.zip*)
                  trimto=".zip"
                  bitToMatch="${tarfname%${trimto}*}"
                  vernum=$(echo $bitToMatch | awk -F\. '{print $NF}')
                  verToUse=$(echo $bitToMatch | awk -F\- '{print $NF}')
                  ftrimto="${vernum}${trimto}"
                  trimfname="${tarfname%${ftrimto}*}"
                  case $tarfname in
                     docbook-xml-*)
                       url_bit="http://www.docbook.org/xml/4.5/"
                     ;;
                     jasper*)
                       url_bit="http://www.ece.uvic.ca/~frodo/jasper/"
                     ;;
                  esac
                ;;
             esac
          ;;
       esac
echo "trimfname is $trimfname"
echo "url_bit is $url_bit"
echo "fnameonly is $fnameonly"
echo "verToUse is $verToUse"
       if ! $doNothing; then
         versionsare=$(/usr/bin/php srcFileVers.php -- $trimfname $url_bit $fnameonly)
#if [ $tarfname = enchant-1.6.0.tar.gz ]; then
echo "versionsare is $versionsare"
#fi
         if [ "$versionsare" = "" ]; then
           echo "Failed to retrieve the requested web page for $tarfname"
           echo "Exiting now"
           exit 1
         fi
         readarray -t sortedVers <<< "$versionsare"
echo "num elements in sortedVer is ${#sortedVers[@]}"
         case $isAnduin in
            "downloads.sourceforge.net"|"sourceforge.net")
               case $tarfname in
                  cracklib-words-*)
                    rtrnFname=""
                    updateSorted sortedVers[@] $url_bit "cracklib-words-" ".gz" 1
                    ret_val=$?
                    if [ $ret_val -eq $RETURN_PARAM ]; then
                      echo "Return from updateSorted"
                      echo "Failed to retrieve the web page for $url"
                      echo "with pattern $pattern."
                      echo "Exiting now"
                      exit 1
                    fi
                    unset sortedVers[@]
                    sortedVers[0]=${rtrnFname}
                  ;;
                  docbook-xsl-1*)
                    rtrnFname=""
                    updateSorted sortedVers[@] $url_bit "docbook-xsl-" ".tar.bz2" 1
                    ret_val=$?
                    if [ $ret_val -eq $RETURN_PARAM ]; then
                      echo "Return from updateSorted"
                      echo "Failed to retrieve the web page for $url"
                      echo "with pattern $pattern."
                      echo "Exiting now"
                      exit 1
                    fi
                    unset sortedVers[@]
                    sortedVers[0]=${rtrnFname}
                  ;;
                  faad2-*)
                    rtrnFname=""
                    updateSorted sortedVers[@] $url_bit "faad2-" ".tar.bz2" 1
                    ret_val=$?
                    if [ $ret_val -eq $RETURN_PARAM ]; then
                      echo "Return from updateSorted"
                      echo "Failed to retrieve the web page for $url"
                      echo "with pattern $pattern."
                      echo "Exiting now"
                      exit 1
                    fi
                    unset sortedVers[@]
                    sortedVers[0]=${rtrnFname}
                  ;;
                  freetype-2*) # get the latest version number
                    temppart=$(echo ${sortedVers[1]} | awk -F\/ '{print $3}')
                    namePlusVer="freetype-${temppart}.tar.bz2"
                    unset sortedVers[@]
                    sortedVers[0]="$namePlusVer"
                  ;;
                  freetype-doc*) # get latest version and get web page again
                    rtrnFname=""
                    updateSorted sortedVers[@] $url_bit "freetype-doc-" ".tar.bz2" 3
                    ret_val=$?
                    if [ $ret_val -eq $RETURN_PARAM ]; then
                      echo "Return from updateSorted"
                      echo "Failed to retrieve the web page for $url"
                      echo "with pattern $pattern."
                      echo "Exiting now"
                      exit 1
                    fi
                    unset sortedVers[@]
                    sortedVers[0]=${rtrnFname}
                  ;;
                  gptfdisk-*)
                    rtrnFname=""
                    updateSorted sortedVers[@] $url_bit "gptfdisk-" ".tar.gz" 1
                    ret_val=$?
                    if [ $ret_val -eq $RETURN_PARAM ]; then
                      echo "Return from updateSorted"
                      echo "Failed to retrieve the web page for $url"
                      echo "with pattern $pattern."
                      echo "Exiting now"
                      exit 1
                    fi
                    unset sortedVers[@]
                    sortedVers[0]=${rtrnFname}
                  ;;
                  lcms-*)
                    temppart=${sortedVers[1]}
                    namePlusVer=${temppart#"Click to download "}
                    unset sortedVers[@]
                    sortedVers[0]="$namePlusVer"
                  ;;
                  lcms2-*)
                    rtrnFname=""
                    updateSorted sortedVers[@] $url_bit "lcms2-" ".tar.gz" 1
                    ret_val=$?
                    if [ $ret_val -eq $RETURN_PARAM ]; then
                      echo "Return from updateSorted"
                      echo "Failed to retrieve the web page for $url"
                      echo "with pattern $pattern."
                      echo "Exiting now"
                      exit 1
                    fi
                    unset sortedVers[@]
                    sortedVers[0]=${rtrnFname}
                  ;;
                  "libpng"*"apng.patch"*)
                    rtrnFname=""
                    updateSorted sortedVers[@] $url_bit "libpng-" "-apng.patch.gz" 1
                    ret_val=$?
                    if [ $ret_val -eq $RETURN_PARAM ]; then
                      echo "Return from updateSorted"
                      echo "Failed to retrieve the web page for $url"
                      echo "with pattern $pattern."
                      echo "Exiting now"
                      exit 1
                    fi
                    unset sortedVers[@]
                    sortedVers[0]=${rtrnFname}
                  ;;
                  libusb-compat-*)
                    rtrnFname=""
                    updateSorted sortedVers[@] $url_bit "" ".tar.bz2" 1
                    ret_val=$?
                    if [ $ret_val -eq $RETURN_PARAM ]; then
                      echo "Return from updateSorted"
                      echo "Failed to retrieve the web page for $url"
                      echo "with pattern $pattern."
                      echo "Exiting now"
                      exit 1
                    fi
                    unset sortedVers[@]
                    sortedVers[0]=${rtrnFname}
                  ;;
                  openjpeg-*)
                    rtrnFname=""
                    updateSorted sortedVers[@] $url_bit "openjpeg-" ".tar.gz" 1
                    ret_val=$?
                    if [ $ret_val -eq $RETURN_PARAM ]; then
                      echo "Return from updateSorted"
                      echo "Failed to retrieve the web page for $url"
                      echo "with pattern $pattern."
                      echo "Exiting now"
                      exit 1
                    fi
                    unset sortedVers[@]
                    sortedVers[0]=${rtrnFname}
                  ;;
                  "tcl"*"-html"*|"tk"*"-src"*)
                    rtrnFname=""
                    updateSorted sortedVers[@] $url_bit "${fnameonly}8." ".tar.gz" 1
                    ret_val=$?
                    if [ $ret_val -eq $RETURN_PARAM ]; then
                      echo "Return from updateSorted"
                      echo "Failed to retrieve the web page for $url"
                      echo "with pattern $pattern."
                      echo "Exiting now"
                      exit 1
                    fi
                    unset sortedVers[@]
                    sortedVers[0]=${rtrnFname}
                  ;;
                  *)
                    temppart=$(echo ${sortedVers[1]} | awk -F\/ '{print $NF}')
                    temppart="$(echo -e "${temppart}" | tr -d '[[:space:]]')" # remove white space
                    namePlusVer=${temppart%":released"*}
                    unset sortedVers[@]
                    sortedVers[0]="$namePlusVer"
               esac
            ;;
            "0pointer.de")
               case $tarfname in
                  libcanberra-*)
                    toRemove="http://0pointer.de/lennart/projects/libcanberra/"
                    sortedVers=(${sortedVers[@]//${toRemove}/})
                  ;;
                  libdaemon-*)
                    toRemove="http://0pointer.de/lennart/projects/libdaemon/"
                    sortedVers=(${sortedVers[@]//${toRemove}/})
                  ;;
               esac
            ;;
            *)
               case $tarfname in
                  a52dec-*|bluez-*|cmake-*|cups-2*|geoclue-0*|inkscape-*|jasper-*|libical-*|libmpeg2-*|libmusicbrainz-*|libndp-*|libpciaccess-*|libxkbcommon-*|libzeitgeist-*|links-*|nmap-*|npapi-sdk-*|sg3_utils-*|taglib-*)
                    for ((in=0; in<${#sortedVers[@]}; in++)); do # remove all /
                      namePlusVer=$(echo ${sortedVers[in]} | awk -F\/ '{print $NF}')
                      sortedVers[in]=$namePlusVer
                    done
                  ;;
                  bind-*) # sort the version numbers to get the latest
                    ic=0
                    for ((in=0; in<${#sortedVers[@]}; in++)); do
                      temppart=${sortedVers[in]%?} # remove the / last char
                      if [[ $temppart =~ [0-9].[0-9]{2}.[0-9]$ ]]; then
                        tmparray[ic]=$temppart
                        ((ic++))
                      fi
                    done
                    oldIFS=$IFS
                    IFS=$'\n'
                    sortedVers=( $(printf "%s\n" "${tmparray[@]}" | sort -u -V -r) )
                    IFS=$oldIFS
                    url_bit=${url_bit}${sortedVers[0]}/
                    urlstor=$url_bit # store the new url
                    trimfname=$stortrim
                    versionsare=$(/usr/bin/php srcFileVers.php -- $trimfname $url_bit $fnameonly)
                    if [ "$versionsare" = "" ]; then
                      echo "Failed to retrieve the requested web page for $tarfname"
                      echo "Exiting now"
                      exit 1
                    fi
                    readarray -t sortedVers <<< "$versionsare"
                  ;;
                  *enchant*) # need to remove pyenchant from the array
                    sortedVers=(${sortedVers[@]//*pyenchant*/})
                  ;;
                  icu4c-*)
                    ic=0
                    for ((in=0; in<${#sortedVers[@]}; in++)); do
                      case "${sortedVers[in]}" in
                         *"-src."*) # keep this
                           tmparray[ic]="${sortedVers[in]}"
                           ((ic++))
                         ;;
                      esac
                    done
                    sortedVers=(${tmparray[@]})
                  ;;
                  json-c-*)
                    temppart=$(echo ${sortedVers[3]} | awk -F\/ '{print $NF}')
                    namePlusVer=$(echo $temppart | awk -F\- '{print $1"-"$2"-"$3}')
                    unset sortedVers[@]
                    sortedVers[0]="${namePlusVer}.tar.gz"
                  ;;
                  libass-*)
                    namePlusVer=$(echo ${sortedVers[2]} | awk -F\/ '{print $NF}')
                    unset sortedVers[@]
                    sortedVers[0]=$namePlusVer
                  ;;                    
#                  libmpeg2-*)
#                    namePlusVer=$(echo ${sortedVers[1]} | awk -F\/ '{print $3}')
#                    unset sortedVers[@]
#                    sortedVers[0]="$namePlusVer"
#                  ;;
                  libwebp-*)
                    numvals=${#sortedVers[@]}
                    ((numvals--))
                    temppart=${sortedVers[numvals]}
                    unset sortedVers[@]
                    sortedVers[0]=$(echo $temppart | awk -F\/ '{print $NF}')
                  ;;
                  llvm-*) # using sourceforge
                    temppart=$(echo ${sortedVers[1]} | awk -F\/ '{print $NF}')
                    temppart="$(echo -e "${temppart}" | tr -d '[[:space:]]')" # remove white space
                    namePlusVer=${temppart%":released"*}
                    unset sortedVers[@]
                    sortedVers[0]="$namePlusVer"
                  ;;
                  Mako-*)
                    temppart=$(echo ${sortedVers[1]} | awk -F\/ '{print $NF}') # latest vers
                    url_bit=${url_bit}${temppart}
                    trimfname="${fnameonly}-${temppart}.tar.gz"
                    versionsare=$(/usr/bin/php srcFileVers.php -- $trimfname $url_bit $fnameonly)
                    if [ "$versionsare" = "" ]; then
                      echo "Failed to retrieve the requested web page for $tarfname"
                      echo "Exiting now"
                      exit 1
                    fi
                    readarray -t sortedVers <<< "$versionsare"
                    namePlusVer=$(echo ${sortedVers[1]} | awk -F\/ '{print $NF}')
                    unset sortedVers[@]
                    sortedVers[0]="$namePlusVer"
                  ;;
                  mariadb-*)
                    temppart=$(echo ${sortedVers[1]} | awk -F\/ '{print $3}') # latest vers
                    url_bit=${url_bit}${temppart}/
                    urlstor=$url_bit
                    unset sortedVers
                    sortedVers[0]="${fnameonly}-${temppart}.tar.gz"
                  ;;
                  mesa-*)
                    numvals=${#sortedVers[@]}
                    ((numvals--))
                    temppart=${sortedVers[numvals]}
                    url_bit=${url_bit}${temppart}/
                    urlstor=$url_bit
                    trimfname="${fnameonly}-${temppart}.tar.xz"
                    versionsare=$(/usr/bin/php srcFileVers.php -- $trimfname $url_bit $fnameonly)
                    if [ "$versionsare" = "" ]; then
                      echo "Failed to retrieve the requested web page for $tarfname"
                      echo "Exiting now"
                      exit 1
                    fi
                    readarray -t sortedVers <<< "$versionsare"
                    namePlusVer=${sortedVers[1]}
                    unset sortedVers[@]
                    sortedVers[0]="$namePlusVer"
                  ;;
                  "nasm-"*"-xdoc"*)
                    pattern="[0-9].tar"
                    sortedVers=(${sortedVers[@]//*${pattern}*/}) # keep only -xdoc versions
                  ;;
                  nss-*)
                    sortedVers=(${sortedVers[@]//*nspr*/}) # remove any nspr versions
                  ;;
                  openssh-*)
                    sortedVers=(${sortedVers[@]//p[0-9]/}) # remove the p[0-9] from the versions
                  ;;
                  openssl-*)
                    sortedVers=(${sortedVers[@]//*beta*/}) # remove all the beta versions
                  ;;
                  setuptools-*)
                    temppart=$(echo ${sortedVers[2]} | awk -F\/ '{print $NF}')
                    namePlusVer=$(echo ${temppart} | awk -F\# '{print $1}')
                    unset sortedVers[@]
                    sortedVers[0]="$namePlusVer"
                  ;;
                  speex-*)
                    sortedVers=(${sortedVers[@]//*beta*/}) # remove all the beta versions
                  ;;
                  sqlite-*)
                    rtrnFname=""
                    updateSorted sortedVers[@] $url_bit "sqlite-autoconf-" ".tar.gz" 1
                    ret_val=$?
                    if [ $ret_val -eq $RETURN_PARAM ]; then
                      echo "Return from updateSorted"
                      echo "Failed to retrieve the web page for $url"
                      echo "with pattern $pattern."
                      echo "Exiting now"
                      exit 1
                    fi
                    unset sortedVers[@]
                    sortedVers[0]=${rtrnFname}
                  ;;
                  sudo-*)
                    sortedVers=(${sortedVers[@]//*p*/}) # remove all the p versions
                  ;;
                  *tiff*) # remove all the versions with beta in them
                    sortedVers=(${sortedVers[@]//*beta*/})
                  ;;
                  vlc-*)
                    numvals=${#sortedVers[@]}
                    ((numvals--))
                    temppart=${sortedVers[numvals]}
                    url_bit="${url_bit}${temppart}"
                    urlstor=$url_bit
                    trimfname="vlc-${temppart%?}.tar.xz"
                    versionsare=$(/usr/bin/php srcFileVers.php -- $trimfname $url_bit $fnameonly)
                    if [ "$versionsare" = "" ]; then
                      echo "Failed to retrieve the requested web page for $tarfname"
                      echo "Exiting now"
                      exit 1
                    fi
                    readarray -t sortedVers <<< "$versionsare"
                    sortedVers[0]=${sortedVers[1]}
                  ;;
                  whois_*)
                    sortedVers=(${sortedVers[@]//*bpo*/}) # remove all the bpo versions
                  ;;
                  wireless_tools*)
                    namePlusVer=$(echo ${sortedVers[2]} | awk -F\/ '{print $NF}')
                    unset sortedVers[@]
                    sortedVers[0]="$namePlusVer"
                  ;;
                  xvidcore-*)
                    for ((in=0; in<${#sortedVers[@]}; in++)); do
                      namePlusVer=$(echo ${sortedVers[in]} | awk -F\/ '{print $NF}')
                      sortedVers[in]="$namePlusVer"
                    done
                  ;;
               esac
            ;;
         esac
         rtrnSorted=""
         uniqueArray sortedVers[@] # remove duplicate elements of the array
         unset sortedVers[@]
         sortedVers=(${rtrnSorted[@]})
#if [ $tarfname = libjpeg-turbo-1.4.0.tar.gz -o $tarfname = libmng-2.0.2.tar.xz ]; then
echo "num terms in sortedVers is ${#sortedVers[@]}"
echo "sortedVers is ${sortedVers[@]}"
#fi
# need to decide which file extension to use
         extType=$(detExtType sortedVers[@])
         if [ $? -eq $RETURN_PARAM ]; then
           echo "No valid file extension type found."
           echo "Exiting now"
           exit 1
         fi
echo "call findMaxVers"
echo "extType is $extType"
echo "trimto is $trimto"
echo "verToUse is $verToUse"
         case $tarfname in
            ghostscript-*) # has a .xz file but not a recent one so change to bz2
              extType="bz2"
              fileToUse=$(findMaxVers sortedVers[@] $extType $trimto $verToUse $tarfname)
              ftuReturnVal=$?
            ;;
            openssl-*) # version often ends in [a-z] so use ascii value to get latest
              maxval=0
              for ((in=0; in<${#sortedVers[@]}; in++)); do
                asciiVal=$(GetAsciiVal ${sortedVers[in]})
                if [ $asciiVal -gt $maxval ]; then
                  instor=$in
                  maxval=$asciiVal
                fi
              done
              fileToUse=${sortedVers[instor]}
            ;;
            startup-notification-*) # use the gz version as only one .bz2 file present
              extType="gz"
              fileToUse=$(findMaxVers sortedVers[@] $extType $trimto $verToUse $tarfname)
              ftuReturnVal=$?
            ;;
            *)
              fileToUse=$(findMaxVers sortedVers[@] $extType $trimto $verToUse $tarfname)
#findMaxVers sortedVers[@] $extType $trimto $verToUse $tarfname
              ftuReturnVal=$?
            ;;
         esac
         if [ $ftuReturnVal -eq $RETURN_PARAM ]; then
           echo "$verToUse not found in sortedVers"
           exit 1
         else
           echo "max version to use is $fileToUse"
         fi
# check extension type is same as version in wget-list
         origextType=$(echo $tarfname | awk -F\. '{print $NF}')
         if [ "$origextType" != "$extType " ]; then
           fileToUse=${fileToUse%${extType}}
           fileToUse=${fileToUse}${origextType}
         fi
         case $tarfname in
            openssh-*)
              bitToMatch="${fileToUse%${trimto}*}"
              fileToUse="${urlstor}${bitToMatch}${pnum}.tar.gz" # put the p bit back
            ;;
            *)
              fileToUse=${urlstor}${fileToUse}
            ;;
         esac
       fi # end doNothing test
     ;;
  esac
# write to the tmp file
echo $fileToUse >> $latest_tmpfile
doNothing=false
echo "for file $tarfname will use $fileToUse"
#if [ "$tarfname" = freetype-doc-2.5.5.tar.bz2 ]; then exit 1; fi
done < ${SrcPath}/${sortedfile}
# finished this section. update wget-list and sortedfile
#
cp -v $latest_tmpfile ${SrcPath}/${sortedfile}
cp -v $latest_tmpfile ${SrcPath}/${WgetList}
rm $latest_tmpfile
return 0
} # end GetLatestVers
#
updateXtraX () {
#look for latest versions in the x extra files in proto, lib, app and font
local SrcPath=${SOURCEDIR}/x
local md5suff="-7.7.md5"
local md5Loc
local md5Name
local xFile
local secDir
local xurl="http://ftp.x.org/pub/individual/"
local securl
local md5Sum
local filename
local trimto=".tar"
local bitToMatch
local vernum
local verToUse
local ftrimto
local trimfname
local versionsare
local fnameonly
local sortedVers
local extType
local ftuReturnVal
local fullfname
local chksum
local xtempfile
#
for subsec in $xproto $xlib $xapp $xfont; do # use the global x names
#for subsec in $xproto; do
# create a temp file for this subsection to store the checksums and filenames
  xtempfile=$(date +%d%B%Y_%T)xtemp.file
  md5Loc=${SrcPath}/${subsec}
  secDir=${subsec#${xVers}} # xVers (is global) is the current version of x
  securl=${xurl}${secDir}/
  md5Name=${md5Loc}/${secDir}${md5suff}
  while read xFile; do
    md5Sum=$(echo ${xFile} | awk '{print $1}')
    filename=$(echo ${xFile} | awk '{print $NF}')
    bitToMatch="${filename%${trimto}*}"
    vernum=$(echo $bitToMatch | awk -F\. '{print $NF}')
    verToUse=$(echo $bitToMatch | awk -F\- '{print $NF}')
    ftrimto="${vernum}${trimto}"
    trimfname="${filename%${ftrimto}*}"
    fnameonly=${filename%"-${verToUse}"*} # can do this as all files have - as the separator
#echo "fnameonly is $fnameonly"
#echo "url is $securl"
#echo "trimfname is $trimfname"
    versionsare=$(/usr/bin/php srcFileVers.php -- $trimfname $securl $fnameonly)
#echo "versionsare is $versionsare"
    if [ "$versionsare" = "" ]; then
      echo "Failed to retrieve the requested web page for $tarfname"
      echo "Exiting now"
      exit 1
    fi
    readarray -t sortedVers <<< "$versionsare"
#echo "sortedVers is ${sortedVers[@]}"
    extType=$(detExtType sortedVers[@])
    if [ $? -eq $RETURN_PARAM ]; then
      echo "No valid file extension type found."
      echo "Exiting now"
      exit 1
    fi
#echo "verToUse is $verToUse"
    fileToUse=$(findMaxVers sortedVers[@] $extType $trimto $verToUse $filename)
    ftuReturnVal=$?
#echo "fileToUse is $fileToUse"
    if [ $ftuReturnVal -eq $RETURN_EQ ]; then
#echo "**VERSION UNCHANGED**"
      echo $xFile >> $xtempfile
    else # download the file and get the checksum
      fullfname=${securl}${fileToUse}
#echo "fullfname is $fullfname"
      wget -O $fileToUse $fullfname
      chksum=$(md5sum $fileToUse)
      echo $chksum >> $xtempfile
      rm $fileToUse # delete the downloaded file
    fi
echo "for file $filename will use ${securl}${fileToUse}"
  done < $md5Name
#  copy the tempfile to the md5 file for this subsection
  cp -v $xtempfile $md5Name
  rm $xtempfile
done
return 0
} # end updateXtraX
#
GetSources () {
# $1 is the section name, $2 is the sorted file name, $3 is where to get the src url
local fname
local extName
local section_name=$1
local sortedfile=$2
local src_url=$3 # either 'anduin' or 'url_in_book'
local SrcPath=${SOURCEDIR}/${section_name}
#
while read url_line; do
  fname=$(echo $url_line |  awk -F\/ '{print $NF}' )
  skipit=false # download this file by default
  if [ -e ${SrcPath}/${fname} ]; then # file exists
    skipit=true
  else
    extName=$(echo $fname | awk -F\. '{print $NF}' )
    case $section_name in
        java)
           case $fname in
             OpenJDK*bin*)  # only want to download one binary
                    case $(uname -m) in
                      x86_64) # don't want the i686 version
                          case $fname in
                            *i686-bin*)
                                 skipit=true
                            ;;
                            *x86_64-bin*) # don't want either binary
                                 skipit=true # using the oracle binary
                            ;;
                          esac
                      ;;
                      *) # don't want the x86_64 version
                          case $fname in
                            *x86_64-bin*)
                                 skipit=true
                            ;;
                          esac
                      ;;
                    esac
                    if [ "$src_url" = anduin ]; then
                      initial=${fname:0:1}
                      initial=$(echo ${initial,,*}) # make sure first char is lower case
                    fi
             ;;
             OpenJDK*) # don't want the book downloads - use wget
                    skipit=true
             ;;
             *)
                    if [ "$src_url" = anduin ]; then
                      initial=${fname:0:1}
                      initial=$(echo ${initial,,*}) # make sure first char is lower case
                    fi
             ;;
           esac
        ;;
        programming)
           if [ "$src_url" = anduin ]; then
             case $fname in
               Archive*|ExtUtils*|Glib*|URI*|XML*) # perl modules
                 initial="perl-modules"
               ;;
               docutils|pyatspi*|py2cairo*|pygtk*|pygobject*|pyxdg*|scons*) # python modules
                 initial="python-modules"
               ;;
               *)
                 initial=${fname:0:1}
                 initial=$(echo ${initial,,*}) # make sure first char is lower case
               ;;
             esac
           fi
        ;;
        x)
           if [ "$src_url" = anduin ]; then
             case $fname in # MesaLib is not part of Xorg
               MesaLib*)
                 initial="m"
               ;;
               *)
                 initial="Xorg"
               ;;
             esac
           fi
        ;;
        *)
           if [ "$src_url" = anduin ]; then
             initial=${fname:0:1}
             initial=$(echo ${initial,,*}) # make sure first char is lower case
           fi
        ;;
    esac
  fi
  if ! $skipit; then # get the source
    case $src_url in
        anduin)
            full_url=${anduin_src_root}/${initial}/${fname} # use anduin
        ;;
        url_in_book)
            full_url=$url_line # use the url in the wget-list file
        ;;
    esac
    if [ "$extName" = patch ]; then full_url=${patch_root}/${fname}; fi
    wget $hostwgetopts $full_url -P $SrcPath
  fi
done < ${SrcPath}/${sortedfile}
#
if [ "$section_name" = x ]; then # get all the extra files
  srcUrl="http://xorg.freedesktop.org/releases/individual"
#set up the dirs under x
  if [ ! -e ${SrcPath}/${xproto} ]; then
    install -v -d ${SrcPath}/${xproto}
  fi
  if [ ! -e ${SrcPath}/${xlib} ]; then
    install -v -d ${SrcPath}/${xlib}
  fi
  if [ ! -e ${SrcPath}/${xapp} ]; then
    install -v -d ${SrcPath}/${xapp}
  fi
  if [ ! -e ${SrcPath}/${xfont} ]; then
    install -v -d ${SrcPath}/${xfont}
  fi
  createMd5File $xproto # create all the md5 files
  createMd5File $xlib
  createMd5File $xapp
  createMd5File $xfont
  GetXtraFiles $xproto # get the wget commands
  GetXtraFiles $xlib
  GetXtraFiles $xapp
  GetXtraFiles $xfont
fi
} #end GetSources
#
GetListFile () {
# $1 is the book directory
# $2 is the wget-list file name
REPODIR=${1}/${version}
local wgetlistfile=${SOURCEDIR}/${2}
if [ -e $wgetlistfile ]; then
  rm $wgetlistfile
fi
make -j1 -f $REPODIR/Makefile -C $REPODIR BASEDIR=$SOURCEDIR $2
#
} #end GetListFile
#
ChkEmptySrcFiles () {
if [ ! -d ${SOURCEDIR}/${1} ]; then
  mkdir -pv ${SOURCEDIR}/${1}
  return $RETURN_PARAM
fi
if [ "$(ls -A ${SOURCEDIR}/${1})" ]; then #  directory is not empty
  zeroLenFiles=$(ls -l $SOURCEDIR/${1}|awk '!/^d/&&$5==0 {print $NF}')
  len=${#zeroLenFiles}
  if [ $len -gt 0 ]; then
    echo -e "These files are empty:\n$zeroLenFiles"
    return $RETURN_PARAM
  else
    return 0 # no empty files found
  fi
else
  return $RETURN_PARAM # section directory is empty
fi
} # end ChkEmptySrcFiles
#
GetGitInfo () {
# $1 is the dir containing .git
local tmpfile=/tmp/$(date +%d%B%Y_%H:%M)tmp.file
pushd $1 > /dev/null
    echo "== Remote URL: $(git remote -v)" > $tmpfile
    echo "== Remote Branches: " >> $tmpfile
    git branch -r >> $tmpfile
    echo "== Local Branches:" >> $tmpfile
    git branch >> $tmpfile
    echo "== Configuration (.git/config)" >> $tmpfile
    cat .git/config >> $tmpfile
    echo "== Most Recent Commit" >> $tmpfile
    git log --max-count=1 >> $tmpfile
    GITINFO="$(more $tmpfile | awk '{printf $0"|"}')"
    rm $tmpfile
popd > /dev/null
} # end GetGitInfo
#
DumpCommands () {
# $1 is the REPO (BLFS in this case)
# $2 is the dir containing the book
# $3 is either commit or Revision depending on whether using git or svn
#
REPODIR=$2
target=$( echo $1 | awk '{print tolower($1)}')
if [ "$3" = commit ]; then # use GITINFO
  local commitInfo=$GITINFO
else
  local commitInfo=$SVNINFO
fi
AllInfo=$( echo $commitInfo | awk -v pattern=$3 'BEGIN{ RS = "|" };$0 ~ pattern {print $0}' )
for dir in $DumpedCommands $Dumpedhtml; do
  if [ ! -d $dir ]; then
    install -vd $dir
    touch $dir/.${3} # prevent cat error meassage 6 lines below
  else # check if there is already a revision or commit file
    if [ ! -e $dir/.${3} ]; then touch $dir/.${3}; fi # prevent cat error msg
  fi
done
for dir in $Dumpedhtml $DumpedCommands; do
  if [ -e "$dir" -a "$AllInfo" != "$( cat $dir/.${3} | awk -v pattern=$3 '$0 ~ pattern {print $0}')" ]; then
    if [ -d $Dumpedhtml ]; then rm -rf $Dumpedhtml;fi
    if [ -d $DumpedCommands ]; then rm -rf $DumpedCommands;fi
    pushd $REPODIR > /dev/null
        make -j1 DUMPDIR=$DumpedCommands BASEDIR=$Dumpedhtml $target dump-commands
        for dir in $DumpedCommands $Dumpedhtml; do
          echo $commitInfo | awk 'BEGIN{ RS = "|" }; {print $0}' > $dir/.${3}
        done
    popd > /dev/null
    break
  fi
done
} # end DumpCommands
#
unpackBLFSfiles () {
# * NOTE * the tar file $blfsfilesTar and the directory $blfsBuildFiles
# must exist before calling this function
#
tar -xvf ${LFS}/${blfsfilesTar} -C ${LFS}${blfsBuildFiles} --no-same-owner
#untarred so delete it
rm ${LFS}/${blfsfilesTar}
} #end unpackBLFSfiles
#
trimSpace () {  # trim whitespace before and after a string, single and multi-line strings
    echo "$1" | sed -n '1h;1!H;${;g;s/^[ \t]*//g;s/[ \t]*$//g;p;}'
} # end trimSpace
#
combineScripts () {
declare -a commands=("${!1}")
declare -a buildWrap=("${!2}")
local combine=""
local numc=${#commands[@]}
local numb=${#buildWrap[@]}
countc=0 # counter for the combine array
countbl=0 # counter for build lines written
inc=false # switch for whether a configure, make and install section is present
cont=0 # number of continuation lines
ifDoc=false # true if an if block containing a doc
#
for (( i=0; i<$numb; i++ )); do
  case "${buildWrap[i]}" in
    configure_commands*)
      combine[countc++]=${buildWrap[countbl++]}
      combine[countc++]=${buildWrap[countbl++]} # the {: line
      for (( jk=$countg; jk<$numc; jk++ )); do
        case ${commands[jk]} in
           make*) # assume either a make command or make install
              countg=$jk
              break
           ;;
           'LANG="en_US.UTF-8" make') # the media-player-info make command
              countg=$jk
              break
           ;;
           "LC_ALL=en_US make") # the gegl make command
              countg=$jk
              break
           ;;
           *"setup.py build"*) # python module build
              countg=$jk
              break
           ;;
           *install*) # test to see if part of a continuation sequence
              case ${commands[jk]} in
                 *\\) # a continuation line
                    if [ $cont -gt 0 ]; then # part of configure sequence so store it
                      storit[cont++]="${commands[jk]}"
                    else # assume an install cont line
                      countg=$jk
                      break
                    fi
                 ;;
                 *)
                    countg=$jk
                    break
                 ;;
              esac
           ;;
           error_count*)
              countg=$jk
              break
           ;;
           *"waf build")
              countg=$jk
              break
           ;;
           './build.sh -Ddist.dir='*) # apache-ant build
              countg=$jk
              break
           ;;
           '_bindir="bin.linuxx86"'*|'./b2 stage'*) # boost
              countg=$jk
              break
           ;;
           *ninja*) # chromium make
              countg=$jk
              break
           ;;
           *)
              case "${commands[jk]}" in
                 *\\)
                    storit[cont++]="${commands[jk]}"
                 ;;
                 *)
                    # write with any continuation lines
                    if [ $cont -gt 0 ]; then
                      for (( l=0; l<$cont; l++ )); do
                        combine[countc++]="  ${storit[l]}"
                      done
                      combine[countc++]="  ${commands[jk]}"
                      cont=0
                      inc=true
                    else
                      combine[countc++]="  ${commands[jk]}" # configure command
                      inc=true # found at least one configure command
                    fi
                    if [ $[jk+1] -eq $numc ]; then countg=$jk; fi
                 ;;
              esac
           ;;
        esac
      done
      if [ $cont -gt 0 ]; then
        for (( l=0; l<$cont; l++ )); do
          combine[countc++]="  ${storit[l]}"
        done
        combine[countc++]="  ${commands[countg++]}"
        inc=true
        cont=0
      fi
      if ! $inc; then
        combine[countc++]='  echo "no configure script for this package"'
      fi
    ;;
    make_commands*)
      inc=false
      combine[countc++]=${buildWrap[countbl++]}
      combine[countc++]=${buildWrap[countbl++]} # the {: command
      for (( jl=$countg; jl<$numc; jl++ )); do
        case ${commands[jl]} in
           *install*) # assume an install command
              case ${commands[jl]} in
                 *"/usr/bin/bjam"*) # this is boost so stay in make
                       combine[countc++]="  ${commands[jl]}"
                 ;;
                 *)
                       countg=$jl
                       break
                 ;;
              esac
           ;;
           docsdir*)
              countg=$jl
              break
           ;;
           "make update")
              countg=$jl
              break
           ;;
           "ln -v -sfn ant-"*) # apache-ant symlink
              countg=$jl
              break
           ;;
           *'cp -RT build/*/images/j2sdk-image'*) # openjdk install line
              countg=$jl
              break
           ;;
           *)
              case "${commands[jl]}" in
                 *\\)
                     storit[cont++]="${commands[jl]}"
                 ;;
                 *)
                     if [ $cont -gt 0 ]; then # write the continuation lines
                       for (( l=0; l<$cont; l++ )); do
                         combine[countc++]="  ${storit[l]}"
                       done
                       combine[countc++]="  ${commands[jl]}"
                       cont=0
                       inc=true
                     else
                       combine[countc++]="  ${commands[jl]}" # make commands
                       inc=true #at least one make command found
                     fi
                     if [ $[jl+1] -eq $numc ]; then # no more commands
                       countg=$jl
                       if [[ "${commands[$countg]}" != *make* ]]; then
                         ((countc--))
                       fi
                     fi
                 ;;
              esac
           ;;
        esac
      done
       if ! $inc; then
         combine[countc++]='  echo "no make script for this package"'
       fi
    ;;
    install_commands*)
      inc=false
      foundDoc=false
      combine[countc++]=${buildWrap[countbl++]}
      combine[countc++]=${buildWrap[countbl++]} # the {: command
      for (( jm=$countg; jm<$numc; jm++ )); do
        case ${commands[jm]} in
          *install*)
             case "${commands[jm]}" in
               *\\) # cont line so store it
                  case "${commands[jm]}" in
                    'make'*'=/usr/share/doc'*) # genuine install command
                        storit[cont++]="${commands[jm]}"
                        inc=true
                    ;;
                    *'/usr/share/doc'*) # cont line contains a doc
                        foundDoc=true
                        storit[cont++]="${commands[jm]}"
                    ;;
                    *) # no doc in this cont line
                        storit[cont++]="${commands[jm]}"
                    ;;
                  esac
               ;;
               'make'*'=/usr/share/doc'*) # genuine install command
                    combine[countc++]="  ${commands[jm]}"
                    inc=true
               ;;
               *'/usr/share/doc'*) # don't write a doc install
                    :
               ;;
               *) # install line so write it out
                    if [ $cont -gt 0 ]; then # first write out cont lines
                      for (( l=0; l<$cont; l++ )); do
                        combine[countc++]="  ${storit[l]}"
                      done
                    fi 
                    combine[countc++]="  ${commands[jm]}"
                    inc=true
                    cont=0
                    countg=$[jm+1]
               ;;
             esac
          ;;
          '#'*) # comment line so ignore it
              countg=$[jm+1]
          ;;
          "make update")
              combine[countc++]="  ${commands[jm]}"
              cont=0
              inc=true
              countg=$[jm+1]
          ;;
          *'/usr/share/doc/php'*) # php so write the docs
              for (( l=0; l<$cont; l++ )); do
                combine[countc++]="  ${storit[l]}"
              done
              combine[countc++]="  ${commands[jm]}"
              cont=0
              inc=true
              countg=$[jm+1]
          ;;
          *'/usr/share/doc/slang'*) # store this continuation line
              storit[cont++]="${commands[jm]}"
          ;;
          *'build/*/images/j2sdk-image'*) # openjdk install lines
              combine[countc++]="  ${commands[jm]}"
              cont=0
              inc=true
              countg=$[jm+1]
          ;;
          if*) # starts with if so if a doc, will need to delete the closing fi
                   case ${commands[jm]} in
                   *'/usr/share/doc'*)
                       ifDoc=true
                       case ${commands[j]} in
                          *\\) # a continuation line so store it
                                storit[cont++]="${commands[jm]}"
                          ;;
                       esac
                   ;;
                   *\\) # a continuation line
                       storit[cont++]="${commands[jm]}"
                   ;;
                   *) # if block but not a doc or a cont line
                       echo ${commands[jm]}
                   ;;
                esac
          ;;
          *'/usr/share/doc'*) 
             cont=0 # doc so don't write it out
             countg=$[jm+1] # update countg in case this is the last line
          ;;
          "ln -v -sfn ant-"*) # apache-ant symlink
             countg=$jm
             break
          ;;
          "find "*) # start of a find so break
             countg=$jm
             cont=0
             inc=true
             break
          ;;
          "for "*) # begining of a for loop so break
             countg=$jm
             cont=0
             inc=true
             break
          ;;
          *"chmod"*) # break at a chmod commands
             if [ $cont -eq 0 ]; then
               break
             else # write out the cont lines
               for (( l=0; l<$cont; l++ )); do
                 combine[countc++]="  ${storit[l]}"
               done
               combine[countc++]="  ${commands[jm]}"
               cont=0
               inc=true
               break
             fi
          ;;
          *)
             case "${commands[jm]}" in
               *\\) # if a cont line, then store it
                   storit[cont++]="${commands[jm]}"
               ;;
               *)
                 if ! $foundDoc; then # write out any cont lines
                   if [ $cont -gt 0 ]; then
                     for (( l=0; l<$cont; l++ )); do
                       combine[countc++]="  ${storit[l]}"
                     done
                     combine[countc++]="  ${commands[jm]}"
                     cont=0
                     inc=true
                   else
                     countg=$jm
                     cont=0
                     inc=true
                     break
                   fi
                 else # continuation of a doc line so ignore it
                   cont=0
                 fi
               ;;
             esac
          ;;
        esac
      done
      if ! $inc; then
        combine[countc++]='  echo "no install script for this package"'
      fi
    ;;
    *)
      if [ $i -lt $countbl ]; then
        :
      else
        combine[countc++]=${buildWrap[i]}
        ((countbl++)) # increment because have written another build command
      fi
    ;;
  esac
done
rtr=(${combine[@]})
} # end combineScript
#
getBuild () {
local abuild=""
buildfile=$BLFSBUILDFILES/buildsrc
if [ ! -e $buildfile ]; then
  return $RETURN_PARAM
else
IFS='
'
abuild=( $( < $buildfile ) )
rtrnBuild=(${abuild[@]})
return 0
fi
} # end getBuild
#
Getxmlsec () {
xmlsec=general
case $1 in
  blfs|security|virtualization)
        xmlsec=postlfs
  ;;
  gnomeplatform|gnomedesktop|gnomeapps|xfcegnome|telepathy)
        xmlsec=gnome
  ;;
  multimedia)
        xmlsec=multimedia
  ;;
  networks)
        xmlsec=basicnet
  ;;
  office|xsoftware|browser)
        xmlsec=xsoft
  ;;
  pst)
        xmlsec=pst
  ;;
  server)
        xmlsec=server
  ;;
  x|xlibs|windowmanager)
        xmlsec=x
  ;;
  xfce)
        xmlsec=xfce
  ;;
esac
} # end Getxmlsec
#
getComms () {
# $1 is the package name
# $2 is the commands section to look in
local acom=""
local bcom=""
local localpkgname=$1
local commandsection=$2
if [[ "$localpkgname" == ffmpeg || "$localpkgname" == atk || "$localpkgname" == jdkbin ]]; then # avoid at-spi2-atk which *-atk matches and gcc-java
  curfile=${DumpedCommands}/${commandsection}/???-${commandname}
else
  if [ -e ${DumpedCommands}/${commandsection}/*-${commandname} ]; then
    curfile=${DumpedCommands}/${commandsection}/*-${commandname}
  else
    echo -e 'echo "No commands matching '"${blfscommands}"'/'"${commandsection}"'/*-'"${commandname}"'"'
    echo 'echo "Adjust the command name before continuing. Exiting now"'
    echo "exit 1"
    exit 1
  fi
fi
IFS='
'
acom=( $( < $curfile ) )
# this section changes the commands as necessary before writing them to $Output
case $localpkgname in
     aspell)
             ic=0
             foundconf=false # only need 1st configure and commands, not the 2nd
             for tline in ${acom[@]}; do
               case $tline in
                  *configure*)
                    if ! $foundconf; then
                      foundconf=true
                      bcom[ic++]=$tline
                    else
                      break
                    fi
                  ;;
                  *)
                    if $foundconf; then
                      bcom[ic++]=$tline
                    fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     dconf) # need only the first set of config, make, make install, as 2nd set is the same
             ic=0
             foundconf=false # only need 1st configure and commands, not the 2nd
             for tline in ${acom[@]}; do
               case $tline in
                  *configure*)
                    if ! $foundconf; then
                      foundconf=true
                      bcom[ic++]=$tline
                    else
                      break
                    fi
                  ;;
                  *)
                    if $foundconf; then
                      bcom[ic++]=$tline
                    fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     docbook-xsl)
             ic=0
             catcount=0 # need to find 4 xmlcatalog commands then ignore the rest
             xmlcatfound=false
             for tline in ${acom[@]}; do
               case $tline in
                  xmlcatalog*)
                    ((catcount++))
                    if [ $catcount -ge 5 ]; then #ignore remaining commands
                      xmlcatfound=true
                    else
                      bcom[ic++]=$tline
                     fi
                  ;;
                  *)
                     if ! $xmlcatfound; then #write the commands
                       bcom[ic++]=$tline
                     fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     firewall)
             ic=0
             EOFfound=false # need to find 2 EOFs and ignore the remaining commands
             for tline in ${acom[@]}; do
               case $tline in
                  *EOF*)
                    if ! $EOFfound; then # found first EOF  - write til next EOF
                      EOFfound=true
                      bcom[ic++]=$tline # write the cat - EOF line
                    else # finish writing commands
                      bcom[ic++]=$tline # EOF line
                      EOFfound=false
                    fi   
                  ;;
                  modprobe*)
                    :
                  ;;
                  chmod*)
                      bcom[ic++]=$tline
                      break
                  ;;
                  *)   
                    if $EOFfound; then # write all commands until next EOF
                      bcom[ic++]=$tline
                    fi   
                  ;;   
               esac 
             done 
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     gimp) # only want the commands to the first make install
             ic=0
             foundinstall=false
             for tline in ${acom[@]}; do
               case $tline in
                  "make install"*)
                     if ! $foundinstall; then
                       bcom[ic++]=$tline
                       foundinstall=true
                     fi
                  ;;
                  *)
                     if ! $foundinstall; then
                       bcom[ic++]=$tline
                     fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     git)
             ic=0
             foundhtml=false
             for tline in ${acom[@]}
             do
               case $tline in
                  "make htmldir"*)
                     foundhtml=true
                  ;;
                  "tar -xf ../git-manpages"*)
                     bcom[ic++]=$tline
                     foundhtml=false
                  ;;
                  *)
                     if ! $foundhtml; then
                       bcom[ic++]=$tline
                     fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     gst-plgns-bad) # remove the sed
             ic=0
             foundsed=false
             for tline in ${acom[@]}; do
               case $tline in
                  sed*)
                       foundsed=true
                  ;;
                  *configure*)
                       if ! $foundsed; then # want this one
                         bcom[ic++]=$tline
                       else
                         foundsed=false
                       fi
                  ;;
                  *)
                       if ! $foundsed; then
                         bcom[ic++]=$tline
                       fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     libcdio) # remove the second configure, make and make install commands
             ic=0
             foundconf=false
             for tline in ${acom[@]}; do
               case $tline in
                  *configure*)
                       if ! $foundconf; then
                         foundconf=true
                         bcom[ic++]=$tline
                       else
                         break
                       fi
                  ;;
                  *)
                       bcom[ic++]=$tline
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     libevdev)
            if [ "$SYSTEMD" = no ]; then # need the first set of commands in $xdriver
              for tline in ${acom[@]}; do
                case $tline in
                  "make install"*)
                       bcom[ic++]=$tline
                       break
                  ;;
                  *)
                       bcom[ic++]=$tline
                  ;;
                esac
              done
              rtrnCom=(${bcom[@]})
              return 0
            else # commands are in general section
              rtrnCom=(${acom[@]})
              return 0
            fi
     ;;
     libvdpau)
            if [ "$SYSTEMD" = no ]; then # get commands from $xdriver
              ic=0
              libvdpaufound=false
              xorgconfigfound=false
              for tline in ${acom[@]}; do
                case $tline in
                   *"XORG_CONFIG \\") # need one of these
                       if ! $xorgconfigfound; then bcom[ic++]=$tline; fi
                       xorgconfigfound=true
                   ;;
                   *libvdpau*)
                       if ! $libvdpaufound; then bcom[ic++]=$tline; fi
                       libvdpaufound=true
                   ;;
                   "make install"*)
                       if $xorgconfigfound -a $libvdpaufound; then
                         bcom[ic++]=$tline
                         break
                       fi
                   ;;
                   *)
                       if $libvdpaufound; then
                         bcom[ic++]=$tline
                       fi
                   ;;
                 esac
              done
              rtrnCom=(${bcom[@]})
              return 0
            else # commands are in multimedia section
              rtrnCom=(${acom[@]})
              return 0
            fi
     ;;
     linux-pam) # remove all the test commands
             ic=0
             instfound=false
             syspasswd=false
             for tline in ${acom[@]}; do
               case $tline in
                  install*) # don't want these install commands
                     instfound=true
                  ;;
                  "make install"*)
                     bcom[ic++]=$tline
                 ;;
                 "cat > /etc/pam.d/system-account"*) # want this
                     instfound=false
                     bcom[ic++]=$tline
                  ;;
                  "cat > /etc/pam.d/system-password"*) # want the first occurrence, not the second
                     if ! $syspasswd; then
                       syspasswd=true
                       bcom[ic++]=$tline
                     else
                       instfound=true
                     fi
                  ;;
                  "cat > /etc/pam.d/other"*) # need the second one
                     if [ $instfound = true -a $syspasswd = true ]; then # need this one
                       bcom[ic++]=$tline
                       instfound=false
                     fi
                  ;;
                  *)
                     if ! $instfound; then #write the commands
                       bcom[ic++]=$tline
                     fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     openjdk) # don't want the test lines
             ic=0
             displayfound=false
             for tline in ${acom[@]}; do
               case $tline in
                  *DISPLAY*)
                    displayfound=true
                  ;;
                  *'build/*/images/j2sdk-image'*) # want this
                    displayfound=false
                    bcom[ic++]=$tline
                  ;;
                  *)
                     if ! $displayfound; then #write the commands
                       bcom[ic++]=$tline
                     fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     py2cairo) # only want the first set of ./waf lines
             ic=0
             foundwaf=false
             for tline in ${acom[@]}; do
               case $tline in
                  './waf configure'*)
                       foundwaf=true
                       bcom[ic++]=$tline
                  ;;
                  *"waf install"*)
                       if $foundwaf; then
                         bcom[ic++]=$tline
                         break
                       fi
                  ;;
                  *)
                       if $foundwaf; then
                         bcom[ic++]=$tline
                       fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     py3cairo)
             ic=0
             foundpatch=false
             for tline in ${acom[@]}; do
               case $tline in
                  'patch -Np1 -i ../pycairo-1.10.0-waf_unpack-1.patch'*)
                       foundpatch=true
                       bcom[ic++]=$tline
                  ;;
                  *"waf install"*)
                       if $foundpatch; then
                         bcom[ic++]=$tline
                         foundpatch=false
                         break
                       fi
                  ;;
                  *)
                       if $foundpatch; then
                         bcom[ic++]=$tline
                       fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     pygobject2)
             ic=0
             foundpatch=false
             for tline in ${acom[@]}; do
               case $tline in
                  'patch -Np1 -i ../pygobject-2.28.6-fixes-1.patch'*)
                       foundpatch=true
                       bcom[ic++]=$tline
                  ;;
                  "make install"*)
                       if $foundpatch; then
                         bcom[ic++]=$tline
                         foundpatch=false
                         break
                       else
                         continue
                       fi
                  ;;
                  *)
                       if $foundpatch; then
                         bcom[ic++]=$tline
                       fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     qt4) # remove the first /etc/profile.d/qt4.sh which is for /usr
             ic=0
             foundprofiled=false
             foundld=false
             for tline in ${acom[@]}; do
               case $tline in
                  'cat > /etc/profile.d/qt4.sh'*)
                       if ! $foundprofiled; then # ignore first one
                         foundprofiled=true
                       else
                         bcom[ic++]=$tline
                         foundprofiled=false
                       fi
                  ;;
                  'cat >> /etc/ld.so.conf'*) # want rest of the commands
                       if ! $foundld; then
                         bcom[ic++]=$tline
                         foundld=true
                       fi
                  ;;
                  *)
                       if [[ $foundprofiled = false || $foundld = true ]]; then
                         bcom[ic++]=$tline
                       fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     speex) # remove the second make and make install commands
             ic=0
             foundmake=false
             for tline in ${acom[@]}; do
               case $tline in
                  make)
                       if ! $foundmake; then
                         foundmake=true
                         bcom[ic++]=$tline
                       else
                         break
                       fi
                  ;;
                  *)
                       bcom[ic++]=$tline
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     weston) # don't want the weston activation commands
             ic=0
             for tline in ${acom[@]}; do
               case $tline in
                  weston*)
                       break
                  ;;
                  *)
                       bcom[ic++]=$tline
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     tie-ixhash|xml-libxml|xml-sax-expat|xml-sax-base|xml-namespace|xml-sax|xml-simple|extutls-dpnds|extutls-pkgcnfg|perl-glib|uri|archive-zip)
             ic=0
             found=false
             for tline in ${acom[@]}; do
               case $tline in
                  perl*)
                         if ! $found; then
                           found=true
                           bcom[ic++]=$tline
                         fi
                  ;;
                  *install*)
                         if $found; then
                           bcom[ic++]=$tline
                           rtrnCom=(${bcom[@]})
                           return 0
                         fi
                  ;;
                  *)
                         if $found; then
                           bcom[ic++]=$tline
                         fi
                  ;;
               esac
             done
             return $RETURN_PARAM #install command not found
     ;;
     xorg-evdev|xorg-synaptics|xorg-nouveau)
# need the first set of commands
             ic=0
             foundconfig=false
             for tline in ${acom[@]}; do
               case $tline in
                  *configure*)
                       foundconfig=true
                       bcom[ic++]=$tline
                  ;;
                  *install*)
                       if $foundconfig; then
                         bcom[ic++]=$tline
                         break
                       fi
                  ;;
                  *)
                       if $foundconfig; then # write commands until make install
                         bcom[ic++]=$tline
                       fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     xorg-intel) # need the commands with enable-kms-only
             ic=0
             foundconfig=false
             for tline in ${acom[@]}; do
               case $tline in
                  *"--enable-kms-only"*) # need this
                         foundconfig=true
                         bcom[ic++]=$tline
                  ;;
                  *'./configure $XORG_CONFIG'*)
                         if $foundconfig; then # found all commands
                           break
                         fi
                  ;;
                  *)
                         if $foundconfig; then
                           bcom[ic++]=$tline
                         fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     xorg-vmmouse)
             ic=0
             foundconfig=false
             foundhal=false
             for tline in ${acom[@]}; do
               case $tline in
                  *"configure \$XORG_CONFIG               \\"*) # need cont line
                         foundconfig=true
                         bcom[ic++]=$tline
                  ;;
                  *"without-hal-fdi-dir"*) # write until install
                         foundhal=true
                         bcom[ic++]=$tline
                  ;;
                  *install*)
                         if [ $foundconfig = true -a $foundhal = true ]; then 
                           bcom[ic++]=$tline
                           break
                         fi
                  ;;
                  *)
                         if [ $foundconfig = true -a $foundhal = true ]; then # write until make install
                           bcom[ic++]=$tline
                         fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     ${xproto}fnames|${xlib}fnames|${xapp}fnames|${xfont}fnames)
             ic=0
             for tline in ${acom[@]}; do
               case $tline in
                  mkdir*)
                     break
                  ;;
                  *)
                     bcom[ic++]=$tline
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     ${xproto}wget|${xlib}wget|${xapp}wget|${xfont}wget)
             ic=0
             mkdirfound=false
             for tline in ${acom[@]}; do
               case $tline in
                  mkdir*)
                     bcom[ic++]=$tline
                     mkdirfound=true
                  ;;
                  export*)
                     break
                  ;;
                  *)
                     if $mkdirfound; then
                       bcom[ic++]=$tline
                     fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     $xproto|$xlib|$xapp|$xfont)
             ic=0
             foundbash=false
             for tline in ${acom[@]}; do
               case $tline in
                  bash*)
                     foundbash=true
                     bcom[ic++]=$tline
                  ;;
                  *)
                     if $foundbash; then
                       bcom[ic++]=$tline
                     fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     *)
             rtrnCom=(${acom[@]})
             return 0
     ;;
esac
} # end getComms
#
GetCommands () {
#get access to the arrays
rtrnBuild=""
getBuild
return_val=$?
if [ $return_val -eq $RETURN_PARAM ]; then # no build file present
  return $RETURN_PARAM
else
  buildScripts=(${rtrnBuild[@]})
  rtrnCom=""
  local commandsection=$xmlsec
  case $pkgname in
      libdrm)
        if [ "$SYSTEMD" = yes -a "$BOOK_VERSION" = KBLFS ]; then # commands are in libraries
          commandsection=general
        fi
      ;;
      libevdev|libvdpau)
        if [ "$SYSTEMD" = no ]; then # commands are in x
          commandsection=x
        fi
      ;;
  esac
  getComms $pkgname $commandsection
  commandScripts=(${rtrnCom[@]})
  numclines=${#commandScripts[@]} # # of commands
# 
# output commands until first configure found (or special chars)
#
  countg=0 # # of commands wriiten out
  cont=0
  wpa_sup=false
  mozconfigfnd=false
  isSed=false
  isCase=false
  for line in "${commandScripts[@]}"; do
    if $mozconfigfnd || $wpa_sup; then # never both true - are in different sections
       case "$line" in
          EOF)
            echo "$line"
            ((countg++))
            if $mozconfigfnd; then 
              mozconfigfnd=false
            else
              wpa_sup=false
            fi
          ;;
          *)  # continue writing until an EOF found
            echo "$line"
            ((countg++))
          ;;
       esac
    else
      case "$line" in
        'cat > wpa_supplicant/.config << "EOF"'|'cat >> wpa_supplicant/.config << "EOF"') # wpa_supp writes .config document
            wpa_sup=true
            echo $line
            ((countg++))
        ;;
        "cat > mozconfig <<"*) # firefox, seamonkey and thunderbird write mozconfig
            mozconfigfnd=true
            echo $line
            ((countg++))
        ;;
        sed*)
# test if sed has continuation line
          case "$line" in
            *\\)
              isSed=true # this is a sed with cont line(s)
              cacheit[cont++]="$line"
              ((countg++))
            ;;
            *)
              echo "$line"
              ((countg++))
            ;;
          esac
        ;;
        case*)
          isCase=true
          echo "$line"
          ((countg++))
        ;;
        esac*)
          if $isCase; then isCase=false; fi # end of case statement
          echo "$line"
          ((countg++))
        ;;
        export*) # catch any env variables being set up
          echo "$line"
          ((countg++))
          [ $countg -eq $numclines ] && return 0
        ;;
        "perl Makefile.PL"*) # a perl module
          break
        ;;
        'yes "" | make config'*) # the configure for net-tools
          break
        ;;
        *"setup.py install"*) # python modules e.g. scons
          break
        ;;
        "scons PREFIX=/usr"*) # serf configure
          break
        ;;
        'cat > /etc/rc.d/rc.iptables << "EOF"') # the firewall for iptables
          echo $line
         ((countg++))
        ;;
        *configure*|*Configure*|*"config --prefix="*|*bootstrap*|*autogen.sh*|cmake*|*"build.sh -Ddist.dir"*)
          if $isSed; then # test if another cont line
            case "$line" in
              *\\) # another cont line found so store it
                 cacheit[cont++]="$line"
                 ((countg++))
              ;;
              *) # write out the stored lines
                 for (( l=0; l<$cont; l++ )); do
                   echo "${cacheit[l]}"
                 done
                 echo "$line"
                 cont=0
                 ((countg++))
                 isSed=false # finished with this sed command
              ;;
            esac
          elif $isCase; then # write the line containing configure
            echo $line
            ((countg++))
          else
            if [ $cont -gt 0 ]; then countg=$countg-$cont; fi
            break
          fi
        ;;
        make*) # begins with make or install so break
          if $isSed; then # write out the sed lines
            for (( l=0; l<$cont; l++ )); do
              echo "${cacheit[l]}"
            done
            echo "$line"
            cont=0
            ((countg++))
            isSed=false # finished with any sed command
          else
            break
          fi
        ;;
        'install -v -d -m755 /usr/share/xml/docbook/xml-dtd-4.5'*) # break for docbook-xml
           break
        ;;
        *)
          case "$line" in
            *\\) # if a continuation line, store in cache
              cacheit[cont++]="$line"
              ((countg++))
            ;;
            *)
             if [ $cont -gt 0 ]; then # write out continuation line 
               for (( l=0; l<$cont; l++ )); do
                 echo "${cacheit[l]}"
               done
               echo "$line"
               cont=0
               isSed=false # finished with any sed command
               ((countg++)) # count # of commands written to output
               [ $countg -eq $numclines ] && return 0
             else
               echo "$line"
               ((countg++)) # count # of commands written to output
               [ $countg -eq $numclines ] && return 0
             fi
            ;;
          esac
       ;;
      esac
    fi
  done
#
  rtr=""
  combineScripts commandScripts[@] buildScripts[@]
  scriptOut=(${rtr[@]})
  for t in "${scriptOut[@]}"; do
    echo $t
  done
  if [ $countg -ne $numclines ]; then # output remaining commands
    cont=0 # counter for continuation lines
    foundDoc=false # doc command
    tarcomm=false # tar command
    symtest=false # symlink
    foundconfig=false # another configure command e.g. speex
#
    for (( k=$countg; k<$numclines; k++ )); do
      case ${commandScripts[k]} in
         install*)
                case ${commandScripts[k]} in
                   *'/usr/share/doc'*)
                       case ${commandScripts[k]} in
                          *\\) # a doc continuation line
                             foundDoc=true
                          ;;
                       esac
                   ;;
                   *\\) # a continuation line
                       cacheit[cont++]=${commandScripts[k]}
                   ;;
                   *) # install but not a doc or a cont line
                       echo ${commandScripts[k]}
                   ;;
                esac
         ;;
         ln*) # is a symlink so write it
                case ${commandScripts[k]} in
                   *\\) # a continuation line
                       cacheit[cont++]=${commandScripts[k]}
                       symtest=true
                   ;;
                   *) # write it out
                       echo ${commandScripts[k]}
                   ;;
                esac
         ;;
         if*) # starts with if so if a doc, will need to delete the closing fi
                   case ${commandScripts[k]} in
                   *'/usr/share/doc'*)
                       ifDoc=true
                       case ${commandScripts[k]} in
                          *\\) # a continuation line
                                cacheit[cont++]=${commandScripts[k]}
                          ;;
                       esac
                   ;;
                   *\\) # a continuation line
                       cacheit[cont++]=${commandScripts[k]}
                   ;;
                   *) # if block but not a doc or a cont line
                       echo ${commandScripts[k]}
                   ;;
                esac
         ;;
         tar*) # untar a file, so catch the cont lines
                case ${commandScripts[k]} in
                   *\\) # a continuation line
                       cacheit[cont++]=${commandScripts[k]}
                       tarcomm=true
                   ;;
                   *) 
                       echo ${commandScripts[k]}
                   ;;
                esac
         ;;
         gunzip*) # unpack a tarball so write it
                echo ${commandScripts[k]}
         ;;
         mv*) # a move commands so write it
                echo ${commandScripts[k]}
         ;;
         'mkdir -p /usr/share/doc/git-'*|'mkdir    /usr/share/doc/git-'*) # want the git docs
                echo ${commandScripts[k]}
         ;;
         'find /usr/share/doc/git-'*) # need these find commmands in git
                echo ${commandScripts[k]}
         ;;
         *'/usr/share/doc/php'*) # php doc so write it
                for (( l=0; l<$cont; l++ )); do
                  echo "${cacheit[l]}"
                done
                echo ${commandScripts[k]}
                cont=0
         ;;
         *'/usr/share/doc'*)
                if $tarcomm; then
                  case ${commandScripts[k]} in
                     *\\) # another continuation line
                         cacheit[cont++]=${commandScripts[k]}
                     ;;
                     *)
                         for (( l=0; l<$cont; l++ )); do
                           echo "${cacheit[l]}"
                         done
                         echo ${commandScripts[k]}
                         tarcomm=false
                         cont=0
                     ;;
                   esac
                elif $symtest; then
                  case ${commandScripts[k]} in
                     *\\) # another continuation line
                         cacheit[cont++]=${commandScripts[k]}
                     ;;
                     *) 
                         for (( l=0; l<$cont; l++ )); do
                           echo "${cacheit[l]}"
                         done
                         echo ${commandScripts[k]}
                         symtest=false
                         cont=0
                     ;;
                   esac
                elif $foundconfig; then
                  case ${commandScripts[k]} in
                     *\\) # another continuation line
                         cacheit[cont++]=${commandScripts[k]}
                     ;;
                     *)
                         for (( l=0; l<$cont; l++ )); do
                           echo "${cacheit[l]}"
                         done
                         echo ${commandScripts[k]}
                         foundconfig=false
                         cont=0
                     ;;
                   esac
                else
                  case ${commandScripts[k]} in
                      *\\) # a continuation line
                         foundDoc=true
                      ;;
                      *)
                         if $foundDoc; then # is a doc, so don't write
                           foundDoc=false
                         fi
                         cont=0
                      ;;
                  esac
                fi
         ;;
         "fi"*)
                if $ifDoc; then # end of a doc if test - don't write it
                  ifDoc=false
                else
                  echo ${commandScripts[k]} # if block is not a doc
                fi
         ;;
         *"configure --prefix="*)
              foundconfig=true
              case ${commandScripts[k]} in
                  *\\) # continuation line, store it
                     cacheit[cont++]=${commandScripts[k]}
                  ;;
                  *)
                     if [ $cont -gt 0 ]; then # write out continuation line(s)
                       for (( l=0; l<$cont; l++ )); do
                         echo "${cacheit[l]}"
                       done
                       symtest=false
                       tarcomm=false
                       foundconfig=false
                       cont=0
                     fi
                     echo ${commandScripts[k]}
                  ;;
              esac
         ;;
         *)
              if ! $ifDoc; then # not commands within a doc if block
                case ${commandScripts[k]} in
                    *\\) # continuation line, store it
                       cacheit[cont++]=${commandScripts[k]}
                    ;;
                    *) 
                       if [ $cont -gt 0 ]; then # write out continuation line(s)
                         for (( l=0; l<$cont; l++ )); do
                           echo "${cacheit[l]}"
                         done
                         symtest=false
                         tarcomm=false
                         cont=0
                       fi
                       echo ${commandScripts[k]}
                    ;;
                esac
              fi
         ;;
      esac
    done
  fi
  return 0
fi
} # end GetCommands
#
GetXCommands () {
#get access to the xml x commands
rtrnCom=""
getComms $pkgname $xmlsec
commandScripts=(${rtrnCom[@]})
numclines=${#commandScripts[@]} # # of commands
for xt in "${commandScripts[@]}"; do
  echo $xt
done
return 0
} # end GetXCommands
#
GetcacertsCommands () {
rtrnCom=""
getComms $pkgname $xmlsec
commandScripts=(${rtrnCom[@]})
# dump all the commands
for line in "${commandScripts[@]}"; do
  echo $line
done
} # end GetcacertsCommands
#
accountsserviceComms () {
local accountscom=""
accountscom[0]="./configure --prefix=/usr \\"
accountscom[1]="            --sysconfdir=/etc \\"
accountscom[2]="            --libexecdir=/usr/lib/accountsservice \\"
accountscom[3]="            --with-systemdsystemunitdir=/usr/lib/systemd/system \\"
accountscom[4]="            --localstatedir=/var --disable-static --enable-systemd"
accountscom[5]="make"
accountscom[6]="make install"
rtrncommands=(${accountscom[@]})
} # end accountsserviceComms
#
avrbinutilsComms () {
local avrbinutilscom=""
avrbinutilscom[0]="patch -Np1 -i ../binutils-2.23.2-avr-size.patch"
avrbinutilscom[1]="patch -Np1 -i ../binutils-2.23.2-texinfo-5.0.patch"
avrbinutilscom[2]="sed -i '/ac_cpp=/s/\\\$CPPFLAGS/\\\$CPPFLAGS -O2/' libiberty/configure"
avrbinutilscom[3]="config_guess=\$(./config.guess)"
avrbinutilscom[4]="rm -rf ../binutils-build"
avrbinutilscom[5]="mkdir -v ../binutils-build"
avrbinutilscom[6]="cd ../binutils-build"
avrbinutilscom[7]="../binutils-2.23.2/configure --prefix=/usr \\"
avrbinutilscom[8]="                             --with-lib-path=/usr/lib \\"
avrbinutilscom[9]="                             --enable-ld=default \\"
avrbinutilscom[10]="                             --enable-gold \\"
avrbinutilscom[11]="                             --enable-plugins \\"
avrbinutilscom[12]="                             --enable-threads \\"
avrbinutilscom[13]="                             --with-pic \\"
avrbinutilscom[14]="                             --enable-shared \\"
avrbinutilscom[15]="                             --disable-werror \\"
avrbinutilscom[16]="                             --disable-multilib \\"
avrbinutilscom[17]="                             --build=\${config_guess} \\"
avrbinutilscom[18]="                             --target=avr"
avrbinutilscom[19]="make configure-host"
avrbinutilscom[20]="make tooldir=/usr"
avrbinutilscom[21]="make tooldir=/usr DESTDIR=/tmp install"
avrbinutilscom[22]="cp /tmp/usr/bin/avr-*  /usr/bin/"
avrbinutilscom[23]="cp /tmp/usr/lib/ldscripts/avr* /usr/lib/ldscripts/"
avrbinutilscom[24]="for info in as bfd binutils configure gprof ld standards; do"
avrbinutilscom[25]="cp /tmp/usr/share/info/\${info}.info /usr/share/info/avr-\${info}.info"
avrbinutilscom[26]="done"
avrbinutilscom[27]="cp /tmp/usr/share/man/man1/avr-* /usr/share/man/man1/"
avrbinutilscom[28]="cp -r /tmp/usr/x86_64-unknown-linux-gnu/avr /usr/x86_64-unknown-linux-gnu/"
avrbinutilscom[29]="rm -rf /tmp/usr"
rtrncommands=(${avrbinutilscom[@]})
} # end avrbinutilsComms
#
avrgccComms () {
local avrgcccom=""
avrgcccom[0]='export CFLAGS="-O2 -pipe"'
avrgcccom[1]='export CXXFLAGS="-O2 -pipe"'
avrgcccom[2]="sed -i 's/install_to_\$(INSTALL_DEST) //' libiberty/Makefile.in"
avrgcccom[3]="sed -i '/ac_cpp=/s/\\\$CPPFLAGS/\\\$CPPFLAGS -O2/' libiberty/configure"
avrgcccom[4]="sed -i '/ac_cpp=/s/\\\$CPPFLAGS/\\\$CPPFLAGS -O2/' gcc/configure"
avrgcccom[5]="rm -rf ../gcc-build"
avrgcccom[6]="mkdir -v ../gcc-build"
avrgcccom[7]="cd ../gcc-build"
avrgcccom[8]="../gcc-${gccvers}/configure --prefix=/usr               \\"
avrgcccom[9]="                  --disable-cloog-version-check \\"
avrgcccom[10]="                 --disable-install-libiberty \\"
avrgcccom[11]="                 --disable-libssp \\"
avrgcccom[12]="                 --disable-libstdcxx-pch \\"
avrgcccom[13]="                 --disable-libunwind-exceptions \\"
avrgcccom[14]="                 --disable-linker-build-id \\"
avrgcccom[15]="                 --disable-nls \\"
avrgcccom[16]="                 --disable-werror \\"
avrgcccom[17]="                 --enable-__cxa_atexit \\"
avrgcccom[18]="                 --enable-checking=release \\"
avrgcccom[19]="                 --enable-clocale=gnu \\"
avrgcccom[20]="                 --enable-cloog-backend=isl \\"
avrgcccom[21]="                 --enable-gnu-unique-object \\"
avrgcccom[22]="                 --enable-gold \\"
avrgcccom[23]="                 --enable-languages=c,c++ \\"
avrgcccom[24]="                 --enable-ld=default \\"
avrgcccom[25]="                 --enable-lto \\"
avrgcccom[26]="                 --enable-plugin \\"
avrgcccom[27]="                 --enable-shared \\"
avrgcccom[28]="                 --infodir=/usr/share/info \\"
avrgcccom[29]="                 --libdir=/usr/lib \\"
avrgcccom[30]="                 --libexecdir=/usr/lib \\"
avrgcccom[31]="                 --mandir=/usr/share/man \\"
avrgcccom[32]="                 --target=avr \\"
avrgcccom[33]="                 --with-as=/usr/bin/avr-as \\"
avrgcccom[34]="                 --with-gnu-as \\"
avrgcccom[35]="                 --with-gnu-ld \\"
avrgcccom[36]="                 --with-ld=/usr/bin/avr-ld \\"
avrgcccom[37]="                 --with-plugin-ld=ld.gold \\"
avrgcccom[38]="                 --with-system-zlib"
avrgcccom[39]="make"
avrgcccom[40]="make DESTDIR=/tmp install"
avrgcccom[41]='find /tmp/usr/lib -type f -name "*.a" \'
avrgcccom[42]="   -exec /usr/bin/avr-strip --strip-debug '{}' \\;"
avrgcccom[43]="cp /tmp/usr/bin/avr-*  /usr/bin/"
avrgcccom[44]="cp -r /tmp/usr/lib/gcc/avr  /usr/lib/gcc/"
avrgcccom[45]="cp /tmp/usr/share/man/man1/avr-* /usr/share/man/man1"
avrgcccom[46]="rm -rf /tmp/usr"
rtrncommands=(${avrgcccom[@]})
} # end avrgccComms
#
basicComms () {
local basiccom=""
basiccom[0]="./configure --prefix=/usr \\"
basiccom[1]="            --sysconfdir=/etc \\"
basiccom[2]="            --localstatedir=/var \\"
basiccom[3]="            --libexecdir=/usr/lib \\"
basiccom[4]="            --disable-static"
basiccom[5]="make"
basiccom[6]="make install"
rtrncommands=(${basiccom[@]})
} # basicComms
#
blfsbtscrptsComms () {
local blfscom=""
blfscom[0]='make install-$btscrpt'
rtrncommands=(${blfscom[@]})
} # end blfsbtscrptsComms
#
ccacheComms () {
local ccachecom=""
ccachecom[0]="CHOST=x86_64-unknown-linux-gnu"
ccachecom[1]="./configure --prefix=/usr"
ccachecom[2]="make"
ccachecom[3]="install -Dm 755 ccache /usr/bin/ccache"
ccachecom[4]="install -Dm 644 ccache.1 /usr/share/man/man1/ccache.1"
ccachecom[5]="install -d /usr/lib/ccache/bin"
ccachecom[6]="ln -sf /usr/bin/ccache /usr/lib/ccache/bin/cc"
ccachecom[7]="ln -sf /usr/bin/ccache /usr/lib/ccache/bin/gcc"
ccachecom[8]="ln -sf /usr/bin/ccache /usr/lib/ccache/bin/g++"
ccachecom[9]="ln -sf /usr/bin/ccache /usr/lib/ccache/bin/cpp"
ccachecom[10]="ln -sf /usr/bin/ccache /usr/lib/ccache/bin/c++"
ccachecom[11]="ln -sf /usr/bin/ccache /usr/lib/ccache/bin/\${CHOST}-cc"
ccachecom[12]="ln -sf /usr/bin/ccache /usr/lib/ccache/bin/\${CHOST}-gcc"
ccachecom[13]="ln -sf /usr/bin/ccache /usr/lib/ccache/bin/\${CHOST}-g++"
ccachecom[14]="ln -sf /usr/bin/ccache /usr/lib/ccache/bin/\${CHOST}-cpp"
ccachecom[15]="ln -sf /usr/bin/ccache /usr/lib/ccache/bin/\${CHOST}-c++"
rtrncommands=(${ccachecom[@]})
} # end ccacheComms
#
ccachedestdirComms () {
local ccachedestdircom=""
ccachedestdircom[0]="CHOST=x86_64-unknown-linux-gnu"
ccachedestdircom[1]="./configure --prefix=/usr"
ccachedestdircom[2]="make"
ccachedestdircom[3]="install -Dm 755 ccache \${CUR_DIR}/usr/bin/ccache"
ccachedestdircom[4]="install -Dm 644 ccache.1 \${CUR_DIR}/usr/share/man/man1/ccache.1"
ccachedestdircom[5]="install -d \${CUR_DIR}/usr/lib/ccache/bin"
ccachedestdircom[6]="ln -sf /usr/bin/ccache \${CUR_DIR}/usr/lib/ccache/bin/cc"
ccachedestdircom[7]="ln -sf /usr/bin/ccache \${CUR_DIR}/usr/lib/ccache/bin/gcc"
ccachedestdircom[8]="ln -sf /usr/bin/ccache \${CUR_DIR}/usr/lib/ccache/bin/g++"
ccachedestdircom[9]="ln -sf /usr/bin/ccache \${CUR_DIR}/usr/lib/ccache/bin/cpp"
ccachedestdircom[10]="ln -sf /usr/bin/ccache \${CUR_DIR}/usr/lib/ccache/bin/c++"
ccachedestdircom[11]="ln -sf /usr/bin/ccache \${CUR_DIR}/usr/lib/ccache/bin/\${CHOST}-cc"
ccachedestdircom[12]="ln -sf /usr/bin/ccache \${CUR_DIR}/usr/lib/ccache/bin/\${CHOST}-gcc"
ccachedestdircom[13]="ln -sf /usr/bin/ccache \${CUR_DIR}/usr/lib/ccache/bin/\${CHOST}-g++"
ccachedestdircom[14]="ln -sf /usr/bin/ccache \${CUR_DIR}/usr/lib/ccache/bin/\${CHOST}-cpp"
ccachedestdircom[15]="ln -sf /usr/bin/ccache \${CUR_DIR}/usr/lib/ccache/bin/\${CHOST}-c++"
rtrncommands=(${ccachedestdircom[@]})
} # end ccachedestdirComms
#
chromeComms () {
local chromecom=""
chromecom[0]="chromium_setup () {"
chromecom[1]="# setup the variable _chromium_conf"
chromecom[2]="#"
chromecom[3]="_chromium_conf=("
chromecom[4]="    -Dgoogle_api_key='AIzaSyAfq7sgJqcCMOCxGuXz8c0yaxG64hx7TJw'"
chromecom[5]="    -Dgoogle_default_client_id='1000770356257.apps.googleusercontent.com'"
chromecom[6]="    -Dgoogle_default_client_secret='PXj7rSdw9-vdpy1vgs4kitYS'"
chromecom[7]="    -Dwerror="
chromecom[8]="    -Dclang=0"
chromecom[9]="    -Ddisable_nacl=1"
chromecom[10]="    -Ddisable_pnacl=1"
chromecom[11]="    -Dpython_ver=2.7"
chromecom[12]="    -Dlinux_link_gsettings=1"
chromecom[13]="    -Dlinux_link_libpci=1"
chromecom[14]="    -Dlinux_link_libspeechd=1"
chromecom[15]="    -Dlinux_link_pulseaudio=1"
chromecom[16]="    -Dlinux_strip_binary=1"
chromecom[17]="    -Dlinux_use_bundled_binutils=0"
chromecom[18]="    -Dlinux_use_bundled_gold=1"
chromecom[19]="    -Dlinux_use_gold_flags=1"
chromecom[20]="    -Dicu_use_data_file_flag=0"
chromecom[21]="    -Dlogging_like_official_build=1"
chromecom[22]="    -Dlibspeechd_h_prefix=speech-dispatcher/"
chromecom[23]="    -Dffmpeg_branding=Chrome"
chromecom[24]="    -Dproprietary_codecs=1"
chromecom[25]="    -Duse_gnome_keyring=0"
chromecom[26]="    -Duse_system_bzip2=1"
chromecom[27]="    -Duse_system_flac=1"
chromecom[28]="    -Duse_system_ffmpeg=0"
chromecom[29]="    -Duse_system_harfbuzz=1"
chromecom[30]="    -Duse_system_icu=1"
chromecom[31]="    -Duse_system_libevent=1"
chromecom[32]="    -Duse_system_libjpeg=1"
chromecom[33]="    -Duse_system_libpng=1"
chromecom[34]="    -Duse_system_libxml=0"
chromecom[35]="    -Duse_system_snappy=0"
chromecom[36]="    -Duse_system_ssl=0"
chromecom[37]="    -Duse_system_xdg_utils=1"
chromecom[38]="    -Duse_system_yasm=1"
chromecom[39]="    -Duse_system_zlib=0"
chromecom[40]="    -Dusb_ids_path=/usr/share/hwdata/usb.ids"
chromecom[41]="    -Duse_mojo=0"
chromecom[42]="    -Duse_gconf=0"
chromecom[43]="    -Ddisable_fatal_linker_warnings=1"
chromecom[44]="    -Ddisable_glibc=1)"
chromecom[45]="} # end chromium_setup"
chromecom[46]="chromium_setup"
chromecom[47]="cd src"
chromecom[48]='./build/gyp_chromium "${_chromium_conf[@]}"'
chromecom[49]="ninja -C out/Release chrome chrome_sandbox chromedriver"
chromecom[50]="install -D out/Release/chrome /usr/lib/chromium/chromium"
chromecom[51]="install -Dm755 out/Release/chrome_sandbox \\"
chromecom[52]="    /usr/lib/chromium/chrome-sandbox"
chromecom[53]="install -D out/Release/chromedriver /usr/lib/chromium/chromedriver"
chromecom[54]="cp out/Release/{*.pak,*.bin,icudtl.dat} /usr/lib/chromium/"
chromecom[55]="cp -a out/Release/locales /usr/lib/chromium/"
chromecom[56]="install -Dm644 out/Release/chrome.1 /usr/share/man/man1/chromium.1"
chromecom[57]="for size in 22 24 48 64 128 256; do"
chromecom[58]='  install -Dm644 "chrome/app/theme/chromium/product_logo_$size.png" \'
chromecom[59]='    "/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png"'
chromecom[60]="done"
chromecom[61]="for size in 16 32; do"
chromecom[62]='  install -Dm644 "chrome/app/theme/default_100_percent/chromium/product_logo_$size.png" \'
chromecom[63]='    "/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png"'
chromecom[64]="done"
chromecom[65]="ln -s /usr/lib/chromium/chromedriver /usr/bin/chromedriver"
chromecom[66]='echo "install the new /usr/bin/chromium launcher"'
chromecom[67]="cd ../chromium-launcher"
chromecom[68]="make PREFIX=/usr"
chromecom[69]="make PREFIX=/usr install-strip"
chromecom[70]="cd .."
rtrncommands=(${chromecom[@]})
} # end chromeComms
#
dbusComms () {
local dbuscom=""
dbuscom[0]="./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var \\"
dbuscom[1]="            --libexecdir=/usr/lib/dbus-1.0 --with-dbus-user=messagebus \\"
dbuscom[2]="            --with-system-pid-file=/run/dbus/pid \\"
dbuscom[3]="            --with-system-socket=/run/dbus/system_bus_socket \\"
dbuscom[4]="            --with-console-auth-dir=/run/console/ \\"
dbuscom[5]="            --enable-inotify --disable-dnotify \\"
dbuscom[6]="            --disable-verbose-mode --disable-static \\"
dbuscom[7]="            --disable-tests --disable-asserts \\"
dbuscom[8]="            --with-systemdsystemunitdir=/usr/lib/systemd/system \\"
dbuscom[9]="            --enable-systemd"
dbuscom[10]="make"
dbuscom[11]="make install"
rtrncommands=(${dbuscom[@]})
} # end dbusComms
#
docbkXmlDestdirComms () {
local docbkcom=""
docbkcom[0]="install -v -d -m755 \${CUR_DIR}/usr/share/xml/docbook/xml-dtd-4.5"
docbkcom[1]="install -v -d -m755 \${CUR_DIR}/etc/xml"
docbkcom[2]="chown -R  docbook-xml:docbook-xml ."
docbkcom[3]="cp -v -af docbook.cat *.dtd ent/ *.mod \\"
docbkcom[4]="    \${CUR_DIR}/usr/share/xml/docbook/xml-dtd-4.5"
docbkcom[5]="if [ ! -e \${CUR_DIR}/etc/xml/docbook ]; then"
docbkcom[6]="    xmlcatalog --noout --create \${CUR_DIR}/etc/xml/docbook"
docbkcom[7]="fi"
docbkcom[8]='xmlcatalog --noout --add "public" \'
docbkcom[9]='    "-//OASIS//DTD DocBook XML V4.5//EN" \'
docbkcom[10]='    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" \'
docbkcom[11]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[12]='xmlcatalog --noout --add "public" \'
docbkcom[13]='    "-//OASIS//DTD DocBook XML CALS Table Model V4.5//EN" \'
docbkcom[14]='    "file:///usr/share/xml/docbook/xml-dtd-4.5/calstblx.dtd" \'
docbkcom[15]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[16]='xmlcatalog --noout --add "public" \'
docbkcom[17]='    "-//OASIS//DTD XML Exchange Table Model 19990315//EN" \'
docbkcom[18]='    "file:///usr/share/xml/docbook/xml-dtd-4.5/soextblx.dtd" \'
docbkcom[19]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[20]='xmlcatalog --noout --add "public" \'
docbkcom[21]='    "-//OASIS//ELEMENTS DocBook XML Information Pool V4.5//EN" \'
docbkcom[22]='    "file:///usr/share/xml/docbook/xml-dtd-4.5/dbpoolx.mod" \'
docbkcom[23]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[24]='xmlcatalog --noout --add "public" \'
docbkcom[25]='    "-//OASIS//ELEMENTS DocBook XML Document Hierarchy V4.5//EN" \'
docbkcom[26]='    "file:///usr/share/xml/docbook/xml-dtd-4.5/dbhierx.mod" \'
docbkcom[27]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[28]='xmlcatalog --noout --add "public" \'
docbkcom[29]='    "-//OASIS//ELEMENTS DocBook XML HTML Tables V4.5//EN" \'
docbkcom[30]='    "file:///usr/share/xml/docbook/xml-dtd-4.5/htmltblx.mod" \'
docbkcom[31]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[32]='xmlcatalog --noout --add "public" \'
docbkcom[33]='    "-//OASIS//ENTITIES DocBook XML Notations V4.5//EN" \'
docbkcom[34]='    "file:///usr/share/xml/docbook/xml-dtd-4.5/dbnotnx.mod" \'
docbkcom[35]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[36]='xmlcatalog --noout --add "public" \'
docbkcom[37]='    "-//OASIS//ENTITIES DocBook XML Character Entities V4.5//EN" \'
docbkcom[38]='    "file:///usr/share/xml/docbook/xml-dtd-4.5/dbcentx.mod" \'
docbkcom[39]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[40]='xmlcatalog --noout --add "public" \'
docbkcom[41]='    "-//OASIS//ENTITIES DocBook XML Additional General Entities V4.5//EN" \'
docbkcom[42]='    "file:///usr/share/xml/docbook/xml-dtd-4.5/dbgenent.mod" \'
docbkcom[43]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[44]='xmlcatalog --noout --add "rewriteSystem" \'
docbkcom[45]='    "http://www.oasis-open.org/docbook/xml/4.5" \'
docbkcom[46]='    "file:///usr/share/xml/docbook/xml-dtd-4.5" \'
docbkcom[47]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[48]='xmlcatalog --noout --add "rewriteURI" \'
docbkcom[49]='    "http://www.oasis-open.org/docbook/xml/4.5" \'
docbkcom[50]='    "file:///usr/share/xml/docbook/xml-dtd-4.5" \'
docbkcom[51]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[52]="if [ ! -e \${CUR_DIR}/etc/xml/catalog ]; then"
docbkcom[53]="    xmlcatalog --noout --create \${CUR_DIR}/etc/xml/catalog"
docbkcom[54]="fi"
docbkcom[55]='xmlcatalog --noout --add "delegatePublic" \'
docbkcom[56]='    "-//OASIS//ENTITIES DocBook XML" \'
docbkcom[57]='    "file:///etc/xml/docbook" \'
docbkcom[58]="    \${CUR_DIR}/etc/xml/catalog"
docbkcom[59]='xmlcatalog --noout --add "delegatePublic" \'
docbkcom[60]='    "-//OASIS//DTD DocBook XML" \'
docbkcom[61]='    "file:///etc/xml/docbook" \'
docbkcom[62]="    \${CUR_DIR}/etc/xml/catalog"
docbkcom[63]='xmlcatalog --noout --add "delegateSystem" \'
docbkcom[64]='    "http://www.oasis-open.org/docbook/" \'
docbkcom[65]='    "file:///etc/xml/docbook" \'
docbkcom[66]="    \${CUR_DIR}/etc/xml/catalog"
docbkcom[67]='xmlcatalog --noout --add "delegateURI" \'
docbkcom[68]='    "http://www.oasis-open.org/docbook/" \'
docbkcom[69]='    "file:///etc/xml/docbook" \'
docbkcom[70]="    \${CUR_DIR}/etc/xml/catalog"
docbkcom[71]="for DTDVERSION in 4.1.2 4.2 4.3 4.4"
docbkcom[72]="do"
docbkcom[73]='  xmlcatalog --noout --add "public" \'
docbkcom[74]='    "-//OASIS//DTD DocBook XML V$DTDVERSION//EN" \'
docbkcom[75]='    "http://www.oasis-open.org/docbook/xml/$DTDVERSION/docbookx.dtd" \'
docbkcom[76]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[77]='  xmlcatalog --noout --add "rewriteSystem" \'
docbkcom[78]='    "http://www.oasis-open.org/docbook/xml/$DTDVERSION" \'
docbkcom[79]='    "file:///usr/share/xml/docbook/xml-dtd-4.5" \'
docbkcom[80]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[81]='  xmlcatalog --noout --add "rewriteURI" \'
docbkcom[82]='    "http://www.oasis-open.org/docbook/xml/$DTDVERSION" \'
docbkcom[83]='    "file:///usr/share/xml/docbook/xml-dtd-4.5" \'
docbkcom[84]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[85]='  xmlcatalog --noout --add "delegateSystem" \'
docbkcom[86]='    "http://www.oasis-open.org/docbook/xml/$DTDVERSION/" \'
docbkcom[87]='    "file:///etc/xml/docbook" \'
docbkcom[88]="    \${CUR_DIR}/etc/xml/catalog"
docbkcom[89]='  xmlcatalog --noout --add "delegateURI" \'
docbkcom[90]='    "http://www.oasis-open.org/docbook/xml/$DTDVERSION/" \'
docbkcom[91]='    "file:///etc/xml/docbook" \'
docbkcom[92]="    \${CUR_DIR}/etc/xml/catalog"
docbkcom[93]="done"
rtrncommands=(${docbkcom[@]})
} # end docbkXmlDestdirComms
#
docbkXslDestdirComms () {
local docbkxslcom=""
docbkxslcom[0]="install -v -m755 -d /usr/share/xml/docbook/xsl-stylesheets-1.78.1"
docbkxslcom[1]="cp -v -R VERSION common eclipse epub extensions fo highlighting html \\"
docbkxslcom[2]="         htmlhelp images javahelp lib manpages params profiling \\"
docbkxslcom[3]="         roundtrip slides template tests tools webhelp website \\"
docbkxslcom[4]="         xhtml xhtml-1_1 \\"
docbkxslcom[5]="    \${CUR_DIR}/usr/share/xml/docbook/xsl-stylesheets-1.78.1"
docbkxslcom[6]="ln -s VERSION \${CUR_DIR}/usr/share/xml/docbook/xsl-stylesheets-1.78.1/VERSION.xsl"
docbkxslcom[7]="install -v -m755 -d \${CUR_DIR}/usr/share/doc/docbook-xsl-1.78.1"
docbkxslcom[8]="install -v -m644 -D README \\"
docbkxslcom[9]="                    \${CUR_DIR}/usr/share/doc/docbook-xsl-1.78.1/README.txt"
docbkxslcom[10]='install -v -m644    RELEASE-NOTES* NEWS* \'
docbkxslcom[11]="                    \${CUR_DIR}/usr/share/doc/docbook-xsl-1.78.1"
docbkxslcom[12]="if [ ! -d \${CUR_DIR}/etc/xml ]; then install -v -m755 -d \${CUR_DIR}/etc/xml; fi"
docbkxslcom[13]="if [ ! -f \${CUR_DIR}/etc/xml/catalog ]; then"
docbkxslcom[14]="    xmlcatalog --noout --create \${CUR_DIR}/etc/xml/catalog"
docbkxslcom[15]="fi"
docbkxslcom[16]='xmlcatalog --noout --add "rewriteSystem" \'
docbkxslcom[17]='           "http://docbook.sourceforge.net/release/xsl/1.78.1" \'
docbkxslcom[18]='           "/usr/share/xml/docbook/xsl-stylesheets-1.78.1" \'
docbkxslcom[19]="    \${CUR_DIR}/etc/xml/catalog"
docbkxslcom[20]='xmlcatalog --noout --add "rewriteURI" \'
docbkxslcom[21]='           "http://docbook.sourceforge.net/release/xsl/1.78.1" \'
docbkxslcom[22]='           "/usr/share/xml/docbook/xsl-stylesheets-1.78.1" \'
docbkxslcom[23]="    \${CUR_DIR}/etc/xml/catalog"
docbkxslcom[24]='xmlcatalog --noout --add "rewriteSystem" \'
docbkxslcom[25]='           "http://docbook.sourceforge.net/release/xsl/current" \'
docbkxslcom[26]='           "/usr/share/xml/docbook/xsl-stylesheets-1.78.1" \'
docbkxslcom[27]="    \${CUR_DIR}/etc/xml/catalog"
docbkxslcom[28]='xmlcatalog --noout --add "rewriteURI" \'
docbkxslcom[29]='           "http://docbook.sourceforge.net/release/xsl/current" \'
docbkxslcom[30]='           "/usr/share/xml/docbook/xsl-stylesheets-1.78.1" \'
docbkxslcom[31]="    \${CUR_DIR}/etc/xml/catalog"
rtrncommands=(${docbkxslcom[@]})
} # end docbkXslDestdirComms
#
espeakComms () {
local espeakcom=""
espeakcom[0]="cd src"
espeakcom[1]="cp portaudio19.h portaudio.h"
espeakcom[2]="make AUDIO=runtime"
espeakcom[3]="make install"
espeakcom[4]="chmod 644 /usr/lib/libespeak.a"
rtrncommands=(${espeakcom[@]})
} # end espeakComms
#
eudevComms () {
local eudevcom=""
eudevcom[0]="sed -r -i 's|/usr(/bin/test)|\1|' test/udev-test.pl"
eudevcom[1]="./configure --prefix=/usr           \\"
eudevcom[2]="            --bindir=/sbin          \\"
eudevcom[3]="            --sbindir=/sbin         \\"
eudevcom[4]="            --libdir=/usr/lib       \\"
eudevcom[5]="            --sysconfdir=/etc       \\"
eudevcom[6]="            --libexecdir=/lib       \\"
eudevcom[7]="            --with-rootprefix=      \\"
eudevcom[8]="            --with-rootlibdir=/lib  \\"
eudevcom[9]="            --enable-split-usr      \\"
eudevcom[10]="            --enable-libkmod        \\"
eudevcom[11]="            --enable-rule_generator \\"
eudevcom[12]="            --enable-keymap         \\"
eudevcom[13]="            --enable-introspection \\"
eudevcom[14]="            --enable-gudev"
eudevcom[15]="make"
eudevcom[16]="make install"
rtrncommands=(${eudevcom[@]})
} # end eudevComms
#
gtkvncComms () {
local gtkvnccom=""
gtkvnccom[0]="./configure --prefix=/usr \\"
gtkvnccom[1]="            --with-gtk=3.0 \\"
gtkvnccom[2]="            --enable-vala"
gtkvnccom[3]="make"
gtkvnccom[4]="make install"
rtrncommands=(${gtkvnccom[@]})
} # end gtkvncComms
hamcrestComms () {
local hamcrestcom=""
hamcrestcom[0]="install -v -dm755 /usr/share/java/\${_libname}"
hamcrestcom[1]="for hamtype in core library generator integration; do"
hamcrestcom[2]="  cp \${SrcName}\${hamtype}-\${pkgver}.jar /usr/share/java/\${_libname}/\${hamtype}-\${pkgver}.jar"
hamcrestcom[3]="  ln -sv \${hamtype}-\${pkgver}.jar /usr/share/java/\${_libname}/\${hamtype}.jar"
hamcrestcom[4]="  ln -s \${_libname}/\${hamtype}-\${pkgver}.jar /usr/share/java/\${SrcName}\${hamtype}.jar"
hamcrestcom[5]="done"
rtrncommands=(${hamcrestcom[@]})
} # end hamcrestComms
#
iwComms () {
local iwcom=""
iwcom[0]="make"
iwcom[1]="make SBINDIR=/usr/bin install"
rtrncommands=(${iwcom[@]})
} # end iwComms
#
libcapComms () {
local libcapcom=""
libcapcom[0]="sed -i 's:LIBDIR:PAM_&:g' pam_cap/Makefile"
libcapcom[1]="sed -i '/SBINDIR/s#sbin#bin#' Make.Rules"
libcapcom[2]="make"
libcapcom[3]="sed -i '/install.*STALIBNAME/ s/^/#/' libcap/Makefile"
libcapcom[4]="make prefix=/usr \\"
libcapcom[5]="     SBINDIR=/usr/bin \\"
libcapcom[6]="     PAM_LIBDIR=/usr/lib \\"
libcapcom[7]="     RAISE_SETFCAP=no install"
libcapcom[8]="chmod -v 755 /usr/lib/libcap.so"
libcapcom[9]="ln -sfv libcap.so.2 /usr/lib/libcap.so"
libcapcom[10]="install -v -m644 pam_cap/capability.conf /etc/security"
rtrncommands=(${libcapcom[@]})
} # end libcapComms
#
libcapdestdirComms () {
local libcapdcom=""
libcapdcom[0]="sed -i 's:LIBDIR:PAM_&:g' pam_cap/Makefile"
libcapdcom[1]="sed -i '/SBINDIR/s#sbin#bin#' Make.Rules"
libcapdcom[2]="make KERNEL_HEADERS=/usr/include"
libcapdcom[3]="sed -i '/install.*STALIBNAME/ s/^/#/' libcap/Makefile"
libcapdcom[4]="make prefix=/usr \\"
libcapdcom[5]="     lib=/lib \\"
libcapdcom[6]="     SBINDIR=/usr/bin \\"
libcapdcom[7]='     DESTDIR="$CUR_DIR" \'
libcapdcom[8]="     PAM_LIBDIR=/usr/lib \\"
libcapdcom[9]="     RAISE_SETFCAP=no install"
libcapdcom[10]="chmod -v 755 \${CUR_DIR}/usr/lib/libcap.so"
libcapdcom[11]="ln -sfv libcap.so.2 \${CUR_DIR}/usr/lib/libcap.so"
libcapdcom[12]="mkdir -pv \${CUR_DIR}/etc/security"
libcapdcom[13]="install -v -m644 pam_cap/capability.conf \${CUR_DIR}/etc/security"
rtrncommands=(${libcapdcom[@]})
} # end libcapdestdirComms
#
libgphotoComms () {
local libgphotocom=""
libgphotocom[0]="./configure --prefix=/usr \\"
libgphotocom[1]="            --disable-rpath"
libgphotocom[2]="make"
libgphotocom[3]="make install"
libgphotocom[4]="pkgver=2.5.8"
libgphotocom[5]="mkdir -pv /usr/lib/udev/hwdb.d"
libgphotocom[6]="mkdir -pv /usr/lib/udev/rules.d"
libgphotocom[7]="LD_LIBRARY_PATH=/usr/lib\${LD_LIBRARY_PATH:+:}\$LD_LIBRARY_PATH \\"
libgphotocom[8]="CAMLIBS=/usr/lib/libgphoto2/\${pkgver} \\"
libgphotocom[9]="/usr/lib/libgphoto2/print-camera-list hwdb > \\"
libgphotocom[10]="/usr/lib/udev/hwdb.d/20-gphoto.hwdb"
libgphotocom[11]="LD_LIBRARY_PATH=/usr/lib\${LD_LIBRARY_PATH:+:}\$LD_LIBRARY_PATH \\"
libgphotocom[12]="CAMLIBS=/usr/lib/libgphoto2/\${pkgver} \\"
libgphotocom[13]="/usr/lib/libgphoto2/print-camera-list udev-rules version 201 > \\"
libgphotocom[14]="/usr/lib/udev/rules.d/40-gphoto.rules"
libgphotocom[15]="rm -fv /usr/include/gphoto2/gphoto2"
libgphotocom[16]="rm -rf /opt/qt4"
rtrncommands=(${libgphotocom[@]})
} #end libgphotoComms
#
libproxyComms () {
local libproxycom=""
libproxycom[0]="patch -Np1 -i ../libproxy-0.4.11-also-support-mozjs-17.0.patch"
libproxycom[1]="patch -Np1 -i ../libproxy-0.4.11-crash.patch"
libproxycom[2]="patch -Np1 -i ../libproxy-0.4.11-fdleak.patch"
libproxycom[3]="patch -Np1 -i ../libproxy-0.4.11-dont_segfault_on_exit.patch"
libproxycom[4]="mkdir -pv build"
libproxycom[5]="cd build"
libproxycom[6]="cmake -DCMAKE_INSTALL_PREFIX=/usr \\"
libproxycom[7]="      -DLIBEXEC_INSTALL_DIR=/usr/lib/libproxy \\"
libproxycom[8]="      -DCMAKE_SKIP_RPATH=ON \\"
libproxycom[9]="      -DWITH_WEBKIT=OFF \\"
libproxycom[10]="      -DWITH_MOZJS=ON \\"
libproxycom[11]="      -DPYTHON_EXECUTABLE:FILEPATH=/usr/bin/python2 \\"
libproxycom[12]="      .."
libproxycom[13]="make"
libproxycom[14]="make install"
rtrncommands=(${libproxycom[@]})
} # end libproxyComms
#
libvirtComms () {
local libpvirtcom=""
libvirtcom[0]="./configure --prefix=/usr \\"
libvirtcom[1]="            --libexec=/usr/lib/libvirt \\"
libvirtcom[2]="            --sbindir=/usr/bin \\"
libvirtcom[3]="            --with-storage-lvm \\"
libvirtcom[4]="            --with-udev --disable-static \\"
libvirtcom[5]="            --with-init-script=systemd"
libvirtcom[6]="make"
libvirtcom[7]="make install"
rtrncommands=(${libvirtcom[@]})
} # end libvirtComms
#
lvmComms () {
local lvmcom=""
lvmcom[0]="./configure --prefix=/usr \\"
lvmcom[1]="            --sysconfdir=/etc \\"
lvmcom[2]="            --localstatedir=/var \\"
lvmcom[3]="            --sbindir=/usr/bin \\"
lvmcom[4]="            --with-confdir=/etc \\"
lvmcom[5]="            --with-udev-prefix=/usr \\"
lvmcom[6]="            --with-systemdsystemunitdir=/usr/lib/systemd/system \\"
lvmcom[7]="            --with-default-pid-dir=/run \\"
lvmcom[8]="            --with-default-dm-run-dir=/run \\"
lvmcom[9]="            --with-default-run-dir=/run/lvm \\"
lvmcom[10]="            --enable-pkgconfig \\"
lvmcom[11]="            --enable-readline \\"
lvmcom[12]="            --enable-dmeventd \\" 
lvmcom[13]="            --enable-cmdlib \\"
lvmcom[14]="            --enable-applib \\"
lvmcom[15]="            --enable-udev_sync \\"
lvmcom[16]="            --enable-udev_rules \\"
lvmcom[17]="            --with-default-locking-dir=/run/lock/lvm \\"
lvmcom[18]="            --enable-lvmetad"
lvmcom[19]="make"
lvmcom[20]="make install"
lvmcom[21]="make install_systemd_units"
lvmcom[22]="make install_systemd_generators"
lvmcom[23]="mkdir -pv /usr/lib/systemd/system/{sockets.target.wants,sysinit.target.wants}"
lvmcom[24]="ln -sf ../dm-event.socket /usr/lib/systemd/system/sockets.target.wants/dm-event.socket"
lvmcom[25]="ln -sf ../lvm2-lvmetad.socket /usr/lib/systemd/system/sysinit.target.wants/lvm2-lvmetad.socket"
rtrncommands=(${lvmcom[@]})
} # end lvmComms
#
mpiComms () {
local mpicom=""
mpicom[0]="./configure --prefix=/usr \\"
mpicom[1]="            --with-udevdir=/usr/lib/udev"
mpicom[2]='LANG="en_US.UTF-8" make'
mpicom[3]="make install"
rtrncommands=(${mpicom[@]})
} # end mpiComms
#
netctlComms () {
local netctlcom=""
netctlcom[0]="make install"
netctlcom[1]="install -D -m644 contrib/bash-completion /usr/share/bash-completion/completions/netctl"
netctlcom[2]="install -D -m644 contrib/zsh-completion /usr/share/zsh/site-functions/_netctl"
rtrncommands=(${netctlcom[@]})
} # end netctlComms
#
netctldestdirComms () {
local netctldestdircom=""
netctldestdircom[0]="make DESTDIR=\${CUR_DIR} systemdsystemunitdir=/usr/lib/systemd/system install"
netctldestdircom[1]="install -D -m644 contrib/bash-completion /usr/share/bash-completion/completions/netctl"
netctldestdircom[2]="install -D -m644 contrib/zsh-completion /usr/share/zsh/site-functions/_netctl"
rtrncommands=(${netctldestdircom[@]})
} # end netctldestdirComms
#
ntwrkmngrComms () {
local nmcom=""
nmcom[0]="./configure --prefix=/usr \\"
nmcom[1]="            --sysconfdir=/etc \\"
nmcom[2]="            --localstatedir=/var \\"
nmcom[3]="            --sbindir=/usr/bin \\"
nmcom[4]="            --libexecdir=/usr/lib/networkmanager \\"
nmcom[5]="            --with-crypto=nss \\"
nmcom[6]="            --with-dhclient=/usr/bin/dhclient \\"
nmcom[7]="            --without-dhcpcd \\"
nmcom[8]="            --with-dnsmasq=/usr/bin/dnsmasq \\"
nmcom[9]="            --with-iptables=/usr/bin/iptables \\"
nmcom[10]="            --with-systemdsystemunitdir=/usr/lib/systemd/system \\"
nmcom[11]="            --with-udev-dir=/usr/lib/udev \\"
nmcom[12]="            --with-kernel-firmware-dir=/usr/lib/firmware \\"
nmcom[13]="            --with-session-tracking=systemd \\"
nmcom[14]="            --with-modem-manager-1 \\"
nmcom[15]="            --disable-static \\"
nmcom[16]="            --enable-more-warnings=no \\"
nmcom[17]="            --disable-wimax \\"
nmcom[18]="            --disable-ppp \\"
nmcom[19]="            --enable-modify-system"
nmcom[20]="make"
nmcom[21]="make install"
nmcom[22]='cat >> /etc/NetworkManager/NetworkManager.conf << "EOF"'
nmcom[23]="[main]"
nmcom[24]="plugins=keyfile"
nmcom[25]="dhcp=dhclient"
nmcom[26]="dns=default"
nmcom[27]="# Set static hostname"
nmcom[28]="[keyfile]"
nmcom[29]="hostname=gt70-dom"
nmcom[30]="EOF"
rtrncommands=(${nmcom[@]})
} # end ntwrkmngrComms
#
nvidiaComms () {
local nvcom=""
nvcom[0]="cd kernel"
nvcom[1]="make SYSSRC=/usr/lib/modules/\${_kernver}/build module"
nvcom[2]="cd uvm"
nvcom[3]="make SYSSRC=/usr/lib/modules/\${_kernver}/build module"
nvcom[4]="install -D -m644 nvidia.ko \\"
nvcom[5]="/usr/lib/modules/\${_extramodules}/nvidia.ko"
nvcom[6]="install -D -m644 uvm/nvidia-uvm.ko \\"
nvcom[7]="/usr/lib/modules/\${_extramodules}/nvidia-uvm.ko"
nvcom[8]="install -d -m755 /usr/lib/modprobe.d"
nvcom[9]='echo "blacklist nouveau" >> /usr/lib/modprobe.d/nvidia.conf'
nvcom[10]='echo $_kernver >> /usr/lib/modules/${_extramodules}/version'
rtrncommands=(${nvcom[@]})
} # end nvidiaComms
#
nvlibglComms () {
local nvlibglcom=""
nvlibglcom[0]="bsdtar -xf nvidia-persistenced-init.tar.bz2"
nvlibglcom[1]="mkdir -p /usr/lib/xorg/modules/extensions"
nvlibglcom[2]="ln -s /usr/lib/nvidia/xorg/modules/extensions/libglx.so.\${pkgver} /usr/lib/xorg/modules/extensions/libglx.so.\${pkgver}"
nvlibglcom[3]="ln -s libglx.so.\${pkgver} /usr/lib/xorg/modules/extensions/libglx.so.1"
nvlibglcom[4]="ln -s libglx.so.\${pkgver} /usr/lib/xorg/modules/extensions/libglx.so"
nvlibglcom[5]="ln -s /usr/lib/nvidia/libGL.so.\${pkgver} /usr/lib/libGL.so.\${pkgver}"
nvlibglcom[6]="ln -s libGL.so.\${pkgver} /usr/lib/libGL.so.1"
nvlibglcom[7]="ln -s libGL.so.\${pkgver} /usr/lib/libGL.so"
nvlibglcom[8]="ln -s /usr/lib/nvidia/libEGL.so.\${pkgver} /usr/lib/libEGL.so.\${pkgver}"
nvlibglcom[9]="ln -s libEGL.so.\${pkgver} /usr/lib/libEGL.so.1"
nvlibglcom[10]="ln -s libEGL.so.\${pkgver} /usr/lib/libEGL.so"
nvlibglcom[11]="ln -s /usr/lib/nvidia/libGLESv1_CM.so.\${pkgver} /usr/lib/libGLESv1_CM.so.\${pkgver}"
nvlibglcom[12]="ln -s libGLESv1_CM.so.\${pkgver} /usr/lib/libGLESv1_CM.so.1"
nvlibglcom[13]="ln -s libGLESv1_CM.so.\${pkgver} /usr/lib/libGLESv1_CM.so"
nvlibglcom[14]="ln -s /usr/lib/nvidia/libGLESv2.so.\${pkgver} /usr/lib/libGLESv2.so.\${pkgver}"
nvlibglcom[15]="ln -s libGLESv2.so.\${pkgver} /usr/lib/libGLESv2.so.2"
nvlibglcom[16]="ln -s libGLESv2.so.\${pkgver} /usr/lib/libGLESv2.so"
rtrncommands=(${nvlibglcom[@]})
} # end nvlibgl
#
nvutilsComms () {
local nvutilscom=""
nvutilscom[0]="bsdtar -xf nvidia-persistenced-init.tar.bz2"
nvutilscom[1]="install -D -m755 nvidia_drv.so /usr/lib/xorg/modules/drivers/nvidia_drv.so"
nvutilscom[2]="install -D -m755 libglx.so.\$pkgver /usr/lib/nvidia/xorg/modules/extensions/libglx.so.\${pkgver}"
nvutilscom[3]="ln -s libglx.so.\${pkgver} /usr/lib/nvidia/xorg/modules/extensions/libglx.so"
nvutilscom[4]="install -D -m755 libGL.so.\${pkgver} /usr/lib/nvidia/libGL.so.\${pkgver}"
nvutilscom[5]="install -D -m755 libEGL.so.\${pkgver} /usr/lib/nvidia/libEGL.so.\${pkgver}"
nvutilscom[6]="install -D -m755 libGLESv1_CM.so.\${pkgver} /usr/lib/nvidia/libGLESv1_CM.so.\${pkgver}"
nvutilscom[7]="install -D -m755 libGLESv2.so.\${pkgver} /usr/lib/nvidia/libGLESv2.so.\${pkgver}"
nvutilscom[8]="install -D -m755 libnvidia-glcore.so.\${pkgver} /usr/lib/libnvidia-glcore.so.\${pkgver}"
nvutilscom[9]="install -D -m755 libnvidia-eglcore.so.\${pkgver} /usr/lib/libnvidia-eglcore.so.\${pkgver}"
nvutilscom[10]="install -D -m755 libnvidia-glsi.so.\${pkgver} /usr/lib/libnvidia-glsi.so.\${pkgver}"
nvutilscom[11]="install -D -m755 libnvidia-ifr.so.\${pkgver} /usr/lib/libnvidia-ifr.so.\${pkgver}"
nvutilscom[12]="install -D -m755 libnvidia-fbc.so.\${pkgver} /usr/lib/libnvidia-fbc.so.\${pkgver}"
nvutilscom[13]="install -D -m755 libnvidia-encode.so.\${pkgver} /usr/lib/libnvidia-encode.so.\${pkgver}"
nvutilscom[14]="install -D -m755 libnvidia-cfg.so.\${pkgver} /usr/lib/libnvidia-cfg.so.\${pkgver}"
nvutilscom[15]="install -D -m755 libnvidia-ml.so.\${pkgver} /usr/lib/libnvidia-ml.so.\${pkgver}"
nvutilscom[16]="install -D -m755 libvdpau_nvidia.so.\${pkgver} /usr/lib/vdpau/libvdpau_nvidia.so.\${pkgver}"
nvutilscom[17]="install -D -m755 tls/libnvidia-tls.so.\${pkgver} /usr/lib/libnvidia-tls.so.\${pkgver}"
nvutilscom[18]="install -D -m755 libcuda.so.\${pkgver} /usr/lib/libcuda.so.\${pkgver}"
nvutilscom[19]="install -D -m755 libnvcuvid.so.\${pkgver} /usr/lib/libnvcuvid.so.\${pkgver}"
nvutilscom[20]="install -D -m755 nvidia-debugdump /usr/bin/nvidia-debugdump"
nvutilscom[21]="install -D -m755 nvidia-xconfig /usr/bin/nvidia-xconfig"
nvutilscom[22]="install -D -m644 nvidia-xconfig.1.gz /usr/share/man/man1/nvidia-xconfig.1.gz"
nvutilscom[23]="install -D -m755 nvidia-settings /usr/bin/nvidia-settings"
nvutilscom[24]="install -D -m644 nvidia-settings.1.gz /usr/share/man/man1/nvidia-settings.1.gz"
nvutilscom[25]="install -D -m644 nvidia-settings.desktop /usr/share/applications/nvidia-settings.desktop"
nvutilscom[26]="install -D -m644 nvidia-settings.png /usr/share/pixmaps/nvidia-settings.png"
nvutilscom[27]="sed -e 's:__UTILS_PATH__:/usr/bin:' -e 's:__PIXMAP_PATH__:/usr/share/pixmaps:' -i /usr/share/applications/nvidia-settings.desktop"
nvutilscom[28]="install -D -m755 nvidia-bug-report.sh /usr/bin/nvidia-bug-report.sh"
nvutilscom[29]="install -D -m755 nvidia-smi /usr/bin/nvidia-smi"
nvutilscom[30]="install -D -m644 nvidia-smi.1.gz /usr/share/man/man1/nvidia-smi.1.gz"
nvutilscom[31]="install -D -m755 nvidia-cuda-mps-server /usr/bin/nvidia-cuda-mps-server"
nvutilscom[32]="install -D -m755 nvidia-cuda-mps-control /usr/bin/nvidia-cuda-mps-control"
nvutilscom[33]="install -D -m644 nvidia-cuda-mps-control.1.gz /usr/share/man/man1/nvidia-cuda-mps-control.1.gz"
nvutilscom[34]="install -D -m755 nvidia-modprobe /usr/bin/nvidia-modprobe"
nvutilscom[35]="install -D -m644 nvidia-modprobe.1.gz /usr/share/man/man1/nvidia-modprobe.1.gz"
nvutilscom[36]="install -D -m755 nvidia-persistenced /usr/bin/nvidia-persistenced"
nvutilscom[37]="install -D -m644 nvidia-persistenced.1.gz /usr/share/man/man1/nvidia-persistenced.1.gz"
nvutilscom[38]="install -D -m644 nvidia-persistenced-init/systemd/nvidia-persistenced.service.template /usr/lib/systemd/system/nvidia-persistenced.service"
nvutilscom[39]="sed -i 's/__USER__/nvidia-persistenced/' /usr/lib/systemd/system/nvidia-persistenced.service"
nvutilscom[40]="install -D -m644 nvidia-application-profiles-\${pkgver}-rc /usr/share/nvidia/nvidia-application-profiles-\${pkgver}-rc"
nvutilscom[41]="install -D -m644 nvidia-application-profiles-\${pkgver}-key-documentation /usr/share/nvidia/nvidia-application-profiles-\${pkgver}-key-documentation"
rtrncommands=(${nvutilscom[@]})
} #end nvutilsComms
#
openjdkComms () {
local openjdkcom=""
openjdkcom[0]="for subrepo in corba hotspot jdk jaxws jaxp langtools nashorn; do"
openjdkcom[1]="  ln -s ../\${subrepo}-\${_repo_ver} \${subrepo}"
openjdkcom[2]="done"
openjdkcom[3]="unset JAVA_HOME"
openjdkcom[4]="sh configure \\"
openjdkcom[5]="   --prefix=/opt \\"
openjdkcom[6]="   --with-update-version=\${_jdk_update} \\"
openjdkcom[7]="   --with-build-number=b\${_jdk_build} \\"
openjdkcom[8]='   --with-milestone="BLFS" \'
openjdkcom[9]="   --enable-unlimited-crypto \\"
openjdkcom[10]="   --with-zlib=system"
openjdkcom[11]="make DEBUG_BINARIES=true all"
openjdkcom[12]="find build/*/images/j2sdk-image -iname \\*.diz -delete"
openjdkcom[13]="cp -R build/*/images/j2sdk-image /opt/jdk8-openjdk"
openjdkcom[14]="tar -xf ../icedtea-web-1.6.tar.gz  \\"
openjdkcom[15]="        icedtea-web-1.6/javaws.png \\"
openjdkcom[16]="        --strip-components=1"
openjdkcom[17]="ln -v -nsf jdk8-openjdk /opt/jdk"
rtrncommands=(${openjdkcom[@]})
} # openjdkComms
#
openobexComms () {
local openobexcom=""
openobexcom[0]="cmake -DCMAKE_BUILD_TYPE=Release \\"
openobexcom[1]="      -DCMAKE_SKIP_RPATH=ON \\"
openobexcom[2]="      -DCMAKE_INSTALL_PREFIX=/usr \\"
openobexcom[3]="      -DCMAKE_INSTALL_SBINDIR=/usr/bin \\"
openobexcom[4]="      -DCMAKE_INSTALL_LIBDIR=/usr/lib \\"
openobexcom[5]="      -DCMAKE_INSTALL_UDEVRULESDIR=/usr/lib/udev/rules.d \\"
openobexcom[6]="      -DCMAKE_INSTALL_CMAKEBASEDIR=/usr/lib/cmake \\"
openobexcom[7]="      -Wno-dev                         \\"
openobexcom[8]="      ."
openobexcom[9]="make all"
openobexcom[10]="make install"
openobexcom[11]="cp apps/lib/*.h /usr/include/openobex/"
rtrncommands=(${openobexcom[@]})
} # end openobexComms
#
pyComms () {
local pycom=""
if [ "$pkgname" = "py2-xdg" ]; then
pycom[0]="python2 setup.py install --optimize=1"
elif [ "$pkgname" = "py3-xdg" ]; then
pycom[0]="python3 setup.py install --optimize=1"
elif [ "$pkgname" = docutils ]; then
pycom[0]="python2 setup.py build --build-lib=build/python2"
pycom[1]="find build/python2 -type f -exec \\"
pycom[2]="  sed -i '1s,^#! \?/usr/bin/\(env \|\)python$,#!/usr/bin/python2,' {} \;"
pycom[3]="python2 setup.py install --optimize=1"
elif [ "$pkgname" = "py2-mako" ]; then
pycom[0]="python2 setup.py build"
pycom[1]="python2 setup.py install --optimize=1"
pycom[2]="mv /usr/bin/mako-render /usr/bin/mako-render2"
elif [ "$pkgname" = "py2-markupsafe" ]; then
pycom[0]="python2 setup.py build"
pycom[1]="python2 setup.py install --optimize=1"
elif [ "$pkgname" = "py3-mako" ]; then
pycom[0]='sed -i "s:mako-render:&3:g" setup.py'
pycom[1]="python3 setup.py install --optimize=1"
elif [ "$pkgname" = "py3-markupsafe" ]; then
pycom[0]="python3 setup.py build"
pycom[1]="python3 setup.py install --optimize=1"
fi
rtrncommands=(${pycom[@]})
} #end pyComms
#
py2atspiComms () {
py2atspicom=""
py2atspicom[0]="sed '/AC_PATH_XTRA/d' -i configure.ac"
py2atspicom[1]="autoreconf -fi"
py2atspicom[2]="mkdir ../python2"
py2atspicom[3]="cd ../python2"
py2atspicom[4]="../\${srcdir}/configure --prefix=/usr --with-python=/usr/bin/python2"
py2atspicom[5]="make"
py2atspicom[6]="make install"
rtrncommands=(${py2atspicom[@]})
} # end py2atspiComms
#
py2dbusComms () {
local py2dbuscom=""
py2dbuscom[0]="PYTHON=python2 ./configure --prefix=/usr \\"
py2dbuscom[1]="                            --docdir=/usr/share/doc/dbus-python-1.2.0"
py2dbuscom[2]="make"
py2dbuscom[3]="make install"
rtrncommands=(${py2dbuscom[@]})
} # end py2dbusComms
#
py3dbusComms () {
local py3dbuscom=""
py3dbuscom[0]="PYTHON=python3 ./configure --prefix=/usr \\"
py3dbuscom[1]="                            --docdir=/usr/share/doc/dbus-python-1.2.0"
py3dbuscom[2]="make"
py3dbuscom[3]="make install"
rtrncommands=(${py3dbuscom[@]})
} # end py3dbusComms
#
py2beakerComms () {
local py2beakercom=""
py2beakercom[0]="sed -i 's#/usr/bin/python#/usr/bin/python2#' beaker/crypto/pbkdf2.py"
py2beakercom[1]="python2 setup.py build"
py2beakercom[2]="python2 setup.py install --optimize=1"
rtrncommands=(${py2beakercom[@]})
} # end py2beakerComms
#
py3beakerComms () {
local py3beakercom=""
py3beakercom[0]="sed -i 's#/usr/bin/python#/usr/bin/python3#' beaker/crypto/pbkdf2.py"
py3beakercom[1]="python3 setup.py build"
py3beakercom[2]="python3 setup.py install --optimize=1"
rtrncommands=(${py3beakercom[@]})
} # end py3beakerComms
#
py2setuptoolsComms () {
local py2setuptoolscom=""
py2setuptoolscom[0]="sed -i -e 's|^#\!.*/usr/bin/env python|#!/usr/bin/env python2|' setuptools/command/easy_install.py"
py2setuptoolscom[1]="python2 setup.py build"
py2setuptoolscom[2]="python2 setup.py install --prefix=/usr --optimize=1 --skip-build"
py2setuptoolscom[3]="rm /usr/bin/easy_install"
rtrncommands=(${py2setuptoolscom[@]})
} # end py2setuptoolsComms
#
py3setuptoolsComms () {
local py3setuptoolscom=""
py3setuptoolscom[0]="sed -i -e 's|^#\!.*/usr/bin/env python|#!/usr/bin/env python3|' setuptools/command/easy_install.py"
py3setuptoolscom[1]="python3 setup.py build"
py3setuptoolscom[2]="python3 setup.py install --prefix=/usr --optimize=1 --skip-build"
rtrncommands=(${py3setuptoolscom[@]})
} # end py3setuptoolsComms
#
pysolfcComms () {
local pysolfccom=""
pysolfccom[0]="find . -name \\*.py -exec sed -i -e 's|#!/usr/bin/env python|#!/usr/bin/env python2|' {} \\;"
pysolfccom[1]="python2 setup.py install --optimize=1"
pysolfccom[2]="ln -sv pysol.py /usr/bin/pysol"
rtrncommands=(${pysolfccom[@]})
} # end pysolssComms
#
pysolssComms () {
local pysolsscom=""
pysolsscom[0]="cd src"
pysolsscom[1]="./configure"
pysolsscom[2]="make PYTHON=python2"
pysolsscom[3]="python2 setup.py install --optimize=1"
rtrncommands=(${pysolsscom[@]})
} # end pysolssComms
#
sdl2Comms () {
local sdl2com=""
sdl2com[0]="./configure --prefix=/usr \\"
sdl2com[1]="            --enable-sdl-dlopen \\"
sdl2com[2]="            --disable-arts --disable-esd --disable-nas \\"
sdl2com[3]="            --enable-alsa --enable-pulseaudio-shared \\"
sdl2com[4]="            --enable-video-wayland \\"
sdl2com[5]="            --disable-rpath"
sdl2com[6]="make"
sdl2com[7]="make install"
rtrncommands=(${sdl2com[@]})
} # end sdl2Comms
#
speechdComms () {
local speechdcom=""
speechdcom[0]="sed -i 's/cicero //g' configure.ac"
speechdcom[1]="sed -i 's/sd_cicero//g' src/modules/Makefile.am"
speechdcom[2]="autoreconf -vi"
speechdcom[3]="./configure --prefix=/usr \\"
speechdcom[4]="            --sysconfdir=/etc \\"
speechdcom[5]="            --enable-shared \\"
speechdcom[6]="            --without-flite"
speechdcom[7]="make"
speechdcom[8]="make install"
rtrncommands=(${speechdcom[@]})
} # end speechdComms
#
squidComms () {
local squidcom=""
squidcom[0]="./configure \\"
squidcom[1]="    --prefix=/usr \\"
squidcom[2]="    --sbindir=/usr/bin \\"
squidcom[3]="    --datadir=/usr/share/squid \\"
squidcom[4]="    --sysconfdir=/etc/squid \\"
squidcom[5]="    --libexecdir=/usr/lib/squid \\"
squidcom[6]="    --localstatedir=/var \\"
squidcom[7]="    --with-logdir=/var/log/squid \\"
squidcom[8]="    --with-pidfile=/run/squid.pid \\"
squidcom[9]="    --enable-auth \\"
squidcom[10]="    --enable-auth-basic \\"
squidcom[11]="    --enable-auth-ntlm \\"
squidcom[12]="    --enable-auth-digest \\"
squidcom[13]="    --enable-auth-negotiate \\"
squidcom[14]='    --enable-removal-policies="lru,heap" \'
squidcom[15]='    --enable-storeio="aufs,ufs,diskd" \'
squidcom[16]="    --enable-delay-pools \\"
squidcom[17]="    --enable-arp-acl \\"
squidcom[18]="    --with-openssl \\"
squidcom[19]="    --enable-snmp \\"
squidcom[20]="    --enable-linux-netfilter \\"
squidcom[21]="    --enable-ident-lookups \\"
squidcom[22]="    --enable-useragent-log \\"
squidcom[23]="    --enable-cache-digests \\"
squidcom[24]="    --enable-referer-log \\"
squidcom[25]="    --enable-htcp \\"
squidcom[26]="    --enable-carp \\"
squidcom[27]="    --enable-epoll \\"
squidcom[28]="    --with-large-files \\"
squidcom[29]="    --with-default-user=proxy \\"
squidcom[30]="    --enable-async-io \\"
squidcom[31]="    --enable-truncate \\"
squidcom[32]="    --enable-icap-client \\"
squidcom[33]="    --enable-ssl-crtd \\"
squidcom[34]="    --disable-arch-native \\"
squidcom[35]="    --disable-strict-error-checking"
squidcom[36]="make"
squidcom[37]="make install"
squidcom[38]="cp ${blfsBuildFiles}/${blfsfiles}/conf-files/squid.conf /etc/squid"
squidcom[39]='cat > /etc/pam.d/squid << "SQUIDEOF"'
squidcom[40]="auth              required        pam_unix.so"
squidcom[41]="account           required        pam_unix.so"
squidcom[42]="SQUIDEOF"
rtrncommands=(${squidcom[@]})
} # end squidComms
#
systemdComms () {
local systemdcom=""
systemdcom[0]="patch -Np1 -i ../systemd-${SYSTEMD_VERSION}-compat-3.patch"
systemdcom[1]="./configure --prefix=/usr \\"
systemdcom[2]="            --libexecdir=/usr/lib \\"
systemdcom[3]="            --localstatedir=/var \\"
systemdcom[4]="            --sysconfdir=/etc \\"
systemdcom[5]="            --libdir=/usr/lib \\"
systemdcom[6]="            --bindir=/usr/bin \\"
systemdcom[7]="            --enable-introspection \\"
systemdcom[8]="            --enable-gtk-doc \\"
systemdcom[9]="            --disable-audit \\"
systemdcom[10]="            --with-dbuspolicydir=/etc/dbus-1/system.d \\"
systemdcom[11]="            --disable-ima \\"
systemdcom[12]='            --with-firmware-path="/usr/lib/firmware" \'
systemdcom[13]="            --docdir=/usr/share/doc/systemd-${SYSTEMD_VERSION} \\"
systemdcom[14]="            --disable-static"
systemdcom[15]="make"
systemdcom[16]="make install"
systemdcom[17]='sed -i "s@0775 root lock@0755 root root@g" /usr/lib/tmpfiles.d/legacy.conf'
systemdcom[18]="rm -r /usr/lib/rpm"
systemdcom[19]="if [ ! -d /etc/pam.d ]; then"
systemdcom[20]="  install -m755 -d /etc/pam.d"
systemdcom[21]="fi"
systemdcom[22]='cat >> /etc/pam.d/system-session << "EOF"'
systemdcom[23]="# Begin Systemd addition"
systemdcom[24]="session   required    pam_loginuid.so"
systemdcom[25]="-session  optional    pam_systemd.so"
systemdcom[26]="# End Systemd addition"
systemdcom[27]="EOF"
systemdcom[28]='cat > /etc/pam.d/systemd-user << "EOF"'
systemdcom[29]="# Begin /etc/pam.d/systemd-user"
systemdcom[30]="account  required pam_access.so"
systemdcom[31]="account  include  system-account"
systemdcom[32]="session  required pam_env.so"
systemdcom[33]="session  required pam_limits.so"
systemdcom[34]="session  include  system-session"
systemdcom[35]="auth     required pam_deny.so"
systemdcom[36]="password required pam_deny.so"
systemdcom[37]="# End /etc/pam.d/systemd-user"
systemdcom[38]="EOF"
rtrncommands=(${systemdcom[@]})
} # end systemdComms
#
v4lComms () {
local v4lcom=""
v4lcom[0]="./configure --prefix=/usr --sysconfdir=/etc --sbindir=/usr/bin"
v4lcom[1]="make"
v4lcom[2]="MAKEFLAGS="-j1" make install"
v4lcom[3]="rm /usr/bin/ivtv-ctl"
rtrncommands=(${v4lcom[@]})
} # v4lComms
#
webkitgtkComms () {
local webkitgtkcom=""
webkitgtkcom[0]="sed -i '/generate-gtkdoc --rebase/s:^:# :' GNUmakefile.in"
webkitgtkcom[1]="sed -i '/TARGET_WAYLAND_TRUE/d' GNUmakefile.in"
webkitgtkcom[2]="mkdir build3"
webkitgtkcom[3]="cd build3"
webkitgtkcom[4]="../configure --prefix=/usr --enable-introspection \\"
webkitgtkcom[5]="             --libexecdir=/usr/lib/webkitgtk \\"
webkitgtkcom[6]="             --disable-gtk-doc"
webkitgtkcom[7]="make"
webkitgtkcom[8]="make install"
webkitgtkcom[9]="rm -rf /usr/share/gtk-doc/html/webkit{,dom}gtk-3.0"
webkitgtkcom[10]="if [ -e /usr/share/gtk-doc/html/webkitdomgtk ]; then"
webkitgtkcom[11]="  mv -v /usr/share/gtk-doc/html/webkitdomgtk{,-3.0}"
webkitgtkcom[12]="fi"
webkitgtkcom[13]="if [ -e /usr/share/gtk-doc/html/webkitgtk ]; then"
webkitgtkcom[14]="  mv -v /usr/share/gtk-doc/html/webkitgtk{,-3.0}"
webkitgtkcom[15]="fi"
rtrncommands=(${webkitgtkcom[@]})
} # end webkitgtkComms
#
westonComms () {
local westoncom=""
westoncom[0]="./configure --prefix=/usr \\"
westoncom[1]="            --libexecdir=/usr/lib/weston \\"
westoncom[2]="            --enable-libinput-backend \\"
westoncom[3]="            --enable-demo-clients-install"
westoncom[4]="make"
westoncom[5]="make install"
rtrncommands=(${westoncom[@]})
} # end westonComms
#
x264Comms () {
local x264com=""
x264com[0]="./configure --enable-shared --enable-pic"
x264com[1]="make"
x264com[2]="make bindir=/usr/bin \\"
x264com[3]="     libdir=/usr/lib \\"
x264com[4]="     includedir=/usr/include \\"
x264com[5]="     install"
rtrncommands=(${x264com[@]})
} # end x264Comms
#
x265Comms () {
local x265com=""
x265com[0]="cd multicoreware-x265-*"
x265com[1]="patch -Np1 -i ../x265-1.7-fix-slowness-with-gcc-5.1.patch"
x265com[2]="cd build/linux"
x265com[3]='[ "$(uname -m)" = x86_64 ] && LDFLAGS+=",-z,noexecstack"'
x265com[4]='cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=/usr ../../source'
x265com[5]="make"
x265com[6]="make install"
rtrncommands=(${x265com[@]})
} # end x265Comms
#
xorgservComms () {
local xorgservcom=""
xorgservcom[0]="patch -Np1 -i ../xorg-server-1.17.2-add_prime_support-1.patch"
xorgservcom[1]="autoreconf -fvi"
xorgservcom[2]="./configure --prefix=/usr                       \\"
xorgservcom[3]="            --enable-ipv6                       \\"
xorgservcom[4]="            --enable-dri                        \\"
xorgservcom[5]="            --enable-dmx                        \\"
xorgservcom[6]="            --enable-xvfb                       \\"
xorgservcom[7]="            --enable-xnest                      \\"
xorgservcom[8]="            --enable-composite                  \\"
xorgservcom[9]="            --enable-xcsecurity                 \\"
xorgservcom[10]="            --enable-xorg                       \\"
xorgservcom[11]="            --enable-glamor                     \\"
xorgservcom[12]="            --enable-xwayland                   \\"
xorgservcom[13]="            --enable-glx-tls                    \\"
xorgservcom[14]="            --enable-config-udev                \\"
xorgservcom[15]="            --enable-systemd-logind             \\"
xorgservcom[16]="            --enable-suid-wrapper               \\"
xorgservcom[17]="            --disable-install-setuid            \\"
xorgservcom[18]="            --enable-record                     \\"
xorgservcom[19]="            --disable-xfbdev                    \\"
xorgservcom[20]="            --disable-xfake                     \\"
xorgservcom[21]="            --disable-static                    \\"
xorgservcom[22]="            --libexecdir=/usr/lib/xorg-server   \\"
xorgservcom[23]="            --sysconfdir=/etc                   \\"
xorgservcom[24]="            --localstatedir=/var                \\"
xorgservcom[25]="            --with-xkb-path=/usr/share/X11/xkb  \\"
xorgservcom[26]="            --with-xkb-output=/var/lib/xkb      \\"
xorgservcom[27]="            --with-fontrootdir=/usr/share/fonts \\"
xorgservcom[28]="            --with-sha1=libgcrypt"
xorgservcom[29]="make"
xorgservcom[30]="make install"
xorgservcom[31]="install -m755 -d /etc/X11/xorg.conf.d"
xorgservcom[32]='cat >> /etc/sysconfig/createfiles << "EOF"'
xorgservcom[33]="/tmp/.ICE-unix dir 1777 root root"
xorgservcom[34]="/tmp/.X11-unix dir 1777 root root"
xorgservcom[35]="EOF"
rtrncommands=(${xorgservcom[@]})
} # end xorgservComms
#
xorgwacomnosysdComms () {
local xwacnosysdcom=""
xwacnosysdcom[0]="./configure \$XORG_CONFIG --with-systemd-unit-dir=no"
xwacnosysdcom[1]="make"
xwacnosysdcom[2]="make install"
rtrncommands=(${xwacnosysdcom[@]})
} # end xorgwacomnosysdComms
#
xorgwacomComms () {
local xorgwacomcom=""
xorgwacomcom[0]="./configure \$XORG_CONFIG                                \\"
xorgwacomcom[1]="            --with-udev-rules-dir=/usr/lib/udev/rules.d     \\"
xorgwacomcom[2]="            --with-systemd-unit-dir=/usr/lib/systemd/system"
xorgwacomcom[3]="make"
xorgwacomcom[4]="make install"
rtrncommands=(${xorgwacomcom[@]})
} # end xorgwacomComms
#
yajlComms () {
local yajlcom=""
yajlcom[0]="cmake -DCMAKE_INSTALL_PREFIX=/usr ."
yajlcom[1]="make"
yajlcom[2]="make install"
rtrncommands=(${yajlcom[@]})
} # end yajlComms
#
GetInternalCommands () {
# $1 is the function name that creates the commands
# get access to the build array
rtrnBuild=""
getBuild
return_val=$?
if [ $return_val -eq $RETURN_PARAM ]; then # no build file present
  return $RETURN_PARAM
else
  buildScripts=(${rtrnBuild[@]})
  declare -a rtrncommands=""
  eval $1
  commandScripts=(${rtrncommands[@]})
  numclines=${#commandScripts[@]}
  countg=0 # initialize commands counter
  cont=0
  for line in "${commandScripts[@]}"
  do
    case "$line" in
       sed*)
# test if sed has continuation line
         case "$line" in
           *\\)
             cacheit[cont++]="$line"
             ((countg++))
           ;;
           *)
             echo "$line"
             ((countg++))
           ;;
         esac
       ;;
       *configure*|*autogen.sh*)
         break
       ;;
       cmake*) # configure commands for libproxy, mariadb, x265
         break
       ;;
       *bootstrap*) # boost
         break
       ;;
       make*) # no configure script
         break
       ;;
       *"setup.py build"*|*"setup.py install"*) # python modules
         break
       ;;
       *"build/gyp_chromium"*) # chromium
         break
       ;;
       *)
         case "$line" in
            *\\) # if a continuation line then store in cache
             cacheit[cont++]="$line"
             ((countg++))
            ;;
            *)
             if [ $cont -gt 0 ]; then # continuation line found
               for (( l=0; l<$cont; l++ )); do
                 echo "${cacheit[l]}"
               done
               echo "$line"
               cont=0
               ((countg++)) # count # of commands written to output
               [ $countg -eq $numclines ] && return 0
             else
               echo "$line"
               ((countg++)) # count # of commands written to output
               [ $countg -eq $numclines ] && return 0
             fi
            ;;
          esac
       ;;
    esac
  done
#
  rtr=""
  combineScripts commandScripts[@] buildScripts[@]
  scriptOut=(${rtr[@]})
  for t in "${scriptOut[@]}"; do
    echo $t
  done
  if [ $countg -ne $numclines ]; then # output remaining commands
    contin=false
    for (( k=$countg; k<$numclines; k++ )); do
      if [[ "${commandScripts[k]}" == install* ]]; then #don't install docs
        case ${commandScripts[k]} in
            *\\) # continuation line
                contin=true
            ;;
            */usr/share/doc*) # doc so don't write
                continue
            ;;
            *) # not a doc so write it
                echo ${commandScripts[k]}
            ;;
        esac
      else
        if $contin; then
          if [[ "${commandScripts[k]}" == *\\ ]]; then # more continuation
            :
          else
            contin=false
          fi
        else
          echo ${commandScripts[k]}
        fi
      fi
    done
  fi
  return 0
fi
} # end GetInternalCommands
#
CreateBuildDirasroot () {  #1 is the build dir
cat >> $Output << "EOF"
CreateBuildDirasroot () {
BuildDirasroot=$1
if [ ! -e $BuildDirasroot ]; then install -d $BuildDirasroot; fi
cd $BuildDirasroot
}
EOF
} # end CreateBuildDirasroot
#
Header () {
echo "writing the script to '$Output'"
cat > $Output << "EOF"
#!/bin/bash
#
if [ $UID -ne 0 ]; then echo Please run this script as root. ; exit 1; fi
#
EOF
if [ "$Section" == blfs ]; then
  cat >> $Output << "EOF"
numparams=$#
declare -a bsToInstall=( $@ )
EOF
else
echo "RETURN_PARAM=$RETURN_PARAM # exit with an error
RETURN_NOTSET=$RETURN_NOTSET # no dependencies set
RETURN_DEPNOTMET=$RETURN_DEPNOTMET # package dependency not met
RETURN_ALLDEPSMET=$RETURN_ALLDEPSMET # all dependencies met" >> $Output
fi
echo "me=\$0
LFS=$LFS" >> $Output
if [ "$BOOK_VERSION" = KBLFS ]; then
  gitinfo=$(echo $GITINFO | awk 'BEGIN{ RS = "|" }; {print $0}')
  echo "GITINFO=\"$gitinfo\"" >> $Output
else
  echo "SVNINFO=\"$SVNINFO\"" >> $Output
fi
echo "srcrootdir=$srcrootdir
blfsfiles=${blfsBuildFiles}/${blfsfiles}
BuildLog=$BuildLog
build=$build # name of the build file for each package
Section=$cursection
PKGUSERDIR=$PKGUSERDIR
SYSTEMD=$SYSTEMD
AS_ROOT=$as_root
INSTALLPKG=true # by default install the packages
if [ \"\$1\" = noinstall ]; then INSTALLPKG=false; fi # do not install, look at deps. only
useDESTDIR=$useDESTDIR" >> $Output
if $as_root; then CreateBuildDirasroot >> $Output; fi
} # end Header
#
cleanPkgDir () {
    cat >> $Output << "EOF"
cleanpkgdir () {
# $1 is the dir to clean
# $2 is the pkg name
local dirtoClean=$1
local pkgtoClean=$2
rm -rf ${dirtoClean}/*.err
rm -rf ${dirtoClean}/*.log
#rm -rf ${dirtoClean}/.${pkgtoClean}
#rm -rf ${dirtoClean}/*.gz
#rm -rf ${dirtoClean}/*.xz
#rm -rf ${dirtoClean}/*.bz2
#rm -rf ${dirtoClean}/*.tgz
#rm -rf ${dirtoClean}/*.zip
#rm -rf ${dirtoClean}/*.patch
if [ -d ${dirtoClean}/.subversion ]; then rm -rf ${dirtoClean}/.subversion; fi
} # end cleanpkgdir
EOF
} # end cleanPkgDir
#
updateSection () {
cat >> $Output << "EOF"
updateSection () {
sed -e '/PkgUserDir=\/usr\/src/d' \
    -e "/complete/i PkgUserDir=\/usr\/src\/${1}" \
    -i /etc/pkgusr/bash_profile
} # end updateSection
EOF
} # end updateSection
#
pkguser () {
cat >> $Output << "EOF"
pkguser_ () {
# make sure pkgusers can write to the logfile
chgrp install $BuildLog
chmod 664 $BuildLog
#
cat > /etc/pkgusr/bash_profile << "BashProfile"
export PATH=/usr/lib/pkgusr:/bin:/usr/bin:/opt/jdk/bin:/opt/ant/bin:/opt/qt4/bin
export PROMPT_COMMAND='PS1="package \u:"$(pwd)"> "'
cd
EOF
echo "PkgUserDir=${PKGUSERDIR}/${cursection}" >> $Output
cat >> $Output << "EOF"
complete -o default -o nospace -A user su finger pinky
export PkgName=$LOGNAME
EOF
if $useDESTDIR; then
  echo "if [ -e \${PkgUserDir}/\${LOGNAME}/$build -a ! -e ~/.\${LOGNAME}-destdir ]; then
  cd
  bash \${PkgUserDir}/\${LOGNAME}/$build" >> $Output
else
  echo "if [ -e \${PkgUserDir}/\${LOGNAME}/$build -a ! -e ~/.\${LOGNAME} ]; then
  cd
  bash \${PkgUserDir}/\${LOGNAME}/$build" >> $Output
fi
cat >> $Output << "EOF"
  exit
fi
BashProfile
install -v -m0755 -d ${PkgUserDir}/${LOGNAME}
} # end of pkguser_
EOF
} # end of pkguser
#
updatePkgUser () {
# this function is called immediately before a core package that is to be reinstalled.
# these are shadow, eudev with gudev, systemd with gudev, dbus-launch and libcap with pam support
echo "updatePkgUser_ () {" >>$Output
cat >> $Output << "EOF"
cat > /etc/pkgusr/bash_profile << "BashProfile"
export PATH=/usr/lib/pkgusr:/bin:/usr/bin:/opt/jdk/bin:/opt/ant/bin:/opt/qt4/bin
export PROMPT_COMMAND='PS1="package \u:"$(pwd)"> "'
cd
EOF
echo "PkgUserDir=${PKGUSERDIR}/${cursection}
useDESTDIR=$useDESTDIR" >> $Output
cat >> $Output << "EOF"
complete -o default -o nospace -A user su finger pinky
PkgName=$LOGNAME
buildit=false
case $PkgName in
  systemd|eudev)
      if $useDESTDIR; then
        if [ -e ${PkgUserDir}/${PkgName}/build -a ! -e ~/.${PkgName}_gudev-destdir ]; then
          buildit=true
        fi
      else
        if [ -e ${PkgUserDir}/${PkgName}/build -a ! -e ~/.${PkgName}_gudev ]; then
          buildit=true
        fi
      fi
  ;;
  dbus)
      if $useDESTDIR; then
        if [ -e ${PkgUserDir}/${PkgName}/build -a ! -e ~/.${PkgName}_launch-destdir ]; then
          buildit=true
        fi
      else
        if [ -e ${PkgUserDir}/${PkgName}/build -a ! -e ~/.${PkgName}_launch ]; then
          buildit=true
        fi
      fi
  ;;
  *)
      if $useDESTDIR; then
        if [ -e ${PkgUserDir}/${PkgName}/build -a ! -e ~/.${PkgName}-destdir ]; then
          buildit=true
        fi
      else
        if [ -e ${PkgUserDir}/${PkgName}/build -a ! -e ~/.${PkgName} ]; then
          buildit=true
        fi
      fi
  ;;
esac
if $buildit; then
  cd
EOF
echo "  bash \${PkgUserDir}/\${PkgName}/$build"  >> $Output
cat >> $Output << "EOF"
  exit
fi
BashProfile
} # end updatePkgUser_
EOF
} # end updatePkgUser
#
delSrcFile () {
echo "cd \$curdir
cd ..
rm -rf \$curdir
rm -rf .cache"
} # end of delSrcFile
#
sedCups_setup () {
    cat >> $Output << "EOF"
sedCups_setup () {
# set up the sed statement for the cups install_commands
if [ -f ${blfsfiles}/conf-files/sedCupsInstall.conf ]; then
  . ${blfsfiles}/conf-files/sedCupsInstall.conf # source them
else
  echo "sedCupsInstall.conf not found in ${blfsfiles}/conf-files/"
  echo "Place it there to continue"
  exit 1
fi
} # end sedCups_setup
EOF
} # end sedCups_setup
#
php_setup () {
    cat >> $Output << "EOF"
php_setup () {
# setup the configure variables _phpconfig and _phpextensions for php
#
# to use them do:
#./configure ${_phpconfig} ${_phpextensions}
if [ -f ${blfsfiles}/conf-files/php.conf ]; then
  . ${blfsfiles}/conf-files/php.conf
else
  echo "php.conf not found in ${blfsfiles}/conf-files/"
  echo "Place it there to continue"
  exit 1
fi
} # end php_setup
EOF
} # end php_setup
#
createPkgfile () {
cat >> $Output << "EOF"
createPkgfile () {
# get dir names, make the package tar file and delete the build directories
# if present, $1 is the version number to use, bypassing SetPkgVers
# if there is no version (e.g. x264) then $1 is set to "none"
local listDIRS
local pkgfilename
local trimto=".tar"
#
pushd ${PkgUserDir}/${PkgName} # make sure in the right dir
listDIRS=$(ls -l --time-style="long-iso" . | egrep '^d' | awk '{print $8}')
# check the dirs present so as not to delete any needed ones
local chknum=( $listDIRS )
for (( i=0; i<${#chknum[@]}; i++ )); do
  if [[ ${chknum[i]} != etc && ${chknum[i]} != usr && ${chknum[i]} != var && ${chknum[i]} != opt ]]; then
    echo "Directory ${chknum[i]} will be included in the package file"
    echo "Is this correct? (Y/n)"
    read reply
      case $reply in
         [yY]|[yY][Ee][Ss])
              echo "okay continuing"
         ;;
         [nN]|[nN][Oo])
              echo "Then you need to move it out of ${PkgUserDir}/${PkgName}"
              echo "Exiting now"
              exit 1
         ;;
         *)
              echo "okay continuing"
         ;;
      esac
  fi
done
# add the .INSTALL file if present
if [ -e .INSTALL ]; then
  listDIRS="$listDIRS .INSTALL"
fi
# add certdata.txt for cacerts
if [ -e certdata.txt ]; then
  listDIRS="$listDIRS certdata.txt"
fi
rtrnpkgname=""
case $SrcName in
   apache-ant-)
      trimto="-src"
   ;;
   cdparanoia-III-)
      trimto=".src"
   ;;
   espeak-)
      trimto="-source"
   ;;
   firefox-|thunderbird-)
      trimto=".source"
   ;;
   icu4c-)
      trimto="-src"
   ;;
   jasper-|docbook-xml-)
      trimto=".zip"
   ;;
   junit4_)
      trimto=".orig"
   ;;
   LVM2.|openldap-|pa_stable_v|sgml-common-|xterm-|zip)
      trimto=".tgz"
   ;;
   openobex-)
      trimto="-Source"
   ;;
   tcl8.)
      trimto="-src"
   ;;
esac
if [ ! -z $1 ]; then
  if [ "$1" = none ]; then
    case $SrcName in
       "jdk-8u"*|xf86-video-intel-)
          pkgfilename="${SrcName}x86_64.pkg.tar.xz"
       ;;
       *)
          pkgfilename="${SrcName}-x86_64.pkg.tar.xz"
       ;;
    esac
  else
    pkgfilename="${SrcName}${1}-x86_64.pkg.tar.xz"
  fi
else # get the package version
  SetPkgVers $SrcName $trimto
  pkgfilename="${rtrnpkgname}-x86_64.pkg.tar.xz"
fi
echo "pkgfilename is $pkgfilename"
tar -cJf $pkgfilename $listDIRS
if ! $AS_ROOT; then chown $PkgName:$PkgName $pkgfilename; fi
# ask to delete all the dirs in current directory
#for dir in $listDIRS; do
#  if [ -d $dir ]; then
#    echo "Delete dir $dir? (Y/n)"
#  elif [ -f $dir ]; then
#    echo "Delete file $dir? (Y/n)"
#  fi
#  read reply
#    case $reply in
#         [yY]|[yY][Ee][Ss])
#              echo "okay deleting $dir"
#              rm -rf $dir
#         ;;
#         [nN]|[nN][Oo])
#              echo "okay continuing"
#         ;;
#         *)
#              echo "okay deleting $dir"
#              rm -rf $dir
#         ;;
#    esac
#done
popd
} # end createPkgfile
#
EOF
} # end createPkgfile
#
Function () {
echo "${FuncName}_ () {
PkgName=$pkgname
SrcName=$srcname
cursection=$cursection
PkgUserDir=${PKGUSERDIR}/${cursection}" >> $Output
if $as_root; then
  echo "CUR_DIR=\${PkgUserDir}/\${PkgName}" >> $Output 
  case $pkgname in
    eudev|systemd|dbus)
      echo "sourcedir=${PKGUSERDIR}/${cursection}/${pkgname}" >> $Output
    ;;
    shadow|libcap)
      echo "sourcedir=${srcrootdir}/security" >> $Output
    ;;
    *)
      echo "sourcedir=${srcrootdir}/${cursection}" >> $Output
    ;;
  esac
fi
#
case $pkgname in
   blfs-btscrpts)
      cat >> $Output << "EOF"
for (( i=0; i<$numparams; i++ )); do
  btscrpt=${bsToInstall[i]}
EOF
   ;;
esac
#
echo "starttime=\$( date +%s )" >> $Output
# check whether already installed
# if DESTDIR=yes, then check if the package file is present instead
case $pkgname in
   blfs-btscrpts)
      cat >> $Output << "EOF"
  if [ -e "${PkgUserDir}/${PkgName}/.${btscrpt}" ]; then
    echo "skipping ${PkgName}/${btscrpt}"
    return
  fi
EOF
   ;;
   dbus) # check for name .dbus_launch or dbus-destdir if DESTDIR=yes
      if $useDESTDIR; then
        cat >> $Output << "EOF"
if [ -e "${PkgUserDir}/${PkgName}/.${PkgName}-destdir" ]; then
  echo "skipping DESTDIR install of $PkgName - package file already installed"
  return
fi
EOF
      else
        cat >> $Output << "EOF"
if [ -e "${PkgUserDir}/${PkgName}/.${PkgName}_launch" ]; then
  echo "skipping ${PkgName}"
  return
fi
EOF
      fi
   ;;
   eudev) # check for name .eudev_gudev
      cat >> $Output << "EOF"
if [ -e "${PkgUserDir}/${PkgName}/.${PkgName}_gudev" ]; then
  echo "skipping ${PkgName}"
  return
fi
EOF
   ;;
   systemd) # check for name .systemd_gudev or systemd-destdir if DESTDIR=yes
      if $useDESTDIR; then
        cat >> $Output << "EOF"
if [ -e "${PkgUserDir}/${PkgName}/.${PkgName}-destdir" ]; then
  echo "skipping DESTDIR install of $PkgName - package file already installed"
  return
fi
EOF
      else
        cat >> $Output << "EOF"
if [ -e "${PkgUserDir}/${PkgName}/.${PkgName}_gudev" ]; then
  echo "skipping ${PkgName}"
  return
fi
EOF
      fi
   ;;
   *)
      if $useDESTDIR; then
        cat >> $Output << "EOF"
if [ -e "${PkgUserDir}/${PkgName}/.${PkgName}-destdir" ]; then
  echo "skipping DESTDIR install of $PkgName - package file already installed"
  return
fi
EOF
      else
        cat >> $Output << "EOF"
if [ -e "${PkgUserDir}/${PkgName}/.${PkgName}" ]; then
  echo "skipping $PkgName"
  return
fi
EOF
      fi
   ;;
esac
# check for dependencies
case $pkgname in
   firewall|blfs-btscrpts) # no need to check dependencies
   echo "BuildScript=true" >> $Output
   ;;
   *)
cat >> $Output << "EOF"
# check for dependencies
BuildScript=false
FuncName=$( echo $PkgName | sed -e s/-//g -e s/_//g )
DepRtrn=""
PkgDepend
return_val=$?
if [[ $return_val -eq $RETURN_PARAM || $return_val -eq $RETURN_NOTSET ]]; then
  if $INSTALLPKG; then
    if $useDESTDIR; then
      echo "No dependencies - building script for $PkgName using DESTDIR"
    else
      echo "No dependencies - building script for $PkgName"
    fi
  fi
  BuildScript=true
elif [[ $return_val -eq 0 ]]; then # test if dependencies met
EOF
# next case for xfce
    case $pkgname in
      clutter|glib-networking|grilo-plugins|gst-plgns-good0|gtkplus3|libdrm|mesalib|webkitgtk)
          if [ "$GNOME_OR_XFCE" = xfce ]; then
            cat >> $Output << "EOF"
  rtrPlessArray=""
EOF
            case $pkgname in
              clutter) # need to delete 3 elements from the deps array
                cat >> $Output << "EOF"
  delElementPattern DepRtrn[@] "libraries/libinput"
  unset DepRtrn
  DepRtrn=(${rtrPlessArray[@]})
  rtrPlessArray=""
  delElementPattern DepRtrn[@] "libraries/libxkbcommon"
  unset DepRtrn
  DepRtrn=(${rtrPlessArray[@]})
  rtrPlessArray=""
  delElementPattern DepRtrn[@] "libraries/wayland"
EOF
              ;;
              glib-networking)
                cat >> $Output << "EOF"
  delElementPattern DepRtrn[@] "gnomeplatform/gset-dsktp-schms"
EOF
              ;;
              grilo-plugins)
                cat >> $Output << "EOF"
  delElementPattern DepRtrn[@] "gnomeplatform/totem-pl-parser"
EOF
              ;;
              gst-plgns-good0)
                cat >> $Output << "EOF"
  delElementPattern DepRtrn[@] "gnomeplatform/gconf"
EOF
              ;;
              gtkplus3) # delete 2 array elements
                cat >> $Output << "EOF"
  delElementPattern DepRtrn[@] "libraries/libxkbcommon"
  unset DepRtrn
  DepRtrn=(${rtrPlessArray[@]})
  rtrPlessArray=""
  delElementPattern DepRtrn[@] "libraries/wayland"
EOF
              ;;
              libdrm) # don't need libpciaccess
                cat >> $Output << "EOF"
  delElementPattern DepRtrn[@] "libraries/libpciaccess"
EOF
              ;;
              mesalib) # don't need wayland
                cat >> $Output << "EOF"
  delElementPattern DepRtrn[@] "libraries/wayland"
EOF
              ;;
              webkitgtk)
                if [ "$SYSTEMD" = yes ]; then
                  cat >> $Output << "EOF"
  delElementPattern DepRtrn[@] "networks/geoclue"
EOF
                else
                  cat >> $Output << "EOF"
  subElementPattern DepRtrn[@] "networks/geoclue2" "networks/geoclue"
EOF
                fi
              ;;
            esac
            cat >> $Output << "EOF"
  unset DepRtrn
  DepRtrn=(${rtrPlessArray[@]})
EOF
          fi
      ;;
    esac
# end case xfce
cat >> $Output << "EOF"
  rtrnDepNotMet=""
  testDeps DepRtrn[@]
  ret_val=$?
  if [ $ret_val -eq $RETURN_ALLDEPSMET ]; then
    if $INSTALLPKG; then 
      if $useDESTDIR; then
        echo "All dependencies met - building script for $PkgName using DESTDIR"
      else
        echo "All dependencies met - building script for $PkgName"
      fi
    fi
    BuildScript=true
  fi
fi
EOF
   ;;
esac
# end case testing dependencies
echo "if \$BuildScript; then
if \$INSTALLPKG; then" >> $Output

if ! $as_root; then
  echo 'install -v -d ${PkgUserDir}/${PkgName}' >> $Output
  echo "touch \${PkgUserDir}/\${PkgName}/$build" >> $Output
  cat >> $Output << "EOF"
echo "#!/bin/bash
EOF
  echo 'BuildLog=$BuildLog" > ${PkgUserDir}/${PkgName}/'$build >> $Output
  if [[ "$pkgname" == "blfs-btscrpts" ]]; then
    echo "echo \"btscrpt=\$btscrpt\" >> \${PkgUserDir}/\${PkgName}/$build" >> $Output
  fi
  if $useDESTDIR; then echo "cleanpkgdir \${PkgUserDir}/\${PkgName} \$PkgName" >> $Output; fi
  echo "cat >> \${PkgUserDir}/\${PkgName}/$build << \"IPS\"" >>$Output
  case $pkgname in
     cacerts)
       if $useDESTDIR; then
         echo "set +h
PkgName=\$LOGNAME
CUR_DIR=${PKGUSERDIR}/${cursection}/${pkgname}" >> $Output
       else
         cat >> $Output << "EOF"
set +h
PkgName=$LOGNAME
CUR_DIR=$HOME
EOF
       fi
     ;;
     *)
         cat >> $Output << "EOF"
set +h
PkgName=$LOGNAME
CUR_DIR=$HOME
EOF
     ;;
  esac
  if [[ "$Section" == x || "$pkgname" == libdrm || "$pkgname" == freeglut || "$pkgname" == glu ]]; then
    echo "source /etc/profile.d/xorg.sh" >> $Output
  fi
  if [[ "$SYSTEMD" == no && "$pkgname" == libvdpau ]]; then
    echo "source /etc/profile.d/xorg.sh" >> $Output
  fi
  echo "SrcName=$srcname" >> $Output
# define sourcedir in the build file
  case $pkgname in
    avr-binutils)
      echo "sourcedir=${PKGUSERDIR}/core/binutils
blfsfiles=${blfsBuildFiles}/${blfsfiles}" >> $Output
    ;;
    avr-gcc)
      echo "sourcedir=${PKGUSERDIR}/core/gcc" >> $Output
    ;;
    chromium)
      echo "sourcedir=${srcrootdir}/${Section}
export PATH=\$PATH:${PKGUSERDIR}/${cursection}/${pkgname}/depot_tools # add location of depot_tools" >> $Output
    ;;
# need to define blfsfiles to apply patches, add install files etc
    cups|gegl|gnm-scrnsaver|gnome-shell|gst-plgns-bad|libproxy|openjdk|php|squid|systemd|x265|$xlib|xml-sax)
      echo "sourcedir=${srcrootdir}/${Section}
blfsfiles=${blfsBuildFiles}/${blfsfiles}" >> $Output
    ;;
    dbus)
      if [ "$SYSTEMD" = yes ]; then # src already present
        :
      else
        echo "sourcedir=${srcrootdir}/${Section}" >> $Output
      fi
    ;;
    eudev)
       : # source is already in $PKGUSERDIR
    ;;
    firewall) # no source file
      cat >> $Output << "EOF"
starttime=$( date +%s )
EOF
    ;;
    java-hamcrest)
       echo "sourcedir=${srcrootdir}/${Section}
_libname=hamcrest" >> $Output
    ;;
    nvidia-libgl|nvidia) # src should already be in nvidia-utils
       echo "sourcedir=${PkgUserDir}/nvidia-utils" >> $Output
    ;;
    python3) # include the version
       echo "sourcedir=${srcrootdir}/${Section}
Python3vers=$Python3vers" >> $Output
    ;;
    *)
      echo "sourcedir=${srcrootdir}/${Section}" >> $Output
    ;;
  esac
# end defining sourcedir
else # building as root
  echo "starttime=\$( date +%s )" >> $Output
  cat >> $Output << "EOF"
CreateBuildDirasroot ${PkgUserDir}/${PkgName}
EOF
  if [[ "$Section" == x || "$pkgname" == libdrm || "$pkgname" == freeglut || "$pkgname" == glu ]]; then
    echo "source /etc/profile.d/xorg.sh" >> $Output
  elif [[ "$pkgname" == python3 ]]; then
    echo "Python3vers=$Python3vers" >> $Output
  fi
fi # end as_root
# case to unpack sources
case $pkgname in
  cacerts)
     cat >> $Output << "EOF"
starttime=$( date +%s )
EOF
  ;;
  firewall) # don't need to unpack sources
     :
  ;;
  chromium) # uses depot_tools to download the source
     unpack >> $Output
     cat >> $Output << "EOF"
unpack
retval=$?
if [ $retval -eq 1 ]; then # unpack failed so abort
  echo "Failed to unpack source for package $PkgName. Exiting now."
  exit 1
fi
EOF
  ;;
  *)
     setproxy >> $Output # include in case need to download a file
     echo "setproxy" >> $Output
     unpack >> $Output
     cat >> $Output << "EOF"
unpack
retval=$?
if [ $retval -eq 1 ]; then # unpack failed so abort
  echo "Failed to unpack source for package $PkgName. Exiting now."
  exit 1
fi
EOF
  case $pkgname in # need to set up some env variables
    cups) # add the sed statement for the install_commmands
      echo "curdir=\$( echo \$PWD )" >> $Output
      sedCups_setup >> $Output
      cat >> $Output << "EOF"
sedCups_setup
EOF
    ;;
    nvidia) # add the kernel version details
      echo "curdir=\$( echo \$PWD )
_extramodules=$_extramodules
_kernver=${rtrkernum}" >> $Output
    ;;
    nvidia-utils) # need to add the create_links function for sonames
      create_links >> $Output
      echo "curdir=\$( echo \$PWD )" >> $Output
    ;;
    php) # add the configure variables
      echo "curdir=\$( echo \$PWD )" >> $Output
      php_setup >> $Output
      cat >> $Output << "EOF"
php_setup
EOF
    ;;
    $xproto|$xlib|$xapp|$xfont)
      cursec=${pkgname//${xVers}/}
echo "curdir=\$( echo \$PWD )/${cursec}" >> $Output
    ;;
    chromium) # don't need curdir - don't cleanup when finished
      :
    ;;
    *)
      echo "curdir=\$( echo \$PWD )" >> $Output
      case $pkgname in
         avahi|vlc) # add to PKG_CONFIG_PATH
            echo "PKG_CONFIG_PATH=\$PKG_CONFIG_PATH:/opt/qt4/lib/pkgconfig" >> $Output
         ;;
         apache-ant|junit)
            echo "source /etc/profile.d/openjdk.sh" >> $Output
            if $as_root; then
              echo "export PATH=\$PATH:/opt/jdk/bin" >> $Output
            fi
         ;;
         icedtea-web)
            echo "JAVA_HOME=/opt/jdk"  >> $Output
         ;;
         py2-atspi|py3-atspi)
            echo "srcdir=\$( echo \$curdir | awk -F\\/ '{print \$NF}')" >> $Output
         ;;
         wget)
            echo "SSLTYPE=openssl
[ -e /usr/bin/gnutls-cli ] && SSLTYPE=gnutls" >> $Output
         ;;
      esac
    ;;
  esac
  ;;
esac
# end case unpacking sources
WriteScript
closefunction
} # end of Function
#
closefunction () {
case $pkgname in
  aspell)  # install a dictionary (english by default)
    cat >> $Output << "EOF"
cd ..
language="aspell6-en"
dictionary="${language}-7.1-0.tar.bz2"
EOF
    cat >> $Output << "EOF"
if [ ! -e $dictionary ]; then
  wget $wgetopts ftp://ftp.gnu.org/gnu/aspell/dict/en/${dictionary}
fi
cd $(tar vxf ${language}*.tar.*z* | awk -F\/ 'END{print $1}')
dictdir=$( echo $PWD )
./configure
make
make install
#end install dict
EOF
  ;;
  gimp) # install the help file
    cat >> $Output << "EOF"
cd ..
if [ -e $helpfile ]; then
  cd $(tar vxf ${SrcName}help*.tar.*z* | awk -F\/ 'END{print $1}')
  helpdir=$( echo $PWD )
  ./configure --prefix=/usr
  sed -i -e 's/ca da de el en en_GB es fr it ja ko nl nn pt_BR ru sl sv zh_CN/en/' Makefile
  sed -i -e 's/ca da de el en en_GB es fr it ja ko nl nn pt_BR ru sl sv zh_CN/en/' quickreference/Makefile
 make
  make install
else
  echo "Help file $helpfile not present"
fi
EOF
  ;;
esac
if ! $useDESTDIR; then
  case $pkgname in
      blfs-btscrpts)
        if $as_root; then
          echo 'touch ${PkgUserDir}/${PkgName}/.${btscrpt}' >> $Output
        else
          echo 'touch ~/.${btscrpt}' >> $Output
        fi
      ;;
      $xproto|$xlib|$xapp|$xfont)
        if $as_root; then
          echo 'set +e
touch ${PkgUserDir}/${PkgName}/.${PkgName}' >> $Output
        else
          echo "set +
touch ~/.${pkgname}" >> $Output
        fi
      ;;
      dbus) # need to know when dbus-launch has been installed
        if $as_root; then
          echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}_launch' >> $Output
        else
          echo "touch ~/.${pkgname}_launch" >> $Output
        fi
      ;;
      eudev) # need to know when eudev with gudev has been installed
        if $as_root; then
          echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}_gudev' >> $Output
        else
          echo "touch ~/.${pkgname}_gudev" >> $Output
        fi
      ;;
      nvidia-utils) # create the sonames for library files
        cat >> $Output << "EOF"
create_links /usr/lib libcuda
create_links /usr/lib libnvcuvid
create_links /usr/lib libnvidia-cfg
create_links /usr/lib libnvidia-eglcore
create_links /usr/lib libnvidia-encode
create_links /usr/lib libnvidia-fbc
create_links /usr/lib libnvidia-glcore
create_links /usr/lib libnvidia-glsi
create_links /usr/lib libnvidia-ifr
create_links /usr/lib libnvidia-ml
create_links /usr/lib libnvidia-tls
create_links /usr/lib/nvidia libEGL
create_links /usr/lib/nvidia libGLESv1_CM
create_links /usr/lib/nvidia libGLESv2
create_links /usr/lib/nvidia libGL
EOF
        if $as_root; then
          echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}' >> $Output
        else
          echo "touch ~/.${pkgname}" >> $Output
        fi
      ;;
      systemd) # need to know when systemd with gudev has been installed
        if $as_root; then
          echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}_gudev' >> $Output
        else
          echo "touch ~/.${pkgname}_gudev" >> $Output
        fi
      ;;
      *)
        if $as_root; then
          echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}' >> $Output
        else
          echo "touch ~/.${pkgname}" >> $Output
        fi
      ;;
  esac
else # destdir install, so use .$pkgname-destdir
  if $as_root; then
    echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}-destdir' >> $Output
  else
    echo "touch ~/.${pkgname}-destdir" >> $Output
  fi
fi
cat >> $Output << "EOF"
endtime=$( date +%s )
EOF
# delete unwanted files after installation
case $pkgname in
  aspell) # delete the dictionary dir as well
     delSrcFile >> $Output
     echo "if [ -e \$dictdir ]; then rm -rf \$dictdir; fi" >> $Output
  ;;
  avr-binutils)
     delSrcFile >> $Output
     echo "rm -rf binutils-build" >> $Output
  ;;
  avr-gcc)
     delSrcFile >> $Output
     echo "rm -rf gcc-build" >> $Output
  ;;
  blfs-btscrpts|cacerts|firewall|java-hamcrest|xterm)
     : # don't delete any files
  ;;
  chromium) # don't delete anything
     :
  ;;
  firefox|thunderbird) # delete .distlib and Desktop dir
     delSrcFile >> $Output
     echo "rm -rf .distlib Desktop" >> $Output
  ;;
  gimp) # delete the help dir as well
     delSrcFile >> $Output
     echo "if [ -e \$helpdir ]; then rm -rf \$helpdir; fi" >> $Output
  ;;
  icedtea-web)
     delSrcFile >> $Output
     echo "rm -rf .config" >> $Output
  ;;
  krb5) # del the .gnupg dir
     delSrcFile >> $Output
     echo "if [ -d .gnupg ]; then rm -rf .gnupg; fi" >> $Output
  ;;
  libvpx)
     delSrcFile >> $Output
     echo "rm -rf libvpx-build" >> $Output
  ;;
  php)
     delSrcFile >> $Output
     echo "rm -rf .channels .depdb* .filemap .lock .registry" >> $Output
  ;;
  py2-atspi|py3-atspi)
     delSrcFile >> $Output
     echo "rm -rf python*" >> $Output
  ;;
  qt4)
     delSrcFile >> $Output
     echo "rm -rf .subversion" >> $Output
  ;;
  smpeg)
     delSrcFile >> $Output
     echo "rm -rf .subversion" >> $Output # from the svn download
  ;;
# ****TODO ******** remove specific filename in speexdsp ***********
  speex) # del additional info file
     delSrcFile >> $Output
     echo "rm -rf speexdsp-1.2rc3" >> $Output
  ;;
  thunderbird)
     delSrcFile >> $Output
     echo "rm -rf .distlib" >> $Output
  ;;
  wget)
     delSrcFile >> $Output
     echo "unset SSLTYPE" >> $Output
  ;;
  $xapp|$xfont|$xlib|$xproto) # delete the current dir if using DESTDIR
     if $useDESTDIR; then
       delSrcFile >> $Output
       echo "rm -rf .links" >> $Output
     else
       echo "rm -rf .links" >> $Output
     fi
  ;;
  xorg-server) # del .links dir
     delSrcFile >> $Output
     echo "rm -rf .links" >> $Output
  ;;
  x265)
     echo "cd \$curdir
rm -rf multicoreware-x265-*" >> $Output
  ;;
  *)
     delSrcFile >> $Output
  ;;
esac
cat >> $Output << "EOF"
elapsedtime=$( expr $endtime - $starttime )
echo "${PkgName} $unpacktime $elapsedtime" >> $BuildLog
EOF
if ! $as_root; then
echo "IPS" >> $Output
setuplinks # setup any preprocessing commands - then test doFirst and links
if [[ ! -z $doFirst || ! -z $links ]]; then resolvelinks; fi # not null
if [ "$pkgname" = evolution ]; then # write out the functions to get version #
float_test
evolutionVersion
fi
cat >> $Output << "EOF"
if [ "$(grep -q ^$PkgName\: /etc/passwd;echo $?)" != 0 ]; then
  if [ "$(grep -q ^install3\: /etc/group;echo $?)" = 0 ]; then # install3 exists
    numcharInstall install3
    if [ $numchars -gt 2030 ]; then
      echo "You'll have to make yet another install group - install4"
      echo "Update /usr/sbin/installpkg as before"
      exit 1
    fi
  elif [ "$(grep -q ^install2\: /etc/group;echo $?)" = 0 ]; then
    numcharInstall install2
    if [ $numchars -gt 2030 ]; then
      echo "Install2 has nearly reached the limit of 2048 chars"
      echo "Make another install group - install3, in /etc/group"
      echo "Update /usr/sbin/installpkg to use install3"
      exit 1
    fi
  else
    numcharInstall install
    if [ $numchars -gt 2030 ]; then # limit of 2048. Create a new install group
      echo "install group has nearly reached the limit of 2048 chars"
      echo "create a new install group called install2. To do this, edit"
      echo "/etc/group and insert install2:x:9999:"
      echo "Then change install in /usr/sbin/installpkg to install2"
      echo "You'll find it at the end of the useradd line."
      exit 1
    fi
  fi
EOF
case $pkgname in
  apache)
   cat >> $Output << "EOF"
    installpkg $PkgName $cursection 25
EOF
  ;;
  colord)
   cat >> $Output << "EOF"
    installpkg $PkgName $cursection 71
EOF
  ;;
  avahi)
   cat >> $Output << "EOF"
    installpkg $PkgName $cursection 84
EOF
  ;;
  gdm)
   cat >> $Output << "EOF"
    installpkg $PkgName $cursection 21
EOF
  ;;
  *)
   cat >> $Output << "EOF"
    installpkg $PkgName $cursection
EOF
  ;;
esac
cat >> $Output << "EOF"
fi
EOF
if [[ "$pkgname" == nautilus || "$pkgname" == gcr || "$pkgname" == brasero ]]; then
echo "setMime $pkgname # need to own everything under /usr/share/mime" >> $Output
fi
if [[ ! -z $doFirst || ! -z $links ]]; then # preprocessing
cat >> $Output << "EOF"
resolvelinks
EOF
fi
cat >> $Output << "EOF"
su $PkgName
EOF
case $pkgname in
   blfs-btscrpts)
     cat >> $Output << "EOF"
if [ ! -e ${PkgUserDir}/${PkgName}/.${btscrpt} ]; then
  echo "$btscrpt failed"
  exit 1
fi
EOF
   ;;
   dbus)
     cat >> $Output << "EOF"
if [ ! -e ${PkgUserDir}/${PkgName}/.${PkgName}_launch ]; then
  echo "$PkgName failed"
  exit 1
fi
EOF
   ;;
   eudev|systemd)
     cat >> $Output << "EOF"
if [ ! -e ${PkgUserDir}/${PkgName}/.${PkgName}_gudev ]; then
  echo "$PkgName failed"
  exit 1
fi
EOF
   ;;
   *)
     if $useDESTDIR; then
       cat >> $Output << "EOF"
if [ ! -e ${PkgUserDir}/${PkgName}/.${PkgName}-destdir ]; then
  echo "$PkgName using DESTDIR failed"
  exit 1
fi
EOF
     else
       cat >> $Output << "EOF"
if [ ! -e ${PkgUserDir}/${PkgName}/.${PkgName} ]; then
  echo "$PkgName failed"
  exit 1
fi
EOF
     fi
   ;;
esac
echo "chown \$PkgName:\$PkgName \${PkgUserDir}/\${PkgName}/$build" >> $Output
# evolution now installed so get the version #
if [ "$pkgname" = evolution ]; then
cat >> $Output << "EOF"
evolutionVersion
EOF
fi
#
#set required dirs to be install dirs if installing as a package user 
#
case $pkgname in
    aisleriot)
           cat >> $Output << "EOF"
chgrp install /usr/share/icons/HighContrast/scalable
chmod g+w,o+t /usr/share/icons/HighContrast/scalable
chgrp install /usr/share/icons/HighContrast/scalable/apps
chmod g+w,o+t /usr/share/icons/HighContrast/scalable/apps
EOF
    ;;
    alsa-lib)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/alsa-lib
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/alsa-lib
chgrp install ${PkgUserDir}/${PkgName}/usr/share/alsa
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/alsa
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/lib/alsa-lib
chmod g+w,o+t /usr/lib/alsa-lib
chgrp install /usr/share/alsa
chmod g+w,o+t /usr/share/alsa
EOF
          fi
    ;;
    alsa-utils)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
mkdir -pv ${PkgUserDir}/${PkgName}/var/lib/alsa
chown alsa-utils:alsa-utils ${PkgUserDir}/${PkgName}/var/lib/alsa
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/udev
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/udev
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/udev/rules.d
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/udev/rules.d
if [ "$SYSTEMD" = yes ]; then
  mkdir -pv ${PkgUserDir}/${PkgName}/etc/pm/sleep.d
  install -D -m755 ${blfsfiles}/conf-files/90alsa ${PkgUserDir}/${PkgName}/etc/pm/sleep.d/90alsa
  touch ${PkgUserDir}/${PkgName}/var/lib/alsa/asound.state
  chown alsa-utils:alsa-utils ${PkgUserDir}/${PkgName}/etc/pm/sleep.d/90alsa
fi
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/sounds
chmod g+w,o+t /usr/share/sounds
chgrp install /usr/lib/udev
chmod g+w,o+t /usr/lib/udev
chgrp install /usr/lib/udev/rules.d
chmod g+w,o+t /usr/lib/udev/rules.d
if [ -d /usr/lib/systemd/system/basic.target.wants ]; then
  chgrp install /usr/lib/systemd/system/basic.target.wants
  chmod g+w,o+t /usr/lib/systemd/system/basic.target.wants
fi
if [ ! -d /var/lib/alsa ]; then
  install -v -m0755 -d /var/lib/alsa
  chown alsa-utils:alsa-utils /var/lib/alsa
fi
if [ "$SYSTEMD" = yes ]; then
  if [ ! -d /etc/pm/sleep.d ]; then mkdir -pv /etc/pm/sleep.d; fi
  install -D -m755 ${blfsfiles}/conf-files/90alsa /etc/pm/sleep.d/90alsa
  chown alsa-utils:alsa-utils /etc/pm/sleep.d/90alsa
fi
EOF
          fi
    ;;
    apache)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/httpd/modules
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/httpd/modules
chown root ${PkgUserDir}/${PkgName}/usr/lib/httpd/suexec
chmod 4755 ${PkgUserDir}/${PkgName}/usr/lib/httpd/suexec
install -D -m644 ${blfsfiles}/install-files/server/apache.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/lib/httpd/modules
chmod g+w,o+t /usr/lib/httpd/modules
chown root /usr/lib/httpd/suexec
chmod 4755 /usr/lib/httpd/suexec
EOF
          fi
    ;;
    apr) # /usr/include/apr-1
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/apr-1
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/apr-1
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/include/apr-1 #for apr-util
chmod g+w,o+t /usr/include/apr-1
chgrp install /srv
chmod g+w,o+t /srv
chgrp install /var/log
chmod g+w,o+t /var/log
EOF
          fi
    ;;
    archive-zip)
          if $useDESTDIR; then
echo "case \$(uname -m) in
   x86_64) archi=x86_64-linux
   ;;
   *)      archi=i686-linux
   ;;
esac
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/perl5/site_perl/${perlvers}/\$archi/auto
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/perl5/site_perl/${perlvers}/\$archi/auto" >> $Output
          else
echo "case \$(uname -m) in
   x86_64) archi=x86_64-linux
   ;;
   *)      archi=i686-linux
   ;;
esac
chgrp install /usr/lib/perl5/site_perl/${perlvers}/\$archi/auto
chmod g+w,o+t /usr/lib/perl5/site_perl/${perlvers}/\$archi/auto" >> $Output
          fi
    ;;
    aspell)
          cat >> $Output << "EOF"
echo "*************************************************************"
echo "*                                                           *"
echo "* English dictionary installed - edit script to change this *"
echo "*                                                           *"
echo "*************************************************************"
EOF
    ;;
    at-spi2-atk)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gnome-settings-daemon-3.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gnome-settings-daemon-3.0
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gnome-settings-daemon-3.0/gtk-modules
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gnome-settings-daemon-3.0/gtk-modules
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0/modules
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0/modules
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/lib/gnome-settings-daemon-3.0
chmod g+w,o+t /usr/lib/gnome-settings-daemon-3.0
chgrp install /usr/lib/gnome-settings-daemon-3.0/gtk-modules
chmod g+w,o+t /usr/lib/gnome-settings-daemon-3.0/gtk-modules
chgrp install /usr/lib/gtk-2.0
chmod g+w,o+t /usr/lib/gtk-2.0
chgrp install /usr/lib/gtk-2.0/modules
chmod g+w,o+t /usr/lib/gtk-2.0/modules
EOF
          fi
    ;;
    at-spi2-core)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/etc/xdg
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/xdg
chgrp install ${PkgUserDir}/${PkgName}/etc/xdg/autostart
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/xdg/autostart
EOF
          else
            cat >> $Output << "EOF"
chgrp install /etc/xdg
chmod g+w,o+t /etc/xdg
chgrp install /etc/xdg/autostart # for polkit-gnome
chmod g+w,o+t /etc/xdg/autostart
EOF
          fi
    ;;
    attr)   #/usr/include/sys
          cat >> $Output << "EOF"
chgrp install /usr/include/sys # for acl
chmod g+w,o+t /usr/include/sys
EOF
    ;;
    avahi)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/install-files/networks/avahi.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/applications
chmod g+w,o+t /usr/share/applications
EOF
          fi
    ;;
    babl) # /usr/share/gtk-doc/html
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gtk-doc
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gtk-doc
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gtk-doc/html
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gtk-doc/html
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/gtk-doc
chmod g+w,o+t /usr/share/gtk-doc
chgrp install /usr/share/gtk-doc/html # for gnutls
chmod g+w,o+t /usr/share/gtk-doc/html
EOF
          fi
    ;;
    baobab)
          cat >> $Output << "EOF"
chgrp install /usr/share/help/{id,it,ru}
chmod g+w,o+t /usr/share/help/{id,it,ru}
sed -i '/MimeType/d' /usr/share/applications/org.gnome.baobab.desktop
EOF
    ;;
    bind)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/install-files/server/bind.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
          else
            cat >> $Output << "EOF"
mknod /srv/named/dev/null c 1 3
mknod /srv/named/dev/urandom c 1 9
chmod 666 /srv/named/dev/{null,urandom}
chmod 770 /srv/named
rndc-confgen -r /dev/urandom -b 512 > /etc/rndc.conf
sed '/conf/d;/^#/!d;s:^# ::' /etc/rndc.conf > /srv/named/etc/named.conf
EOF
          fi
    ;;
    brasero)
          cat >> $Output << "EOF"
chgrp install /usr/lib/nautilus/extensions-3.0
chmod g+w,o+t /usr/lib/nautilus/extensions-3.0
chgrp install /usr/share/mime/packages
chmod g+w,o+t /usr/share/mime/packages
chgrp install /usr/share/help/{ro,zh_HK,zh_TW}
chmod g+w,o+t /usr/share/help/{ro,zh_HK,zh_TW}
EOF
    ;;
    caribou)
          cat >> $Output << "EOF"
chgrp install /usr/lib/gtk-3.0/modules
chmod g+w,o+t /usr/lib/gtk-3.0/modules
EOF
    ;;
    clutter)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/clutter-1.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/clutter-1.0
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/include/clutter-1.0
chmod g+w,o+t /usr/include/clutter-1.0
EOF
          fi
    ;;
    colord)
           if ! $useDESTDIR; then
             cat >> $Output << "EOF"
chgrp install /usr/include/colord-1 # for colord-gtk
chmod g+w,o+t /usr/include/colord-1
EOF
           fi
    ;;
    consolekit)
          cat >> $Output << "EOF"
chgrp install /usr/share/dbus-1/interfaces # for upower
chmod g+w,o+t /usr/share/dbus-1/interfaces
EOF
    ;;
    cups)
           cat >> $Output << "EOF"
chgrp install /usr/lib/cups/driver # for gutenprint
chmod g+w,o+t /usr/lib/cups/driver
chgrp install /usr/lib/cups/filter
chmod g+w,o+t /usr/lib/cups/filter
chgrp install /usr/share/cups
chmod g+w,o+t /usr/share/cups
chgrp install /usr/share/cups/model # for ghostscript
chmod g+w,o+t /usr/share/cups/model
chgrp install /usr/share/cups/data # for cups-filters
chmod g+w,o+t /usr/share/cups/data
chgrp install /usr/share/cups/drv
chmod g+w,o+t /usr/share/cups/drv
chgrp install /usr/share/cups/mime # for cups-filters
chmod g+w,o+t /usr/share/cups/mime
chgrp install /usr/share/cups/ppdc
chmod g+w,o+t /usr/share/cups/ppdc
chgrp install /usr/share/cups/usb
chmod g+w,o+t /usr/share/cups/usb
chgrp install /etc/cups
chmod g+w,o+t /etc/cups
chgrp install /usr/lib/cups/backend
chmod g+w,o+t /usr/lib/cups/backend # for samba symlink smb
cat > /etc/cups/printers.conf << "EOFCUPS"
# Printer configuration file for CUPS v2.0.2
# Written by cupsd
# DO NOT EDIT THIS FILE WHEN CUPSD IS RUNNING
<Printer Dell_3130cn_Color_Laser>
UUID urn:uuid:051a0c0e-3e62-3936-7af9-0e901f7d8cfd
Info Dell 3130cn Color Laser
Location main
MakeModel Dell 3130cn Foomatic/pxlcolor (recommended)
DeviceURI usb://Dell/3130cn%20Color%20Laser?serial=0932091440
State Idle
StateTime 1361307988
Type 8400924
Accepting Yes
Shared Yes
JobSheets none none
QuotaPeriod 0
PageLimit 0
KLimit 0
OpPolicy default
ErrorPolicy retry-job
</Printer>
EOFCUPS
# change ownership of cups files as needed
chown root:lp /etc/cups/printers.conf
chmod 600 /etc/cups/printers.conf
chown root:lp /etc/cups/cupsd.conf
chown root:lp /etc/cups/cupsd.conf.default
chown root:lp /etc/cups/interfaces
chown root:lp /etc/cups/ppd
chown root:lp /etc/cups/snmp.conf
chown root:lp /etc/cups/ssl
chown root:lp /var/cache/cups
chown root:lp /var/cache/cups/rss
chown root:lp /var/spool/cups
chown root:lp /var/spool/cups/*
chown root /usr/bin/cupsd
chown root /usr/lib/cups/cgi-bin
chown root /usr/lib/cups/cgi-bin/*.cgi
chown root /usr/lib/cups/filter/{commandtops,pstops}
chown root /usr/lib/cups/notifier
chown root /usr/lib/cups/notifier/dbus
chown root /usr/lib/cups/backend/usb
gtk-update-icon-cache
EOF
           if [ "$SYSTEMD" = yes ]; then
             cat >> $Output << "EOF"
sed -i 's|^Exec=htmlview http://localhost:631/|Exec=xdg-open http://localhost:631/|g' /usr/share/applications/cups.desktop
EOF
fi
    ;;
    cups-filters)
           cat >> $Output << "EOF"
chown root:install /usr/lib/cups/backend
chmod 1775  /usr/lib/cups/backend
chown root /usr/lib/cups/filter/{bannertopdf,pdftopdf,pdftops,pstopdf}
EOF
    ;;
    cvs)
          if ! $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install /opt
chmod g+w,o+t /opt
chgrp install /etc/profile.d
chmod g+w,o+t /etc/profile.d
chgrp install /etc/profile.d/extrapaths.sh
chmod 664 /etc/profile.d/extrapaths.sh
chgrp install /etc/ld.so.conf
chmod 664 /etc/ld.so.conf
EOF
          fi
    ;;
    cyrus-sasl)
          if $useDESTDIR; then
            if [ "$SYSTEMD" = yes ]; then
              cat >> $Output << "EOF"
install -Dm644 ${blfsfiles}/conf-files/saslauthd.conf.d ${PkgUserDir}/${PkgName}/etc/conf.d/saslauthd
install -Dm644 ${blfsfiles}/service/saslauthd.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/saslauthd.service
install -Dm644 ${blfsfiles}/conf-files/sastmpfiles.conf ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/saslauthd.conf
chown cyrus-sasl:cyrus-sasl ${PkgUserDir}/${PkgName}/{etc/conf.d/saslauthd,usr/lib/{systemd/system/saslauthd.service,tmpfiles.d/saslauthd.conf}}
EOF
            fi
          else
            if [ "$SYSTEMD" = yes ]; then
              cat >> $Output << "EOF"
install -Dm644 ${blfsfiles}/conf-files/saslauthd.conf.d /etc/conf.d/saslauthd
install -Dm644 ${blfsfiles}/service/saslauthd.service /usr/lib/systemd/system/saslauthd.service
install -Dm644 ${blfsfiles}/conf-files/sastmpfiles.conf /usr/lib/tmpfiles.d/saslauthd.conf
chown cyrus-sasl:cyrus-sasl /etc/conf.d/saslauthd /usr/lib/{systemd/system/saslauthd.service,tmpfiles.d/saslauthd.conf}
EOF
            fi
          fi
    ;;
    dbus)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/dbus-1.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/dbus-1.0
chgrp install ${PkgUserDir}/${PkgName}/usr/include/dbus-1.0/dbus
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/dbus-1.0/dbus
chgrp install ${PkgUserDir}/${PkgName}/etc/dbus-1/system.d
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/dbus-1/system.d
chgrp install ${PkgUserDir}/${PkgName}/usr/share/dbus-1
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/dbus-1
chgrp install ${PkgUserDir}/${PkgName}/usr/share/dbus-1/services
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/dbus-1/services
chgrp install ${PkgUserDir}/${PkgName}/usr/share/dbus-1/system-services
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/dbus-1/system-services
EOF
            if [ "$SYSTEMD" = yes ]; then
              cat >> $Output << "EOF"
chown root:messagebus ${PkgUserDir}/${PkgName}/usr/lib/dbus-1.0/dbus-daemon-launch-helper
chmod 4750 ${PkgUserDir}/${PkgName}/usr/lib/dbus-1.0/dbus-daemon-launch-helper
EOF
            else
              cat >> $Output << "EOF"
chown root:messagebus ${PkgUserDir}/${PkgName}/usr/libexec/dbus-daemon-launch-helper
chmod 4750 ${PkgUserDir}/${PkgName}/usr/libexec/dbus-daemon-launch-helper
EOF
            fi
          else
            cat >> $Output << "EOF"
chgrp install /usr/lib/dbus-1.0
chmod g+w,o+t /usr/lib/dbus-1.0
chgrp install /usr/include/dbus-1.0/dbus
chmod g+w,o+t /usr/include/dbus-1.0/dbus
chgrp install /etc/dbus-1/system.d
chmod g+w,o+t /etc/dbus-1/system.d
chgrp install /usr/share/dbus-1
chmod g+w,o+t /usr/share/dbus-1
chgrp install /usr/share/dbus-1/services
chmod g+w,o+t /usr/share/dbus-1/services
chgrp install /usr/share/dbus-1/system-services
chmod g+w,o+t /usr/share/dbus-1/system-services
EOF
            if [ "$SYSTEMD" = yes ]; then
              cat >> $Output << "EOF"
chown root:messagebus /usr/lib/dbus-1.0/dbus-daemon-launch-helper
chmod 4750 /usr/lib/dbus-1.0/dbus-daemon-launch-helper  # set uid root binary
EOF
            else
              cat >> $Output << "EOF"
chown root:messagebus /usr/libexec/dbus-daemon-launch-helper
chmod 4750 /usr/libexec/dbus-daemon-launch-helper
EOF
            fi
          fi
    ;;
    dconf)
          cat >> $Output << "EOF"
chgrp install /usr/share/applications
chmod g+w,o+t /usr/share/applications
EOF
    ;;
    docbook-xml)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/xml/docbook
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/xml/docbook
chgrp install ${PkgUserDir}/${PkgName}/etc/xml/catalog
chgrp install ${PkgUserDir}/${PkgName}/etc/xml/docbook
chmod 664 ${PkgUserDir}/${PkgName}/etc/xml/catalog
chmod 664 ${PkgUserDir}/${PkgName}/etc/xml/docbook
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/xml/docbook
chmod g+w,o+t /usr/share/xml/docbook
chgrp install /etc/xml/catalog
chgrp install /etc/xml/docbook
chmod 664 /etc/xml/catalog
chmod 664 /etc/xml/docbook
EOF
          fi
    ;;
    eog)
          cat >> $Output << "EOF"
chgrp install /usr/share/help/th # for gedit
chmod g+w,o+t /usr/share/help/th
EOF
    ;;
    epiphany)
          cat >> $Output << "EOF"
chgrp install /usr/share/epiphany
chmod g+w,o+t /usr/share/epiphany
EOF
    ;;
    evince)
          cat >> $Output << "EOF"
chgrp install /usr/lib/nautilus/extensions-3.0 # in case brasero not installed
chmod g+w,o+t /usr/lib/nautilus/extensions-3.0
chgrp install /usr/lib/mozilla/plugins
chmod g+w,o+t /usr/lib/mozilla/plugins
EOF
    ;;
    evol-data-server)
          cat >> $Output << "EOF"
chown root /usr/lib/evolution-data-server/camel-lock-helper-1.2
chmod 4755 /usr/lib/evolution-data-server/camel-lock-helper-1.2
EOF
    ;;
    evolution)
          cat >> $Output << "EOF"
chgrp install /usr/lib/evolution/$evolVers/plugins
chmod g+w,o+t /usr/lib/evolution/$evolVers/plugins
chgrp install /usr/share/help/mk
chmod g+w,o+t /usr/share/help/mk
EOF
    ;;
    exo)
          cat >> $Output << "EOF"
chgrp install /usr/share/xfce4
chmod g+w,o+t /usr/share/xfce4
EOF
    ;;
    extutls-dpnds)
          if $useDESTDIR; then
echo "case \$(uname -m) in
   x86_64) archi=x86_64-linux
   ;;
   *)      archi=i686-linux
   ;;
esac
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/perl5/site_perl/${perlvers}/ExtUtils
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/perl5/site_perl/${perlvers}/ExtUtils
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/perl5/site_perl/${perlvers}/\$archi/auto/ExtUtils
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/perl5/site_perl/${perlvers}/\$archi/auto/ExtUtils" >> $Output
          else
echo "case \$(uname -m) in
   x86_64) archi=x86_64-linux
   ;;
   *)      archi=i686-linux
   ;;
esac
chgrp install /usr/lib/perl5/site_perl/${perlvers}/ExtUtils
chmod g+w,o+t /usr/lib/perl5/site_perl/${perlvers}/ExtUtils
chgrp install /usr/lib/perl5/site_perl/${perlvers}/\$archi/auto/ExtUtils
chmod g+w,o+t /usr/lib/perl5/site_perl/${perlvers}/\$archi/auto/ExtUtils" >> $Output
          fi
    ;;
    file-roller)
          cat >> $Output << "EOF"
chgrp install /usr/lib/nautilus/extensions-3.0
chmod g+w,o+t /usr/lib/nautilus/extensions-3.0
EOF
    ;;
    firefox)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/mozilla/plugins
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/mozilla/plugins
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/lib/mozilla/plugins
chmod g+w,o+t /usr/lib/mozilla/plugins
EOF
          fi
    ;;
    fontconfig)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/xml
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/xml
chgrp install ${PkgUserDir}/${PkgName}/usr/share/fontconfig/conf.avail
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/fontconfig/conf.avail
chgrp install ${PkgUserDir}/${PkgName}/etc/fonts
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/fonts
chgrp install ${PkgUserDir}/${PkgName}/etc/fonts/conf.d
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/fonts/conf.d
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/xml # for iso-codes
chmod g+w,o+t /usr/share/xml
chgrp install /usr/share/fontconfig/conf.avail
chmod g+w,o+t /usr/share/fontconfig/conf.avail
chgrp install /etc/fonts
chmod g+w,o+t /etc/fonts
chgrp install /etc/fonts/conf.d # for xfont
chmod g+w,o+t /etc/fonts/conf.d
EOF
          fi
    ;;
    freetype) #/var/cache
          if ! $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install /var/cache
chmod g+w,o+t /var/cache
if [ -e /usr/lib/udev ]; then
  chgrp install /usr/lib/udev
  chmod g+w,o+t /usr/lib/udev
else
  chgrp install /lib/udev
  chmod g+w,o+t /lib/udev
fi
EOF
echo "case \$(uname -m) in
   x86_64) archi=x86_64-linux
   ;;
   *)      archi=i686-linux
   ;;
esac
chgrp install /usr/lib/perl5/${perlvers}/\$archi
chmod g+w,o+t /usr/lib/perl5/${perlvers}/\$archi
chgrp install /usr/lib/perl5/site_perl/${perlvers}
chmod g+w,o+t /usr/lib/perl5/site_perl/${perlvers}
chgrp install /usr/lib/perl5/site_perl/${perlvers}/\$archi
chmod g+w,o+t /usr/lib/perl5/site_perl/${perlvers}/\$archi" >> $Output
          fi
    ;;
    garcon)
           cat >> $Output << "EOF"
chgrp install /etc/xdg
chmod g+w,o+t /etc/xdg
chgrp install /etc/xdg/menus
chmod g+w,o+t /etc/xdg/menus
EOF
    ;;
    gconf)
          cat >> $Output << "EOF"
chgrp install /etc/gconf
chmod g+w,o+t /etc/gconf
chgrp install /etc/gconf/gconf.xml.defaults
chmod g+w,o+t /etc/gconf/gconf.xml.defaults
chgrp install /usr/share/GConf
chmod g+w,o+t /usr/share/GConf
EOF
    ;;
    gcr)
          cat >> $Output << "EOF"
chgrp install /usr/share/mime/{application,audio,image,inode,message,model,multipart,packages,text,video,x-content,x-epoc}
chmod g+w,o+t /usr/share/mime/{application,audio,image,inode,message,model,multipart,packages,text,video,x-content,x-epoc}
chgrp install /usr/share/GConf/gsettings
chmod g+w,o+t /usr/share/GConf/gsettings
EOF
    ;;
    gdk-pixbuf)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gdk-pixbuf-2.0/2.10.0/loaders
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gdk-pixbuf-2.0/2.10.0/loaders
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/lib/gdk-pixbuf-2.0/2.10.0/loaders # for librsvg
chmod g+w,o+t /usr/lib/gdk-pixbuf-2.0/2.10.0/loaders
EOF
          fi
    ;;
    gdm)
          cat >> $Output << "EOF"
if [ "$SYSTEMD" = no ]; then
  usermod -a -G audio gdm
  usermod -a -G video gdm
fi
if [ -e /etc/inittab ]; then
  sed -i 's/id:3:initdefault:/id:5:initdefault:/' \
    /etc/inittab
fi
chgrp install /usr/share/help/{id,it,ja}
chmod g+w,o+t /usr/share/help/{id,it,ja}
EOF
    ;;
    gedit)
          cat >> $Output << "EOF"
chgrp install /usr/share/help/{bg,da,ja,lv,th,zh_HK,zh_TW}
chmod g+w,o+t /usr/share/help/{bg,da,ja,lv,th,zh_HK,zh_TW}
EOF
    ;;
    geoclue)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/geoclue
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/geoclue
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/lib/geoclue
chmod g+w,o+t /usr/lib/geoclue
EOF
          fi
    ;;
    gimp)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gimp/2.0/plug-ins
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gimp/2.0/plug-ins
chgrp install ${PkgUserDir}/${PkgName}/usr/share/applications
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/applications
chgrp install ${PkgUserDir}/${PkgName}/usr/share/appdata
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/appdata
install -D -m644 ${blfsfiles}/install-files/xsoftware/gimp.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
          else
            cat >> $Output << "EOF"
gtk-update-icon-cache
update-desktop-database
chgrp install /usr/lib/gimp/2.0/plug-ins
chmod g+w,o+t /usr/lib/gimp/2.0/plug-ins
chgrp install /usr/share/applications
chmod g+w,o+t /usr/share/applications
chgrp install /usr/share/appdata
chmod g+w,o+t /usr/share/appdata
EOF
          fi
    ;;
    git)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
if [ -d ${PkgUserDir}/${PkgName}/usr/share/locale/pt_PT ]; then
  chgrp install ${PkgUserDir}/${PkgName}/usr/share/locale/pt_PT
  chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/locale/pt_PT
fi
install -D -m 644 ${blfsfiles}/service/git-daemon@.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/git-daemon@.service
install -D -m 644 ${blfsfiles}/service/git-daemon.socket ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/git-daemon.socket
chown git:git ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/git-daemon*
EOF
          else
            cat >> $Output << "EOF"
cat > /root/.gitconfig << "GITEOF"
[user]
	name = John Burrell
	email = John_burrell@hotmail.com
[core]
	autocrlf = false
	filemode = false
GITEOF
git config --global http.sslCAPath /etc/ssl/certs
if [ -d /usr/share/locale/pt_PT ]; then
  chgrp install /usr/share/locale/pt_PT
  chmod g+w,o+t /usr/share/locale/pt_PT
fi
install -D -m 644 ${blfsfiles}/service/git-daemon@.service /usr/lib/systemd/system/git-daemon@.service
install -D -m 644 ${blfsfiles}/service/git-daemon.socket /usr/lib/systemd/system/git-daemon.socket
chown git:git /usr/lib/systemd/system/git-daemon*
EOF
          fi
    ;;
    glib)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/glib-2.0/schemas
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/glib-2.0/schemas
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gio/modules
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gio/modules
chgrp install ${PkgUserDir}/${PkgName}/usr/share/bash-completion/completions
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/bash-completion/completions
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/glib-2.0/schemas
chmod g+w,o+t /usr/share/glib-2.0/schemas
chgrp install /usr/lib/gio/modules # for dconf
chmod g+w,o+t /usr/lib/gio/modules
chgrp install /usr/share/bash-completion/completions
chmod g+w,o+t /usr/share/bash-completion/completions
EOF
           fi
    ;;
    gnm-thems-stndrd)
           cat >> $Output << "EOF"
for res in 16 22 24 32 48 256; do
  chgrp install /usr/share/icons/HighContrast/${res}x${res}/apps
  chmod g+w,o+t /usr/share/icons/HighContrast/${res}x${res}/apps
done
chgrp install /usr/share/icons/HighContrast/scalable/apps
chmod g+w,o+t /usr/share/icons/HighContrast/scalable/apps
EOF
    ;;
    gnm-user-share)
           cat >> $Output << "EOF"
chgrp install /usr/lib/nautilus/extensions-3.0
chmod g+w,o+t /usr/lib/nautilus/extensions-3.0
EOF
    ;;
    gnome-bckgrnds)
           cat >> $Output << "EOF"
chgrp install /usr/share/gnome-background-properties
chmod g+w,o+t /usr/share/gnome-background-properties
EOF
    ;;
    gnome-bluetooth)
          cat >> $Output << "EOF"
chgrp install /usr/share/help/ro
chmod g+w,o+t /usr/share/help/ro
chgrp install /usr/share/help/th
chmod g+w,o+t /usr/share/help/th
chgrp install /usr/share/help/zh_HK
chmod g+w,o+t /usr/share/help/zh_HK
chgrp install /usr/share/help/zh_TW
chmod g+w,o+t /usr/share/help/zh_TW
/usr/bin/update-desktop-database /usr/share/applications
install -m644 -D ${blfsfiles}/conf-files/61-gnome-bluetooth-rfkill.rules \
                 /usr/lib/udev/rules.d/61-gnome-bluetooth-rfkill.rules
chown gnome-bluetooth:gnome-bluetooth /usr/lib/udev/rules.d/61-gnome-bluetooth-rfkill.rules
EOF
    ;;
    gnome-calculator)
          cat >> $Output << "EOF"
chgrp install /usr/share/gnome-shell/search-providers
chmod g+w,o+t /usr/share/gnome-shell/search-providers
chgrp install /usr/share/help/ro
chmod g+w,o+t /usr/share/help/ro
EOF
    ;;
    gnome-colr-mngr)
          cat >> $Output << "EOF"
chgrp install /usr/share/help/ml
chmod g+w,o+t /usr/share/help/ml
EOF
    ;;
    gnome-desktop)
          cat >> $Output << "EOF"
chgrp install /usr/share/help/* # for gnome-user-docs
chmod g+w,o+t /usr/share/help/*
chgrp install /usr/share/gnome
chmod g+w,o+t /usr/share/gnome
chgrp rarian /usr/share/help/rarian.document
chmod 644 /usr/share/help/rarian.document
EOF
    ;;
    gnome-doc-utils)
          cat >> $Output << "EOF"
chgrp install /usr/share/gnome/help
chmod g+w,o+t /usr/share/gnome/help
EOF
    ;;
    gnome-icon-thme)
          cat >> $Output << "EOF"
chgrp install /usr/share/icons/gnome
chmod g+w,o+t /usr/share/icons/gnome
chgrp install /usr/share/icons/gnome/{256x256,48x48,8x8}
chmod g+w,o+t /usr/share/icons/gnome/{256x256,48x48,8x8}
chgrp install /usr/share/icons/gnome/*/*
chmod g+w,o+t /usr/share/icons/gnome/*/*
EOF
    ;;
    gnome-menus)
          cat >> $Output << "EOF"
chgrp install /usr/share/desktop-directories
chmod g+w,o+t /usr/share/desktop-directories
chgrp install /etc/xdg/menus
chmod g+w,o+t /etc/xdg/menus
EOF
    ;;
    gnome-session)
          cat >> $Output << "EOF"
chgrp install /usr/share/gnome-session/sessions
chmod g+w,o+t /usr/share/gnome-session/sessions
chgrp install /usr/share/xsessions
chmod g+w,o+t /usr/share/xsessions
EOF
    ;;
    gnome-shell)
          cat >> $Output << "EOF"
chgrp install /usr/share/gnome-shell # if gnome-shell installed first
chmod g+w,o+t /usr/share/gnome-shell
chgrp install /usr/lib/mozilla/plugins
chmod g+w,o+t /usr/lib/mozilla/plugins
EOF
    ;;
    gnome-user-docs)
          cat >> $Output << "EOF"
chgrp install /usr/share/help/{as,hi,kn,lv,mr,nl}
chmod g+w,o+t /usr/share/help/{as,hi,kn,lv,mr,nl}
EOF
    ;;
    gobject-intro)   #/usr/share/gir-1.0
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gir-1.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gir-1.0
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/girepository-1.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/girepository-1.0
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/gir-1.0 # for json-glib
chmod g+w,o+t /usr/share/gir-1.0
chgrp install /usr/lib/girepository-1.0
chmod g+w,o+t /usr/lib/girepository-1.0
EOF
          fi
    ;;
    gset-dsktp-schms)
           cat >> $Output << "EOF"
chgrp install /usr/share/GConf
chmod g+w,o+t /usr/share/GConf
chgrp install /usr/share/GConf/gsettings
chmod g+w,o+t /usr/share/GConf/gsettings
EOF
    ;;
    gstreamer)
           if $useDESTDIR; then
             cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/gstreamer-1.0/gst
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/gstreamer-1.0/gst
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gstreamer-1.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gstreamer-1.0
EOF
           else
             cat >> $Output << "EOF"
chgrp install /usr/include/gstreamer-1.0/gst # for plugins
chmod g+w,o+t /usr/include/gstreamer-1.0/gst
chgrp install /usr/lib/gstreamer-1.0
chmod g+w,o+t /usr/lib/gstreamer-1.0
EOF
           fi
    ;;
    gstreamer0)
          cat >> $Output << "EOF"
chgrp install /usr/include/gstreamer-0.10/gst # for plugins
chmod g+w,o+t /usr/include/gstreamer-0.10/gst
chgrp install /usr/lib/gstreamer-0.10
chmod g+w,o+t /usr/lib/gstreamer-0.10
EOF
    ;;
    gst-plgns-base)
           if $useDESTDIR; then
             cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/gstreamer-1.0/gst/video
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/gstreamer-1.0/gst/video
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gst-plugins-base
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gst-plugins-base
EOF
           else
             cat >> $Output << "EOF"
chgrp install /usr/include/gstreamer-1.0/gst/video
chmod g+w,o+t /usr/include/gstreamer-1.0/gst/video
chgrp install /usr/share/gst-plugins-base
chmod g+w,o+t /usr/share/gst-plugins-base
EOF
           fi
    ;;
    gst-plgns-base0)
           if $useDESTDIR; then
             cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/gstreamer-0.10/gst/interfaces
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/gstreamer-0.10/gst/interfaces
chgrp install ${PkgUserDir}/${PkgName}/usr/include/gstreamer-0.10/gst/video
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/gstreamer-0.10/gst/video
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gst-plugins-base
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gst-plugins-base
EOF
           else
             cat >> $Output << "EOF"
chgrp install /usr/include/gstreamer-0.10/gst/interfaces
chmod g+w,o+t /usr/include/gstreamer-0.10/gst/interfaces
chgrp install /usr/include/gstreamer-0.10/gst/video
chmod g+w,o+t /usr/include/gstreamer-0.10/gst/video
chgrp install /usr/share/gst-plugins-base
chmod g+w,o+t /usr/share/gst-plugins-base
EOF
           fi
    ;;
    gst-plgns-bad)
           if $useDESTDIR; then
             cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/gstreamer-1.0/gst/interfaces
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/gstreamer-1.0/gst/interfaces
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/include/gstreamer-1.0/gst/interfaces
chmod g+w,o+t /usr/include/gstreamer-1.0/gst/interfaces
EOF
          fi
    ;;
    gst-plgns-ugly)
          if $useDESTDIR; then
             cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gstreamer-1.0/presets
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gstreamer-1.0/presets
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/gstreamer-1.0/presets
chmod g+w,o+t /usr/share/gstreamer-1.0/presets
EOF
          fi
    ;;
    gtk-doc)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/help/*
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/help/*
if [ -e ${PkgUserDir}/${PkgName}/usr/share/help/rarian.document ]; then
  chown rarian:rarian ${PkgUserDir}/${PkgName}/usr/share/help/rarian.document
  chmod 644 ${PkgUserDir}/${PkgName}/usr/share/help/rarian.document
fi
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/help/*
chmod g+w,o+t /usr/share/help/*
if ! $AS_ROOT; then
  if [ -e /usr/share/help/rarian.document ]; then
    chown rarian:rarian /usr/share/help/rarian.document
    chmod 644 /usr/share/help/rarian.document
  fi
fi
EOF
          fi
    ;;
    gtk-engines)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/themes/Crux
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/themes/Crux
chgrp install ${PkgUserDir}/${PkgName}/usr/share/themes/Clearlooks
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/themes/Clearlooks
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/themes/Crux
chmod g+w,o+t /usr/share/themes/Crux
chgrp install /usr/share/themes/Clearlooks
chmod g+w,o+t /usr/share/themes/Clearlooks
EOF
          fi
    ;;
    gtkplus3)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gtk-3.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gtk-3.0
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gtk-3.0/3.0.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gtk-3.0/3.0.0
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gtk-3.0/3.0.0/immodules
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gtk-3.0/3.0.0/immodules
chgrp install ${PkgUserDir}/${PkgName}/usr/share/applications
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/applications
chgrp install ${PkgUserDir}/${PkgName}/usr/share/themes
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/themes
chgrp install ${PkgUserDir}/${PkgName}/usr/share/themes/Default
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/themes/Default
chgrp install ${PkgUserDir}/${PkgName}/usr/share/themes/Emacs
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/themes/Emacs
install -D -m644 ${blfsfiles}/install-files/xlibs/gtkplus3.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/lib/gtk-3.0
chmod g+w,o+t /usr/lib/gtk-3.0
chgrp install /usr/lib/gtk-3.0/3.0.0 # for gnome-themes-standard
chmod g+w,o+t /usr/lib/gtk-3.0/3.0.0
chgrp install /usr/lib/gtk-3.0/3.0.0/immodules # for ibus
chmod g+w,o+t /usr/lib/gtk-3.0/3.0.0/immodules
chgrp install /usr/share/applications
chmod g+w,o+t /usr/share/applications
chgrp install /usr/share/themes
chmod g+w,o+t /usr/share/themes
chgrp install /usr/share/themes/Default
chmod g+w,o+t /usr/share/themes/Default
chgrp install /usr/share/themes/Emacs
chmod g+w,o+t /usr/share/themes/Emacs
EOF
          fi
    ;;
    gtkplus2)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/themes
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/themes
chgrp install ${PkgUserDir}/${PkgName}/usr/share/themes/Default
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/themes/Default
chgrp install ${PkgUserDir}/${PkgName}/usr/share/themes/Emacs
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/themes/Emacs
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0/2.10.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0/2.10.0
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0/2.10.0/engines
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0/2.10.0/engines
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0/modules
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0/modules
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0/2.10.0/immodules
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0/2.10.0/immodules
install -D -m644 ${blfsfiles}/install-files/xlibs/gtkplus2.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/themes
chmod g+w,o+t /usr/share/themes
chgrp install /usr/share/themes/Default
chmod g+w,o+t /usr/share/themes/Default
chgrp install /usr/share/themes/Emacs
chmod g+w,o+t /usr/share/themes/Emacs
chgrp install /usr/lib/gtk-2.0/2.10.0
chmod g+w,o+t /usr/lib/gtk-2.0/2.10.0
chgrp install /usr/lib/gtk-2.0/2.10.0/engines
chmod g+w,o+t /usr/lib/gtk-2.0/2.10.0/engines
chgrp install /usr/lib/gtk-2.0/modules
chmod g+w,o+t /usr/lib/gtk-2.0/modules
chgrp install /usr/lib/gtk-2.0/2.10.0/immodules # for ibus
chmod g+w,o+t /usr/lib/gtk-2.0/2.10.0/immodules
EOF
          fi
    ;;
    guile)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/guile
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/guile
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/guile/2.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/guile/2.0
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/guile  # for gnutls
chmod g+w,o+t /usr/share/guile
chgrp install /usr/lib/guile/2.0
chmod g+w,o+t /usr/lib/guile/2.0
EOF
          fi
    ;;
    gutenprint)
          cat >> $Output << "EOF"
chown root /usr/lib/cups/driver
chmod 755  /usr/lib/cups/driver
chown root /usr/lib/cups/filter
chmod 755  /usr/lib/cups/filter
EOF
          if $useDESTDIR; then # --sbindir is not handled properly
            cat >> $Output << "EOF"
mv ${PkgUserDir}/${PkgName}/usr/sbin/* ${PkgUserDir}/${PkgName}/usr/bin/
rm -rf ${PkgUserDir}/${PkgName}/usr/sbin
EOF
          fi
    ;;
    gvfs)
          cat >> $Output << "EOF"
chgrp install /usr/share/GConf/gsettings
chmod g+w,o+t /usr/share/GConf/gsettings
EOF
    ;;
    hcolr-icon-thme)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/apps
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/apps
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/actions
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/actions
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/mimetypes
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/mimetypes
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/devices
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/devices
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/status
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/status
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/emblems
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/emblems
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/categories
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/categories
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/stock/navigation
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/stock/navigation
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/stock/media
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/stock/media
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/icons
chmod g+w,o+t /usr/share/icons
chgrp install /usr/share/icons/hicolor
chmod g+w,o+t /usr/share/icons/hicolor
chgrp install /usr/share/icons/hicolor/*/apps
chmod g+w,o+t /usr/share/icons/hicolor/*/apps
chgrp install /usr/share/icons/hicolor/*/actions
chmod g+w,o+t /usr/share/icons/hicolor/*/actions
chgrp install /usr/share/icons/hicolor/*/mimetypes # for color-manager
chmod g+w,o+t /usr/share/icons/hicolor/*/mimetypes
chgrp install /usr/share/icons/hicolor/*/devices
chmod g+w,o+t /usr/share/icons/hicolor/*/devices
chgrp install /usr/share/icons/hicolor/*/status
chmod g+w,o+t /usr/share/icons/hicolor/*/status
chgrp install /usr/share/icons/hicolor/*/emblems
chmod g+w,o+t /usr/share/icons/hicolor/*/emblems
chgrp install /usr/share/icons/hicolor/*/categories
chmod g+w,o+t /usr/share/icons/hicolor/*/categories
chgrp install /usr/share/icons/hicolor/*/stock/navigation
chmod g+w,o+t /usr/share/icons/hicolor/*/stock/navigation
chgrp install /usr/share/icons/hicolor/*/stock/media
chmod g+w,o+t /usr/share/icons/hicolor/*/stock/media
EOF
          fi
    ;;
    ibus)
          if [ "$GNOME_OR_XFCE" = gnome ]; then
            if $useDESTDIR; then
              cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/etc/dconf/profile
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/dconf/profile
chgrp install ${PkgUserDir}/${PkgName}/etc/dconf/db
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/dconf/db
EOF
            else
              cat >> $Output << "EOF"
chgrp install /etc/dconf/profile
chmod g+w,o+t /etc/dconf/profile
chgrp install /etc/dconf/db
chmod g+w,o+t /etc/dconf/db
EOF
            fi
          fi
    ;;
    icon-nam-utls)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/pkgconfig
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/pkgconfig
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/pkgconfig
chmod g+w,o+t /usr/share/pkgconfig
EOF
          fi
    ;;
    inkscape)
          if ! $useDESTDIR; then
            cat >> $Output << "EOF"
gtk-update-icon-cache
update-desktop-database
EOF
          fi
    ;;
    iso-codes)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/pkgconfig
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/pkgconfig
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/locale/*/LC_MESSAGES
chgrp install ${PkgUserDir}/${PkgName}/usr/share/xml
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/xml
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/pkgconfig # for usbutils
chmod g+w,o+t /usr/share/pkgconfig
chmod g+w,o+t /usr/share/locale/*/LC_MESSAGES
chgrp install /usr/share/xml # for docbook-xml
chmod g+w,o+t /usr/share/xml
EOF
          fi
    ;;
    java-hamcrest)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/java
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/java
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/java
chmod g+w,o+t /usr/share/java
EOF
          fi
    ;;
    libatasmart)   #/usr/share/vala/vapi
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/vala
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/vala
chgrp install ${PkgUserDir}/${PkgName}/usr/share/vala/vapi
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/vala/vapi
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/vala # for vala
chmod g+w,o+t /usr/share/vala
chgrp install /usr/share/vala/vapi # for libgee
chmod g+w,o+t /usr/share/vala/vapi
EOF
          fi
    ;;
    libcanberra)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gtk-3.0/modules
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gtk-3.0/modules
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gdm
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gdm
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gnome
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gnome
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/lib/gtk-3.0/modules
chmod g+w,o+t /usr/lib/gtk-3.0/modules
chgrp install /usr/share/gdm # for gdm
chmod g+w,o+t /usr/share/gdm
chgrp install /usr/share/gnome
chmod g+w,o+t /usr/share/gnome
EOF
          fi
    ;;
    libcap)
          if ! $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install /lib/security
chmod g+w,o+t /lib/security
EOF
          fi
    ;;
    libcdio)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
sed -i '/LIBCDIO_SOURCE_PATH/s|.*|/* #undef LIBCDIO_SOURCE_PATH */|' \
    ${PkgUserDir}/${PkgName}/usr/include/cdio/cdio_config.h
EOF
          else
            cat >> $Output << "EOF"
sed -i '/LIBCDIO_SOURCE_PATH/s|.*|/* #undef LIBCDIO_SOURCE_PATH */|' \
    /usr/include/cdio/cdio_config.h
EOF
          fi
    ;;
    libffi)
          if $useDESTDIR; then # mv lib64 contents to lib. Can't do this in configure
            cat >> $Output << "EOF"
mv ${PkgUserDir}/${PkgName}/usr/lib64/* ${PkgUserDir}/${PkgName}/usr/lib
rm -rf ${PkgUserDir}/${PkgName}/usr/lib64
EOF
          fi
    ;;
    libgpg-error)   #/usr/share/common-lisp/source
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/common-lisp/source
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/common-lisp/source
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/common-lisp/source # for gpgme
chmod g+w,o+t /usr/share/common-lisp/source
EOF
          fi
    ;;
    libgsf)
         if $useDESTDIR; then
           cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/thumbnailers
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/thumbnailers
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/thumbnailers
chmod g+w,o+t /usr/share/thumbnailers
EOF
          fi
    ;;
    libgweather)
          cat >> $Output << "EOF"
chgrp install /usr/share/icons/gnome
chmod g+w,o+t /usr/share/icons/gnome
chgrp install /usr/share/icons/gnome/scalable
chmod g+w,o+t /usr/share/icons/gnome/scalable
EOF
    ;;
    libidn) 
         if $useDESTDIR; then
           cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/emacs/site-lisp
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/emacs/site-lisp
EOF
         else
           cat >> $Output << "EOF"
chgrp install /usr/share/emacs/site-lisp
chmod g+w,o+t /usr/share/emacs/site-lisp
EOF
         fi
    ;;
    libsigcpp)   #/usr/share/devhelp/books
         if $useDESTDIR; then
           cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/devhelp
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/devhelp
chgrp install ${PkgUserDir}/${PkgName}/usr/share/devhelp/books
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/devhelp/books
EOF
         else
           cat >> $Output << "EOF"
chgrp install /usr/share/devhelp # for devhelp
chmod g+w,o+t /usr/share/devhelp
chgrp install /usr/share/devhelp/books # for glibmm
chmod g+w,o+t /usr/share/devhelp/books
EOF
         fi
    ;;
    libvdpau)
         if $useDESTDIR; then
           cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/vdpau
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/vdpau
EOF
         else
           cat >> $Output << "EOF"
chgrp install /usr/lib/vdpau
chmod g+w,o+t /usr/lib/vdpau
EOF
         fi
    ;;
    libxcb) # /usr/include/xcb
         if $useDESTDIR; then
           cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/xcb
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/xcb
EOF
         else
           cat >> $Output << "EOF"
chgrp install /usr/include/xcb
chmod g+w,o+t /usr/include/xcb
EOF
         fi
    ;;
    libxfce4ui)
         cat >> $Output << "EOF"
chgrp install /etc/xdg/xfce4
chmod g+w,o+t /etc/xdg/xfce4
chgrp install /etc/xdg/xfce4/xfconf/xfce-perchannel-xml
chmod g+w,o+t /etc/xdg/xfce4/xfconf/xfce-perchannel-xml
EOF
    ;;
    libxfce4util)
         cat >> $Output << "EOF"
chgrp install /usr/include/xfce4
chmod g+w,o+t /usr/include/xfce4
EOF
    ;;
    libxml2)
         if $useDESTDIR; then
           cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/cmake
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/cmake
EOF
         else
           cat >> $Output << "EOF"
chgrp install /usr/lib/cmake
chmod g+w,o+t /usr/lib/cmake
EOF
         fi
    ;;
    linux-pam)
         if $useDESTDIR; then
           cat >> $Output << "EOF"
chown linux-pam:install ${PkgUserDir}/${PkgName}/etc/pam.d
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/pam.d
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/security
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/security
chgrp install ${PkgUserDir}/${PkgName}/etc/security
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/security
EOF
         else
           cat >> $Output << "EOF"
chown linux-pam:install /etc/pam.d
chmod g+w,o+t /etc/pam.d
chgrp install /usr/lib/security # for consolekit
chmod g+w,o+t /usr/lib/security
chgrp install /etc/security # for libpwquality
chmod g+w,o+t /etc/security
EOF
         fi  
    ;;
    lvm2)
         if $useDESTDIR; then
           cat >> $Output << "EOF"
if ! $AS_ROOT; then chown -R lvm2:lvm2 ${PkgUserDir}/${PkgName}/usr/lib/systemd/system-generators; fi
EOF
         fi
    ;;
    modem-manager)
         if $useDESTDIR; then
           cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/udev/rules.d
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/udev/rules.d
chgrp install ${PkgUserDir}/${PkgName}/usr/share/dbus-1/interfaces
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/dbus-1/interfaces
install -m755 -d ${PkgUserDir}/${PkgName}/usr/share/gtk-doc/html
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gtk-doc/html
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gtk-doc/html
EOF
         else
           cat >> $Output << "EOF"
chgrp install /usr/share/icons/hicolor
chmod g+w,o+t /usr/share/icons/hicolor
EOF
         fi
    ;;
    mutter)
         cat >> $Output << "EOF"
chgrp install /usr/share/gnome-control-center
chmod g+w,o+t /usr/share/gnome-control-center
chgrp install /usr/share/gnome-control-center/keybindings
chmod g+w,o+t /usr/share/gnome-control-center/keybindings
chgrp install /usr/share/gtk-doc/html/meta
chmod g+w,o+t /usr/share/gtk-doc/html/meta
EOF
    ;;
    nautilus)
         cat >> $Output << "EOF"
chgrp install /usr/lib/nautilus
chmod g+w,o+t /usr/lib/nautilus
chgrp install /usr/lib/nautilus/extensions-3.0
chmod g+w,o+t /usr/lib/nautilus/extensions-3.0
chgrp install /usr/share/gnome-shell
chmod g+w,o+t /usr/share/gnome-shell
chgrp install /usr/share/gnome-shell/search-providers
chmod g+w,o+t /usr/share/gnome-shell/search-providers
EOF
    ;;
    nautilus-sendto)
         cat >> $Output << "EOF"
if [ -e /usr/lib/nautilus-sendto/plugins ]; then
chgrp install /usr/lib/nautilus-sendto/plugins
chmod g+w,o+t /usr/lib/nautilus-sendto/plugins
fi
if [ -e /usr/lib/nautilus/extensions-3.0 ]; then
chgrp install /usr/lib/nautilus/extensions-3.0
chmod g+w,o+t /usr/lib/nautilus/extensions-3.0
fi
EOF
    ;;
    networkmanager)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chown root ${PkgUserDir}/${PkgName}/usr/lib/NetworkManager/*.so
EOF
          else
            cat >> $Output << "EOF"
chown root /usr/lib/NetworkManager/*.so
if [ "$SYSTEMD" = yes ]; then
  systemctl enable NetworkManager.service
fi
EOF
          fi
    ;;
    nmap)
          if ! $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install /usr/share/man/fr/man1
chmod g+w,o+t /usr/share/man/fr/man1
chgrp install /usr/share/man/ja/man1
chmod g+w,o+t /usr/share/man/ja/man1
chgrp install /usr/share/man/sk/man1
chmod g+w,o+t /usr/share/man/sk/man1
if [ -e /usr/share/applications ]; then
  chgrp install /usr/share/applications
  chmod g+w,o+t /usr/share/applications
fi
EOF
          fi
    ;;
    nvidia-utils)
          cat >> $Output << "EOF"
chown root /usr/bin/nvidia-modprobe
chmod 4755 /usr/bin/nvidia-modprobe
EOF
    ;;
    openbox)
          cat >> $Output << "EOF"
chgrp install /usr/share/gnome
chmod g+w,o+t /usr/share/gnome
chgrp install /usr/share/gnome-session
chmod g+w,o+t /usr/share/gnome-session
chgrp install /usr/share/gnome-session/sessions
chmod g+w,o+t /usr/share/gnome-session/sessions
chgrp install /usr/share/xsessions
chmod g+w,o+t /usr/share/xsessions
EOF
    ;;
    openjdk)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/opt/jdk/jre
chmod g+w,o+t ${PkgUserDir}/${PkgName}/opt/jdk/jre
chgrp install ${PkgUserDir}/${PkgName}/opt/jdk/jre/lib
chmod g+w,o+t ${PkgUserDir}/${PkgName}/opt/jdk/jre/lib
chgrp install ${PkgUserDir}/${PkgName}/opt/jdk/jre/bin
chmod g+w,o+t ${PkgUserDir}/${PkgName}/opt/jdk/jre/bin
chgrp install ${PkgUserDir}/${PkgName}/opt/jdk/man
chmod g+w,o+t ${PkgUserDir}/${PkgName}/opt/jdk/man
chgrp install ${PkgUserDir}/${PkgName}/opt/jdk/man/man1
chmod g+w,o+t ${PkgUserDir}/${PkgName}/opt/jdk/man/man1
chgrp install ${PkgUserDir}/${PkgName}/opt/jdk/man/ja_JP.UTF-8
chmod g+w,o+t ${PkgUserDir}/${PkgName}/opt/jdk/man/ja_JP.UTF-8
install -D -m644 ${blfsfiles}/install-files/java/openjdk.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
          else
            cat >> $Output << "EOF"
chgrp install /opt/jdk/jre
chmod g+w,o+t /opt/jdk/jre
chgrp install /opt/jdk/jre/lib
chmod g+w,o+t /opt/jdk/jre/lib
chgrp install /opt/jdk/jre/bin
chmod g+w,o+t /opt/jdk/jre/bin
chgrp install /opt/jdk/man
chmod g+w,o+t /opt/jdk/man
chgrp install /opt/jdk/man/man1
chmod g+w,o+t /opt/jdk/man/man1
chgrp install /opt/jdk/man/ja_JP.UTF-8
chmod g+w,o+t /opt/jdk/man/ja_JP.UTF-8
chown openjdk:openjdk /etc/profile.d/openjdk.sh
EOF
          fi
    ;;
    openldap)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/etc/openldap
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/openldap
EOF
          else
            cat >> $Output << "EOF"
chgrp install /etc/openldap
chmod g+w,o+t /etc/openldap
EOF
          fi
    ;;
    openobex)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/cmake
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/cmake
install -D -m644 ${blfsfiles}/install-files/libraries/openobex.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/lib/cmake
chmod g+w,o+t /usr/lib/cmake
EOF
          fi
    ;;
    openssh)
       if [ "$SYSTEMD" = yes ]; then
         if $useDESTDIR; then
           cat >> $Output << "EOF"
install -Dm644 ${blfsfiles}/service/sshdgenkeys.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/sshdgenkeys.service
install -Dm644 ${blfsfiles}/service/sshd.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/sshd.service
install -Dm644 ${blfsfiles}/service/sshd.socket ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/sshd.socket
install -Dm644 ${blfsfiles}/service/sshd@.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/sshd@.service
mkdir -pv ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d
install -Dm644 ${blfsfiles}/conf-files/sshd.conf ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d
install -Dm644 ${blfsfiles}/conf-files/pam-sshd ${PkgUserDir}/${PkgName}/etc/pam.d/sshd
chmod 644 ${PkgUserDir}/${PkgName}/etc/pam.d/sshd
if ! $AS_ROOT; then
  chown -R openssh:openssh ${PkgUserDir}/${PkgName}/usr/lib/systemd
  chown -R openssh:openssh ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d
  chown -R openssh:openssh ${PkgUserDir}/${PkgName}/etc/pam.d
fi
EOF
         else 
           cat >> $Output << "EOF"
install -Dm644 ${blfsfiles}/service/sshdgenkeys.service /usr/lib/systemd/system/sshdgenkeys.service
install -Dm644 ${blfsfiles}/service/sshd.service /usr/lib/systemd/system/sshd.service
install -Dm644 ${blfsfiles}/service/sshd.socket /usr/lib/systemd/system/sshd.socket
install -Dm644 ${blfsfiles}/service/sshd@.service /usr/lib/systemd/system/sshd@.service
install -Dm644 ${blfsfiles}/conf-files/sshd.conf /usr/lib/tmpfiles.d
if ! $AS_ROOT; then
  chown openssh:openssh /usr/lib/systemd/system/sshd*
  chown openssh:openssh /usr/lib/tmpfiles.d/sshd.conf
fi
EOF
         fi
       fi
       if $useDESTDIR; then
          cat >> $Output << "EOF"
chown root ${PkgUserDir}/${PkgName}/usr/lib/ssh/ssh-keysign
chmod 4711 ${PkgUserDir}/${PkgName}/usr/lib/ssh/ssh-keysign
EOF
       else
          cat >> $Output << "EOF"
chown root /usr/lib/ssh/ssh-keysign
chmod 4711 /usr/lib/ssh/ssh-keysign
EOF
       fi
    ;;
    openssl)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/etc/ssl
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/ssl
mkdir -pv ${PkgUserDir}/${PkgName}/etc/ssl/certs
chgrp install ${PkgUserDir}/${PkgName}/etc/ssl/certs
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/ssl/certs
EOF
          else
            cat >> $Output << "EOF"
chgrp install /run # for linux-pam
chmod g+w,o+t /run
chgrp install /etc/ssl # for cacerts
chmod g+w,o+t /etc/ssl
chgrp install /etc/ssl/certs
chmod g+w,o+t /etc/ssl/certs
EOF
          fi
    ;;
    p11-kit)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gtk-doc/html
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gtk-doc/html
chgrp install ${PkgUserDir}/${PkgName}/usr/share/p11-kit/modules
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/p11-kit/modules
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/pkcs11
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/pkcs11
chgrp install ${PkgUserDir}/${PkgName}/etc/pkcs11
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/pkcs11
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/gtk-doc/html # for gegl
chmod g+w,o+t /usr/share/gtk-doc/html
chgrp install /usr/share/p11-kit/modules # for gnome-keyring
chmod g+w,o+t /usr/share/p11-kit/modules
chgrp install /usr/lib/pkcs11
chmod g+w,o+t /usr/lib/pkcs11
chgrp install /etc/pkcs11
chmod g+w,o+t /etc/pkcs11
EOF
          fi
    ;;
    pango)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
install -m755 -d ${PkgUserDir}/${PkgName}/etc/pango
chgrp install ${PkgUserDir}/${PkgName}/etc/pango
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/pango
chgrp install ${PkgUserDir}/${PkgName}/usr/include/pango-1.0/pango
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/pango-1.0/pango
install -D -m644 ${blfsfiles}/install-files/xlibs/pango.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
          else
            cat >> $Output << "EOF"
chgrp install /etc/pango # for pangox-compat
chmod g+w,o+t /etc/pango
chgrp install /usr/include/pango-1.0/pango
chmod g+w,o+t /usr/include/pango-1.0/pango
EOF
          fi
    ;;
    parole)
          cat >> $Output << "EOF"
chgrp install /usr/share/applications
chmod g+w,o+t /usr/share/applications
EOF
    ;;
    php)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
cat >> ${PkgUserDir}/${PkgName}/etc/httpd/httpd.conf << "PHPEOF"
LoadModule php5_module /usr/lib/httpd/modules/libphp5.so
AddType application/x-httpd-php .php
AddType application/x-httpd-php-source .phps
PHPEOF
chown apache:apache ${PkgUserDir}/${PkgName}/etc/httpd/httpd.conf
EOF
          else
            cat >> $Output << "EOF"
cat >> /etc/httpd/httpd.conf << "PHPEOF"
LoadModule php5_module /usr/lib/httpd/modules/libphp5.so
AddType application/x-httpd-php .php
AddType application/x-httpd-php-source .phps
PHPEOF
chown apache:apache /etc/httpd/httpd.conf
EOF
          fi
    ;;
    pidgin)
          if ! $useDESTDIR; then
            cat >> $Output << "EOF"
gtk-update-icon-cache
update-desktop-database
EOF
            if [ "$GNOME_OR_XFCE" = gnome ]; then
              cat >> $Output << "EOF"
chgrp install /etc/gconf/schemas
chmod g+w,o+t /etc/gconf/schemas
EOF
            fi
          fi
    ;;
    polkit)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chown root ${PkgUserDir}/${PkgName}/usr/lib/polkit-1/polkit-agent-helper-1
chmod 4755 ${PkgUserDir}/${PkgName}/usr/lib/polkit-1/polkit-agent-helper-1
chown root ${PkgUserDir}/${PkgName}/usr/bin/pkexec
chmod 4755 ${PkgUserDir}/${PkgName}/usr/bin/pkexec
chown polkitd ${PkgUserDir}/${PkgName}/etc/polkit-1/rules.d
chmod 700 ${PkgUserDir}/${PkgName}/etc/polkit-1/rules.d
chown polkitd:install ${PkgUserDir}/${PkgName}/usr/share/polkit-1/rules.d
chmod 1775 ${PkgUserDir}/${PkgName}/usr/share/polkit-1/rules.d
chgrp install ${PkgUserDir}/${PkgName}/etc/dbus-1
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/dbus-1
chgrp install ${PkgUserDir}/${PkgName}/etc/dbus-1/system.d
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/dbus-1/system.d
chgrp install ${PkgUserDir}/${PkgName}/usr/share/dbus-1
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/dbus-1
chgrp install ${PkgUserDir}/${PkgName}/usr/share/dbus-1/system-services
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/dbus-1/system-services
chgrp install ${PkgUserDir}/${PkgName}/usr/share/polkit-1/actions
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/polkit-1/actions
install -D -m644 ${blfsfiles}/install-files/security/polkit.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
          else
            cat >> $Output << "EOF"
groupadd -fg 27 polkitd # dedicated user to take control of polkitd
useradd -c "PolicyKit Daemon Owner" -d /etc/polkit-1 -u 27 \
        -g polkitd -s /bin/false polkitd
chgrp install /usr/share/polkit-1/actions # for colord
chmod g+w,o+t /usr/share/polkit-1/actions
chown root /usr/lib/polkit-1/polkit-agent-helper-1
chmod 4755 /usr/lib/polkit-1/polkit-agent-helper-1
chown root /usr/bin/pkexec
chmod 4755 /usr/bin/pkexec
chown polkitd /etc/polkit-1/rules.d
chmod 700 /etc/polkit-1/rules.d
chown polkitd:install /usr/share/polkit-1/rules.d
chmod 1775 /usr/share/polkit-1/rules.d
chgrp install /etc/dbus-1 # for dbus
chmod g+w,o+t /etc/dbus-1
chgrp install /etc/dbus-1/system.d
chmod g+w,o+t /etc/dbus-1/system.d
chgrp install /usr/share/dbus-1 # for dbus
chmod g+w,o+t /usr/share/dbus-1
chgrp install /usr/share/dbus-1/system-services
chmod g+w,o+t /usr/share/dbus-1/system-services
EOF
          fi
    ;;
    py2cairo)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/pycairo
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/pycairo
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/include/pycairo
chmod g+w,o+t /usr/include/pycairo
EOF
          fi
    ;;
    pygobject2)
          if $useDESTDIR; then
echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/python${py2series}/site-packages/gtk-2.0
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/python${py2series}/site-packages/gtk-2.0
chgrp install \${PkgUserDir}/\${PkgName}/usr/include/pygtk-2.0
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/include/pygtk-2.0" >> $Output
          else
echo "chgrp install /usr/lib/python${py2series}/site-packages/gi
chmod g+w,o+t /usr/lib/python${py2series}/site-packages/gi
chgrp install /usr/lib/python${py2series}/site-packages/gi/repository
chmod g+w,o+t /usr/lib/python${py2series}/site-packages/gi/repository
chgrp install /usr/lib/python${py2series}/site-packages/gi/overrides
chmod g+w,o+t /usr/lib/python${py2series}/site-packages/gi/overrides
chgrp install /usr/lib/python${py2series}/site-packages/gtk-2.0
chmod g+w,o+t /usr/lib/python${py2series}/site-packages/gtk-2.0
chgrp install /usr/include/pygtk-2.0
chmod g+w,o+t /usr/include/pygtk-2.0" >> $Output
          fi
    ;;
    py2-gobject3)
          if $useDESTDIR; then
echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/python${py2series}/site-packages/gi
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/python${py2series}/site-packages/gi
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/python${py2series}/site-packages/gi/overrides
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/python${py2series}/site-packages/gi/overrides
chgrp install \${PkgUserDir}/\${PkgName}/usr/include/pygobject-3.0
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/include/pygobject-3.0" >> $Output
          else
echo "chgrp install /usr/lib/python${py2series}/site-packages/gi
chmod g+w,o+t /usr/lib/python${py2series}/site-packages/gi
chgrp install /usr/lib/python${py2series}/site-packages/gi/overrides
chmod g+w,o+t /usr/lib/python${py2series}/site-packages/gi/overrides
chgrp install /usr/include/pygobject-3.0
chmod g+w,o+t /usr/include/pygobject-3.0" >> $Output
          fi
    ;;
    py3-gobject3)
          if $useDESTDIR; then
echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/python${py3series}/site-packages/gi
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/python${py3series}/site-packages/gi
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/python${py3series}/site-packages/gi/overrides
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/python${py3series}/site-packages/gi/overrides
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/python${py3series}/site-packages/gi/overrides/__pycache__
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/python${py3series}/site-packages/gi/overrides/__pycache__" >> $Output
          else
echo "chgrp install /usr/lib/python${py3series}/site-packages/gi
chmod g+w,o+t /usr/lib/python${py3series}/site-packages/gi
chgrp install /usr/lib/python${py3series}/site-packages/gi/overrides
chmod g+w,o+t /usr/lib/python${py3series}/site-packages/gi/overrides
chgrp install /usr/lib/python${py3series}/site-packages/gi/overrides/__pycache__
chmod g+w,o+t /usr/lib/python${py3series}/site-packages/gi/overrides/__pycache__" >> $Output
          fi
    ;;
    pygtk)
          if $useDESTDIR; then
          cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/pygtk/2.0/defs
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/pygtk/2.0/defs
EOF
          else
          cat >> $Output << "EOF"
chgrp install /usr/share/pygtk/2.0/defs
chmod g+w,o+t /usr/share/pygtk/2.0/defs
EOF
          fi
    ;;
    pysolfc)
          if $useDESTDIR; then
          cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/applications
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/applications
EOF
          else
          cat >> $Output << "EOF"
chgrp install /usr/share/applications
chmod g+w,o+t /usr/share/applications
EOF
          fi
    ;;
    python2)  #/usr/share/man
          if $useDESTDIR; then
echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/share/man
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/share/man
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/python${py2series}/site-packages
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/python${py2series}/site-packages" >> $Output
          else
echo "chgrp install /usr/share/man
chmod g+w,o+t /usr/share/man
chgrp install /usr/lib/python${py2series}/site-packages #for python modules
chmod g+w,o+t /usr/lib/python${py2series}/site-packages" >> $Output
          fi
    ;;
    python3)
           if $useDESTDIR; then
echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/python${py3series}/site-packages
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/python${py3series}/site-packages" >> $Output
           else
echo "chgrp install /usr/lib/python${py3series}/site-packages #for python modules
chmod g+w,o+t /usr/lib/python${py3series}/site-packages" >> $Output
           fi
    ;;
    py2-make|py2-setuptools)
          if ! $useDESTDIR; then
echo "chgrp install /usr/lib/python${py2series}/site-packages/easy-install.pth
chmod 664 /usr/lib/python${py2series}/site-packages/easy-install.pth" >> $Output
          fi
    ;;
    py3-mako|py3-setuptools)
          if ! $useDESTDIR; then
echo "chgrp install /usr/lib/python${py3series}/site-packages/easy-install.pth
chmod 664 /usr/lib/python${py3series}/site-packages/easy-install.pth" >> $Output
          fi
    ;;
    qt4) # change /usr to root:root and 755 because qt4 installs /usr/tests
          if $useDESTDIR; then
             cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/install-files/xlibs/qt4.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
          else
             cat >> $Output << "EOF"
chgrp root /usr
chmod 755 /usr
EOF
          fi
    ;;
    rarian)
          if $useDESTDIR; then
             cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/help
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/help
EOF
           else
             cat >> $Output << "EOF"
chgrp install /usr/share/help
chmod g+w,o+t /usr/share/help
EOF
           fi
    ;;
    rsync)
           if $useDESTDIR; then
             cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/install-files/networks/rsync.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
           fi
    ;;
    ruby)
           if $useDESTDIR; then
             echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/ruby/site_ruby/$rubyseries
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/ruby/site_ruby/$rubyseries
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/ruby/site_ruby/$rubyseries/x86_64-linux
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/ruby/site_ruby/$rubyseries/x86_64-linux
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/ruby/vendor_ruby/$rubyseries
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/ruby/vendor_ruby/$rubyseries
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/ruby/vendor_ruby/$rubyseries/x86_64-linux
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/ruby/vendor_ruby/$rubyseries/x86_64-linux" >> $Output
           else
             echo "chgrp install /usr/lib/ruby/site_ruby/$rubyseries
chmod g+w,o+t /usr/lib/ruby/site_ruby/$rubyseries
chgrp install /usr/lib/ruby/site_ruby/$rubyseries/x86_64-linux
chmod g+w,o+t /usr/lib/ruby/site_ruby/$rubyseries/x86_64-linux
chgrp install /usr/lib/ruby/vendor_ruby/$rubyseries
chmod g+w,o+t /usr/lib/ruby/vendor_ruby/$rubyseries
chgrp install /usr/lib/ruby/vendor_ruby/$rubyseries/x86_64-linux
chmod g+w,o+t /usr/lib/ruby/vendor_ruby/$rubyseries/x86_64-linux" >> $Output
          fi

    ;;
    sgml-common)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/sgml
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/sgml
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/sgml
chmod g+w,o+t /usr/share/sgml # for opensp
EOF
          fi
    ;;
    shadow)  #/bin/su, etc setuid root
           if $useDESTDIR; then
             cat >> $Output << "EOF"
chown root ${PkgUserDir}/${PkgName}/usr/bin/{chage,chfn,chsh,expiry,gpasswd,newgidmap,newgrp,newuidmap,passwd,su}
chmod 4755 ${PkgUserDir}/${PkgName}/usr/bin/{chage,chfn,chsh,expiry,gpasswd,newgidmap,newgrp,newuidmap,passwd,su}
#cp -v ${blfsfiles}/conf-files/login.defs ${PkgUserDir}/${PkgName}/etc/
# move all the files out of /usr/sbin to /usr/bin
mv ${PkgUserDir}/${PkgName}/usr/sbin/* ${PkgUserDir}/${PkgName}/usr/bin
rm -rf ${PkgUserDir}/${PkgName}/usr/sbin
EOF
           else
             cat >> $Output << "EOF"
chown root /bin/{chage,chfn,chsh,expiry,gpasswd,newgidmap,newgrp,newuidmap,su,passwd}
chmod 4755 /bin/{chage,chfn,chsh,expiry,gpasswd,newgidmap,newgrp,newuidmap,su,passwd}
#cp -v ${blfsfiles}/conf-files/login.defs /etc/
EOF
          fi
    ;;
    shrd-mime-info)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/mime
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/mime
chgrp install ${PkgUserDir}/${PkgName}/usr/share/mime/packages
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/mime/packages
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/mime
chmod g+w,o+t /usr/share/mime
chgrp install /usr/share/mime/packages
chmod g+w,o+t /usr/share/mime/packages
EOF
          fi
    ;;
    subversion)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
if [ "$SYSTEMD" = yes ]; then
  install -D -m 644 ${blfsfiles}/service/svnserve.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/svnserve.service
  install -D -m 644 ${blfsfiles}/conf-files/svnserve.tmpfiles ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/svnserve.conf
  install -D -m 644 ${blfsfiles}/conf-files/svnserve.conf ${PkgUserDir}/${PkgName}/etc/conf.d/svnserve
  chown subversion:subversion ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/svnserve.service
  chown subversion:subversion ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/svnserve.conf
  chown subversion:subversion ${PkgUserDir}/${PkgName}/etc/conf.d/svnserve
fi
EOF
          else
            cat >> $Output << "EOF"
if [ "$SYSTEMD" = yes ]; then
  install -D -m 644 ${blfsfiles}/service/svnserve.service /usr/lib/systemd/system/svnserve.service
  install -D -m 644 ${blfsfiles}/conf-files/svnserve.tmpfiles /usr/lib/tmpfiles.d/svnserve.conf
  install -D -m 644 ${blfsfiles}/conf-files/svnserve.conf /etc/conf.d/svnserve
  chown subversion:subversion /usr/lib/systemd/system/svnserve.service
  chown subversion:subversion /usr/lib/tmpfiles.d/svnserve.conf
  chown subversion:subversion /etc/conf.d/svnserve
fi
EOF
          fi
    ;;
    sudo)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chown root ${PkgUserDir}/${PkgName}/usr/bin/sudo
chmod 4111 ${PkgUserDir}/${PkgName}/usr/bin/sudo
chown root ${PkgUserDir}/${PkgName}/usr/lib/sudo/sudoers.so
chown root ${PkgUserDir}/${PkgName}/etc/sudoers
chown root ${PkgUserDir}/${PkgName}/etc/sudoers.d
chmod 444  ${PkgUserDir}/${PkgName}/etc/sudoers
chown root ${PkgUserDir}/${PkgName}/var/lib/sudo
chown root ${PkgUserDir}/${PkgName}/var/lib/sudo/lectured
# add your username to /etc/sudoers so you can sudo
sed -i 's/root ALL=(ALL) ALL/root ALL=(ALL) ALL\njohn ALL=(ALL) ALL/' ${PkgUserDir}/${PkgName}/etc/sudoers
EOF
          else
            cat >> $Output << "EOF"
chown root /usr/bin/sudo
chmod 4111 /usr/bin/sudo
chown root /usr/lib/sudo/sudoers.so
chown root /etc/sudoers
chown root /etc/sudoers.d
chmod 444  /etc/sudoers
chown root /var/lib/sudo
chown root /var/lib/sudo/lectured
# add your username to /etc/sudoers so you can sudo
sed -i 's/root ALL=(ALL) ALL/root ALL=(ALL) ALL\njohn ALL=(ALL) ALL/' /etc/sudoers
EOF
          fi
    ;;
    systemd)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/systemd/system-sleep
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/systemd/system-sleep
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/systemd/user
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/systemd/user
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/udev/hwdb.d
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/udev/hwdb.d
chgrp install ${PkgUserDir}/${PkgName}/usr/share/polkit-1
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/polkit-1
chgrp install ${PkgUserDir}/${PkgName}/usr/share/polkit-1/actions
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/polkit-1/actions
chgrp install ${PkgUserDir}/${PkgName}/usr/share/zsh/site-functions
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/zsh/site-functions
chown root:systemd-journal ${PkgUserDir}/${PkgName}/var/log/journal
chmod 2755 ${PkgUserDir}/${PkgName}/var/log/journal
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/lib/systemd/system-sleep
chmod g+w,o+t /usr/lib/systemd/system-sleep
chgrp install /usr/lib/systemd/user
chmod g+w,o+t /usr/lib/systemd/user
chgrp install /usr/lib/udev/hwdb.d
chmod g+w,o+t /usr/lib/udev/hwdb.d
chgrp install /usr/share/polkit-1
chmod g+w,o+t /usr/share/polkit-1
chgrp install /usr/share/polkit-1/actions
chmod g+w,o+t /usr/share/polkit-1/actions
chgrp install /usr/share/zsh/site-functions
chmod g+w,o+t /usr/share/zsh/site-functions
chown root:systemd-journal /var/log/journal
chmod 2755 /var/log/journal
EOF
          fi
    ;;
    tcl)
          if ! $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install /usr/share/man/mann
chmod g+w,o+t /usr/share/man/mann
chgrp install /usr/share/gdb/auto-load #for glib
chmod g+w,o+t /usr/share/gdb/auto-load
chgrp install /etc/bash_completion.d #for glib
chmod g+w,o+t /etc/bash_completion.d
EOF
          fi
    ;;
    telepathy-glib)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/telepathy-1.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/telepathy-1.0
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/include/telepathy-1.0
chmod g+w,o+t /usr/include/telepathy-1.0
EOF
          fi
    ;;
    telepathy-idle)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/telepathy/managers
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/telepathy/managers
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/telepathy/managers
chmod g+w,o+t /usr/share/telepathy/managers
EOF
          fi
    ;;
    telepathy-logr)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/telepathy
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/telepathy
chgrp install ${PkgUserDir}/${PkgName}/usr/share/telepathy
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/telepathy
chgrp install ${PkgUserDir}/${PkgName}/usr/share/telepathy/clients
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/telepathy/clients
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/lib/telepathy # for telepathy-mission-control
chmod g+w,o+t /usr/lib/telepathy
chgrp install /usr/share/telepathy
chmod g+w,o+t /usr/share/telepathy
chgrp install /usr/share/telepathy/clients
chmod g+w,o+t /usr/share/telepathy/clients
EOF
          fi
    ;;
    thunar)
          cat >> $Output << "EOF"
chgrp install /usr/share/Thunar/sendto
chmod g+w,o+t /usr/share/Thunar/sendto
EOF
    ;;
    traceroute) # set suid root binary
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chown root ${PkgUserDir}/${PkgName}/usr/bin/traceroute
chmod 4755 ${PkgUserDir}/${PkgName}/usr/bin/traceroute
rm -fv ${PkgUserDir}/${PkgName}/usr/share/man/man1/traceroute.1
EOF
          else
            cat >> $Output << "EOF"
chown root /bin/traceroute
chmod 4755 /bin/traceroute
rm -fv /usr/share/man/man1/traceroute.1
EOF
          fi
    ;;
    twm)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/etc/X11/app-defaults
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/X11/app-defaults
EOF
          else
            cat >> $Output << "EOF"
chgrp install /etc/X11/app-defaults
chmod g+w,o+t /etc/X11/app-defaults
EOF
          fi
    ;;
#  ** TODO ** need to fix eudev for a DESTDIR install
    eudev)
          cat >> $Output << "EOF"
chgrp install /etc/udev
chmod g+w,o+t /etc/udev
chgrp install /lib/udev
chmod g+w,o+t /lib/udev
EOF
    ;;
    upower)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/dbus-1/interfaces
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/dbus-1/interfaces
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/dbus-1/interfaces
chmod g+w,o+t /usr/share/dbus-1/interfaces
EOF
          fi
    ;;
    usbutils)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/pkgconfig
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/pkgconfig
EOF
          else
            cat >> $Output << "EOF"
chgrp install /usr/share/pkgconfig
chmod g+w,o+t /usr/share/pkgconfig
EOF
          fi
    ;;
    vala)
          if $useDESTDIR; then
echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/share/vala
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/share/vala
chgrp install \${PkgUserDir}/\${PkgName}/usr/share/vala-${valaseries}/vapi
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/share/vala-${valaseries}/vapi" >> $Output
          else
echo "chgrp install /usr/share/vala
chmod g+w,o+t /usr/share/vala
chgrp install /usr/share/vala-${valaseries}/vapi
chmod g+w,o+t /usr/share/vala-${valaseries}/vapi" >> $Output
          fi
    ;;
    vlc)
          if ! $useDESTDIR; then
            cat >> $Output << "EOF"
gtk-update-icon-cache
update-desktop-database
chgrp install /usr/share/applications
chmod g+w,o+t /usr/share/applications
EOF
          fi
    ;;
    weston)
           if $useDESTDIR; then
             cat >> $Output << "EOF"
chown root ${PkgUserDir}/${PkgName}/usr/bin/weston-launch
chmod u+s ${PkgUserDir}/${PkgName}/usr/bin/weston-launch
chgrp install ${PkgUserDir}/${PkgName}/usr/share/wayland-sessions
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/wayland-sessions
EOF
           else
             cat >> $Output << "EOF"
chown root /usr/bin/weston-launch
chmod u+s /usr/bin/weston-launch
chgrp install /usr/share/wayland-sessions
chmod g+w,o+t /usr/share/wayland-sessions
EOF
           fi
    ;;
    wpa_supplicant)
           if ! $useDESTDIR; then
             cat >> $Output << "EOF"
update-desktop-database
if [ "$SYSTEND" = yes ]; then
  systemctl enable wpa_supplicant.service
fi
EOF
           fi
    ;;
    $xapp)
           if ! $useDESTDIR; then
             cat >> $Output << "EOF"
chgrp install /usr/share/terminfo/x #for xterm
chmod g+w,o+t /usr/share/terminfo/x
EOF
           fi
    ;;
    xboard)
           cat >> $Output << "EOF"
chgrp install /usr/share/games
chmod g+w,o+t /usr/share/games
gtk-update-icon-cache
update-desktop-database
EOF
    ;;
    xclock)
           if $useDESTDIR; then
             cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/etc/X11
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/X11
chgrp install ${PkgUserDir}/${PkgName}/etc/X11/app-defaults
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/X11/app-defaults
EOF
           else
             cat >> $Output << "EOF"
chgrp install /etc/sysconfig
chmod g+w,o+t /etc/sysconfig
chgrp install /etc/X11
chmod g+w,o+t /etc/X11
chgrp install /etc/X11/app-defaults
chmod g+w,o+t /etc/X11/app-defaults
EOF
           fi
    ;;
    xcursor-themes)
           if $useDESTDIR; then
             cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons
EOF
           else
             cat >> $Output << "EOF"
chgrp install /usr/share/icons
chmod g+w,o+t /usr/share/icons
EOF
           fi
    ;;
    xfburn)
          cat >> $Output << "EOF"
chgrp install /usr/share/Thunar/sendto
chmod g+w,o+t /usr/share/Thunar/sendto
EOF
    ;;
    xfce4-xkb-plugin)
          cat >> $Output << "EOF"
chgrp install /usr/share/xfce4/panel-plugins
chmod g+w,o+t /usr/share/xfce4/panel-plugins
EOF
    ;;
    xfce4-panel)
          cat >> $Output << "EOF"
chgrp install /usr/lib/xfce4/panel/plugins
chmod g+w,o+t /usr/lib/xfce4/panel/plugins
chgrp install /usr/share/xfce4/panel/plugins
chmod g+w,o+t /usr/share/xfce4/panel/plugins
EOF
    ;;
    xfce4-terminal)
          cat >> $Output << "EOF"
chgrp install /usr/share/man/el/man1
chmod g+w,o+t /usr/share/man/el/man1
EOF
    ;;
    xfconf)
          cat >> $Output << "EOF"
chgrp install /usr/lib/xfce4
chmod g+w,o+t /usr/lib/xfce4
EOF
    ;;
    xfce4pwrmngr)
          cat >> $Output << "EOF"
chgrp install /etc/xdg/autostart
chmod g+w,o+t /etc/xdg/autostart
EOF
    ;;
    $xfont)
           if $useDESTDIR; then
             cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/fonts
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/fonts
EOF
           else
             cat >> $Output << "EOF"
chgrp install /usr/share/fonts
chmod g+w,o+t /usr/share/fonts
EOF
           fi
    ;;
    xkeyboard-config)
           if $useDESTDIR; then
             cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/X11/xkb
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/X11/xkb
EOF
           else
             cat >> $Output << "EOF"
chgrp install /usr/share/X11/xkb
chmod g+w,o+t /usr/share/X11/xkb
EOF
           fi
    ;;
    $xlib)
           if $useDESTDIR; then
             cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/X11
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/X11
EOF
           else
             cat >> $Output << "EOF"
chgrp install /usr/share/X11
chmod g+w,o+t /usr/share/X11
EOF
           fi
    ;;
    xml-sax)
           if ! $useDESTDIR; then
echo "chgrp install /usr/lib/perl5/site_perl/${perlvers}/XML/SAX/ParserDetails.ini
chmod 664 /usr/lib/perl5/site_perl/${perlvers}/XML/SAX/ParserDetails.ini" >> $Output
           fi
    ;;
    xml-sax-base)
           if $useDESTDIR; then
echo "case \$(uname -m) in
   x86_64) archi=x86_64-linux
   ;;
   *)      archi=i686-linux
   ;;
esac
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/perl5/site_perl/${perlvers}/XML
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/perl5/site_perl/${perlvers}/XML
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/perl5/site_perl/${perlvers}/XML/SAX
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/perl5/site_perl/${perlvers}/XML/SAX
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/perl5/site_perl/${perlvers}/\$archi/auto/XML/SAX
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/perl5/site_perl/${perlvers}/\$archi/auto/XML/SAX" >> $Output
           else
echo "case \$(uname -m) in
   x86_64) archi=x86_64-linux
   ;;
   *)      archi=i686-linux
   ;;
esac
chgrp install /usr/lib/perl5/site_perl/${perlvers}/XML
chmod g+w,o+t /usr/lib/perl5/site_perl/${perlvers}/XML
chgrp install /usr/lib/perl5/site_perl/${perlvers}/XML/SAX
chmod g+w,o+t /usr/lib/perl5/site_perl/${perlvers}/XML/SAX
chgrp install /usr/lib/perl5/site_perl/${perlvers}/\$archi/auto/XML/SAX
chmod g+w,o+t /usr/lib/perl5/site_perl/${perlvers}/\$archi/auto/XML/SAX" >> $Output
           fi
    ;;
    xorg-evdev)
           if $useDESTDIR; then
             cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/xorg/modules/input
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/xorg/modules/input
EOF
           else
             cat >> $Output << "EOF"
chgrp install /usr/lib/xorg/modules/input
chmod g+w,o+t /usr/lib/xorg/modules/input
EOF
           fi
    ;;
    xorg-intel)
           if $useDESTDIR; then
             cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/xorg/modules/drivers
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/xorg/modules/drivers
chgrp install ${PkgUserDir}/${PkgName}/usr/share/polkit-1
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/polkit-1
chgrp install ${PkgUserDir}/${PkgName}/usr/share/polkit-1/actions
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/polkit-1/actions
chown root ${PkgUserDir}/${PkgName}/usr/lib/xf86-video-intel-backlight-helper
chmod u+s ${PkgUserDir}/${PkgName}/usr/lib/xf86-video-intel-backlight-helper
EOF
           else
             cat >> $Output << "EOF"
chgrp install /usr/lib/xorg/modules/drivers
chmod g+w,o+t /usr/lib/xorg/modules/drivers
chgrp install /usr/share/polkit-1
chmod g+w,o+t /usr/share/polkit-1
chgrp install /usr/share/polkit-1/actions
chmod g+w,o+t /usr/share/polkit-1/actions
chown root /usr/lib/xf86-video-intel-backlight-helper
chmod u+s /usr/lib/xf86-video-intel-backlight-helper
EOF
           fi
    ;;
    xorg-vmmouse)
           if $useDESTDIR; then
             cat >> $Output << "EOF"
rm -rfv ${PkgUserDir}/${PkgName}/usr/{lib,share}/hal
EOF
           else
             cat >> $Output << "EOF"
rm -rfv /usr/{lib,share}/hal
EOF
           fi
    ;;
    xorg-nouveau)
           cat >> $Output << "EOF"
chgrp install /usr/lib/xorg/modules/drivers
chmod g+w,o+t /usr/lib/xorg/modules/drivers
EOF
    ;;
    xorg-server)
           if $useDESTDIR; then
             cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/xorg
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/xorg
chgrp install ${PkgUserDir}/${PkgName}/usr/share/X11/xorg.conf.d
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/X11/xorg.conf.d
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/xorg
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/xorg
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/xorg/modules
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/xorg/modules
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/xorg/modules/drivers
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/xorg/modules/drivers
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/xorg/modules/extensions
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/xorg/modules/extensions
chgrp install ${PkgUserDir}/${PkgName}/etc/X11/xorg.conf.d
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/X11/xorg.conf.d
if [ -e ${PkgUserDir}/${PkgName}/usr/lib/xorg-server/Xorg.wrap ]; then
  chown root ${PkgUserDir}/${PkgName}/usr/lib/xorg-server/Xorg.wrap
  chmod u+s ${PkgUserDir}/${PkgName}/usr/lib/xorg-server/Xorg.wrap
fi
EOF
           else
             cat >> $Output << "EOF"
chgrp install /usr/include/xorg
chmod g+w,o+t /usr/include/xorg
chgrp install /usr/share/X11/xorg.conf.d
chmod g+w,o+t /usr/share/X11/xorg.conf.d
chgrp install /usr/lib/xorg
chmod g+w,o+t /usr/lib/xorg
chgrp install /usr/lib/xorg/modules
chmod g+w,o+t /usr/lib/xorg/modules
chgrp install /usr/lib/xorg/modules/drivers
chmod g+w,o+t /usr/lib/xorg/modules/drivers
chgrp install /usr/lib/xorg/modules/extensions
chmod g+w,o+t /usr/lib/xorg/modules/extensions
chgrp install /etc/X11/xorg.conf.d
chmod g+w,o+t /etc/X11/xorg.conf.d
if [ -e /usr/lib/xorg-server/Xorg.wrap ]; then
  chown root /usr/lib/xorg-server/Xorg.wrap # setuid root binary
  chmod u+s /usr/lib/xorg-server/Xorg.wrap
fi
EOF
           fi
    ;;
    $xproto) # /usr/include/X11
           if $useDESTDIR; then
             cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/X11
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/X11
chgrp install ${PkgUserDir}/${PkgName}/usr/include/X11/extensions
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/X11/extensions
chgrp install ${PkgUserDir}/${PkgName}/usr/include/X11/fonts
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/X11/fonts
chgrp install ${PkgUserDir}/${PkgName}/usr/include/GL
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/GL
chgrp install ${PkgUserDir}/${PkgName}/usr/include/GL/internal
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/GL/internal
EOF
           else
             cat >> $Output << "EOF"
chgrp install /usr/include/X11
chmod g+w,o+t /usr/include/X11
chgrp install /usr/include/X11/extensions
chmod g+w,o+t /usr/include/X11/extensions
chgrp install /usr/include/X11/fonts
chmod g+w,o+t /usr/include/X11/fonts
chgrp install /usr/include/GL # for MesaLib
chmod g+w,o+t /usr/include/GL
chgrp install /usr/include/GL/internal
chmod g+w,o+t /usr/include/GL/internal
EOF
           fi
    ;;
    xterm)
           if $useDESTDIR; then
             cat >> $Output << "EOF"
cd ${PkgUserDir}/${PkgName}/${PkgName}*
make DESTDIR="$CUR_DIR" install-ti # have to do this as root
cd ..
for flToDlt in *.tgz; do
  dltfile=${flToDlt%.tgz}
done
rm -rf ${PkgUserDir}/${PkgName}/$dltfile
chgrp install ${PkgUserDir}/${PkgName}/usr/share/{terminfo,pixmaps}
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/{terminfo,pixmaps}
if ! $AS_ROOT; then chown -R xterm:xterm ${PkgUserDir}/${PkgName}/usr/share/terminfo/{v,x}; fi
cat >> ${PkgUserDir}/${PkgName}/etc/X11/app-defaults/XTerm << "XTERMEOF"
*VT100*locale: true
*VT100*faceName: Monospace
*VT100*faceSize: 10
*backarrowKeyIsErase: true
*ptyInitialErase: true
XTERMEOF
EOF
           else
             cat >> $Output << "EOF"
cd ${PkgUserDir}/${PkgName}/${PkgName}*
make install-ti # have to do this as root
cd ..
for flToDlt in *.tgz; do
  dltfile=${flToDlt%.tgz}
done
rm -rf $dltfile
chown xterm:xterm /usr/share/terminfo/x/xterm-65
chown xterm:xterm /usr/share/terminfo/x/xterm+app+pc
chown xterm:xterm /usr/share/terminfo/x/xterm-boldso
chown xterm:xterm /usr/share/terminfo/x/xterm+decedit
chown xterm:xterm /usr/share/terminfo/x/xterm-ic
chown xterm:xterm /usr/share/terminfo/x/xterm+kbs
chown xterm:xterm /usr/share/terminfo/x/xterm-mono
chown xterm:xterm /usr/share/terminfo/x/xterm+noapp+pc
chown xterm:xterm /usr/share/terminfo/x/xterm-nrc
chown xterm:xterm /usr/share/terminfo/x/xterm+pce0
chown xterm:xterm /usr/share/terminfo/x/xterm+pce1
chown xterm:xterm /usr/share/terminfo/x/xterm+pce3
chown xterm:xterm /usr/share/terminfo/x/xterm+pcf1
chown xterm:xterm /usr/share/terminfo/x/xterm+pcf3
chown xterm:xterm /usr/share/terminfo/x/xterm+pcfn
chown xterm:xterm /usr/share/terminfo/x/xterm+pcfN
chown xterm:xterm /usr/share/terminfo/x/xterm-rep
chown xterm:xterm /usr/share/terminfo/x/xterm+tmux
chown xterm:xterm /usr/share/terminfo/x/xterm-vi
chown xterm:xterm /usr/share/terminfo/x/xterm-xmc
chgrp install /usr/share/pixmaps # for evol-data-server
chmod g+w,o+t /usr/share/pixmaps
cat >> /etc/X11/app-defaults/XTerm << "XTERMEOF"
*VT100*locale: true
*VT100*faceName: Monospace
*VT100*faceSize: 10
*backarrowKeyIsErase: true
*ptyInitialErase: true
XTERMEOF
EOF
          fi
    ;;
    yelp-xsl)
           cat >> $Output << "EOF"
chgrp install /usr/share/yelp-xsl/xslt/common/domains
chmod g+w,o+t /usr/share/yelp-xsl/xslt/common/domains
EOF
    ;;
    zenity)
           cat >> $Output << "EOF"
chgrp install /usr/share/help/{bg,da,ja,ru} # for gnome-terminal
chmod g+w,o+t /usr/share/help/{bg,da,ja,ru}
EOF
    ;;
esac
fi # end ! as_root
#
# the following are needed whether root or package user
case $pkgname in
    acpid)
          if $useDESTDIR; then
            if [ "$SYSTEMD" = yes ]; then
              cat >> $Output << "EOF"
install -Dm644 ${blfsfiles}/conf-files/anything ${PkgUserDir}/${PkgName}/etc/acpi/events/anything
install -Dm755 ${blfsfiles}/conf-files/handler.sh ${PkgUserDir}/${PkgName}/etc/acpi/handler.sh
install -Dm644 ${blfsfiles}/service/acpid.socket ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/acpid.socket
install -Dm644 ${blfsfiles}/service/acpid.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/acpid.service
if ! $AS_ROOT; then
  chown acpid:acpid ${PkgUserDir}/${PkgName}/etc/acpi/{handler.sh,events/anything}
  chown acpid:acpid ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/{acpid.socket,acpid.service}
fi
EOF
            fi
          else
            if [ "$SYSTEMD" = yes ]; then
              cat >> $Output << "EOF"
install -Dm644 ${blfsfiles}/conf-files/anything /etc/acpi/events/anything
install -Dm755 ${blfsfiles}/conf-files/handler.sh /etc/acpi/handler.sh
install -Dm644 ${blfsfiles}/service/acpid.socket /usr/lib/systemd/system/acpid.socket
install -Dm644 ${blfsfiles}/service/acpid.service /usr/lib/systemd/system/acpid.service
if ! $AS_ROOT; then
  chown acpid:acpid /etc/acpi/{handler.sh,events/anything}
  chown acpid:acpid /usr/lib/systemd/system/{acpid.socket,acpid.service}
fi
EOF
            fi
          fi
    ;;
    alsa-utils)
          if ! $useDESTDIR; then
            cat >> $Output << "EOF"
if [ ! -e /var/lib/alsa/asound.state ]; then touch /var/lib/alsa/asound.state; fi
usermod -a -G audio john # replace john with your username
/usr/sbin/alsactl -L store
EOF
          fi
    ;;
    avr-libc)
          cat >> $Output << "EOF"
chgrp root /usr
chmod 755 /usr
EOF
    ;;
    apache)
          if $useDESTDIR; then
            if [ "$SYSTEMD" = yes ]; then
              cat >> $Output << "EOF"
install -m755 -d ${PkgUserDir}/${PkgName}/usr/lib/systemd/system
install -m644 ${blfsfiles}/service/httpd.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/httpd.service
install -Dm644 ${blfsfiles}/conf-files/apache.tmpfiles.conf ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/apache.conf
chown apache:apache ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/httpd.service
chown apache:apache ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/apache.conf
EOF
            fi
          else
            if [ "$SYSTEMD" = yes ]; then
              cat >> $Output << "EOF"
install -m644 ${blfsfiles}/service/httpd.service /usr/lib/systemd/system/httpd.service
install -Dm644 ${blfsfiles}/conf-files/apache.tmpfiles.conf /usr/lib/tmpfiles.d/apache.conf
chown apache:apache /usr/lib/systemd/system/httpd.service
chown apache:apache /usr/lib/tmpfiles.d/apache.conf
EOF
            fi
          fi
    ;;
    apache-ant)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
install -vdm755 ${PkgUserDir}/${PkgName}/etc/profile.d
cat > ${PkgUserDir}/${PkgName}/etc/profile.d/apache_ant.csh << "EOFANTA"
setenv ANT_HOME /opt/ant
EOFANTA
cat > ${PkgUserDir}/${PkgName}/etc/profile.d/apache_ant.sh << "EOFANTB"
export PATH=$PATH:/opt/ant/bin
export ANT_HOME=/opt/ant
EOFANTB
EOF

          else
            cat >> $Output << "EOF"
cat > /etc/profile.d/apache_ant.sh << "EOFANT"
export PATH=$PATH:/opt/ant/bin
export ANT_HOME=/opt/ant
EOFANT
EOF
          fi
if ! $as_root; then
  if $useDESTDIR; then
          cat >> $Output << "EOF"
chown -R apache-ant:apache-ant ${PkgUserDir}/${PkgName}/etc
EOF
  else
          cat >> $Output << "EOF"
chown apache-ant:apache-ant /etc/profile.d/apache_ant.sh
EOF
  fi
fi
    ;;
    bind)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chown -R named:named ${PkgUserDir}/${PkgName}/srv/named
chmod 770 ${PkgUserDir}/${PkgName}/srv/named
EOF
            if [ "$SYSTEMD" = yes ]; then
              cat >> $Output << "EOF"
install -m755 -d ${PkgUserDir}/${PkgName}/usr/lib/systemd/system
install -D -m644 ${blfsfiles}/conf-files/tmpfiles.d ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/named.conf
install -D -m644 ${blfsfiles}/service/named.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/named.service
if ! $AS_ROOT; then
  chown named:named ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/named.conf
  chown named:named ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/named.service
fi
curl -o root.hint http://www.internic.net/zones/named.root
mv root.hint ${PkgUserDir}/${PkgName}/srv/named/etc/namedb/
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/srv/named/etc/namedb/root.hint; fi
EOF
            fi
          else
            cat >> $Output << "EOF"
chown -R named:named /srv/named
echo "*********************************************"
echo "Edit /etc/resolv.conf to add your domain name"
echo "*********************************************"
EOF
            if [ "$SYSTEMD" = yes ]; then
              cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/conf-files/tmpfiles.d /usr/lib/tmpfiles.d/named.conf
install -D -m644 ${blfsfiles}/service/named.service /usr/lib/systemd/system
if ! $AS_ROOT; then
  chown named:named /usr/lib/tmpfiles.d/named.conf
  chown named:named /usr/lib/systemd/system/named.service
fi
EOF
            fi
          fi
    ;;
    bluez)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
install -dm755 ${PkgUserDir}/${PkgName}/usr/lib/modprobe.d
install -Dm644 ${blfsfiles}/bluetooth.modprobe ${PkgUserDir}/${PkgName}/usr/lib/modprobe.d/bluetooth-usb.conf
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/usr/lib/modprobe.d/bluetooth-usb.conf; fi
EOF
          else
            cat >> $Output << "EOF"
install -Dm644 ${blfsfiles}/bluetooth.modprobe /usr/lib/modprobe.d/bluetooth-usb.conf
if ! $AS_ROOT; then chown $PkgName:$PkgName /usr/lib/modprobe.d/bluetooth-usb.conf; fi
EOF
          fi
    ;;
    cacerts)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
install -Dm644 ${blfsfiles}/install-files/security/cacerts.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
          fi
    ;;
    chromium)
          cat >> $Output << "EOF"
install -Dm644 ${blfsfiles}/conf-files/chromium.desktop /usr/share/applications/chromium.desktop
chown root /usr/lib/chromium/chrome-sandbox
chmod 4755 /usr/lib/chromium/chrome-sandbox
EOF
if ! $as_root; then
          cat >> $Output << "EOF"
chown chromium:chromium /usr/share/applications/chromium.desktop
EOF
fi
    ;;
    colord)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
mkdir -pv ${PkgUserDir}/${PkgName}/var/lib/colord/icc
chown -R colord:colord ${PkgUserDir}/${PkgName}/var/lib/colord
install -D -m644 ${blfsfiles}/install-files/sysutils/colord.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
          else
            cat >> $Output << "EOF"
mkdir -pv /var/lib/colord/icc
chown -R colord:colord /var/lib/colord
EOF
          fi
    ;;
    cracklib)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
install -m644 ${blfsfiles}/allwords ${PkgUserDir}/${PkgName}/usr/share/dict
create-cracklib-dict ${PkgUserDir}/${PkgName}/usr/share/dict/allwords
if ! $AS_ROOT; then chown cracklib:cracklib ${PkgUserDir}/${PkgName}/usr/share/dict/allwords; fi
EOF
          else
            cat >> $Output << "EOF"
install -m644 ${blfsfiles}/allwords /usr/share/dict
create-cracklib-dict /usr/share/dict/allwords
if ! $AS_ROOT; then chown cracklib:cracklib /usr/share/dict/allwords; fi
EOF
          fi
    ;;
    cups)
       if $as_root; then # already done this if a package-user
          cat >> $Output << "EOF"
cat > /etc/cups/printers.conf << "EOFCUPS"
# Printer configuration file for CUPS v1.6.1
# Written by cupsd
# DO NOT EDIT THIS FILE WHEN CUPSD IS RUNNING
<Printer Dell_3130cn_Color_Laser>
UUID urn:uuid:051a0c0e-3e62-3936-7af9-0e901f7d8cfd
Info Dell 3130cn Color Laser
Location main
MakeModel Dell 3130cn Color Laser v3017.104 PS
DeviceURI usb://Dell/3130cn%20Color%20Laser?serial=0932091440
State Idle
StateTime 1355080729
Type 8388612
Accepting Yes
Shared Yes
JobSheets none none
QuotaPeriod 0
PageLimit 0
KLimit 0
OpPolicy default
ErrorPolicy retry-job
</Printer>
EOFCUPS
chown root:lp /etc/cups/printers.conf
chmod 600 /etc/cups/printers.conf
gtk-update-icon-cache
EOF
       fi
    ;;
    docutils)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
# move these because of a py3-docutils conflict
for _f in ${PkgUserDir}/${PkgName}/usr/bin/rst2*.py; do
  mv -v "$_f" "${_f%.py}2.py"
done
mv ${PkgUserDir}/${PkgName}/usr/bin/rstpep2html.py ${PkgUserDir}/${PkgName}/usr/bin/rstpep2html2.py
EOF
          else
            cat >> $Output << "EOF"
# move these because of a py3-docutils conflict
for _f in /usr/bin/rst2*.py; do
  mv -v "$_f" "${_f%.py}2.py"
done
mv /usr/bin/rstpep2html.py /usr/bin/rstpep2html2.py
EOF
          fi
    ;;
    firewall) # add more rules for the squid proxy server
          cat >> $Output << "EOF"
sed -i '/^# End/d' /etc/rc.d/rc.iptables
cat >> /etc/rc.d/rc.iptables << "ADDRULES"
# permit Squid box out to the Internet
iptables -t mangle -A PREROUTING -p tcp --dport 80 -s  192.168.1.120 -j ACCEPT
# mark everything else on port 80 to be routed to the Squid box
iptables -t mangle -A PREROUTING -i wlp4s0 -p tcp --dport 80 -j MARK --set-mark 2
iptables -t mangle -A PREROUTING -m mark --mark 2 -j ACCEPT
# Ensure that traffic from inside the network is allowed to loop back inside
iptables -t filter -A FORWARD -i wlp4s0 -o wlp4s0 -p tcp --dport 80 -j ACCEPT

# End /etc/rc.d/rc.iptables
ADDRULES
EOF
    ;;
    firefox)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/install-files/browser/firefox.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
          else
            cat >> $Output << "EOF"
gtk-update-icon-cache -qf /usr/share/icons/hicolor
EOF
          fi
    ;;
    freetype)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
ln -svf freetype2 ${PkgUserDir}/${PkgName}/usr/include/freetype
chown -h freetype:freetype ${PkgUserDir}/${PkgName}/usr/include/freetype
EOF
          else
            cat >> $Output << "EOF"
ln -svf freetype2 /usr/include/freetype
EOF
          fi
    ;;
    gnome-session)
          cat >> $Output << "EOF"
cat > ~/.xinitrc << "EOL"
dbus-launch --exit-with-session gnome-session
EOL
cat > /etc/profile.d/gnome.sh << "EOW"
export XDG_DATA_DIRS=/usr/share
export XDG_CONFIG_DIRS=/etc/xdg
export XDG_MENU_PREFIX=""
EOW
EOF
    ;;
    gnome-shell)
          cat >> $Output << "EOF"
mkdir -pv /usr/share/gnome-shell/modes
EOF
if ! $as_root; then
          cat >> $Output << "EOF"
chown gnome-shell:gnome-shell /usr/share/gnome-shell/modes
EOF
fi
    ;;
    gnutls) # need to reinstall wget to use gnutls
          if ! $useDESTDIR; then
            cat >> $Output << "EOF"
if [ -e ${PKGUSERDIR}/networks/wget/.wget ]; then
  rm -rf ${PKGUSERDIR}/networks/wget/{.wget,build}
fi
echo 'Will reinstall wget when next executing networks.sh'
EOF
          else
            cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/install-files/security/gnutls.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
          fi
    ;;
    gpm)
          if $useDESTDIR; then
            if [ "$SYSTEMD" = yes ]; then
              cat >> $Output << "EOF"
install -m 755 -d ${PkgUserDir}/${PkgName}/usr/lib/systemd/system
install -m644 ${blfsfiles}/service/gpm.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/gpm.service
if ! $AS_ROOT; then chown gpm:gpm ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/gpm.service; fi
EOF
            fi
            cat >> $Output << "EOF"
install -m 755 -d ${PkgUserDir}/${PkgName}/etc/profile.d
cat > ${PkgUserDir}/${PkgName}/etc/profile.d/gpm.sh << "GPMEOF"
case $( /usr/bin/tty ) in
    /dev/tty[0-9]*) [ -n "$(pgrep gpm)" ] && /usr/bin/disable-paste ;;
esac
GPMEOF
EOF
          else
            if [ "$SYSTEMD" = yes ]; then
              cat >> $Output << "EOF"
install -m644 ${blfsfiles}/service/gpm.service /usr/lib/systemd/system/gpm.service
if ! $AS_ROOT; then chown gpm:gpm /usr/lib/systemd/system/gpm.service; fi
EOF
            fi
            cat >> $Output << "EOF"
cat > /etc/profile.d/gpm.sh << "GPMEOF"
case $( /usr/bin/tty ) in
    /dev/tty[0-9]*) [ -n "$(pgrep gpm)" ] && /usr/bin/disable-paste ;;
esac
GPMEOF
EOF
          fi
    ;;
    guile)
          cat >> $Output << "EOF"
mv /usr/lib/libguile-*-gdb.scm /usr/share/gdb/auto-load/usr/lib
EOF
    ;;
    harfbuzz) # need to reinstall freetype after harfbuzz
          if ! $useDESTDIR; then
            cat >> $Output << "EOF"
if [ -e ${PkgUserDir}/freetype/.freetype ]; then
  rm -rf ${PkgUserDir}/freetype/{.freetype,build}
fi
echo 'Will reinstall freetype when next executing libraries.sh'
EOF
          fi
    ;;
    iptables)
          if $useDESTDIR; then
            if [ "$SYSTEMD" = yes ]; then
              cat >> $Output << "EOF"
mkdir -pv ${PkgUserDir}/${PkgName}/etc/iptables
mkdir -pv ${PkgUserDir}/${PkgName}/etc/conf.d
mkdir -pv ${PkgUserDir}/${PkgName}/usr/lib/systemd/system
install -D -m644 ${blfsfiles}/conf-files/iptables.conf.d ${PkgUserDir}/${PkgName}/etc/conf.d/iptables
install -D -m644 ${blfsfiles}/iptables.rules ${PkgUserDir}/${PkgName}/etc/iptables/iptables.rules
install -Dm644 ${blfsfiles}/service/{iptables.service,ip6tables.service} ${PkgUserDir}/${PkgName}/usr/lib/systemd/system
if ! $AS_ROOT; then
  chown iptables:iptables ${PkgUserDir}/${PkgName}/etc/{,conf.d/{,iptables},iptables/{,iptables.rules}}
  chown iptables:iptables ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/{iptables.service,ip6tables.service}
fi
EOF
            fi
          else
            if [ "$SYSTEMD" = yes ]; then
              cat >> $Output << "EOF"
install -v -d /etc/iptables
install -v -d /etc/conf.d
install -D -m644 ${blfsfiles}/conf-files/iptables.conf.d /etc/conf.d/iptables
install -D -m644 ${blfsfiles}/iptables.rules /etc/iptables/iptables.rules
install -Dm644 ${blfsfiles}/service/{iptables.service,ip6tables.service} /usr/lib/systemd/system
if ! $AS_ROOT; then
  chown iptables:iptables /etc/{conf.d/iptables,iptables/iptables.rules}
  chown iptables:iptables /usr/lib/systemd/system/{iptables.service,ip6tables.service}
fi
EOF
            fi
          fi
    ;;
    jdkbin)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
install -m755 -d ${PkgUserDir}/${PkgName}/etc/profile.d
cat > ${PkgUserDir}/${PkgName}/etc/profile.d/openjdk.sh << "JDKEOF"
EOF
          else
            cat >> $Output << "EOF"
cat > /etc/profile.d/openjdk.sh << "JDKEOF"
EOF
          fi
          cat >> $Output << "EOF"
# Begin /etc/profile.d/openjdk.sh

# Set JAVA_HOME directory
JAVA_HOME=/opt/jdk

# Set ANT_HOME directory
ANT_HOME=/opt/ant

# Adjust PATH
pathappend $JAVA_HOME/bin PATH
pathappend $ANT_HOME/bin PATH

pathappend $JAVA_HOME/include       C_INCLUDE_PATH
pathappend $JAVA_HOME/include/linux C_INCLUDE_PATH
pathappend $JAVA_HOME/include       CPLUS_INCLUDE_PATH
pathappend $JAVA_HOME/include/linux CPLUS_INCLUDE_PATH

# Auto Java CLASSPATH
# Copy jar files to, or create symlinks in this directory

AUTO_CLASSPATH_DIR=/usr/share/java

pathprepend . CLASSPATH

for dir in `find ${AUTO_CLASSPATH_DIR} -type d 2>/dev/null`; do
    pathappend $dir CLASSPATH
done

for jar in `find ${AUTO_CLASSPATH_DIR} -name "*.jar" 2>/dev/null`; do
    pathappend $jar CLASSPATH
done

export JAVA_HOME ANT_HOME CLASSPATH C_INCLUDE_PATH CPLUS_INCLUDE_PATH
unset AUTO_CLASSPATH_DIR dir jar

# End /etc/profile.d/openjdk.sh
JDKEOF
EOF
          if $useDESTDIR; then
            cat >> $Output << "EOF"
cat >> ${PkgUserDir}/${PkgName}/etc/profile.d/extrapaths.sh << "EXTRAEOF"
EOF
          else
            cat >> $Output << "EOF"
cat >> /etc/profile.d/extrapaths.sh << "EXTRAEOF"
EOF
          fi
          cat >> $Output << "EOF"
# Begin Java addition
if ! [ -n $MANPATH ]; then
  MANPATH=:/opt/jdk/man
else
  pathappend /opt/jdk/man       MANPATH
fi
# End Java addition
EXTRAEOF
EOF
          if $useDESTDIR; then
            cat >> $Output << "EOF"
cat >> ${PkgUserDir}/${PkgName}/etc/man_db.conf << "MANDBEOF"
EOF
          else
            cat >> $Output << "EOF"
cat >> /etc/man_db.conf << "MANDBEOF"
EOF
          fi
          cat >> $Output << "EOF"
MANDATORY_MANPATH     /opt/jdk/man
MANPATH_MAP           /opt/jdk/bin     /opt/jdk/man
MANDB_MAP             /opt/jdk/man     /var/cache/man/jdk
MANDBEOF
EOF
          if $useDESTDIR; then
            cat >> $Output << "EOF"
mkdir -p ${PkgUserDir}/${PkgName}/var/cache/man
mandb -c ${PkgUserDir}/${PkgName}/opt/jdk/man
if ! $AS_ROOT; then
  chgrp install ${PkgUserDir}/${PkgName}/opt/jdk/jre
  chmod 1775 ${PkgUserDir}/${PkgName}/opt/jdk/jre
  chgrp install ${PkgUserDir}/${PkgName}/opt/jdk/jre/{lib,bin}
  chmod 1775 ${PkgUserDir}/${PkgName}/opt/jdk/jre/{lib,bin}
  chgrp install ${PkgUserDir}/${PkgName}/opt/jdk/man/man1
  chmod 1775 ${PkgUserDir}/${PkgName}/opt/jdk/man/man1
  chown -R jdkbin:jdkbin ${PkgUserDir}/${PkgName}/{etc,var}
fi
EOF
          else
            cat >> $Output << "EOF"
mkdir -p /var/cache/man
mandb -c /opt/jdk/man
if ! $AS_ROOT; then
  chgrp install /opt/jdk/jre
  chmod 1775 /opt/jdk/jre
  chgrp install /opt/jdk/jre/{lib,bin}
  chmod 1775 /opt/jdk/jre/{lib,bin}
  chgrp install /opt/jdk/man/man1
  chmod 1775 /opt/jdk/man/man1
fi
EOF
          fi
          if $useDESTDIR; then
            if $as_root; then
              echo "chown -h -R root:root \${PkgUserDir}/\${PkgName}/opt/\${SrcName}bin" >> $Output
            else
              echo "chown -h -R jdkbin:jdkbin \${PkgUserDir}/\${PkgName}/opt/\${SrcName}bin" >> $Output
            fi
          else
            if $as_root; then
              echo "chown -h -R root:root /opt/\${SrcName}bin" >> $Output
            else
              echo "chown -h -R jdkbin:jdkbin /opt/\${SrcName}bin" >> $Output
            fi
          fi
    ;;
    krb5)
          if $useDESTDIR; then
            if [ "$SYSTEMD" = yes ]; then
              cat >> $Output << "EOF"
mkdir -pv ${PkgUserDir}/${PkgName}/usr/lib/systemd/system
install -m 644 ${blfsfiles}/service/krb5-{kadmind.service,kdc.service,kpropd.service,kpropd@.service,kpropd.socket} ${PkgUserDir}/${PkgName}/usr/lib/systemd/system
if ! $AS_ROOT; then chown krb5:krb5 ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/krb5-*; fi
if [ -d ${PkgUserDir}/${PkgName}/var/lib/run ]; then rm -rf ${PkgUserDir}/${PkgName}/var/lib/run; fi
EOF
            fi
          else
            if [ "$SYSTEMD" = yes ]; then
              cat >> $Output << "EOF"
install -m 644 ${blfsfiles}/service/krb5-{kadmind.service,kdc.service,kpropd.service,kpropd@.service,kpropd.socket} /usr/lib/systemd/system
if ! $AS_ROOT; then chown krb5:krb5 /usr/lib/systemd/system/krb5-*; fi
EOF
            fi
          fi
    ;;
    libgphoto2)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/install-files/multimedia/libgphoto2.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
          fi
    ;;
    libvirt)
          cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/conf-files/libvirtd.conf.d /etc/conf.d/libvirtd
install -D -m644 ${blfsfiles}/conf-files/libvirtd-guests.conf.d /etc/conf.d/libvirt-guests
if [ "$SYSTEMD" = yes ]; then
  install -D -m644 ${blfsfiles}/conf-files/libvirt.tmpfiles.d /usr/lib/tmpfiles.d/libvirt.conf
fi
EOF
if ! $as_root; then
          cat >> $Output << "EOF"
chown libvirt:libvirt /etc/conf.d/{libvirtd,libvirt-guests}
EOF
  if [ "$SYSTEMD" = yes ]; then
          cat >> $Output << "EOF"
chown libvirt:libvirt /usr/lib/tmpfiles.d/libvirt.conf
EOF
  fi
fi
    ;;
    linux-pam)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
chown root ${PkgUserDir}/${PkgName}/usr/bin/unix_chkpwd
chmod -v 4755 ${PkgUserDir}/${PkgName}/usr/bin/unix_chkpwd
cat >> ${PkgUserDir}/${PkgName}/etc/security/limits.conf << "_EOT"
# append to /etc/security/limits.conf

*               -       rtprio          0
*               -       nice            0
@audio          -       rtprio          65
@audio          -       nice           -10
@audio          -       memlock         40000

# End /etc/security/limits.conf
_EOT
if ! $AS_ROOT; then chown linux-pam:linux-pam ${PkgUserDir}/${PkgName}/etc/security/limits.conf; fi
EOF
          else
            cat >> $Output << "EOF"
chown root /sbin/unix_chkpwd
chmod -v 4755 /sbin/unix_chkpwd
cat >> /etc/security/limits.conf << "_EOT"
# append to /etc/security/limits.conf

*               -       rtprio          0
*               -       nice            0
@audio          -       rtprio          65
@audio          -       nice           -10
@audio          -       memlock         40000

# End /etc/security/limits.conf
_EOT
if ! $AS_ROOT; then chown linux-pam:linux-pam /etc/security/limits.conf; fi
EOF
          fi
    ;;
    mariadb)
          if $useDESTDIR; then
            if [ "$SYSTEMD" = yes ]; then
              cat >> $Output << "EOF"
install -m755 -d ${PkgUserDir}/${PkgName}/usr/lib/systemd/system
install -m755 -d ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d
install -Dm755 ${blfsfiles}/service/mariadb-post.sh ${PkgUserDir}/${PkgName}/usr/bin/mysqld-post
install -m644 ${blfsfiles}/service/mariadb.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/mysqld.service
install -m644 ${blfsfiles}/conf-files/mariadb-tmpfile.conf ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/mysql.conf
install -D -m644 ${blfsfiles}/install-files/server/bind.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then
  chown -R mariadb:mariadb ${PkgUserDir}/${PkgName}/usr/lib/systemd/system
  chown mariadb:mariadb ${PkgUserDir}/${PkgName}/usr/bin/mysqld-post
  chown -R mariadb:mariadb ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d
  chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL
fi
EOF
            fi
          else
            if [ "$SYSTEMD" = yes ]; then
              cat >> $Output << "EOF"
install -Dm755 ${blfsfiles}/service/mariadb-post.sh /usr/bin/mysqld-post
install -m644 ${blfsfiles}/service/mariadb.service /usr/lib/systemd/system/mysqld.service
install -m644 ${blfsfiles}/conf-files/mariadb-tmpfile.conf /usr/lib/tmpfiles.d/mysql.conf
if ! $AS_ROOT; then
  chown mariadb:mariadb /usr/lib/systemd/system/mysqld.service
  chown mariadb:mariadb /usr/bin/mysqld-post
  chown mariadb:mariadb /usr/lib/tmpfiles.d/mysql.conf
fi
echo "*****************************************************************"
echo "*                                                               *"
echo "* The mysql root password is currently blank.                   *"
echo "* The first time you start the mysql daemon, do                 *"
echo "* /usr/bin/mysql_secure_installation to set up the password     *"
echo "*                                                               *"
echo "*****************************************************************"
EOF
            else
              cat >> $Output << "EOF"
echo "*****************************************************************"
echo "*                                                               *"
echo "* The mysql root password is currently blank.                   *"
echo "* After this do: mysqld_safe --user=mysql 2>&1 >/dev/null &     *"
echo "* to start the mysql server                                     *" 
echo "* and /usr/bin/mysql_secure_installation to set up the password *"
echo "*                                                               *"
echo "*****************************************************************"
EOF
            fi
            cat >> $Output << "EOF"
groupadd -g 40 mysql
useradd -c "MySQL Server" -d /srv/mysql -g mysql -s /bin/false -u 40 mysql
mysql_install_db --basedir=/usr --datadir=/srv/mysql --user=mysql
chgrp -v mysql /srv/mysql{,/test,/mysql}
install -v -m755 -o mysql -g mysql -d /var/run/mysqld
if ! $AS_ROOT; then
  if [ -e /usr/lib/cups/backend ]; then
    chgrp install /usr/lib/cups/backend
    chmod 1775 /usr/lib/cups/backend
  fi
fi
EOF
          fi
    ;;
    mediaplayrinfo)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/install-files/multimedia/media-player-info.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
          fi
    ;;
    nvidia)
echo "depmod \$(cat /usr/lib/modules/${_extramodules}/version)" >> $Output
    ;;
    openjdk)
          if ! $useDESTDIR; then
            cat >> $Output << "EOF"
rm -rf /opt/jdk
ln -sfv jdk8-openjdk /opt/jdk
cd /opt/jdk
bin/keytool -list -keystore jre/lib/security/cacerts
if [ -f /opt/jdk/jre/lib/security/cacerts ]; then
  mv /opt/jdk/jre/lib/security/cacerts /opt/jdk/jre/lib/security/cacerts-bak
fi
/opt/jdk/bin/mkcacerts -d "/etc/ssl/certs/"  -k "/opt/jdk/bin/keytool" \
                       -s "/usr/bin/openssl" -o "/opt/jdk/jre/lib/security/cacerts"
EOF
            if ! $as_root; then
              echo "chown openjdk:openjdk /opt/jdk/jre/lib/security/cacerts" >> $Output
            fi
          fi
    ;;
    openssl) # install /etc/pam.d for linux-pam
          if ! $useDESTDIR; then
            cat >> $Output << "EOF"
install -v -m755 -d /etc/pam.d
EOF
          fi
    ;;
    pciutils) # run update-pciids
          if ! $useDESTDIR; then
            cat >> $Output << "EOF"
update-pciids
EOF
          fi
    ;;
    pulseaudio)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
sed -e '/exit-idle-time/iexit-idle-time=0' \
    -i  ${PkgUserDir}/${PkgName}/etc/pulse/daemon.conf
EOF
          else
            cat >> $Output << "EOF"
groupadd -g 58 pulse
groupadd -g 59 pulse-access
useradd -c "Pulseaudio User" -d /var/run/pulse -g pulse \
        -s /bin/false -u 58 pulse
usermod -a -G audio pulse
sed -e '/exit-idle-time/iexit-idle-time=0' \
    -i  /etc/pulse/daemon.conf
EOF
          fi
    ;;
    py3cairo) # put the python symlink back to python2
          if ! $useDESTDIR; then
            cat >> $Output << "EOF"
rm /usr/bin/python
ln -svf python2 /usr/bin/python
if ! $AS_ROOT; then chown -h python2:python2 /usr/bin/python; fi
EOF
          fi
    ;;
    python2)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
mv ${PkgUserDir}/${PkgName}/usr/bin/2to3{,-2.7}
EOF
          else
            cat >> $Output << "EOF"
mv /usr/bin/2to3{,-2.7}
EOF
          fi
    ;;
    python3)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
install -m755 -d ${PkgUserDir}/${PkgName}/etc/profile.d
cat > ${PkgUserDir}/${PkgName}/etc/profile.d/python3.sh << "PYEOF"
EOF
echo "export PYTHONDOCS=/usr/share/doc/python-${Python3vers}/html" >> $Output
            cat >> $Output << "EOF"
PYEOF
if ! $AS_ROOT; then chown python3:python3 ${PkgUserDir}/${PkgName}/etc/profile.d/python3.sh; fi
EOF
          else
            cat >> $Output << "EOF"
cat > /etc/profile.d/python3.sh << "PYEOF"
EOF
echo "export PYTHONDOCS=/usr/share/doc/python-${Python3vers}/html" >> $Output
            cat >> $Output << "EOF"
PYEOF
if ! $AS_ROOT; then chown python3:python3 /etc/profile.d/python3.sh; fi
EOF
          fi
    ;;
    qemu)
          cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/conf-files/65-kvm.rules /usr/lib/udev/rules.d/
chmod u+s /usr/lib/qemu/qemu-bridge-helper
echo "allow br0" > /etc/qemu/bridge.conf.sample
EOF
if ! $as_root; then
          cat >> $Output << "EOF"
chown qemu:qemu /usr/lib/udev/rules.d/65-kvm.rules
chown qemu:qemu /etc/qemu/bridge.conf.sample
EOF
fi
    ;;
    rsync)
          if ! $useDESTDIR; then
            cat >> $Output << "EOF"
groupadd -g 48 rsyncd
useradd -c "rsyncd Daemon" -d /home/rsync -g rsyncd \
        -s /bin/false -u 48 rsyncd
EOF
          fi
    ;;
    samba) # install systemd files
          if $useDESTDIR; then
            if [ "$SYSTEMD" = yes ]; then
              cat >> $Output << "EOF"
mkdir -pv ${PkgUserDir}/${PkgName}/usr/lib/systemd/system
install -m644 ${blfsfiles}/service/{samba.service,nmbd.service,smbd.service,smbd@.service,swat@.service,winbindd.service} ${PkgUserDir}/${PkgName}/usr/lib/systemd/system
install -m644 ${blfsfiles}/service/{smbd.socket,swat.socket} ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/
mkdir -pv ${PkgUserDir}/${PkgName}/etc/conf.d
install -m644 ${blfsfiles}/conf-files/samba.conf.d ${PkgUserDir}/${PkgName}/etc/conf.d/samba
install -D -m644 ${blfsfiles}/conf-files/samba.conf ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/samba.conf
if ! $AS_ROOT; then
  chown samba:samba ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/{samba.service,nmbd.service,smbd.service,smbd@.service,swat@.service,winbindd.service,smbd.socket,swat.socket}
  chown samba:samba ${PkgUserDir}/${PkgName}/etc/conf.d/samba
  chown samba:samba ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/samba.conf
fi
EOF
            fi
            cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/conf-files/samba.pam ${PkgUserDir}/${PkgName}/etc/pam.d/samba
install -d -m1777 ${PkgUserDir}/${PkgName}/var/spool/samba
if ! $AS_ROOT; then
  chown samba:samba ${PkgUserDir}/${PkgName}/etc/pam.d/samba
  chown samba:samba ${PkgUserDir}/${PkgName}/var/spool/samba
fi
install -D -m644 ${blfsfiles}/install-files/networks/samba.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
          else
            if [ "$SYSTEMD" = yes ]; then
              cat >> $Output << "EOF"
install -m644 ${blfsfiles}/service/{samba.service,nmbd.service,smbd.service,smbd@.service,swat@.service,winbindd.service} /usr/lib/systemd/system
install -m644 ${blfsfiles}/service/{smbd.socket,swat.socket} /usr/lib/systemd/system/
install -m644 ${blfsfiles}/conf-files/samba.conf.d /etc/conf.d/samba
install -D -m644 ${blfsfiles}/conf-files/samba.conf /usr/lib/tmpfiles.d/samba.conf
if ! $AS_ROOT; then
  chown samba:samba /usr/lib/systemd/system/{samba.service,nmbd.service,smbd.service,smbd@.service,swat@.service,winbindd.service,smbd.socket,swat.socket}
  chown samba:samba /etc/conf.d/samba
  chown samba:samba /usr/lib/tmpfiles.d/samba.conf
fi
EOF
            fi
            cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/conf-files/samba.pam /etc/pam.d/samba
install -d -m1777 /var/spool/samba
if ! $AS_ROOT; then
  chown samba:samba /etc/pam.d/samba
  chown samba:samba /var/spool/samba
fi
groupadd -g 99 nogroup 
useradd -c "Unprivileged Nobody" -d /dev/null -g nogroup \
        -s /bin/false -u 99 nobody
EOF
          fi
    ;;
    speechd)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
if [ "$SYSTEMD" = yes ]; then
  install -Dm644 ${blfsfiles}/service/speech-dispatcherd.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/speech-dispatcherd.service
  if ! $AS_ROOT; then chown speechd:speechd ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/speech-dispatcherd.service; fi
  mkdir -pv ${PkgUserDir}/${PkgName}/var/log/speech-dispatcher
fi
EOF
          else
            cat >> $Output << "EOF"
if [ "$SYSTEMD" = yes ]; then
  install -Dm644 ${blfsfiles}/service/speech-dispatcherd.service /usr/lib/systemd/system/speech-dispatcherd.service
  if ! $AS_ROOT; then chown speechd:speechd /usr/lib/systemd/system/speech-dispatcherd.service; fi
  mkdir -pv /var/log/speech-dispatcher
fi
EOF
          fi
    ;;
    squid)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
touch ${PkgUserDir}/${PkgName}/var/cache/squid/cache.log
install -v -d ${PkgUserDir}/${PkgName}/var/log/squid
touch ${PkgUserDir}/${PkgName}/var/log/squid/access.log
rm -rf ${PkgUserDir}/${PkgName}/run # this is empty
if [ "$SYSTEMD" = yes ]; then
  install -Dm644 ${blfsfiles}/service/squid.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/squid.service
  install -Dm644 ${blfsfiles}/conf-files/squid.tmpfiles ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/squid.conf
  if ! $AS_ROOT; then
    chown squid:squid ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/squid.service
    chown squid:squid ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/squid.conf
  fi
fi
install -D -m644 ${blfsfiles}/install-files/networks/squid.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
          else
            cat >> $Output << "EOF"
touch /var/cache/squid/cache.log
if $AS_ROOT; then # create the proxy user
  groupadd -g 38 proxy && useradd -c "Squid Cache User" -d /var/cache/squid -u 38 -g proxy -s /bin/false proxy
fi
chown -R proxy:proxy /var/cache/squid
install -v -d /var/log/squid
touch /var/log/squid/access.log
chown -R proxy:proxy /var/log/squid
if [ "$SYSTEMD" = yes ]; then
  install -Dm644 ${blfsfiles}/service/squid.service /usr/lib/systemd/system/squid.service
  install -Dm644 ${blfsfiles}/conf-files/squid.tmpfiles /usr/lib/tmpfiles.d/squid.conf
  if ! $AS_ROOT; then
    chown squid:squid /usr/lib/systemd/system/squid.service
    chown squid:squid /usr/lib/tmpfiles.d/squid.conf
  fi
else
  cp ${blfsfiles}/squid /etc/rc.d/init.d
  chmod 755 /etc/rc.d/init.d/squid
  for rcnum in 0 1 2 6; do
    ln -svf ../init.d/squid /etc/rc.d/rc${rcnum}.d/K29squid
  done
  for rcnum in 3 4 5; do
    ln -svf ../init.d/squid /etc/rc.d/rc${rcnum}.d/S35squid
  done
  if ! $AS_ROOT; then 
    chown squid:squid /etc/rc.d/init.d/squid
    chown -h squid:squid /etc/rc.d/*/K29squid
    chown -h squid:squid /etc/rc.d/*/S35squid
  fi
fi
echo "Set up the cache dirs"
squid -z > /dev/null 2>&1
EOF
          fi
    ;;
    tk) # delete .python2 and 3 because they need to be reinstalled with tk support
          if ! $useDESTDIR; then
            cat >> $Output << "EOF"
rm ${PkgUserDir}/{python2/.python2,python3/.python3}
EOF
          fi
    ;;
    upower) # make sure /var/lib/upower exists
          if $useDESTDIR; then
            cat >> $Output << "EOF"
if [ ! -d ${PkgUserDir}/${PkgName}/var/lib/upower ]; then
    install -v -m0755 -d ${PkgUserDir}/${PkgName}/var/lib/upower
    if ! $AS_ROOT; then chgrp upower ${PkgUserDir}/${PkgName}/var/lib/upower; fi
fi
EOF
          else
            cat >> $Output << "EOF"
if [ ! -d /var/lib/upower ]; then
    install -v -m0755 -d /var/lib/upower
    if ! $AS_ROOT; then chgrp upower /var/lib/upower; fi
fi
EOF
          fi
    ;;
    vlc)
          if $useDESTDIR; then
            cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/install-files/multimedia/vlc.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
          fi
    ;;
    xfce4-session)
          cat >> $Output << "EOF"
echo "exec dbus-launch --exit-with-session xfce4-session" > ~/.xinitrc
echo john ${HOSTNAME} = NOPASSWD: /usr/lib/xfce4/session/xfsm-shutdown-helper \
  >> /etc/sudoers
echo "********************************************************************"
echo "Change last line in /etc/sudoers file to your username and hostname"
echo "********************************************************************"
EOF
    ;;
    $xlib)
          if [[ "$XORG_PREFIX" != "/usr" ]]; then # set up symlinks
            cat >> $Output << "EOF"
ln -sv $XORG_PREFIX/lib/X11 /usr/lib/X11
ln -sv $XORG_PREFIX/include/X11 /usr/include/X11
ln -sv $XORG_PREFIX /usr/X11R6
EOF
          fi
    ;;
esac
if [ "$Section" = blfs ]; then
  cat >> $Output << "EOF"
    fi
  fi
done
EOF
else
  if $useDESTDIR; then # make the pkg tar file if using DESTDIR
    case $pkgname in
       dialog)
          echo "createPkgfile none" >> $Output # file is dialog.tar.gz
       ;;
       firewall)
         : # firewall doesn't work with DESTDIR - haven't tried to fix it
       ;;
       java-hamcrest)
          echo "createPkgfile 1.3" >> $Output
       ;;
       jdkbin)
          echo "createPkgfile none" >> $Output
       ;;
       linux-pam)
          echo "createPkgfile $linuxpamvers" >> $Output
       ;;
       smpeg)
          echo "createPkgfile 0.4.5" >> $Output
       ;;
       x264|cacerts)
          echo "createPkgfile none" >> $Output
       ;;
       x265)
          echo "createPkgfile 1.7" >> $Output # tar file is 1.7.tar.bz2
       ;;
       $xapp|$xfont|$xlib|$xproto|xorg-intel) # xorg-intel because using git clone currently
          echo "createPkgfile none" >> $Output
       ;;
       yajl)
          echo "createPkgfile 2.1.1" >> $Output
       ;;
       *)
          echo "createPkgfile" >> $Output
       ;;
    esac
  else
    echo "ldconfig" >> $Output
  fi
  cat >> $Output << "EOF"
else
  echo -e "\033[1mCan install $PkgName\033[0m"
fi
else
echo -e "\e[1;32mCan't install $PkgName\e[0m"
echo -e "\e[0;34munmet dependencies are:"; tput sgr0
echo -e '\e[0;31m'${rtrnDepNotMet[@]}; tput sgr0
fi
EOF
fi
echo "} # end $FuncName" >> $Output
} #end closefunction
#
setuplinks () { # setup preprocessing
case $pkgname in
    alsa-utils)
        if ! $useDESTDIR; then
          doFirst="chgrp install /usr/share/man/* && chmod g+w,o+t /usr/share/man/*"
          links=""
        fi
    ;;
    avahi)
        links=""
        if ! $useDESTDIR; then
          doFirst="groupadd -fg 86 netdev"
        else
          doFirst=""
        fi
    ;;
    avr-binutils)
        doFirst="if [ ! -d /usr/x86_64-unknown-linux-gnu ]; then
  install -v -m755 -d /usr/x86_64-unknown-linux-gnu
fi
chgrp install /usr/{x86_64-unknown-linux-gnu,lib/ldscripts} && chmod g+w,o+t /usr/{x86_64-unknown-linux-gnu,lib/ldscripts}"
        links=""
    ;;
    avr-gcc)
        doFirst="chgrp install /usr/lib/gcc && chmod g+w,o+t /usr/lib/gcc"
        links=""
    ;;
    avr-libc)
        doFirst="chgrp install /usr && chmod g+w,o+t /usr"
        links=""
    ;;
    bind)
        links=""
        if ! $useDESTDIR; then
          doFirst='groupadd -g 20 named && useradd -c "BIND Owner" -g named -s /bin/false -u 20 named && install -d -m777 -o named -g named /srv/named'
        else
          doFirst=""
        fi
    ;;
    chromium)
        doFirst="ln -svf libncursesw.so.5.9 /usr/lib/libtinfo.so.5 # don't know if this is still necessary"
        links=""
    ;;
    colord)
        if ! $useDESTDIR; then
          doFirst='chgrp install /usr/share/color
chmod 1775 /usr/share/color
if [ -d  /usr/share/locale/pt_PT ]; then
  chgrp install /usr/share/locale/pt_PT/LC_MESSAGES
  chmod 1775 /usr/share/locale/pt_PT/LC_MESSAGES
fi'
          links="/usr/share/glib-2.0/schemas/gschemas.compiled"
        else
          doFirst=""
          links=""
        fi
    ;;
    cracklib)
        links=""
        if ! $useDESTDIR; then
          doFirst="chgrp install /usr/share/dict && chmod 1775 /usr/share/dict"
        else
          doFirst=""
        fi
    ;;
    cups)
        if ! $useDESTDIR; then
          doFirst='useradd -c "Print Service User" -d /var/spool/cups -g lp -s /bin/false -u 9 lp && groupadd -g 19 lpadmin && usermod -a -G lpadmin john && chgrp install /var/spool && chmod g+w,o+t /var/spool'
          links="/etc/cups/{cupsd.conf,cupsd.conf.default,interfaces,ppd,snmp.conf,ssl} /run/cups/certs /var/{cache/cups,cache/cups/rss,spool/cups,spool/cups/*} /usr/sbin/cupsd /usr/lib/cups/{cgi-bin,cgi-bin/*.cgi} /usr/lib/cups/filter/{commandtops,pstops} /usr/lib/cups/{notifier,notifier/dbus}"
        else
          doFirst=""
          links=""
        fi
    ;;
    cups-filters)
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/lib/cups/backend /usr/lib/cups/filter"
        else
          links=""
        fi
    ;;
    dbus)
        links=""
        if ! $useDESTDIR; then
          doFirst='groupadd -g 18 messagebus && useradd -c "D-Bus Message Daemon User" -d /var/run/dbus -u 18 -g messagebus -s /bin/false messagebus'
          doFirst=""
        fi
    ;;
    faad2)
        links=""
        if ! $useDESTDIR; then
          doFirst="chgrp install /usr/share/man && chmod g+w,o+t /usr/share/man"
        else
          doFirst=""
        fi
    ;;
    farstream)
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/lib/gstreamer-1.0/{libfsrawconference.*,libfsrtpconference.*,libfsmsnconference.*,libfsfunnel.*,libfsrtcpfilter.*,libfsvideoanyrate.*}"
        else
          links=""
        fi
    ;;
    firewall)
        links=""
        if ! $useDESTDIR; then
          doFirst="chgrp install /etc/rc.d && chmod 1775 /etc/rc.d"
        else
          doFirst=""
        fi
    ;;
    gconf|gvfs)
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/share/glib-2.0/schemas/gschemas.compiled /usr/lib/gio/modules/giomodule.cache"
        else
          links=""
        fi
    ;;
    gdk-pixbuf)
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache"
        else
          links=""
        fi
    ;;
    geoclue)
        if ! $useDESTDIR; then
          doFirst="if [ -e /usr/lib/geoclue ]; then rm /usr/lib/geoclue; fi"
          links="/usr/share/glib-2.0/schemas/gschemas.compiled /usr/lib/gio/modules/giomodule.cache"
        else
          doFirst=""
          links=""
        fi
    ;;
    glib)
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/share/aclocal/{glib-2.0.m4,glib-gettext.m4,gsettings.m4}"
        else
          links=""
        fi
    ;;
    gnome-clocks)
        doFirst=""
        links="/usr/share/glib-2.0/schemas/gschemas.compiled /usr/share/icons/hicolor/icon-theme.cache /usr/share/icons/HighContrast/icon-theme.cache"
    ;;
    gnm-thems-stndrd)
        doFirst=""
        links="/usr/share/icons/HighContrast/icon-theme.cache"
    ;;
    gpm)
        links=""
        if ! $useDESTDIR; then
          doFirst="chgrp install /etc/sysconfig && chmod 1775 /etc/sysconfig"
        else
          doFirst=""
        fi
    ;;
    gtkplus2)
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/bin/gtk-update-icon-cache /usr/share/man/man1/gtk-update-icon-cache.1"
        else
          links=""
        fi
    ;;
    gtkplus3) # has to own /usr/bin/gtk-update-icon-cache
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/share/glib-2.0/schemas/gschemas.compiled /usr/share/icons/hicolor/icon-theme.cache /usr/bin/gtk-update-icon-cache /usr/share/man/man1/gtk-update-icon-cache.1"
        else
          links=""
        fi
    ;;
    gutenprint)
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/lib/cups/driver /usr/lib/cups/filter"
        else
          links=""
        fi
    ;;
    icedtea-web) # has to access /var/cache/man/jdk
        links=""
        if ! $useDESTDIR; then
          doFirst="chgrp install /var/cache/man/jdk && chmod 1775 /var/cache/man/jdk"
        else
          doFirst=""
        fi
    ;;
    jdkbin) # has to create dir under /opt
        links=""
        if ! $useDESTDIR; then
          doFirst="chgrp install /opt && chmod 1775 /opt"
        else
          doFirst=""
        fi
    ;;
    libcanberra)
        doFirst=""
        if ! $useDESTDIR; then
          links="/etc/gconf/gconf.xml.defaults/*"
        else
          links=""
        fi
    ;;
    libinput)
        links=""
        if ! $useDESTDIR; then
          doFirst="chgrp install /usr/lib/udev/hwdb.d && chmod 1775 /usr/lib/udev/hwdb.d"
        else
          doFirst=""
        fi
    ;;
    librsvg)
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache"
        else
          links=""
        fi
    ;;
    libvdpau)
        links=""
        if ! $useDESTDIR; then
          doFirst="if [ -d /usr/lib/vdpau ]; then # Nvidia already installed these
  chgrp install /usr/lib/vdpau
  chmod 1775    /usr/lib/vdpau
  chown -h libvdpau:libvdpau /usr/lib/{libvdpau.so,libvdpau.so.1}
fi"
        else
          doFirst=""
        fi
    ;;
    linux-pam)
        if ! $useDESTDIR; then
          doFirst="if [ -d /etc/pam.d ]; then # make sure it's an install dir
  chgrp install /etc/pam.d
  chmod 1775 /etc/pam.d
fi"
          links="/sbin/unix_chkpwd"
        else
          doFirst=""
          links=""
        fi
    ;;
    lvm2)
        links=""
        if ! $useDESTDIR; then
          doFirst="chgrp install /usr/lib/systemd/{system-generators,system/sysinit.target.wants} && chmod 1775 /usr/lib/systemd/{system-generators,system/sysinit.target.wants}"
        else
          doFirst=""
        fi
    ;;
    mediaplayrinfo)
        links=""
        if ! $useDESTDIR; then
          doFirst="chgrp install /usr/lib/udev/rules.d && chmod 1775 /usr/lib/udev/rules.d"
        else
          doFirst=""
        fi
    ;;
    mutter)
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/share/GConf/gsettings/mutter-schemas.convert /usr/share/gnome-control-center/keybindings/50-mutter-{navigation.xml,system.xml,windows.xml} /usr/share/man/man1/mutter.1 /usr/share/gtk-doc/html/meta/* /usr/share/glib-2.0/schemas/gschemas.compiled"
        else
          links=""
        fi
    ;;
    nautilus-sendto)
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/share/glib-2.0/schemas/gschemas.compiled /usr/lib/nautilus-sendto/plugins/{libnstburn.la,libnstburn.so,libnstgajim.la,libnstgajim.so,libnstpidgin.la,libnstpidgin.so,libnstremovable_devices.la,libnstremovable_devices.so} /usr/bin/nautilus-sendto"
        else
          links=""
        fi
    ;;
    net-tools) # overwrites these installed by inetutils
        doFirst=""
        if ! $useDESTDIR; then
          links="/bin/{hostname,dnsdomainname} /sbin/ifconfig"
        else
          links=""
        fi
    ;;
    nvidia)
        doFirst="chgrp install /usr/lib/modules && chmod 1775 /usr/lib/modules"
        links=""
    ;;
    nvidia-libgl)
        doFirst="rm -rf /usr/lib/xorg/modules/extensions/libglx.so
rm -rf /usr/lib/{libGL.so,libGL.so.1,libEGL.so,libEGL.so.1,libGLESv1_CM.so,libGLESv1_CM.so.1,libGLESv2.so,libGLESv2.so.2}"
        links=""
    ;;
    nvidia-utils)
        doFirst="rm -rf /usr/lib/nvidia/xorg/modules/extensions/libglx.so"
        links=""
    ;;
    openjdk)
        doFirst=""
        if ! $useDESTDIR; then
          links="/opt/jdk"
        else
          links=""
        fi
    ;;
    openobex)
        links=""
        if ! $useDESTDIR; then
          doFirst="groupadd -g 90 plugdev"
        else
          doFirst=""
        fi
    ;;
    openssh)
        links=""
        if ! $useDESTDIR; then
          doFirst="install -v -m700 -d /var/lib/sshd
chown -v root:sys /var/lib/sshd
groupadd -g 50 sshd
useradd -c 'sshd PrivSep' -d /var/lib/sshd -g sshd -s /bin/false -u 50 sshd"
        else
          doFirst=""
        fi
    ;;
    php) # needs to write to /etc/httpd/httpd.conf
        if ! $useDESTDIR; then
          doFirst="chgrp install /etc/httpd && chmod 1775 /etc/httpd"
          links="/etc/httpd/httpd.conf"
        else
          doFirst=""
          links=""
        fi
    ;;
    polkit)
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/lib/polkit-1/polkit-agent-helper-1 /usr/bin/pkexec /etc/polkit-1/rules.d /usr/share/polkit-1/rules.d"
        else
          doFirst=""
        fi
    ;;
    py3cairo) # change symlink python so it points to python3, not python2
        links=""
        if ! $useDESTDIR; then
          doFirst="rm /usr/bin/python && ln -svf python3 /usr/bin/python"
        else
          doFirst=""
        fi
    ;;
    py3-dbus) # give access to /usr/include/dbus-1.0/dbus/dbus-python.h
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/include/dbus-1.0/dbus/dbus-python.h /usr/share/doc/{dbus-python-1.2.0,dbus-python-1.2.0/*} /usr/lib/pkgconfig/dbus-python.pc"
        else
          links=""
        fi
    ;;
    py2-gobject3)
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/lib/python${py2series}/site-packages/gi/{repository/*,overrides/*,_gi*,*.p*}"
        else
          links=""
        fi
    ;;
    py3-gobject3)
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/include/pygobject-3.0/pygobject.h /usr/lib/pkgconfig/pygobject-3.0.pc"
        else
          links=""
        fi
    ;;
    py2-setuptools) # make sure can mv /usr/bin/easy_install
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/bin/easy_install"
        else
          links=""
        fi
    ;;
    python2) # on reinstall, needs to own /usr/bin/2to3
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/bin/2to3"
        else
          links=""
        fi
    ;;
    qt4) # installs /usr/tests
        if ! $useDESTDIR; then
          doFirst="chgrp install /usr
chmod 1775 /usr
mkdir -pv /opt/qt-4.8.7
if [ ! -L /opt/qt4 ]; then
  ln -sfnv qt-4.8.7 /opt/qt4
fi"
          links="/opt/qt-4.8.7 /opt/qt4"
        else
          doFirst=""
          links=""
        fi
    ;;
    samba)
        links=""
        if ! $useDESTDIR; then
          doFirst="chgrp install /usr/lib/perl5 && chmod 1775 /usr/lib/perl5 && mkdir -pv /run/lock && chgrp install /run/lock && chmod 1775 /run/lock"
        else
          doFirst=""
        fi
    ;;
    shadow)
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/bin/{chage,chfn,chsh,expiry,gpasswd,newgidmap,newgrp,newuidmap,su,passwd,vigr,vipw,nologin} /usr/share/man/man8/{vigr.8,vipw.8,nologin.8}"
        else
          links=""
        fi
    ;;
    shrd-mime-info)
        if ! $useDESTDIR; then
          doFirst="if [ -d /usr/share/mime/packages ]; then
  chgrp install /usr/share/mime/packages
  chmod 1775 /usr/share/mime/packages
fi"
          links="/usr/share/mime/packages/freedesktop.org.xml"
        else
          doFirst=""
          links=""
        fi
    ;;
    squid)
        links=""
        if ! $useDESTDIR; then
          doFirst='groupadd -g 38 proxy && useradd -c "Squid Cache User" -d /var/cache/squid -u 38 -g proxy -s /bin/false proxy'
        else
          doFirst=""
        fi
    ;;
    sudo)
        links=""
        if ! $useDESTDIR; then
          doFirst="chgrp install /var/lib && chmod 1775 /var/lib"
          links="/var/lib/sudo /var/lib/sudo/lectured /etc/sudoers.d /usr/bin/sudo" # for upgrade
        else
          doFirst=""
        fi
    ;;
    systemd)
        doFirst=""
        if ! $useDESTDIR; then
          links="/etc/pam.d/systemd-user /etc/pam.d/system-session /var/log/journal /var/log/journal/*"
        else
          links=""
        fi
    ;;
    talloc)
        links=""
        if ! $useDESTDIR; then
          doFirst="if [ -e /usr/lib/python${py2series}/site-packages/talloc.so ]; then chown talloc:talloc /usr/lib/python${py2series}/site-packages/talloc.so; fi"
        else
          doFirst=""
        fi
    ;;
    tdb) # these files were installed by samba
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/bin/{tdbbackup,tdbdump,tdbrestore,tdbtool} /usr/lib/python${py2series}/site-packages/tdb.so /usr/share/man/man8/{tdbbackup.8,tdbdump.8,tdbrestore.8,tdbtool.8}"
        else
          links=""
        fi
    ;;
    traceroute)
        links=""
        if ! $useDESTDIR; then
          doFirst="if [ -e /bin/traceroute ]; then rm /bin/traceroute; fi"
        else
          doFirst=""
        fi
    ;;
    xboard)
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/share/mime/packages/xboard.xml"
        else
          links=""
        fi
    ;;
    xclock)
        doFirst=""
        if ! $useDESTDIR; then
          links="/etc/X11"
        else
          links=""
        fi
    ;;
    xorg-server)
        links=""
        if ! $useDESTDIR; then
          doFirst="if [ -e /etc/sysconfig/createfiles ]; then
  chown root:install /etc/sysconfig/createfiles
  chmod 664 /etc/sysconfig/createfiles
fi"
        else
          doFirst=""
        fi
    ;;
    at-spi2-atk|caribou|gdm|gnome-chess|gnome-keyring|gnome-shell|gnome-shell-ext|gset-dsktp-schms|gst-plgns-bad|gst-plgns-bad0|ibus|libgnomekbd|telepathy-logr|yelp)
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/share/glib-2.0/schemas/gschemas.compiled"
        else
          links=""
        fi
    ;;
    epiphany|evol-data-server|folks|gnome-calculator|gnome-contacts|gnome-dictionary|gnome-set-daemon|metacity|tpthymisscntrl)
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/share/glib-2.0/schemas/gschemas.compiled"
        else
          links=""
        fi
    ;;
    gnm-power-mngr|gnome-sys-monitr|gnome-scrnshot|gucharmap|mousetweaks|vino|gedit|epiphany-ext)
        doFirst=""
        links="/usr/share/glib-2.0/schemas/gschemas.compiled"
    ;;
    gst-plgns-good|aisleriot|file-roller|evince|gnome-applets|evolution|ntwrk-mngr-applt|empathy|gnome-nettool|libpeas|totem|libgweather|gcr|goa|gnome-session|gnome-terminal|tracker)
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/share/glib-2.0/schemas/gschemas.compiled /etc/gconf/gconf.xml.defaults/* /usr/share/icons/hicolor/icon-theme.cache"
        else
          links=""
        fi
    ;;
    dconf|nautilus|gnome-bluetooth|gnm-user-share|gnome-cntrl-cntr|baobab|alacarte|brasero|cheese|eog|gnome-disk-util|gnome-serch-tool|gnome-system-mon|gnome-pwr-mngr|netwrk-mngr-app|rhythmbox)
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/share/glib-2.0/schemas/gschemas.compiled /usr/share/icons/hicolor/icon-theme.cache"
        else
          links=""
        fi
    ;;
    gnome-icon-thme|gnm-icn-thme-ext|gnm-icn-thme-sym)
        doFirst=""
        if ! $useDESTDIR; then
          links="/usr/share/icons/gnome/icon-theme.cache"
        else
          links=""
        fi
    ;;
    accerciser|gnome-colr-mngr|gnome-tweak-tool|xfce4-session)
        doFirst=""
        links="/usr/share/icons/hicolor/icon-theme.cache"
    ;;
    *)
        doFirst=""
        links=""
    ;;
esac
} # end setuplinks
#
resolvelinks() {
echo "resolvelinks () {
$doFirst
for link in $links; do
  if [ -e "\$link" ]; then
    chown -h \$PkgName:\$PkgName \$link # change owner to package user so can overwrite
  fi
done
return
}" >> $Output
} #end resolvelinks
#
perlmodwrite () {
# $1 is the package name, $2 is the src version.tar.gz name, $3 is the cpan URL, $4 is the awk print number, usually 1
echo "$1=\${SrcName}$2
if [ ! -e \$$1 ]; then
  wget \$wgetopts ${3}/\${${1}}
fi
cd \$(tar vxf \$$1 | awk -F\/ 'END{print \$$4}')" >> $Output
} # end perlmodwrite
#
wgetwrite () {
# $1 is the file to download
# $2 is the URL
local fToDownload=$1
local fURL=$2
echo "srcpkg=\"$fToDownload\"" >> $Output
case $srcname in
   ccache-|docutils-|iw-|libpwquality-|Mako-|MarkupSafe-|setuptools-|tdb-) # needs --no-check-certificate on wget
           echo "if [ -e \${sourcedir}/\${srcpkg} ]; then # src exists so copy it to current dir
  cp \${sourcedir}/\${SrcName}*.* . 
elif [ -e \${CUR_DIR}/\${srcpkg} ]; then # src exists in current dir - use that
  echo \"\$srcpkg already in current dir - will use that\"
else
  wget \$wgetopts $ncc ${fURL}\${srcpkg}
  if [ \$? -ne 0 ]; then
    echo \"Failed to download \$srcpkg\"
    echo \"Aborting\"
    exit 1
  fi
fi" >> $Output
   ;;
   *)
           echo "if [ -e \${sourcedir}/\${srcpkg} ]; then # src exists so copy it to current dir
  cp \${sourcedir}/\${SrcName}*.* . 
elif [ -e \${CUR_DIR}/\${srcpkg} ]; then # src exists in current dir - use that
  echo \"\$srcpkg already in current dir - will use that\"
else
  wget \$wgetopts ${fURL}\${srcpkg}
  if [ \$? -ne 0 ]; then
    echo \"Failed to download \$srcpkg\"
    echo \"Aborting\"
    exit 1
  fi
fi" >> $Output
   ;;
esac
case $srcname in
   espeak-) # a zip file downloaded
           cat >> $Output << "EOF"
espeakDir="${srcpkg%.zip}"
unzip $srcpkg
cd $espeakDir
EOF
   ;;
   portaudio-) # untars to portaudio
     echo "tar zxf \$srcpkg
cd portaudio" >> $Output
   ;;
   x265-) # untars to multicoreware-x265-somecode
     echo "tar jxf \$srcpkg" >> $Output
   ;;
   *)
     echo "cd \$(tar vxf \$srcpkg | awk -F\/ 'END{print \$1}')" >> $Output
   ;;
esac
} # end wgetwrite
#
tryWgetSrc () {
cat >> $Output << "EOF"
  if hash wget 2>/dev/null; then # wget installed so try and get the source
    echo "Can't find $SrcName src file in $sourcedir"
    echo "Enter the url (including the filename) and I'll try and wget it:"
    read URLFileName
    wget $wgetopts $URLFileName
  else
    echo "No source file found for $SrcName - exit now"
    exit 1
  fi
EOF
} # end tryWgetSrc
#
getSrcLocal () {
# $1 is the extension to model the format of the version number
# usually * is sufficient but for e.g. use [0-9] to force a digit
# $2 is the format to get all files with SrcName-something. Usually *.*
# $3 - true to output the cd line, false to omit it
# This allows more commands to be placed between the fi and the cd command
local ext1=$1
local ext2=$2
local switch=$3
echo "if [ -e \${sourcedir}/\${SrcName}${ext1}.tar.*z* ]; then
  cp \${sourcedir}/\${SrcName}${ext2} .
elif [ -e \${CUR_DIR}/\${SrcName}${ext1}.tar.*z* ]; then
  echo "\$SrcName already in current dir - will use that"
else" >> $Output
tryWgetSrc
if $switch; then
  echo "fi
cd \$(tar vxf \${SrcName}${ext1}.tar.*z* | awk -F\/ 'END{print \$1}')" >> $Output
else
  echo "fi" >> $Output
fi
} # end getSrcLocal
#
gnmPkgVers () {
# $1 is the source name
# $2 is the compressed source package name
# $3 is the extension name to trim to, usually tar
local srcnm=$1
local spkg=$2
local trm=$3
local fext="${spkg#*${srcnm}}" # this is vers # plus .tar.xz or similar
local vnum="${fext%.${trm}*}" # this is the full vers # e.g 0.16.2
gnmvers=$(echo $vnum | awk -F\. '{print $1"."$2}') # this is the required version in gnome
revsrcnm=${srcnm%?} # src name without the trailing -
} # end gnmPkgVers
#
setHostProxy () {
ipadd=$( /sbin/ip addr | grep 192 | awk '{print $2}' | awk -F\/ '{print $1}' )
proxyset=http://${ipadd}:3128/
http_proxy=$proxyset
ftp_proxy=$proxyset
all_proxy=socks://${ipadd}:3128/
https_proxy=$proxyset
hostwgetopts="-e http_proxy=$http_proxy -e ftp_proxy=$ftp_proxy -e https_proxy=$https_proxy"
} # end setHostProxy
#
setproxy () {
# need a function to setup the proxy settings in the build script
    cat >> $Output << "EOF"
setproxy () {
ipadd=$( /sbin/ip addr | grep 192 | awk '{print $2}' | awk -F\/ '{print $1}' )
proxyset=http://${ipadd}:3128/
http_proxy=$proxyset
ftp_proxy=$proxyset
https_proxy=$proxyset
wgetopts="-e http_proxy=$http_proxy -e ftp_proxy=$ftp_proxy -e https_proxy=$https_proxy"
} # end setproxy
EOF
} # end setproxy
#
gnmComsWrite () {
local srcnm=$1
local pkgVersion=$2
gnmPkgVers $srcnm $pkgVersion tar
local pkgurl=${gnomeSource}/${revsrcnm}/${gnmvers}/
wgetwrite $pkgVersion $pkgurl
} # end gnmComsWrite
#
create_links () {
    cat >> $Output << "EOF"
create_links() {
# create soname links
# $1 is the lib dir
# $2 is the library file to fix
local trimto="so"
local _truefile=""
local _soname=""
local _base=""
for libfile in $(find "$1" -name "${2}.so*"); do
  if [ -L $libfile ]; then
    case $libfile in
       *[0-9])
           _soname=$libfile
           _base=$(echo ${_soname} | sed -r 's/(.*).so.*/\1.so/')
       ;;
       *so)
           _base=$libfile
           _soname=${_base}.1
       ;;
       *".la")
           : # ignore la files
       ;;
       *)
           echo "sym link is $libfile"
       ;;
    esac
  elif [ -f $libfile ]; then
    _truefile=$libfile
  fi
  if [ -z $_soname ]; then
    _soname="${_truefile%${trimto}*}so.1"
    _base=$(echo ${_soname} | sed -r 's/(.*).so.*/\1.so/')
  fi
done
[[ -e "${_soname}" ]] || ln -s $_truefile $_soname
[[ -e "${_base}" ]] || ln -s $_soname $_base
chown -h nvidia-utils:nvidia-utils $_soname $_base
} # create_links
EOF
} # create_links
#
copyPatches () {
# $1 is the section
# $2 is the source name
local section=$1
local sourceName=$2
echo "cp \${blfsfiles}/patches/${section}/${sourceName}*.patch ." >> $Output
} # end copyPatches
#
unpack () {
    cat >> $Output << "EOF"
unpack () {
starttime=$( date +%s )
EOF
case $srcname in
   apache-ant-)
     cat >> $Output << "EOF"
anduin="http://anduin.linuxfromscratch.org/sources/other" # url for junit jar
if [ -e ${sourcedir}/${SrcName}*-src.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* . # cp any patches as well
  if [ -e ${sourcedir}/hamcrest-1.3.tgz ]; then
    cp ${sourcedir}/hamcrest-1.3.tgz .
  else
    echo "*** file hamcrest-1.3.tgz not present in $sourcedir ***"
    echo "place it there to continue"
    exit 1
  fi
# need the junit jar file
  if [ -e junit-4.11.jar ]; then
    echo "file junit-4.11.jar already in current dir. Will use that."
  else
    wget $wgetopts ${anduin}/junit-4.11.jar
    if [ $? -ne 0 ]; then
      echo "*** file junit-4.11.jar not downloaded ***"
      echo "Is wget installed?"
      exit 1
    fi
  fi
elif [ -e ${CUR_DIR}/${SrcName}*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat >> $Output << "EOF"
fi
cd $(tar vxf ${SrcName}*-src.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   avr-binutils-) # usr the core/binutils source file
    cat >> $Output << "EOF"
cp ${blfsfiles}/patches/avr/binutils*.patch .
cd $(tar vxf ${sourcedir}/binutils-*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   avr-gcc-) # use the core/gcc source file
    cat >> $Output << "EOF"
cd $(tar vxf ${sourcedir}/gcc-*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   boost_)
      getSrcLocal "*" "*.*" true
   ;;
   certdata.txt) # copy certdata.txt to pkguser dir
    cat >> $Output << "EOF"
if [ -e ${sourcedir}/${SrcName} ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName} .
elif [ -e ${CUR_DIR}/${SrcName} ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat >> $Output << "EOF"
fi
EOF
   ;;
   chromium-)
# need depot_tools to use ninja
    cat >> $Output << "EOF"
if [ ! -d depot_tools ]; then # download using git
  git clone https://chromium.googlesource.com/chromium/tools/depot_tools
fi
# get the source for the chromium launcher
git clone https://github.com/foutrelis/chromium-launcher
# fetch the source - can take 3 hours to download
fetch chromium
EOF
   ;;
   cracklib-|libnl-) #  not cracklib-words or libnl-docs
     getSrcLocal "[0-9]*" "*.*" true
   ;;
   cups-2.) # need  patches from patches/pst
     cat >> $Output << "EOF"
# cp ${blfsfiles}/patches/pst/cups-*.patch . # applied as seds in the commands
EOF
    getSrcLocal "*" "*.*" true
   ;;
# sources not in any BLFS book
   avr-libc-|ccache-|dialog|docutils-|dotconf-|espeak-|farstream-|iw-|libgphoto2-|libnice-|libproxy-|libunwind-|libvirt-|media-player-info-|netctl-|nss-mdns-|pa_stable_v|PySolFC-|pysol-sound-server-|ragel-|SDL2-|snappy-|speech-dispatcher-|squid-|tdb-|wavpack-|last_stable_x264|x265-)
     case $srcname in
        avr-libc-)
            pkgvers=${srcname}1.8.0.tar.bz2
            pkgURL=http://download.savannah.gnu.org/releases/avr-libc/
        ;;
        ccache-)
            pkgvers=${srcname}3.2.3.tar.xz
            pkgURL=http://samba.org/ftp/ccache/
        ;;
        dialog)
            pkgvers=${srcname}.tar.gz
            pkgURL=ftp://invisible-island.net/dialog/
        ;;
        docutils-)
            pkgvers=${srcname}0.12.tar.gz
            pkgURL=https://pypi.python.org/packages/source/d/docutils/
        ;;
        dotconf-)
            pkgvers=${srcname}1.3.tar.gz
            pkgURL=ftp://ftp.uwsg.indiana.edu/linux/gentoo/distfiles/
        ;;
        espeak-)
            pkgvers=${srcname}1.48.04-source.zip
            pkgURL=http://sourceforge.net/projects/espeak/files/espeak/espeak-1.48/
        ;;
        farstream-)
            pkgvers=${srcname}0.2.7.tar.gz
            pkgURL=http://freedesktop.org/software/farstream/releases/farstream/
        ;;
        iw-)
            pkgvers=${srcname}4.1.tar.xz
            pkgURL=https://www.kernel.org/pub/software/network/iw/
        ;;
        libgphoto2-)
            pkgvers=${srcname}2.5.8.tar.bz2
            pkgURL=http://downloads.sourceforge.net/gphoto/
        ;;
        libnice-)
            pkgvers=${srcname}0.1.13.tar.gz
            pkgURL=http://nice.freedesktop.org/releases/
        ;;
        libproxy-)
           copyPatches $Section $srcname
           pkgvers=${srcname}0.4.11.tar.gz
           pkgURL=http://libproxy.googlecode.com/files/
        ;;
        libunwind-)
            pkgvers=${srcname}1.1.tar.gz
            pkgURL=http://download.savannah.gnu.org/releases/libunwind/
        ;;
        libvirt-)
             pkgvers=${srcname}1.2.4.tar.gz
             pkgURL=http://libvirt.org/sources/
        ;;
        media-player-info-)
            pkgvers=${srcname}22.tar.gz
            pkgURL=http://www.freedesktop.org/software/media-player-info/
        ;;
        netctl-)
            pkgvers=${srcname}1.11.tar.xz
            pkgURL=https://sources.archlinux.org/other/packages/netctl/
        ;;
        nss-mdns-)
            pkgvers=${srcname}0.10.tar.gz
            pkgURL=http://pkgs.fedoraproject.org/repo/pkgs/nss-mdns/nss-mdns-0.10.tar.gz/03938f17646efbb50aa70ba5f99f51d7/
        ;;
        pa_stable_v) # portaudio
            pkgvers=${srcname}19_20140130.tgz
            pkgURL=http://www.portaudio.com/archives/
        ;;
        PySolFC-)
            pkgvers=${srcname}2.0.tar.bz2
            pkgURL=http://sourceforge.net/projects/pysolfc/files/PySolFC/PySolFC-2.0/
        ;;
        pysol-sound-server-)
            pkgvers=${srcname}3.01.tar.bz2
            pkgURL=http://www.pysol.org/download/pysol/
        ;;
        ragel-)
            pkgvers=${srcname}6.9.tar.gz
            pkgURL=http://fossies.org/linux/misc/
        ;;
        SDL2-)
            pkgvers=${srcname}2.0.3.tar.gz
            pkgURL=http://www.libsdl.org/release/
        ;;
        snappy-)
            pkgvers=${srcname}1.1.1.tar.gz
            pkgURL=http://snappy.googlecode.com/files/
        ;;
        speech-dispatcher-)
            pkgvers=${srcname}0.8.3.tar.gz
            pkgURL=http://devel.freebsoft.org/pub/projects/speechd/
        ;;
        squid-)
            copyPatches $Section $srcname
            pkgvers=${srcname}3.5.7.tar.xz
            pkgURL=http://www.squid-cache.org/Versions/v3/3.5/
        ;;
        tdb-)
            pkgvers=${srcname}1.3.6.tar.gz
            pkgURL=https://www.samba.org/ftp/tdb/
        ;;
        wavpack-)
            pkgvers=${srcname}4.75.0.tar.bz2
            pkgURL=http://wavpack.com/
        ;;
        last_stable_x264)
            pkgvers=${srcname}.tar.bz2
            pkgURL=ftp://ftp.videolan.org/pub/x264/snapshots/
        ;;
        x265-)
            copyPatches $Section $srcname
            pkgvers=1.7.tar.bz2
            pkgURL=https://bitbucket.org/multicoreware/x265/get/
        ;;
     esac
     wgetwrite $pkgvers $pkgURL
   ;;
# sources that are in the systemd version of the book, but not the svn version
# or they are a different version in the systemd book, e.g. upower
   appstream-glib-|bogofilter-|colord-gtk-|gcab-|geoclue-2.|gtk-vnc-|ibus-|libpciaccess-|libinput-|libmbim-|liboauth-|libqmi-|libpwquality-|libxkbcommon-|ModemManager-|uhttpmock-|upower-|wayland-|weston-|yaml-)
     case $srcname in
        appstream-glib-)
            pkgvers=${srcname}0.4.1.tar.xz
            pkgURL=http://people.freedesktop.org/~hughsient/appstream-glib/releases/
        ;;
        bogofilter-)
            pkgvers=${srcname}1.2.4.tar.gz
            pkgURL=http://downloads.sourceforge.net/project/bogofilter/bogofilter-1.2.4/
        ;;
        colord-gtk-)
            pkgvers=${srcname}0.1.26.tar.xz
            pkgURL=http://www.freedesktop.org/software/colord/releases/
        ;;
        gcab-)
            pkgvers=${srcname}0.6.tar.xz
            pkgURL=http://ftp.gnome.org/pub/gnome/sources/gcab/0.6/
        ;;
        geoclue-2.)
            pkgvers=${srcname}2.0.tar.xz
            pkgURL=http://www.freedesktop.org/software/geoclue/releases/2.2/
        ;;
        gtk-vnc-)
            pkgvers=${srcname}0.5.4.tar.xz
            pkgURL=http://ftp.gnome.org/pub/gnome/sources/gtk-vnc/0.5/ # download from gnome pub sources
        ;;
        ibus-)
            pkgvers=${srcname}1.5.10.tar.gz
            pkgURL=https://github.com/ibus/ibus/releases/download/1.5.10/
        ;;
        libpciaccess-)
            pkgvers=${srcname}0.13.4.tar.bz2
            pkgURL=http://xorg.freedesktop.org/archive/individual/lib/
        ;;
        libinput-)
            pkgvers=${srcname}0.21.0.tar.xz
            pkgURL=http://www.freedesktop.org/software/libinput/
        ;;
        libmbim-)
            pkgvers=${srcname}1.12.2.tar.xz
            pkgURL=http://www.freedesktop.org/software/libmbim/
        ;;
        liboauth-)
            pkgvers=${srcname}1.0.3.tar.gz
            pkgURL=http://sourceforge.net/projects/liboauth/files/
        ;;
        libqmi-)
            pkgvers=${srcname}1.12.6.tar.xz
            pkgURL=http://www.freedesktop.org/software/libqmi/
        ;;
        libpwquality-)
            pkgvers=${srcname}1.2.4.tar.bz2
            pkgURL=https://fedorahosted.org/releases/l/i/libpwquality/
        ;;
        libxkbcommon-)
            pkgvers=${srcname}0.5.0.tar.xz
            pkgURL=http://xkbcommon.org/download/
        ;;
        ModemManager-)
            pkgvers=${srcname}1.4.10.tar.xz
            pkgURL=http://www.freedesktop.org/software/ModemManager/
        ;;
        uhttpmock-)
            pkgvers=${srcname}0.5.0.tar.xz
            pkgURL=http://tecnocode.co.uk/downloads/uhttpmock/
        ;;
        upower-)
            pkgvers=${srcname}0.99.3.tar.xz
            pkgURL=http://upower.freedesktop.org/releases/
        ;;
        wayland-)
            pkgvers=${srcname}1.8.1.tar.xz
            pkgURL=http://wayland.freedesktop.org/releases/
        ;;
        weston-)
            pkgvers=${srcname}1.8.0.tar.xz
            pkgURL=http://wayland.freedesktop.org/releases/
        ;;
        yaml-)
            pkgvers=${srcname}0.1.6.tar.gz
            pkgURL=http://pyyaml.org/download/libyaml/
        ;;
     esac
     if [[ "$SYSTEMD" = yes && "$BOOK_VERSION" != systemd ]]; then
       wgetwrite $pkgvers $pkgURL
     else
       getSrcLocal "*" "*.*" true
     fi
   ;;
   dbus-1.) # don't need to copy the src if using systemd
     if [ "$SYSTEMD" = yes ]; then
       cat >> $Output << "EOF"
cd $(tar vxf ${SrcName}?.??.tar.*z* | awk -F\/ 'END{print $1}') # assumes version 1.8.18 for e.g.
EOF
     else
       getSrcLocal "*" "*.*" true
     fi
   ;;
   dconf-) # also get the dconf-editor file
     getSrcLocal "*" "*.*" false
    cat >> $Output << "EOF"
# get the editor
dconfed="dconf-editor-3.16.1.tar.xz"
if [ -e ${CUR_DIR}/${dconfed} ]; then # src exists in current dir - use that
  echo "$dconfed already in current dir - will use that"
elif [ -e ${sourcedir}/${dconfed} ]; then
  cp ${sourcedir}/${dconfed} . # dconf editor file
else
  wget $wgetopts http://ftp.gnome.org/pub/gnome/sources/dconf-editor/3.16/${dconfed}
fi
cd $(tar vxf ${SrcName}[0-9]*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   eudev-) # reinstalling so src already in place
    cat >> $Output << "EOF"
cd $(tar vxf ${SrcName}[0-9].[0-9].[0-9].tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   firefox-)
     getSrcLocal "*" "*.*" true
   ;;
   gegl-) # need to apply patches from patches/libraries
     cat >> $Output << "EOF"
cp ${blfsfiles}/patches/libraries/${SrcName}*.patch . # use patches from blfsfiles
EOF
     getSrcLocal "*" "*.tar.*z*" true
   ;;
   ghostscript-) # get the fonts too
     getSrcLocal "[0-9]*" "*.*" false
     cat >> $Output << "EOF"
fontloc=http://downloads.sourceforge.net/gs-fonts
standardfonts=ghostscript-fonts-std-8.11.tar.gz
extraFont=gnu-gs-fonts-other-6.0.tar.gz
if [ ! -e $standardfonts ]; then
  wget $wgetopts ${fontloc}/gs-fonts/${standardfonts}
fi
if [ ! -e $extraFont ]; then
  wget $wgetopts ${fontloc}/gs-fonts/${extraFont}
fi
count=0
for fl in *fonts*; do
  fontfile[$count]=$fl
  ((count++))
done
cd $(tar vxf ${SrcName}[0-9]*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   gimp-) # make sure the help file is present. If not download it
     getSrcLocal "[0-9]*" "*.*" false
     cat >> $Output << "EOF"
helpfile=gimp-help-2.8.2.tar.bz2
if [ ! -e $helpfile ]; then # download it
  wget $wgetopts http://mirror.hessmo.com/gimp/pub/gimp/help/${helpfile}
fi
cd $(tar vxf ${SrcName}[0-9]*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   git-|gnome-icon-theme-|docbook-xsl-|freetype-|polkit-|poppler-) #  git man-pages and htmldocs, gnome-icon-theme-extras and symbolic, docbook-xml, freetype-doc, polkit-gnome, poppler-data
     getSrcLocal "[0-9]*" "*.tar.*z*" true
   ;;
# get this library from gnome
   grilo-|grilo-plugins-|pangox-compat-|rest-)
     gnmvers=""
     revsrcnm=""
     case $srcname in
#       glib-)
#          pkgvers=${srcname}2.42.0.tar.xz
#       ;;
#       glibmm-)
#          pkgvers=${srcname}2.40.0.tar.xz
#       ;;
#       glib-networking-)
#          pkgvers=${srcname}2.40.1.tar.xz
#       ;;
#       gobject-introspection-)
#          pkgvers=${srcname}1.40.0.tar.xz
#       ;;
       grilo-)
         pkgvers=${srcname}0.2.12.tar.xz
       ;;
       grilo-plugins-)
         pkgvers=${srcname}0.2.14.tar.xz
       ;;
#       json-glib-)
#          pkgvers=${srcname}1.0.2.tar.xz
#       ;;
#       libglade-)
#          pkgvers=${srcname}2.6.4.tar.bz2
#       ;;
       pangox-compat-)
          pkgvers=${srcname}0.0.2.tar.xz
       ;;
       rest-)
          pkgvers=${srcname}0.7.93.tar.xz
       ;;
     esac
     gnmComsWrite $srcname $pkgvers
   ;;
# get these x libraries sources if they're out of kilter with blfs
#   atk-|at-spi2-atk-|at-spi2-core-|clutter-gst-|clutter-gtk-|clutter-1.|cogl-|gtk+-3.|gtkmm-3.|gtk-vnc-|pangomm-)
#     gnmvers=""
#     revsrcnm=""
#     case $srcname in
#       atk-)
#          pkgvers=${srcname}2.16.0.tar.xz
#       ;;
#       at-spi2-atk-)
#          pkgvers=${srcname}2.16.0.tar.xz
#       ;;
#       at-spi2-core-)
#          pkgvers=${srcname}2.16.0.tar.xz
#       ;;
#       clutter-gst-)
#          pkgvers=${srcname}3.0.4.tar.xz
#       ;;
#       clutter-gtk-)
#          pkgvers=${srcname}1.6.0.tar.xz
#       ;;
#       clutter-1.)
#          pkgvers=${srcname}22.0.tar.xz
#          srcname=${srcname%??} # remove the 1.
#       ;;
#      cogl-)
#         pkgvers=${srcname}1.20.0.tar.xz
#       ;;
#       gdk-pixbuf-)
#          pkgvers=${srcname}2.31.4.tar.xz
#       ;;
#       gtk+-3.)
#          pkgvers=${srcname}16.0.tar.xz
#          srcname=${srcname%??} # remove the 3.
#       ;;
#       gtkmm-3.)
#          pkgvers=${srcname}16.0.tar.xz
#          srcname=${srcname%??} # remove the 3.
#       ;;
#       gtk-vnc-)
#          pkgvers=${srcname}0.5.4.tar.xz
#       ;;
#       pangomm-)
#          pkgvers=${srcname}2.36.0.tar.xz
#       ;;
#     esac
#     gnmComsWrite $srcname $pkgvers
#   ;;
#   cairo-|cairomm-|colord-gtk-)
#     case $srcname in
#       cairo-)
#          pkgvers=${srcname}1.14.2.tar.xz
#          pkgURL=http://cairograph1ics.org/releases/
#       ;;
#       cairomm-)
#          pkgvers=${srcname}1.10.0.tar.gz
#          pkgURL=http://cairographics.org/releases/
#       ;;
#       colord-gtk-)
#          pkgvers=${srcname}0.1.26.tar.xz
#          pkgURL=http://www.freedesktop.org/software/colord/releases/
#       ;;
#     esac
#     wgetwrite $pkgvers $pkgURL
#   ;;
# get gnomeplatform sources
#   GConf-|dconf-|gcr-|gjs-|gsettings-desktop-schemas-|gtksourceview-3.|libpeas-|libsecret-|libwnck-|totem-pl-parser-|vte-0.4|yelp-xsl-)
   evolution-data-server-|folks-|gnome-common-|gnome-online-accounts-|gtkhtml-|libchamplain-|libgdata-|libgee-|libgweather-|yelp-tools-)
#   GConf-|libgtop-|libsecret-|libwnck-|polkit-gnome-|totem-pl-parser-)
     gnmvers=""
     revsrcnm=""
     case $srcname in
#       GConf-)
#          pkgvers=${srcname}3.2.6.tar.xz
#       ;;
#       dconf-)
#          pkgvers=${srcname}0.24.0.tar.xz
#       ;;
       evolution-data-server-)
          pkgvers=${srcname}3.16.5.tar.xz
       ;;
       folks-)
          pkgvers=${srcname}0.11.1.tar.xz
       ;;
#       gcr-)
#          pkgvers=${srcname}3.16.0.tar.xz
#       ;;
#       gjs-)
#          pkgvers=${srcname}1.43.3.tar.xz
#       ;;
       gnome-common-)
          pkgvers=${srcname}3.14.0.tar.xz
       ;;
       gnome-online-accounts-)
          pkgvers=${srcname}3.16.3.tar.xz
       ;;
#       gsettings-desktop-schemas-)
#          pkgvers=${srcname}3.16.1.tar.xz
#       ;;
       gtkhtml-)
          pkgvers=${srcname}4.8.5.tar.xz
       ;;
#       gtksourceview-3.)
#          pkgvers=${srcname}16.1.tar.xz
#          srcname=${srcname%??} # remove the 3.
#       ;;
       libchamplain-)
          pkgvers=${srcname}0.12.10.tar.xz
       ;;
       libgdata-)
          pkgvers=${srcname}0.17.2.tar.xz
       ;;
#       libgtop-)
#          pkgvers=${srcname}2.30.0.tar.xz
#       ;;
       libgee-)
          pkgvers=${srcname}0.18.0.tar.xz
       ;;
       libgweather-)
          pkgvers=${srcname}3.16.1.tar.xz
       ;;
#       libpeas-)
#          pkgvers=${srcname}1.14.0.tar.xz
#       ;;
#       libsecret-)
#          pkgvers=${srcname}0.18.2.tar.xz
#       ;;
#       libwnck-)
#          pkgvers=${srcname}3.14.0.tar.xz
#       ;;
#       polkit-gnome-)
#          pkgvers=${srcname}0.105.tar.xz
#       ;;
#       totem-pl-parser-)
#          pkgvers=${srcname}3.10.5.tar.xz
#       ;;
#       vte-0.4)
#          pkgvers=${srcname}0.2.tar.xz
#          srcname=${srcname%???} # remove the 0.4
#       ;;
       yelp-tools-)
          pkgvers=${srcname}3.16.1.tar.xz
       ;;
#       yelp-xsl-)
#          pkgvers=${srcname}3.16.1.tar.xz
#       ;;
     esac
     gnmComsWrite $srcname $pkgvers
   ;;
   accountsservice-|libwacom-)
     case $srcname in
       accountsservice-)
          pkgvers=${srcname}0.6.40.tar.xz
          pkgURL=http://www.freedesktop.org/software/accountsservice/
       ;;
       libwacom-)
          pkgvers=${srcname}0.15.tar.bz2
          pkgURL=http://downloads.sourceforge.net/linuxwacom/
       ;;
     esac
     wgetwrite $pkgvers $pkgURL
  ;;
# get gnomedesktop sources
# adwaita-icon-theme-|gnome-icon-theme-extras-|gnome-icon-theme-symbolic-|gnome-icon-theme-|gnome-keyring-|gnome-themes-standard-|gnome-video-effects-|gvfs-|nautilus-|yelp-)
   cantarell-fonts-|caribou-|gdm-|geocode-glib-|gnome-backgrounds-|gnome-bluetooth-|gnome-control-center-|gnome-desktop-|gnome-menus-|gnome-power-manager-|gnome-session-|gnome-settings-daemon-|gnome-shell-3.|gnome-shell-extensions-|gnome-terminal-|gnome-user-docs-|gnome-user-share-|gsound-|mutter-|nautilus-sendto-|zenity-)
     gnmvers=""
     revsrcnm=""
     case $srcname in
       cantarell-fonts-)
          pkgvers=${srcname}0.0.16.tar.xz
       ;;
       caribou-)
          pkgvers=${srcname}0.4.18.1.tar.xz
       ;;
       gdm-)
          pkgvers=${srcname}3.16.2.tar.xz
       ;;
       geocode-glib-)
          pkgvers=${srcname}3.16.2.tar.xz
       ;;
       gnome-backgrounds-)
          pkgvers=${srcname}3.16.0.tar.xz
       ;;
       gnome-bluetooth-)
          pkgvers=${srcname}3.16.1.tar.xz
       ;;
       gnome-control-center-)
          pkgvers=${srcname}3.16.3.tar.xz
       ;;
       gnome-desktop-)
          pkgvers=${srcname}3.16.2.tar.xz
       ;;
#       gnome-icon-theme-extras-)
#          pkgvers=${srcname}3.12.0.tar.xz
#       ;;
#       gnome-icon-theme-symbolic-)
#          pkgvers=${srcname}3.12.0.tar.xz
#       ;;
#       gnome-icon-theme-)
#          pkgvers=${srcname}3.12.0.tar.xz
#          gnmComsWrite $srcname $pkgvers
#       ;;
#       gnome-keyring-)
#          pkgvers=${srcname}3.16.0.tar.xz
#       ;;
       gnome-menus-)
          pkgvers=${srcname}3.13.3.tar.xz
       ;;
       gnome-power-manager-)
          pkgvers=${srcname}3.16.1.tar.xz
       ;;
       gnome-session-)
          pkgvers=${srcname}3.16.0.tar.xz
       ;;
       gnome-settings-daemon-)
          pkgvers=${srcname}3.16.3.tar.xz
       ;;
       gnome-shell-3.)
          cat >> $Output << "EOF"
cp ${blfsfiles}/patches/gnomedesktop/${SrcName}*.patch .
EOF
          pkgvers=${srcname}16.3.tar.xz
          srcname=${srcname%??} # remove the 3.
       ;;
       gnome-shell-extensions-)
          pkgvers=${srcname}3.16.2.tar.xz
       ;;
       gnome-terminal-)
          pkgvers=${srcname}3.16.2.tar.xz
       ;;
       gnome-themes-standard-)
          pkgvers=${srcname}3.16.2.tar.xz
       ;;
       gnome-user-docs-)
          pkgvers=${srcname}3.16.1.tar.xz
       ;;
       gnome-user-share-)
          pkgvers=${srcname}3.14.2.tar.xz
       ;;
#       gnome-video-effects-)
#          pkgvers=${srcname}0.4.1.tar.xz
#       ;;
       gsound-)
          pkgvers=${srcname}1.0.1.tar.xz
       ;;
#       gvfs-)
#          pkgvers=${srcname}1.25.2.tar.xz
#       ;;
       mutter-)
          pkgvers=${srcname}3.16.3.tar.xz
       ;;
       nautilus-sendto-)
          pkgvers=${srcname}3.8.2.tar.xz
       ;;
#       nautilus-)
#          pkgvers=${srcname}3.16.2.tar.xz
#       ;;
#       yelp-3.)
#          pkgvers=${srcname}16.1.tar.xz
#          srcname=${srcname%??} # remove the 3.
#       ;;
       zenity-)
          pkgvers=${srcname}3.16.3.tar.xz
       ;;
     esac
     gnmComsWrite $srcname $pkgvers
   ;;
# get gnomeapps sources
# baobab-|brasero-|eog-|evince-|gedit-|gnome-calculator-|gnome-nettool-|gnome-system-monitor-|gnome-terminal-|gucharmap-|network-manager-applet-)
   aisleriot-|alacarte-|gnome-chess-|gnome-clocks-|gnome-color-manager-|gnome-dictionary-|gnome-disk-utility-|gnome-search-tool-)
     gnmvers=""
     revsrcnm=""
     case $srcname in
       aisleriot-)
          pkgvers=${srcname}3.16.0.tar.xz
       ;;
       alacarte-)
          pkgvers=${srcname}3.11.91.tar.xz
       ;;
#       baobab-)
#          pkgvers=${srcname}3.16.0.tar.xz
#       ;;
#       brasero-)
#          pkgvers=${srcname}3.12.0.tar.xz
#       ;;
#       eog-)
#          pkgvers=${srcname}3.16.0.tar.xz
#       ;;
#       evince-)
#          pkgvers=${srcname}3.16.0.tar.xz
#       ;;
#       evolution-)
#          pkgvers=${srcname}3.12.11.tar.xz
#       ;;
#       gedit-)
#          pkgvers=${srcname}3.16.0.tar.xz
#       ;;
#       gnome-calculator-)
#          pkgvers=${srcname}3.16.0.tar.xz
#       ;;
       gnome-chess-)
          pkgvers=${srcname}3.16.0.tar.xz
       ;;
       gnome-clocks-)
          pkgvers=${srcname}3.16.0.tar.xz
       ;;
       gnome-color-manager-)
          pkgvers=${srcname}3.16.0.tar.xz
       ;;
       gnome-dictionary-)
          pkgvers=${srcname}3.16.0.tar.xz
       ;;
       gnome-disk-utility-)
          pkgvers=${srcname}3.16.0.tar.xz
       ;;
#       gnome-nettool-)
#          pkgvers=${srcname}3.8.1.tar.xz
#       ;;
       gnome-search-tool-)
          pkgvers=${srcname}3.6.0.tar.xz
       ;;
#       gnome-system-monitor-)
#          pkgvers=${srcname}3.16.0.tar.xz
#       ;;
#       gucharmap-)
#          pkgvers=${srcname}3.16.0.tar.xz
#       ;;
#       network-manager-applet-)
#          pkgvers=${srcname}1.0.2.tar.xz
#       ;;
     esac
     gnmComsWrite $srcname $pkgvers
   ;;
   gnuchess-|xboard-)
     case $srcname in
       gnuchess-)
          pkgvers=${srcname}6.2.1.tar.gz
          pkgURL=ftp://ftp.gnu.org/pub/gnu/chess/
       ;;
       xboard-)
          pkgvers=${srcname}4.8.0.tar.gz
          pkgURL=http://ftp.gnu.org/gnu/xboard/
       ;;
     esac
     wgetwrite $pkgvers $pkgURL
   ;;
   gst-plugins-bad-1.)
     copyPatches $Section $srcname
     getSrcLocal "*" "*.*" true
   ;;
   hamcrest-)
     cat >> $Output << "EOF"
pkgver=1.3
corejar=${SrcName}core-${pkgver}.jar
libraryjar=${SrcName}library-${pkgver}.jar
generatorjar=${SrcName}generator-${pkgver}.jar
integrationjar=${SrcName}integration-${pkgver}.jar
pkgURL=https://hamcrest.googlecode.com/files/
wgetopts="${wgetopts} --no-check-certificate"
if [ ! -e $corejar ]; then
  wget $wgetopts ${pkgURL}${corejar}
fi
if [ ! -e $libraryjar ]; then
  wget $wgetopts ${pkgURL}${libraryjar}
fi
if [ ! -e $generatorjar ]; then
  wget $wgetopts ${pkgURL}${generatorjar}
fi
if [ ! -e $integrationjar ]; then
  wget $wgetopts ${pkgURL}${integrationjar}
fi
EOF
   ;;
   jdk8u) # download files to build jdk8-openjdk
     cat >> $Output << "EOF"
_java_ver=8
_jdk_update=60
_jdk_build=24
pkgver=${_java_ver}.u${_jdk_update}
_repo_ver=jdk${_java_ver}u${_jdk_update}-b${_jdk_build}
_url_src=http://hg.openjdk.java.net/jdk8u/jdk8u
# if more than one patch, conventional test will fail with wild card, so use array
#patchfile=(${sourcedir}/${SrcName}${_icedtea_ver}*.patch)
#homepatch=(${CUR_DIR}/${SrcName}${_icedtea_ver}*.patch)
#if [ -e "${patchfile[0]}" ]; then # patch(es) exists so copy to current dir
#  cp ${sourcedir}/${SrcName}${_icedtea_ver}*.patch .
#elif [ -e "${homepatch[0]}" ]; then # patch(es) exists in current dir
#  echo "Patch(es) already in current dir"
#else
#  echo "No patches found for $SrcName. Should there be some?"
#fi
if [ ! -e ${_repo_ver}.tar.gz ]; then
  wget $wgetopts -O ${_repo_ver}.tar.gz ${_url_src}/archive/${_repo_ver}.tar.gz
fi
if [ ! -e corba.tar.gz ]; then
  wget $wgetopts -O corba.tar.gz ${_url_src}/corba/archive/${_repo_ver}.tar.gz
fi
if [ ! -e hotspot.tar.gz ]; then
  wget $wgetopts -O hotspot.tar.gz ${_url_src}/hotspot/archive/${_repo_ver}.tar.gz
fi
if [ ! -e jdk.tar.gz ]; then
  wget $wgetopts -O jdk.tar.gz ${_url_src}/jdk/archive/${_repo_ver}.tar.gz
fi
if [ ! -e jaxws.tar.gz ]; then
  wget $wgetopts -O jaxws.tar.gz ${_url_src}/jaxws/archive/${_repo_ver}.tar.gz
fi
if [ ! -e jaxp.tar.gz ]; then
  wget $wgetopts -O jaxp.tar.gz ${_url_src}/jaxp/archive/${_repo_ver}.tar.gz
fi
if [ ! -e langtools.tar.gz ]; then
  wget $wgetopts -O langtools.tar.gz ${_url_src}/langtools/archive/${_repo_ver}.tar.gz
fi
if [ ! -e nashorn.tar.gz ]; then
  wget $wgetopts -O nashorn.tar.gz ${_url_src}/nashorn/archive/${_repo_ver}.tar.gz
fi
# download the icedtea-web tar file for the icon
icedteaVers=1.6
if [ ! -e icedtea-web-${icedteaVers}.tar.gz ]; then
  wget $wgetopts http://icedtea.classpath.org/download/source/icedtea-web-${icedteaVers}.tar.gz
fi
#cp -v ${blfsfiles}/patches/java/*.patch . # patches to apply
cd $(tar vxf ${_repo_ver}.tar.*z* | awk -F\/ 'END{print $1}')
tar zxf ../corba.tar.gz
tar zxf ../hotspot.tar.gz
tar zxf ../jaxp.tar.gz
tar zxf ../jaxws.tar.gz
tar zxf ../jdk.tar.gz
tar zxf ../langtools.tar.gz
tar zxf ../nashorn.tar.gz
for subrepo in corba hotspot jdk jaxws jaxp langtools nashorn; do
  ln -s ${subrepo}-${_repo_ver} ${subrepo}
done
EOF
   ;;
   jasper-|docbook-xml-) # src is a zip file
    cat >> $Output << "EOF"
if [ -e ${sourcedir}/${SrcName}*.zip ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
elif [ -e ${CUR_DIR}/${SrcName}*.zip ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat >> $Output << "EOF"
fi
EOF
    case $srcname in
       docbook-xml*)
           cat >> $Output << "EOF"
for f in *.zip; do
docbookDir="${f%.zip}"
done
mkdir -pv $docbookDir
cd $docbookDir
unzip ../${SrcName}*.zip
EOF
       ;;
       *)
         cat >> $Output << "EOF"
unzip ${SrcName}*.zip
cd ${SrcName}*
EOF
       ;;
    esac
   ;;
   jdk-${jdkvers}-)
     cat >> $Output << "EOF"
if [ -e ${sourcedir}/${SrcName}*.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* . # cp any patches as well
elif [ -e ${CUR_DIR}/${SrcName}*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
  echo "No source file found for $SrcName"
  echo "Please download it from the Oracle website"
  echo "exit now"
  exit 1
fi
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   junit4_)
     cat >> $Output << "EOF"
if [ -e ${sourcedir}/hamcrest-1.3.tgz ]; then
  cp ${sourcedir}/hamcrest-1.3.tgz .
else
  echo "hamcrest-1.3.tgz not found in $sourcedir"
  echo "Place it there to continue"
  exit 1
fi
EOF
     getSrcLocal "*" "*.*" true
   ;;
   krb5-) # untars to a tar.gz and a tar.gz.asc
     cat >> $Output << "EOF"
if [ -e ${sourcedir}/${SrcName}*.* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
elif [ -e ${CUR_DIR}/${SrcName}*.* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
     cat >> $Output << "EOF"
fi
tar xvf ${SrcName}*.tar
# check the gpg key
EOF
    echo "gpg2 --verify krb5-${krb5vers}.tar.gz.asc krb5-${krb5vers}.tar.gz
gpg2 --keyserver pgp.mit.edu --recv-keys 0055C305
gpg2 --verify krb5-${krb5vers}.tar.gz.asc krb5-${krb5vers}.tar.gz
#" >> $Output
     cat >> $Output << "EOF"
rm *.asc
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   libcap-) # package file may be present, so tar ?.?? to distinguish source file
     getSrcLocal "*" "*.*" false
     cat >> $Output << "EOF"
cd $(tar vxf ${SrcName}?.??.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   libcdio-) # download libcdio-paranoia as well
     getSrcLocal "*" "*.*" false
     cat >> $Output << "EOF"
libcdioparan="libcdio-paranoia-10.2+0.93+1.tar.bz2"
if [ -e ${CUR_DIR}/${libcdioparan} ]; then # src exists in current dir - use that
  echo "$libcdioparan already in current dir - will use that"
elif [ -e ${sourcedir}/${libcdioparan} ]; then
  cp ${sourcedir}/${libcdioparan} . # libcdio-paranoia src file
else
  wget $wgetopts http://ftp.gnu.org/gnu/libcdio/${libcdioparan}
fi
cd $(tar vxf ${SrcName}[0-9]*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   libreoffice-) # don't need the translations. need --no-overwrite-dir when untaring
     getSrcLocal "[0-9]*" "*.*" false
     cat >> $Output << "EOF"
rm -rf libreoffice-translations*
cd $(tar vxf ${SrcName}[0-9]*.tar.*z* --no-overwrite-dir | awk -F\/ 'END{print $1}')
EOF
   ;;
   libusb-|grilo-|mutter-) # don't want libusb-compat, grilo-plugins
     getSrcLocal "[0-9]*" "*.*" true
   ;;
   Linux-PAM-) # do not want to untar the docs
     getSrcLocal "?.?.?" "*.*" true
   ;;
# includes the clang compiler in llvm
   llvm-)
     echo "llvmvers=$llvmvers" >> $Output
     cat >> $Output << "EOF"
clangSrc=cfe-${llvmvers}.src.tar.xz
compilerrt=compiler-rt-${llvmvers}.src.tar.xz
if [ ! -e $clangSrc ]; then
  wget $wgetopts http://llvm.org/releases/${llvmvers}/${clangSrc}
fi
if [ ! -e $compilerrt ]; then
  wget $wgetopts http://llvm.org/releases/${llvmvers}/${compilerrt}
fi
cp ${sourcedir}/${SrcName}*.* .
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   LVM2.|sg3_utils-|zip|icu4c-|cdparanoia-III-|xterm-|sgml-common-|openldap-) # a .tgz src file
    cat >> $Output << "EOF"
if [ -e ${sourcedir}/${SrcName}*.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
elif [ -e ${CUR_DIR}/${SrcName}*.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
EOF
tryWgetSrc
    cat >> $Output << "EOF"
fi
cd $(tar vxf ${SrcName}*.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   nasm-) # don't need the docs file
     getSrcLocal "?.??.??" "*.*" true
   ;;
   NVIDIA-Linux-x86_64-)
     cat >> $Output << "EOF"
pkgver=352.30
_pkg=${SrcName}${pkgver}-no-compat32
if [ -e ${sourcedir}/${SrcName}*.run ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
elif [ -e ${CUR_DIR}/${SrcName}*.run ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that"
else
   wget $wgetopts ftp://download.nvidia.com/XFree86/Linux-x86_64/${pkgver}/${_pkg}.run
fi
sh ${_pkg}.run --extract-only
cd ${_pkg}
EOF
   ;;
   OpenJDK-)
     getSrcLocal "*-bin" "*.*" true
   ;;
   php-) # wget the docs (single html)
     getSrcLocal "*" "*.*" false
     cat >> $Output << "EOF"
phpManual=php_manual_en.html.gz
if [ ! -e $phpManual ]; then
wget $wgetopts -O $phpManual http://us.php.net/get/${phpManual}/from/this/mirror
fi
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   Python-3.) # get the docs as well
     cat >> $Output << "EOF"
pythondocs="python-${Python3vers}-docs-html.tar.bz2"
if [ ! -e $pythondocs ]; then
  wget $wgetopts --no-check-certificate https://www.python.org/ftp/python/doc/${Python3vers}/${pythondocs}
fi
EOF
     getSrcLocal "*" "*.*" true
   ;;
# get these Python modules if the book is not systemd
   Beaker-|Mako-|MarkupSafe-|pyatspi-|setuptools-)
     case $srcname in
        Beaker-)
          pkgvers=${srcname}1.7.0.tar.gz
          pkgURL=https://pypi.python.org/packages/source/B/Beaker/
        ;;
        Mako-)
          pkgvers=${srcname}1.0.1.tar.gz
          pkgURL=https://pypi.python.org/packages/source/M/Mako/
        ;;
        MarkupSafe-)
          pkgvers=${srcname}0.23.tar.gz
          pkgURL=http://pypi.python.org/packages/source/M/MarkupSafe/
        ;;
        pyatspi-)
          pkgvers=${srcname}2.16.0.tar.xz
          pkgURL=http://ftp.gnome.org/pub/gnome/sources/pyatspi/2.16/
        ;;
        setuptools-)
          pkgvers=${srcname}18.1.tar.gz
          pkgURL=https://pypi.python.org/packages/source/s/setuptools/
     esac
     if [[ "$SYSTEMD" = yes && "$BOOK_VERSION" != systemd ]]; then
       wgetwrite $pkgvers $pkgURL
     else
       getSrcLocal "*" "*.*" true
     fi
   ;;
   qt-everywhere-opensource-src-4.) # copy the qtwebkit files as well
     getSrcLocal "*" "*.*" false
     cat >> $Output << "EOF"
qtName="qtwebkit-"
if [ -e ${sourcedir}/${qtName}*.tar.*z* ]; then # copy to current dir
  cp ${sourcedir}/${qtName}*.* . # cp any patches as well
elif [ -e ${CUR_DIR}/${qtName}*.tar.*z* ]; then # src exists in current dir - use that
  echo "$qtName already in current dir - will use that"
else
  wget $wgetopts http://download.kde.org/stable/qtwebkit-2.3/2.3.4/src/${qtName}2.3.4.tar.gz
  wget $wgetopts http://www.linuxfromscratch.org/patches/blfs/svn/${qtName}2.3.4-gcc5-1.patch
fi
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   shadow-) # distinguish src file from a pkg file, if present
     getSrcLocal "*" "*.*" false
     cat >> $Output << "EOF"
cd $(tar vxf ${SrcName}?.?.?.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   smpeg-) # get the source from svn
     cat >> $Output << "EOF"
smpegPkgVers=release_0_4_5
svn co svn://svn.icculus.org/smpeg/tags/${smpegPkgVers}
cd $smpegPkgVers
EOF
   ;;
   speex-) # also copy the dsp file
     getSrcLocal "*" "*.*" false
     cat >> $Output << "EOF"
speexdsp="speexdsp-1.2rc3.tar.gz"
if [ -e ${CUR_DIR}/${speexdsp} ]; then # src exists in current dir - use that
  echo "$speexdsp already in current dir - will use that"
elif [ -e ${sourcedir}/${speexdsp} ]; then
  cp ${sourcedir}/${speexdsp} . # additional information file
else
  wget $wgetopts http://downloads.us.xiph.org/releases/speex/${speexdsp}
fi
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   systemd-) # don't need to copy the src, already in place
     cat >> $Output << "EOF"
cd $(tar vxf ${SrcName}???.tar.*z* | awk -F\/ 'END{print $1}') # assumes version 222 for e.g.
EOF
   ;;
   tcl*) # there is -src and -html so specify src
     getSrcLocal "*-src" "*.*" true
   ;;
# get these Perl modules from cpan
   ExtUtils-Depends-|ExtUtils-PkgConfig-|Glib-|Tie-IxHash-|XML-LibXML-|XML-NamespaceSupport-|XML-SAX-|XML-SAX-Base-|XML-SAX-Expat-|XML-Simple-)
     case $srcname in
        ExtUtils-Depends-)
            srcvar1="extutilsdependsSrc"
            srcExt="0.404.tar.gz"
            cpanURL="http://search.cpan.org/CPAN/authors/id/X/XA/XAOC"
            awkpnum="1"
        ;;
        ExtUtils-PkgConfig-)
            srcvar1="extutilspkgconfigSrc"
            srcExt="1.15.tar.gz"
            cpanURL="http://search.cpan.org/CPAN/authors/id/X/XA/XAOC"
            awkpnum="1"
        ;;
        Glib-)
            srcvar1="glibSrc"
            srcExt="1.313.tar.gz"
            cpanURL="http://search.cpan.org/CPAN/authors/id/X/XA/XAOC"
            awkpnum="1"
        ;;
        Tie-IxHash-)
            srcvar1="tieixhashSrc"
            srcExt="1.23.tar.gz"
            cpanURL="http://search.cpan.org/CPAN/authors/id/C/CH/CHORNY"
            awkpnum="1"
        ;;
        XML-LibXML-)
            srcvar1="xmllibxmlSrc"
            srcExt="2.0121.tar.gz"
            cpanURL="http://search.cpan.org/CPAN/authors/id/S/SH/SHLOMIF"
            awkpnum="1"
        ;;
        XML-NamespaceSupport-)
            srcvar1="xmlnamespaceSrc"
            srcExt="1.11.tar.gz"
            cpanURL="http://search.cpan.org/CPAN/authors/id/P/PE/PERIGRIN"
            awkpnum="1"
         ;;
         XML-SAX-)
            srcvar1="xmlsaxSrc"
            srcExt="0.99.tar.gz"
            cpanURL="http://search.cpan.org/CPAN/authors/id/G/GR/GRANTM"
            awkpnum="1"
         ;;
         XML-SAX-Base-)
            srcvar1="xmlsaxbaseSrc"
            srcExt="1.08.tar.gz"
            cpanURL="http://search.cpan.org/CPAN/authors/id/G/GR/GRANTM"
            awkpnum="1"
         ;;
         XML-SAX-Expat-)
            srcvar1="xmlsaxexpatSrc"
            srcExt="0.51.tar.gz"
            cpanURL="http://search.cpan.org/CPAN/authors/id/B/BJ/BJOERN"
            awkpnum="1"
         ;;
         XML-Simple-)
            srcvar1="xmlsimpleSrc"
            srcExt="2.20.tar.gz"
            cpanURL="http://cpan.org/authors/id/G/GR/GRANTM"
            awkpnum="1"
        ;;
      esac
      perlmodwrite $srcvar1 $srcExt $cpanURL $awkpnum
   ;;
# get these telepathy sources if book version is not systemd
   telepathy-glib-|telepathy-farstream-|telepathy-logger-|telepathy-mission-control-|telepathy-gabble-|telepathy-haze-|telepathy-idle-|telepathy-salut-)
      if [ "$SYSTEMD" = yes ]; then
        if [ "$BOOK_VERSION" != systemd ]; then # download the sources
          case $srcname in
             telepathy-glib-)
                pkgvers=${srcname}0.24.1.tar.gz
                pkgURL=http://telepathy.freedesktop.org/releases/telepathy-glib/
             ;;
             telepathy-farstream-)
                pkgvers=${srcname}0.6.2.tar.gz
                pkgURL=http://telepathy.freedesktop.org/releases/telepathy-farstream/
             ;;
             telepathy-logger-)
                pkgvers=${srcname}0.8.1.tar.bz2
                pkgURL=http://telepathy.freedesktop.org/releases/telepathy-logger/
             ;;
             telepathy-mission-control-)
                pkgvers=${srcname}5.16.3.tar.gz
                pkgURL=http://telepathy.freedesktop.org/releases/telepathy-mission-control/
             ;;
             telepathy-gabble-)
                pkgvers=${srcname}0.18.3.tar.gz
                pkgURL=http://telepathy.freedesktop.org/releases/telepathy-gabble/
             ;;
             telepathy-haze-)
                pkgvers=${srcname}0.8.0.tar.gz
                pkgURL=http://telepathy.freedesktop.org/releases/telepathy-haze/
             ;;
             telepathy-idle-)
                pkgvers=${srcname}0.2.0.tar.gz
                pkgURL=http://telepathy.freedesktop.org/releases/telepathy-idle/
             ;;
             telepathy-salut-)
                pkgvers=${srcname}0.8.1.tar.gz
                pkgURL=http://telepathy.freedesktop.org/releases/telepathy-salut/
             ;;
          esac
          wgetwrite $pkgvers $pkgURL
        else
          getSrcLocal "*" "*.*" true
        fi
      fi
   ;;
   xcb-util-)
     getSrcLocal "[0-9]*" "[0-9]*.*" true
   ;;
   $xlib) # need patch(es) from patches/x
     cat >> $Output << "EOF"
cp -r ${sourcedir}/${SrcName}/* . # copy the md5 file, sources and any patches
cp ${blfsfiles}/patches/x/libXfont*.patch .
EOF
   ;;
   $xproto|$xapp|$xfont)
     cat >> $Output << "EOF"
cp -r ${sourcedir}/${SrcName}/* . # copy the md5 file, sources and any patches
EOF
   ;;
   yajl-) # git the source
     cat >> $Output << "EOF"
if [ ! -d yajl ]; then
 git clone git://github.com/lloyd/yajl
fi
cd yajl
EOF
   ;;
   *) # tar.xz,gz,bz2,tgz
     getSrcLocal "*" "*.*" true
   ;;
esac
    cat >> $Output << "EOF"
endtime=$( date +%s )
unpacktime=$( expr $endtime - $starttime )
starttime=$( date +%s )
}
EOF
} # end unpack
#
WriteScript () {
# remove docs statements and && and some other stuff
case $pkgname in
    accountsservice)
     if [ "$SYSTEMD" = yes ]; then
       GetInternalCommands accountsserviceComms >> $Output
     fi
    ;;
    acl)
     if ! $as_root; then
       GetCommands \
        | sed -e 's/INSTALL_USER=root/INSTALL_USER=acl/' \
              -e 's/INSTALL_GROUP=root/INSTALL_GROUP=acl/' \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_BIN_DIR)/d' getfacl\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_BIN_DIR)/d' setfacl\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_BIN_DIR)/d' chacl\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(MAN_DEST)/d' man\/man1\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(MAN_DEST)/d' man\/man3\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(MAN_DEST)/d' man\/man5\/Makefile" \
              -e "/make install/i\  sed -i '0,/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_INC_DIR)/{//d;}' include\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_INC_DIR)\\\/sys/d' include\/Makefile" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
     else
       GetCommands \
        | sed -e 's/\(.*\)&&$/\1/' \
        >> $Output
     fi
    ;;
    acpid)
       GetCommands \
        | sed -e 's/usr --docdir/usr --sbindir=\/usr\/bin --docdir/' \
        | sed -e '/\/etc\/acpi\/events\/lid/,/make install-acpid/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    aisleriot)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static \\\n\              --with-card-theme-formats=svg,pysol \\\n\              --with-pysol-card-theme-path=\/usr\/share\/PySolFC/' \
        >> $Output
    ;;
    alacarte)
       GetInternalCommands basicComms  \
        | sed -e '/make install/a\  python2 -m compileall /usr/lib/python2.7/site-packages/Alacarte/' \
        >> $Output
    ;;
# not in the book
    cantarell-fonts|dotconf|ffmpegthumnaler|gnome-chess|gnome-clocks|gnome-common|gnome-serch-tool|gnuchess|grilo|grilo-plugins|gsound|libinput|libnice|librest|libunwind|portaudio|pygtk|pyatspi|ragel|seed|yelp-tools)
       GetInternalCommands basicComms >> $Output
    ;;
    alsa-lib)
       GetCommands \
        | sed -e '/make doc/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    alsa-utils)
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e 's#\./configure#\./configure --with-udev-rules-dir=/usr/lib/udev/rules.d \\\n\   --with-systemdsystemunitdir=/usr/lib/systemd/system#' \
                  -e '/make install-alsa/d' \
                  -e '/make install/a\  cd alsactl\n\  make 90-alsa-restore.rules\n\  install -D -m644 90-alsa-restore.rules \/usr\/lib\/udev\/rules.d' \
                  -e '/alsactl/,/usermod/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/make install-alsa/d' \
                  -e '/alsactl/,/usermod/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
    ;;
    apache)
       if ! $as_root; then
         GetCommands \
          | sed -e '/groupadd/,/-s \/bin\/false/d' \
                -e '/enable-suexec=shared/a\              --sbindir=\/usr\/bin                    \\' \
                -e 's/mv -v \/usr\/sbin\/suexec/mv -v \/usr\/bin\/suexec/' \
                -e '/make install-httpd/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/make install-httpd/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    apache-ant)
      GetCommands \
       | sed -e '/cat >> \/etc\/profile.d\/extrapaths.sh/,/EOF/d' \
             -e 's/\(.*\)&&$/\1/' \
       >> $Output
    ;;
# only in systemd book
    appstream-glib|gcab|geocode-glib|gtkhtml|libgdata|libpciaccess|liboauth|uhttpmock|yaml)
      if [ "$BOOK_VERSION" = systemd ]; then
        GetCommands \
         | sed -e 's/\(.*\)&&$/\1/' \
         >> $Output
      else
        GetInternalCommands basicComms >> $Output
      fi
    ;;
    attr)
     if ! $as_root; then
       GetCommands \
        | sed -e 's/INSTALL_USER=root/INSTALL_USER=attr/' \
              -e 's/INSTALL_GROUP=root/INSTALL_GROUP=attr/' \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_BIN_DIR)/d' attr\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_BIN_DIR)/d' getfattr\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_BIN_DIR)/d' setfattr\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(MAN_DEST)/d' man\/man1\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(MAN_DEST)/d' man\/man2\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(MAN_DEST)/d' man\/man3\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(MAN_DEST)/d' man\/man5\/Makefile" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
     else
       GetCommands \
        | sed -e 's/\(.*\)&&$/\1/' \
        >> $Output
     fi
    ;;
    at-spi2-atk)
       GetCommands \
        | sed -e '/glib-compile-schemas \/usr\/share\/glib-2.0\/schemas/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    at-spi2-core)
       GetCommands \
        | sed -e 's/sysconfdir=\/etc/sysconfdir=\/etc --libexecdir=\/usr\/lib\/at-spi2-core/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    avahi)
       if ! $as_root; then
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e '/groupadd/,/groupadd/d' \
                  -e '/disable-static/i\              --sbindir=\/usr\/bin  \\' \
                  -e '/--with-distro=none/a\              --with-autoipd-user=avahi \\\n\              --with-autoipd-group=avahi \\' \
                  -e '/--disable-qt4        \\/d' \
                  -e 's/systemdsystemunitdir=no/systemdsystemunitdir=\/usr\/lib\/systemd\/system/' \
                  -e '/systemctl enable avahi/d' \
                  -e '/make install-avahi/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/groupadd/,/groupadd/d' \
                  -e '/--disable-qt4        \\/d' \
                  -e '/make install-avahi/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       else
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e '/--disable-qt4        \\/d' \
                  -e 's/systemdsystemunitdir=no/systemdsystemunitdir=\/usr\/lib\/systemd\/system/' \
                  -e '/systemctl enable avahi/d' \
                  -e '/make install-avahi/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/--disable-qt4        \\/d' \
                  -e '/make install-avahi/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       fi
    ;;
    avr-binutils)
         GetInternalCommands avrbinutilsComms >> $Output
    ;;
    avr-gcc)
         GetInternalCommands avrgccComms >> $Output
    ;;
    avr-libc)
      GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static --host=avr/' \
        >> $Output
    ;;
    babl)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/\/usr\/share\/gtk-doc/${CUR_DIR}\/usr\/share\/gtk-doc/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    bind)
       if ! $as_root; then
         if $useDESTDIR; then
           GetCommands \
            | sed -e '/patch -Np1 -i/d' \
                  -e '/sysconfdir=/i\              --sbindir=\/usr\/bin      \\' \
                  -e '/bin\/tests\/system\/ifconfig.sh/d' \
                  -e '/groupadd/,/install -d -m770 -o named -g named/d' \
                  -e '/cd \/srv\/named/i install -vm755 -d \/srv\/named' \
                  -e '/mknod/,/chmod/d' \
                  -e '/rndc-confgen/,/dig www.linuxfromscratch.org/d' \
                  -e '/dig www.linuxfromscratch.org/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/patch -Np1 -i/d' \
                  -e '/bin\/tests\/system\/ifconfig.sh/d' \
                  -e '/groupadd/,/install -d -m770 -o named -g named/d' \
                  -e '/mknod/,/chmod/d' \
                  -e '/rndc-confgen/,/sed/d' \
                  -e '/resolv.conf.bak/,/dig www.linuxfromscratch.org/d' \
                  -e '/dig www.linuxfromscratch.org/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       else #as root
         GetCommands \
          | sed -e '/patch -Np1 -i/d' \
                -e '/bin\/tests\/system\/ifconfig.sh/d' \
                -e '/cp \/etc\/resolv.conf/,/dig www.linuxfromscratch.org/d' \
                -e '/dig www.linuxfromscratch.org/i chown -R named:named \/srv\/named' \
                -e '/dig www.linuxfromscratch.org/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    blfs-btscrpts)
        GetInternalCommands blfsbtscrptsComms >> $Output
    ;;
    bluez)
       if [ "$SYSTEMD" = yes ]; then
         if [ "$BOOK_VERSION" = systemd ]; then
           GetCommands \
            | sed -e '/patch -Np1 -i/a autoreconf -vfi' \
                  -e '/enable-library/i\              --libexecdir=\/usr\/lib \\\n\              --with-udevdir=\/usr\/lib\/udev \\\n\              --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system \\' \
                  -e '/cat > \/etc\/bluetooth\/rfcomm/,/systemctl enable bluetooth/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/patch -Np1 -i/a autoreconf -vfi' \
                  -e '/disable-systemd/i\              --libexecdir=\/usr\/lib \\\n\              --with-udevdir=\/usr\/lib\/udev \\\n\              --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system' \
                  -e '/disable-systemd/d' \
                  -e 's/libexec\/bluetooth\/bluetoothd \/usr\/sbin/lib\/bluetooth\/bluetoothd \/usr\/bin/' \
                  -e '/cat > \/etc\/bluetooth\/rfcomm/,/make install-bluetooth/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       else
         GetCommands \
          | sed -e '/make install-bluetooth/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    bogofilter)
       if [ "$BOOK_VERSION" = systemd ]; then
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms \
          | sed -e 's/sysconfdir=\/etc/sysconfdir=\/etc\/bogofilter/' \
          >> $Output
       fi
    ;;
    bridge-utils)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr --sbindir=\/usr\/bin/' \
              -e '/make install-service-bridge/d' \
              -e '/cat > \/etc\/sysconfig/,/EOF/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    cacerts)
       if $useDESTDIR; then
         GetcacertsCommands \
          | sed -e '/cat > \/usr\/bin\/make-cert.pl/i mkdir -pv ${CUR_DIR}\/usr\/bin\nif [ -e \/usr\/bin\/make-cert.pl ]; then\n\  cp \/usr\/bin\/make-cert.pl ${CUR_DIR}\/usr\/bin\nelse' \
                -e 's/cat > \/usr\/bin\/make-cert.pl/cat > ${CUR_DIR}\/usr\/bin\/make-cert.pl/' \
                -e 's/chmod +x \/usr\/bin\/make-cert.pl/chmod +x ${CUR_DIR}\/usr\/bin\/make-cert.pl/' \
                -e '/cat > \/usr\/bin\/make-ca.sh/i fi\nif [ -e \/usr\/bin\/make-ca.sh ]; then\n\  cp \/usr\/bin\/make-ca.sh ${CUR_DIR}\/usr\/bin\nelse' \
                -e 's/cat > \/usr\/bin\/make-ca.sh/cat > ${CUR_DIR}\/usr\/bin\/make-ca.sh/' \
                -e 's/chmod +x \/usr\/bin\/make-ca.sh/chmod +x ${CUR_DIR}\/usr\/bin\/make-ca.sh/' \
                -e '/cat > \/usr\/sbin\/remove-expired-certs.sh/i fi\nif [ -e \/usr\/bin\/remove-expired-certs.sh ]; then\n\  cp \/usr\/bin\/remove-expired-certs.sh ${CUR_DIR}\/usr\/bin\nelse' \
                -e 's/cat > \/usr\/sbin\/remove-expired-certs.sh/cat > ${CUR_DIR}\/usr\/bin\/remove-expired-certs.sh/' \
                -e 's/chmod u+x \/usr\/sbin\/remove-expired-certs.sh/chmod u+x ${CUR_DIR}\/usr\/bin\/remove-expired-certs.sh/' \
                -e '/URL=http/i fi' \
                -e 's/rm -f certdata.txt/rm -f ${CUR_DIR}\/certdata.txt/' \
                -e '/wget \$URL/i wgetopts="-e http_proxy=\$http_proxy -e ftp_proxy=\$ftp_proxy"' \
                -e 's/wget \$URL/wget \$wgetopts -O ${CUR_DIR}\/certdata.txt $URL/' \
                -e '/^make-ca.sh/,/rm -r certs BLFS-ca-bundle/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetcacertsCommands \
          | sed -e '/wget \$URL/i wgetopts="-e http_proxy=\$http_proxy -e ftp_proxy=\$ftp_proxy"' \
                -e 's/wget \$URL/wget \$wgetopts $URL/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    cairo) # add enable-tee for mozilla apps
       GetCommands \
        | sed -e 's/disable-static/disable-static \\\n\              --enable-tee \\\n\              --enable-gl \\\n\              --enable-egl \\\n\              --enable-pdf \\\n\              --enable-gobject/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    caribou)
       GetInternalCommands basicComms \
        | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/caribou/' \
              -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
        >> $Output
    ;;
    ccache)
       if $useDESTDIR; then
         GetInternalCommands ccachedestdirComms >> $Output
       else
         GetInternalCommands ccacheComms >> $Output
       fi
    ;;
    cdparanoia)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/make install/make prefix=${CUR_DIR}\/usr MANDIR=${CUR_DIR}\/usr\/share\/man install/' \
                -e 's/chmod -v 755 \/usr\/lib\/libcdda/chmod -v 755 ${CUR_DIR}\/usr\/lib\/libcdda/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    chromium)
       GetInternalCommands chromeComms >> $Output
    ;;
    cmake)
       GetCommands \
        | sed -e '/docdir/d' \
              -e '/no-system-jsoncpp/a\              --docdir=/share/doc/cmake-'"${cmakevers}"'' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    clutter)
       if [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e 's/egl-backend/egl-backend \\\n              --enable-wayland-backend \\\n              --enable-wayland-compositor \\\n              --enable-evdev-input/' \
                -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    clutter-gst)
      if [ "$BOOK_VERSION" = systemd ]; then
        GetCommands \
         | sed -e 's/\(.*\)&&$/\1/' \
         >> $Output
      else
        GetInternalCommands basicComms >> $Output
      fi
    ;;
    cogl)
       if [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e '/patch -Np1/d '\
                -e 's/gles2/gles2 \\\n              --enable-{kms,wayland}-egl-platform \\\n              --enable-wayland-egl-server/' \
                -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    colord)
       if ! $as_root; then
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e '/groupadd/,/-g colord -s \/bin\/false colord/d' \
                  -e '/disable-static/a\              --with-udevrulesdir=\/usr\/lib\/udev\/rules.d \\\n\              --libexecdir=\/usr\/lib\/colord \\\n\              --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system' \
                  -e '/enable-systemd-login=no/d' \
                  -e '/with-systemdsystemunitdir=no/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/groupadd/,/-g colord -s \/bin\/false colord/d' \
                  -e 's/disable-static/disable-static --libexecdir=\/usr\/lib\/colord/' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       else # as root
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e '/enable-systemd-login=no/d' \
                  -e '/with-systemdsystemunitdir=no/d' \
                  -e '/disable-static/a\              --with-udevrulesdir=\/usr\/lib\/udev\/rules.d \\\n\              --libexecdir=\/usr\/lib\/colord \\\n\              --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e 's/disable-static/disable-static --libexecdir=\/usr\/lib\/colord/' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       fi
    ;;
    colord-gtk)
       GetInternalCommands basicComms \
        | sed -e 's/--prefix=\/usr/--prefix=\/usr \\\n\              --enable-vala/' \
              -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/colord/' \
        >> $Output
    ;;
    cracklib)
       GetCommands \
        | sed -e 's/--prefix=\/usr/--prefix=\/usr --sbindir=\/usr\/bin/' \
              -e 's/--with-default-dict=\/lib/--with-default-dict=\/usr\/lib/' \
              -e '/mv -v/,/ln -sfv ..\/..\/lib/d' \
              -e 's/install -v -m755 -d      \/lib/install -v -m755 -d      \/usr\/lib/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    cups)
       if ! $as_root; then
         if $useDESTDIR; then
           GetCommands \
            | sed -e '/useradd/,/usermod/d' \
                  -e '/libdir=\/usr\/lib/a\              --sbindir=\/usr\/bin \\' \
                  -e 's/\/lib\/systemd/\/usr\/lib\/systemd/' \
                  -e '/systemctl enable/d' \
                  -e '/disable-systemd/d' \
                  -e '/make install-cups/d' \
                  -e '/make install/i $_sedcupsinstall' \
                  -e 's/make install/make BUILDROOT="$CUR_DIR" install/' \
                  -e '/gtk-update-icon-cache/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else # not DESTDIR
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e '/useradd/,/usermod/d' \
                  -e 's/\/lib\/systemd/\/usr\/lib\/systemd/' \
                  -e '/systemctl enable/d' \
                  -e '/disable-systemd/d' \
                  -e '/make install-cups/d' \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BUILDROOT)\\\\\$(DBUSDIR)\\\/system.d; \\\\\\\/d' desktop\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LOCALEDIR)/d' locale\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(MANDIR)\\\/man1/d' man\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(MANDIR)\\\/man5/d' man\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(MANDIR)\\\/man7/d' man\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(AMANDIR)\\\/man\\\\\$(MAN8DIR)/d' man\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BINDIR)/d' Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' cups\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' filter\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' cgi-bin\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' ppdc\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' scheduler\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BINDIR)/d' test\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BINDIR)/d' berkeley\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(SBINDIR)/d' berkeley\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) \\\\\$(BINDIR)/d' ppdc\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(SBINDIR)/d' scheduler\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(SBINDIR)/d' systemv\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BINDIR)/d' systemv\/Makefile" \
                  -e '/gtk-update-icon-cache/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/useradd/,/usermod/d' \
                  -e '/make install-cups/d' \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BUILDROOT)\\\\\$(DBUSDIR)\\\/system.d; \\\\\\\/d' desktop\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LOCALEDIR)/d' locale\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(MANDIR)\\\/man1/d' man\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(MANDIR)\\\/man5/d' man\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(MANDIR)\\\/man7/d' man\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(AMANDIR)\\\/man\\\\\$(MAN8DIR)/d' man\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BINDIR)/d' Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' cups\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' filter\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' cgi-bin\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' ppdc\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' scheduler\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BINDIR)/d' test\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BINDIR)/d' berkeley\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(SBINDIR)/d' berkeley\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) \\\\\$(BINDIR)/d' ppdc\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(SBINDIR)/d' scheduler\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(SBINDIR)/d' systemv\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BINDIR)/d' systemv\/Makefile" \
                  -e '/gtk-update-icon-cache/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
         fi # if useDESTDIR
       else #as root
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e 's/\*\*EDITME<username>EDITME\*\*/john/' \
                  -e '/disable-systemd/d' \
                  -e '/make install-cups/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e 's/\*\*EDITME<username>EDITME\*\*/john/' \
                  -e '/make install-cups/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       fi
    ;;
    cups-filters)
       GetCommands \
        | sed -e '/sysconfdir=/i\          --sbindir=\/usr\/bin               \\' \
              -e '/systemctl enable cups-browsed/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    curl)
       GetCommands \
        | sed -e '/cat >> tests/,/EOF/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    cvs)
       GetCommands \
        | sed -e '/make -C doc html txt/d' \
              -e "/sed -e 's\/rsh};\/ssh};/,/-i src\/sanity.sh/d" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    cyrus-sasl)
       GetCommands \
        | sed -e 's/\.\/configure/CFLAGS+="-fPIC" \.\/configure/' \
              -e '/sysconfdir=\/etc/i\              --sbindir=\/usr\/bin \\' \
              -e '/make install-saslauthd/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    db)
       if ! $as_root; then
         GetCommands \
          | sed -e 's/root:root/db:db/' \
              -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    dbus)
       if [ "$SYSTEMD" = yes ]; then # dbus already installed
         GetInternalCommands dbusComms >> $Output
       else
         GetCommands \
          | sed -e '/groupadd/,/messagebus -s/d' \
                -e '/make distclean/,/kill $DBUS_SESSION_BUS_PID/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    dbus-glib)
       GetCommands \
        | sed -e 's/disable-static/disable-static --enable-bash-completion=no/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    dconf)
       GetCommands \
        | sed -e 's/sysconfdir=\/etc/sysconfdir=\/etc --libexecdir=\/usr\/lib\/dconf/' \
              -e '/cd dconf-editor/a echo -n edConfigure...\n{ configure_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/edconfigure.err" ;} &>"$CUR_DIR/edconfigure.log"\ntest_pipe\necho -n edCompile...\n{ make_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/edmake.err" ;} &>"$CUR_DIR/edmake.log"\ntest_pipe\necho -n edInstall...\n{ install_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/edinstall.err" ;} &>"$CUR_DIR/edinstall.log"\ntest_pipe' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    dhcp)
       GetCommands \
        | sed -e '/missing_ipv6-1.patch/d' \
              -e '/sysconfdir/i\              --sbindir=\/usr\/bin \\' \
              -e '/mv -v \/usr\/sbin\/dhclient \/sbin/d' \
              -e '/make -C server install/,/client\/scripts\/linux \/sbin\/dhclient-script/d' \
              -e 's/\/sbin\/dhclient/\/usr\/bin\/dhclient/' \
              -e '/dhclient \*\*EDITME<eth0>EDITME\*\*/,/make install-dhcpd/d' \
              -e '/make install-dhclient/,/make install-dhcpd/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    docbook-xml)
       if $useDESTDIR; then
         GetInternalCommands docbkXmlDestdirComms >> $Output
       else
         GetCommands \
          | sed -e '/chown -R root:root/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    dialog)
       GetInternalCommands basicComms \
        | sed -e 's/make install/make install-full/' \
        >> $Output
    ;;
    docbook-xsl)
       if $useDESTDIR; then
         GetInternalCommands docbkXslDestdirComms >> $Output
       else
         GetCommands \
          | sed -e '/tar -xf/d' \
                -e '/install -v -m644 -D README/i install -v -d \/usr\/share\/doc\/docbook-xsl-'"${docbookxslvers}"'' \
                -e '/cp -v -R doc/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    dsktp-file-utls)
       GetCommands \
        | sed -e '/update-desktop-database/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    dvdrw-tools)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/make prefix=\/usr install/make prefix=${CUR_DIR}\/usr install/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    enchant)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/ln -svfn ..\/..\/lib\/aspell \/usr/ln -svfn ..\/..\/lib\/aspell ${CUR_DIR}\/usr/' \
                -e '/test-enchant.txt/,/enchant -d en_GB -a/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/test-enchant.txt/,/enchant -d en_GB -a/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    esound)
       GetCommands \
        | sed -e '/chown -v root:root \/usr\/share\/doc\/esound-0.2.41/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    espeak)
       GetInternalCommands espeakComms >> $Output
    ;;
    eudev)
       GetInternalCommands eudevComms >> $Output
    ;;
    evol-data-server)
       GetInternalCommands basicComms \
        | sed -e 's/--libexecdir=\/usr\/lib/--libexecdir=\/usr\/lib\/evolution-data-server \\\n\              --enable-vala-bindings --disable-uoa --disable-examples/' \
        >> $Output
    ;;
    evince)
       GetCommands \
        | sed -e 's/disable-static/disable-static --libexecdir=\/usr\/lib\/evince/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    evolution)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static \\\n\              --enable-nss=yes \\\n\              --with-openldap=yes \\\n\              --enable-smime=yes \\\n\              --with-krb5=\/usr \\\n\              --disable-schemas-compile \\\n\              --disable-spamassassin \\\n\              --disable-text-highlight \\\n\              --disable-pst-import \\\n\              --disable-gtkspell/' \
        >> $Output
    ;;
    faac)
       GetCommands \
        | sed -e '/Front_Left/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    faad2)
       GetCommands \
        | sed -e '/sample.wav/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    ffmpeg)
       GetCommands \
        | sed -e '/pushd doc/,/unset DOCNAME/d' \
              -e '/make fate-rsync SAMPLES=fate-suite/,/grep \^TEST/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    firefox)
       GetCommands \
        | sed -e '/DBus-Glib/,/GStreamer/d' \
              -e '/ac_add_options --disable-gstreamer/d' \
              -e 's/\#ac_add_options --enable-gstreamer/ac_add_options --enable-gstreamer/' \
              -e 's/\#ac_add_options --enable-startup-notification/ac_add_options --enable-startup-notification/' \
              -e 's/ac_add_options --disable-pulseaudio/\#ac_add_options --disable-pulseaudio/' \
              -e '/MOZ_MAKE_FLAGS/d' \
              -e 's/make -f client.mk/SHELL=\/bin\/sh make -f client.mk/' \
              -e '0,/make -f client.mk install/! s/SHELL=\/bin\/sh make -f client.mk install//' \
              -e '/chown -R 0:0 \/usr\/lib\/firefox/d' \
              -e '/gtk-update-icon-cache -qf/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    fluxbox)
       GetCommands \
        | sed -e '/echo startfluxbox/d' \
              -e 's@~/.fluxbox@/home/john/.fluxbox@g' \
              -e '/cp -v \/usr\/share\/fluxbox\/menu/d' \
              -e '/cp \/usr\/share\/fluxbox\/styles/,/echo \"background.pixmap/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    folks)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static \\\n\              --enable-vala \\\n\              --disable-libsocialweb-backend\\\n\              --disable-fatal-warnings/' \
        >> $Output
    ;;
    fontconfig)
        GetCommands \
        | sed -e '/install -v -dm755/,/\/usr\/share\/{man\/man/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    freeglut)
       GetCommands \
        | sed -e '/DCMAKE_BUILD_TYPE=Release/i\        -DCMAKE_INSTALL_LIBDIR=lib       \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gconf)
       GetCommands \
        | sed -e 's/disable-static/disable-static --libexecdir=\/usr\/lib\/GConf/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gcr)
       GetCommands \
        | sed -e 's/sysconfdir=\/etc/sysconfdir=\/etc --libexecdir=\/usr\/lib\/gcr/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gdk-pixbuf)
       GetCommands \
        | sed -e '/gdk-pixbuf-query-loaders/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gdm)
       GetInternalCommands basicComms \
        | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/gdm/' \
              -e 's/disable-static/disable-static \\\n\              --with-at-spi-registryd-directory=\/usr\/lib\/at-spi2-core \\\n\              --with-check-accelerated-directory=\/usr\/lib\/gnome-session \\\n\              --with-authentication-agent-directory=\/usr\/lib\/polkit-gnome \\\n\              --without-plymouth \\\n\              --with-systemd/' \
        >> $Output
    ;;
    gedit)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gegl)
       if $useDESTDIR; then
         GetCommands \
          | sed -e '/patch -Np1/d' \
                -e '/configure_commands()/i patch -Np1 -i ../gegl-0.2.0-ffmpeg-0.11.patch\npatch -Np1 -i ../gegl-0.2.0-CVE-2012-4433.patch\npatch -Np1 -i ../gegl-0.2.0-lua-5.2.patch\npatch -Np1 -i ../gegl-0.2.0-remove-src-over-op.patch' \
                -e 's/prefix=\/usr/prefix=\/usr --disable-docs/' \
                -e 's/LC_ALL=en_US make/make/' \
                -e 's/\/usr\/share\/gtk-doc/${CUR_DIR}\/usr\/share\/gtk-doc/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/patch -Np1/d' \
                -e '/configure_commands()/i patch -Np1 -i ../gegl-0.2.0-ffmpeg-0.11.patch\npatch -Np1 -i ../gegl-0.2.0-CVE-2012-4433.patch\npatch -Np1 -i ../gegl-0.2.0-lua-5.2.patch\npatch -Np1 -i ../gegl-0.2.0-remove-src-over-op.patch' \
                -e 's/prefix=\/usr/prefix=\/usr --disable-docs/' \
                -e 's/LC_ALL=en_US make/make/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    geoclue)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib\/geoclue/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    geoclue2)
       if [ "$BOOK_VERSION" = systemd ]; then
         GetCommands \
          | sed -e 's/sysconfdir=\/etc/sysconfdir=\/etc \\\n\              --libexecdir=\/usr\/lib\/geoclue2\\\n\              --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms \
          | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/geoclue2/' \
                -e '/disable-static/i\              --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system \\' \
          >> $Output
       fi
    ;;
    ghostscript)
       GetCommands \
        | sed -e 's/LIBS=-lz/LIBS=-lz --with-install-cups/' \
              -e '/bin\/gs/d' \
              -e '/tar -xvf/ i for (( i=0; i<\${#fontfile[@]}; i++ )); do' \
              -e 's/\*\*EDITME<font-tarball>EDITME\*\*/\${fontfile[\$i]}/' \
              -e '/tar -xvf/ a done' \
              -e '/gs -q -dBATCH \/usr\/share\/ghostscript/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gimp)
       GetCommands \
        | sed -e 's/ --without-gvfs//' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    git)
       if ! $as_root; then
         GetCommands \
          | sed -e "/configure_commands()/ i sed -i \"/ifndef NO_GETTEXT/{ N; s/ifndef NO_GETTEXT\\\n\\\t\\\\\$(INSTALL) -d -m 755 '\\\\\$(DESTDIR_SQ)\\\\\$(localedir_SQ)'// }\" Makefile" \
                -e "/configure_commands()/ i sed -i '/(cd po\\\/build\\\/locale \\\&\\\&/,/endif/d' Makefile" \
                -e 's/etc\/gitconfig/etc\/gitconfig \\\n\              --libexecdir=\/usr\/lib/' \
                -e '/make html/,/make man/d' \
                -e '/make install-man/d' \
                -e 's/\(.*\)&&$/\1/' \
          | awk '{if ($1 == "make" && $2 =="install")
print "  "$1" "$2"\n  cd po/build\n  for code in locale/*\n  do\n   if [ ! -d /usr/share/${code}/LC_MESSAGES ]; then\n     install -v -d /usr/share/${code}/LC_MESSAGES\n   fi\n   cp ${code}/LC_MESSAGES/git.mo /usr/share/${code}/LC_MESSAGES/\n  done\n  cd ../..";
else
print $0;
}' \
        >> $Output
       else
         GetCommands \
          | sed -e '/make html/,/make man/d' \
                -e '/make install-man/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    gjs)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr --disable-tests \\\n\              --libexecdir=\/usr\/lib/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output 
    ;;
    glib-networking)
       GetCommands \
        | sed -e 's/disable-static/disable-static --libexecdir=\/usr\/lib\/glib-networking/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gmime)
       GetCommands \
        | sed -e '/pushd/,/popd/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnm-power-mngr)
       GetInternalCommands basicComms \
        | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/gnome-power-manager/' \
        >> $Output
    ;;
    gnome-bluetooth)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static \\\n\              --disable-desktop-update \\\n\              --disable-icon-update/' \
              -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
        >> $Output
    ;;
    gnome-calculator)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib\/gnome-calculator/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnome-cntrl-cntr)
       GetInternalCommands basicComms \
        | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/gnome-control-center/' \
              -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
        >> $Output
    ;;
    gnome-colr-mngr)
       GetInternalCommands basicComms\
        | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/gnome-color-manager/' \
              -e 's/disable-static/disable-static --disable-man-pages/' \
              -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' -e 's/    if test \"\$export_dynamic\" = yes && test -n \"\$export_dynamic_flag_spec\"; then/      func_append compile_command \" -Wl,-O1,--as-needed\"\\\\n      func_append finalize_command \" -Wl,-O1,--as-needed\"\\\\n\\\\0/' libtool" \
        >> $Output
    ;;
    gnome-desktop)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib\/gnome-desktop/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnome-keyring)
       if [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e 's/with-pam-dir=\/lib/with-pam-dir=\/usr\/lib/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    gnome-menus|gnome-bckgrnds|gnome-shell-ext|gnome-user-docs|gnome-dictionary|gnome-pwr-mngr|gnome-disk-util|nautilus-sendto)
       if [ "$BOOK_VERSION" = systemd ]; then
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms >> $Output
       fi
    ;;
    gnome-session)
       GetInternalCommands basicComms \
        | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/gnome-session/' \
              -e 's/disable-static/disable-static --enable-systemd/' \
        >> $Output
    ;;
    gnome-set-daemon)
       GetInternalCommands basicComms \
        | sed -e 's@libexecdir=/usr/lib@libexecdir=/usr/lib/gnome-settings-daemon@' \
              -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
        >> $Output
    ;;
    gnome-shell)
       GetInternalCommands basicComms \
        | sed -e '/configure_commands()/i patch -Np1 -i ../gnome-shell-3.16.0-nm-libexecdir-1.patch' \
              -e 's@libexecdir=/usr/lib@libexecdir=/usr/lib/gnome-shell@' \
              -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
        >> $Output
    ;;
    gnome-system-mon)
       GetCommands \
        | sed -e 's/enable-wnck/enable-wnck \\\n\              --libexecdir=\/usr\/lib\/gnome-system-monitor \\\n\              --enable-systemd/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnome-terminal)
       GetCommands \
        | sed -e 's/disable-migration/libexecdir=\/usr\/lib\/gnome-terminal/' \
              -e 's/disable-search-provider/with-nautilus-extension/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnm-user-share)
       GetInternalCommands basicComms \
        | sed -e 's@libexecdir=/usr/lib@libexecdir=/usr/lib/gnome-user-share@' \
        >> $Output
    ;;
    gnupg)
       GetCommands \
        | sed -e '/docdir=\/usr/i\              --sbindir=\/usr\/bin \\\n\              --libexecdir=\/usr\/lib\/gnupg \\' \
              -e '/makeinfo --html/,/make -C doc/d' \
              -e '/install -v -m755 -d \/usr\/share\/doc/i ln -s gpg2 \/usr\/bin\/gpg\n ln -s gpgv2 \/usr\/bin\/gpgv\n rm \/usr\/share\/gnupg\/com-certs.pem' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnutls)
       GetCommands \
        | sed -e '/reference install-data-local/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    goa)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static --libexecdir=\/usr\/lib\/gnome-online-accounts/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gom)
       GetCommands \
        | sed -e '/disable-static/i\              --libexecdir=\/usr\/lib\/gnome-online-miners \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gpm)
       if $useDESTDIR; then
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e 's/usr --sysconfdir/usr --sbindir=\/usr\/bin --sysconfdir/' \
            | sed -e '/install-info --dir-file=\/usr\/share\/info\/dir/,/\/usr\/share\/info\/gpm.info/d' \
                  -e 's/libgpm.so.2.1.0 \/usr\/lib\/libgpm.so/libgpm.so.2.1.0 ${CUR_DIR}\/usr\/lib\/libgpm.so/' \
                  -e 's/install -v -m644 conf\/gpm-root.conf \/etc/install -v -m644 conf\/gpm-root.conf ${CUR_DIR}\/etc/' \
                  -e '/make install-gpm/i chmod 755 ${CUR_DIR}\/usr\/lib\/libgpm.so.\*' \
                  -e '/cat > \/etc\/sysconfig\/mouse/i install -m755 -d ${CUR_DIR}\/etc\/sysconfig' \
                  -e 's/cat > \/etc\/sysconfig\/mouse <</cat > ${CUR_DIR}\/etc\/sysconfig\/mouse <</' \
                  -e '/make install-gpm/d' \
                  -e '/install -v -dm755 \/etc\/systemd/,/echo \"ExecStart/d' \
                  -e 's/\*\*EDITME<yourdevice>EDITME\*\*/\/dev\/input\/mice/' \
                  -e 's/\*\*EDITME<yourprotocol>EDITME\*\*/imps2/' \
                  -e 's/\*\*EDITME<additional options>EDITME\*\*//' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/make install-gpm/i chmod 755 \/usr\/lib\/libgpm.so.\*' \
                  -e '/make install-gpm/d' \
                  -e 's/\*\*EDITME<yourdevice>EDITME\*\*/\/dev\/input\/mice/' \
                  -e 's/\*\*EDITME<yourprotocol>EDITME\*\*/imps2/' \
                  -e 's/\*\*EDITME<additional options>EDITME\*\*//' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       else
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e '/make install-gpm/i chmod 755 \/usr\/lib\/libgpm.so.\*' \
                  -e '/make install-gpm/d' \
                  -e '/install -v -dm755 \/etc\/systemd/,/echo \"ExecStart/d' \
                  -e 's/\*\*EDITME<yourdevice>EDITME\*\*/\/dev\/input\/mice/' \
                  -e 's/\*\*EDITME<yourprotocol>EDITME\*\*/imps2/' \
                  -e 's/\*\*EDITME<additional options>EDITME\*\*//' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/make install-gpm/i chmod 755 \/usr\/lib\/libgpm.so.\*' \
                  -e '/make install-gpm/d' \
                  -e 's/\*\*EDITME<yourdevice>EDITME\*\*/\/dev\/input\/mice/' \
                  -e 's/\*\*EDITME<yourprotocol>EDITME\*\*/imps2/' \
                  -e 's/\*\*EDITME<additional options>EDITME\*\*//' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       fi
    ;;
    gptfdisk)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/make install/install -d ${CUR_DIR}\/usr\/{bin,share\/{doc\/gdisk,man\/man8}}\n\  install -t ${CUR_DIR}\/usr\/bin {,c,s}gdisk fixparts\n\  install -m644 -t ${CUR_DIR}\/usr\/share\/man\/man8 {{,c,s}gdisk,fixparts}.8\n\  install -m644 -t ${CUR_DIR}\/usr\/share\/doc\/gdisk README NEWS/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    gset-dsktp-schms)
       GetCommands \
        | sed -e '/glib-compile-schemas/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gsl)
       GetCommands \
        | sed -e '/make html/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gstreamer0)
       GetCommands \
        | sed -e 's/disable-static/disable-static --libexecdir=\/usr\/lib/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gstreamer)
       GetCommands \
        | sed -e 's/prefix=\/usr \\/prefix=\/usr \\\n\              --libexecdir=\/usr\/lib \\/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gst-plgns-bad)
       GetCommands \
        | sed -e '/patch -Np1 -i/a patch -Np1 -i ../gst-plugins-bad-1.4.5-fix-faad2-version-check.patch' \
              -e '/gst-plugins-bad-1.4.5-openjpeg21-1.patch/d' \
              -e '/configure_commands()/i autoreconf -vi' \
              -e '/with-package-name/i\              --with-gtk=3.0 \\\n\              --disable-examples \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gtkplus2)
       GetCommands \
        | sed -e '/gtk-query-immodules-2.0/d' \
              -e 's/\*\*EDITMEGliderEDITME\*\*/Clearlooks/' \
              -e 's/\*\*EDITMEhicolorEDITME\*\*/elementary/' \
              -e 's/\*\*EDITMEClearlooksEDITME\*\*/Clearlooks/' \
              -e 's/\*\*EDITMEelementaryEDITME\*\*/elementary/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gtkplus3)
       if [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e 's/disable-wayland/enable-wayland/' \
                -e '/glib-compile-schemas/d '\
                -e '/gtk-query-immodules-3.0/d' \
                -e 's/\*\*EDITMEAdwaitaEDITME\*\*/Adwaita/' \
                -e 's/\*\*EDITMEgnomeEDITME\*\*/gnome/' \
                -e 's/\*\*EDITMEClearwaitaEDITME\*\*/Adwaita/' \
                -e 's/\*\*EDITMEelementaryEDITME\*\*/gnome/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
        else
         GetCommands \
          | sed -e '/gtk-query-immodules-3.0/d' \
                -e '/glib-compile-schemas/d '\
                -e 's/\*\*EDITMEAdwaitaEDITME\*\*/Adwaita/' \
                -e 's/\*\*EDITMEgnomeEDITME\*\*/gnome/' \
                -e 's/\*\*EDITMEClearwaitaEDITME\*\*/Adwaita/' \
                -e 's/\*\*EDITMEelementaryEDITME\*\*/gnome/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
        fi
    ;;
    gtksourceview)
       GetInternalCommands basicComms >> $Output
    ;;
    gtk-vnc)
       GetInternalCommands gtkvncComms >> $Output
    ;;
    guile)
       GetCommands \
        | sed -e '/makeinfo/d' \
              -e '/mv \/usr\/lib\/libguile-\*-gdb.scm/d' \
              -e '/find examples -name/d' \
              -e '/for DIRNAME/,/unset DIRNAME/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gutenprint)
       GetCommands \
        | sed -e 's/disable-static/disable-static \\\n\              --sbindir=\/usr\/bin/' \
              -e '/systemctl restart/d' \
              -e '/etc\/rc.d\/init.d\/cups restart/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gvfs)
       GetCommands \
        | sed -e 's/disable-gphoto2/libexecdir=\/usr\/lib\/gvfs \\\n\              --with-bash-completion-dir=\/usr\/share\/bash-completion\/completions/' \
              -e '/glib-compile-schemas/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    ibus)
       if [ "$BOOK_VERSION" = systemd ]; then
         GetCommands \
          | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib\/ibus/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms \
          | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/ibus/' \
                -e '/disable-static/i\              --enable-dconf \\\n\              --enable-wayland \\\n\              --disable-gconf \\' \
          >> $Output
       fi
    ;;
    icedtea-web)
       GetCommands \
        | sed -e 's/{JAVA_HOME}\/man/{JAVA_HOME}\/man --with-firefox=\/usr\/bin\/firefox/' \
              -e '/ln -s/i install -m644 javaws.desktop /usr/share/applications' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    icon-nam-utls)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib\/icon-naming-utils/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    icu)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr --sbindir=\/usr\/bin/' \
              -e 's/\(.*\)&&[[:blank:]]*$/\1/' \
        >> $Output
    ;;
    inkscape)
       GetCommands \
        | sed -e '/gtk-update-icon-cache/,/update-desktop-database/d' \
              -e 's/\(.*\)&&[[:blank:]]*$/\1/' \
        >> $Output
    ;;
    iptables)
       GetCommands \
        | sed -e 's/sbindir=\/sbin/sbindir=\/usr\/bin/' \
              -e '/enable-libipq/i\              --enable-shared \\' \
              -e 's/xtlibdir=\/lib\/xtables/xtlibdir=\/usr\/lib\/iptables/' \
              -e "/configure_commands()/ i sed -i -e '\/sbin\\\/ldconfig/d' \\\\\n       -e '/\${INSTALL} -dm0755 \"\${DESTDIR}\${bindir}\";/d' iptables\/Makefile.in" \
              -e 's/..\/..\/sbin\/xtables-multi/xtables-multi/' \
              -e '/for file in ip4tc/,/make install-iptables/d' \
              -e 's/\(.*\)&&[[:blank:]]*$/\1/' \
        >> $Output
    ;;
    iw)
       if [ "$SYSTEMD" = yes ]; then
         GetInternalCommands iwComms >> $Output
       else
         GetInternalCommands iwComms \
          | sed -e 's/SBINDIR=\/usr\/bin//' \
          >> $Output
       fi
    ;;
    java-hamcrest)
       GetInternalCommands hamcrestComms >> $Output
    ;;
    jdkbin)
       GetCommands \
        | sed -e 's/OpenJDK-'"${jdkcomvers}"'-bin/\${SrcName}bin/g' \
              -e '/chown/,/export PATH/d' \
              -e '/mv -v/a ln -svf ${SrcName}bin /opt/jdk' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    js2)
       GetCommands \
        | sed -e '/configure_commands/i export SHELL=/bin/bash' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    junit)
       GetCommands \
        | sed -e '/chown -R root:root/d' \
              -e 's/ant populate-dist/\/opt\/ant\/bin\/ant populate-dist/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    krb5)
       GetCommands \
        | sed -e '/gpg/d' \
              -e '/sysconfdir=\/etc/i\              --sbindir=\/usr\/bin       \\' \
              -e 's/enable-dns-for-realm/enable-dns-for-realm   \\\n\              --with-ldap/' \
              -e '/mv -v/d' \
              -e '/ln -v -sf/d' \
              -e '/cat > \/etc\/krb5.conf/,/make install-krb5/d' \
              -e '/unset LIBRARY/i install -dm 755 \/var\/lib\/krb5kdc\ninstall -pm 644 config-files\/kdc.conf \/var\/lib\/krb5kdc\/kdc.conf\ninstall -pm 644 config-files\/krb5.conf \/etc\/krb5.conf\ninstall -m 644 util\/ac_check_krb5.m4 \/usr\/share\/aclocal' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libassuan)
       GetCommands \
        | sed -e '/make -C doc pdf ps/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libatasmart)
       GetCommands \
        | sed -e 's/usr --disable/usr --sbindir=\/usr\/bin --disable/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libatomic_ops)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/rm -vrf \/usr/rm -vrf ${CUR_DIR}\/usr/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;; 
    libcanberra)
       if [ "$GNOME_OR_XFCE" = xfce ]; then
         GetCommands \
          | sed -e 's/oss/oss --disable-schemas-install/' \
                -e '/systemctl enable canberra/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       elif [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e 's/oss/oss \\\n   --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system/' \
                -e '/systemctl enable canberra/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    libcap)  # use the BLFS commands, not the systemd ones
#  NOTE - modify these commands if not all files sit under /usr
      if $useDESTDIR; then
        GetInternalCommands libcapdestdirComms >> $Output
      else
        GetInternalCommands libcapComms >> $Output
      fi
    ;;
    libcdio)
        GetCommands \
         | sed -e '/cd libcdio-paranoia/a # configure, make and install commands are the same as before\necho -n paranConfigure...\n{ configure_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/paranconfigure.err" ;} &>"$CUR_DIR/paranconfigure.log"\ntest_pipe\necho -n paranCompile...\n{ make_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/paranmake.err" ;} &>"$CUR_DIR/paranmake.log"\ntest_pipe\necho -n paranInstall...\n{ install_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/paraninstall.err" ;} &>"$CUR_DIR/paraninstall.log"\ntest_pipe' \
               -e 's/\(.*\)&&$/\1/' \
         >> $Output
    ;;
    libchamplain)
      if [ "$BOOK_VERSION" = systemd ]; then
        GetCommands \
         | sed -e 's/\(.*\)&&$/\1/' \
         >> $Output
      else
        GetInternalCommands basicComms \
         | sed -e '/disable-static/i\              --enable-vala    \\' \
         >> $Output
      fi
    ;;
    libdaemon)
        GetCommands \
        | sed -e '/make -C doc doxygen/d' \
              -e '/install -v -m644 doc\/reference\/man/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libdvdcss)
       GetCommands \
        | sed -e '/doxygen.cfg/d' \
              -e '/make -C doc\/latex pdf/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libevdev) # in blfs, pkg is in xdriver, in blfs-systemd, pkg is in libraries :(
       if [ "$BOOK_VERSION" = systemd ]; then
         GetCommands \
          | sed -e 's/\$XORG_CONFIG/--prefix=\/usr --disable-static/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms >> $Output
       fi
    ;;
    libgcrypt)
        if [ "$SYSTEMD" = yes ]; then
          GetCommands \
          | sed -e '/make -C doc pdf ps html/,/makeinfo --plaintext/d' \
                -e '/mv -v/,/ln -sfv/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
        else
          GetCommands \
          | sed -e '/make -C doc pdf ps html/,/makeinfo --plaintext/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
        fi
    ;;
    libgda)
       GetCommands \
        | sed -e '/--enable-system-sqlite/ i --with-java=no \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libgee|libwacom|farstream)
       if [ "$BOOK_VERSION" = systemd ]; then
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms >> $Output
       fi
    ;;
    libglade)
       GetInternalCommands basicComms \
        | sed -e '/make install/a\  install -m755 libglade-convert \/usr\/bin/' \
        >> $Output
    ;;
    libgnome-keyring)
       GetInternalCommands basicComms \
        | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/gnome-keyring/' \
        >> $Output
    ;;
    libgpg-error)
        if [ "$SYSTEMD" = yes ]; then
          GetCommands \
           | sed -e '/mv -v/,/ln -sfv/d' \
                 -e 's/\(.*\)&&$/\1/' \
           >> $Output
        else
          GetCommands \
           | sed -e 's/\(.*\)&&$/\1/' \
           >> $Output
        fi 
    ;;
    libgphoto2)
       GetInternalCommands libgphotoComms >> $Output
    ;;
    libgweather)
       GetInternalCommands basicComms \
        | sed -e 's/--prefix=\/usr/--prefix=\/usr --enable-locations-compression/' \
        >> $Output
    ;;
    libical)
       GetCommands \
        | sed -e '/mkdir build/i if [ ! -d build ]; then' \
              -e '/cd build/i fi' \
              -e '/make docs/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libidl)
       GetCommands \
        | sed -e '/make pdf ps/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libidn)
       GetCommands \
        | sed -e '/cp/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libisoburn)
       GetCommands \
        | sed -e '/doxygen/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libjpeg-turbo)
       GetCommands \
        | sed -e '/rm -f \/usr\/lib\/libjpeg.so\*/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libksba)
       GetCommands \
        | sed -e '/makeinfo/,/make -C doc/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    liblinear)
       if $useDESTDIR; then
         GetCommands \
          | sed -e '/install -vm644/i mkdir -pv ${CUR_DIR}\/usr\/include\n mkdir -pv ${CUR_DIR}\/usr\/lib' \
                -e 's/install -vm644 linear.h \/usr/install -vm644 linear.h ${CUR_DIR}\/usr/' \
                -e 's/install -vm755 liblinear.so.3 \/usr/install -vm755 liblinear.so.3 ${CUR_DIR}\/usr/' \
                -e 's/ln -sfv liblinear.so.3 \/usr/ln -sfv liblinear.so.3 ${CUR_DIR}\/usr/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    libmbim)
       if [ "$BOOK_VERSION" = systemd ]; then
         GetCommands \
          | sed -e 's/disable-static/disable-static \\\n              --libexecdir=\/usr\/lib\/libmbim/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms \
          | sed -s 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/libmbim/' \
          >> $Output
       fi
    ;;
    libmm-glib)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static \\\n              --sbindir=\/usr\/bin \\\n              --with-udev-base-dir=\/usr\/lib\/udev \\\n              --with-polkit=permissive \\\n              --enable-gtk-doc \\\n              --without-mbim \\\n              --without-qmi/' \
        >> $Output
    ;;
    libmusicbrainz)
       GetCommands \
        | sed -e '/doxygen/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libnl)
       GetCommands \
        | sed -e '/disable-static/i\              --sbindir=\/usr\/bin \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libpeas)
       GetInternalCommands basicComms \
        | sed -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
        >> $Output
    ;;
    libproxy)
       GetInternalCommands libproxyComms >> $Output
    ;;
    libpwquality)
       if [ "$BOOK_VERSION" = systemd ]; then
         GetCommands \
          | sed -e '/disable-python-bindings/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms \
          | sed -s 's/disable-static/disable-static      \\\n\              --with-securedir=\/usr\/lib\/security/' \
          >> $Output
       fi
    ;;
    libqmi)
       if [ "$BOOK_VERSION" = systemd ]; then
         GetCommands \
          | sed -e 's/disable-static/disable-static \\\n\              --libexecdir=\/usr\/lib\/libqmi/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms \
          | sed -s 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/libqmi/' \
          >> $Output
       fi
    ;;
    libreoffice)
       GetCommands \
        | sed -e '/tar -xf libreoffice/,/cd libreoffice/d' \
              -e '/ln -sv ..\/..\/libreoffice-translations/d' \
              -e 's/\*\*EDITME<PREFIX>EDITME\*\*/\/usr/' \
              -e 's/en-US pt-BR"/en-US"      /' \
              -e 's/--enable-python=system/--disable-python      /' \
              -e '/with-system-clucene/d' \
              -e '/with-system-graphite/d ' \
              -e '/--with-system-odbc/d' \
              -e '/chown -cR 0:0 dictionaries/d' \
              -e '/dict-pt-BR/,/unset i/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libsoup)
       if [ "$GNOME_OR_XFCE" = xfce ]; then
         GetCommands \
          | sed -e 's/disable-static/disable-static --without-gnome/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    libtasn1)
        GetCommands \
        | sed -e '/make -C doc\/reference install-data-local/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libtheora)
       GetCommands \
        | sed -e '/cd examples/,/done/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libtirpc)
       GetCommands \
        | sed -e '/mv -v/,/ln -sfv/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libusb|cpio)
       GetCommands \
        | sed -e 's/bindir=\/bin/bindir=\/usr\/bin/' \
              -e '/enable-mt/i\              --libexecdir=\/usr\/lib  \\' \
              -e 's/libexec/lib/' \
              -e '/make -C doc /d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libvdpau)
       if [ "$BOOK_VERSION" = systemd ]; then
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms >> $Output
       fi
    ;;
    libvirt)
      GetInternalCommands libvirtComms \
       | sed -e "/make install/i\  sed -i 's|/etc/sysconfig/|/etc/conf.d/|' daemon/libvirtd.service tools/libvirt-guests.service\n  sed -i 's|@sbindir@|/usr/bin|g' src/virtlockd.service\n  sed -i 's|#group =.*|group=\"kvm\"|' src/qemu/qemu.conf" \
       >> $Output
    ;;
    libxcb)
       GetCommands \
        | sed -e "/make install/i\  sed -i -e 's/libxcb\\\/install-sh/libxcb\\\/libxcb-1.9.1\\\/install-sh/' doc\\\/Makefile" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libxkbcommon)
       if [ "$BOOK_VERSION" = systemd ]; then
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms \
          | sed -e 's/disable-static/disable-static  \\\n\              --docdir=\/usr\/share\/doc\/libxkbcommon-0.5.0/' \
          >> $Output
       fi
    ;;
    libxml2)
       GetCommands \
        | sed -e '/tar xf ../d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    linux-pam)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/libdir=\/usr\/lib/libdir=\/usr\/lib --sbindir=\/usr\/bin/' \
                -e 's/securedir=\/lib/securedir=\/usr\/lib/' \
                -e '/cat > \/etc\/pam.d\/system-account/i mkdir -pv ${CUR_DIR}\/etc\/pam.d' \
                -e 's/cat > \/etc\/pam.d\//cat > ${CUR_DIR}\/etc\/pam.d\//' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/libdir=\/usr\/lib/libdir=\/usr\/lib --sbindir=\/usr\/bin/' \
                -e 's/securedir=\/lib/securedir=\/usr\/lib/' \
                -e '/cat > \/etc\/pam.d\/system-account/i mkdir -pv \/etc\/pam.d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    llvm) # with clang
       GetCommands \
        | sed -e '/make -C docs/d' \
              -e '/install -v -m644 docs/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    lvm2)
       if [ "$SYSTEMD" = yes ]; then
         GetInternalCommands lvmComms >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    mediaplayrinfo)
       GetInternalCommands mpiComms >> $Output
    ;;
    mesalib)
       GetCommands \
        | sed -e '/enable-gbm/i\              --enable-vdpau \\\n\              --enable-egl               \\' \
              -e 's/r300,r600,radeonsi,//' \
              -e 's/drm,x11/drm,x11,wayland/' \
              -e '/with-gallium-drivers/i\              --with-dri-drivers=i915,i965      \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    metacity)
       GetInternalCommands basicComms \
        | sed -e 's@libexecdir=/usr/lib@libexecdir=/usr/lib/metacity@' \
        >> $Output
    ;;
    midori)
       GetCommands \
        | sed -e '/DCMAKE_INSTALL_DOCDIR=/i\              -DUSE_GTK3=1 \\' \
              -e 's/\(.*\)&&$/\1/' \
         >> $Output
    ;;
    modem-manager)
       if [ "$BOOK_VERSION" = systemd ]; then
         GetCommands \
          | sed -e '/disable-static/i\              --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system \\' \
                -e '/systemctl enable ModemManager/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms \
          | sed -e 's/disable-static/disable-static \\\n\              --sbindir=\/usr\/bin \\\n\              --with-udev-base-dir=\/usr\/lib\/udev \\\n\              --with-polkit=permissive \\\n\              --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system/' \
          >> $Output
       fi  
    ;;
    mutter)
       GetInternalCommands basicComms \
        | sed -e 's@libexecdir=/usr/lib@libexecdir=/usr/lib/mutter@' \
              -e 's/disable-static/disable-static --enable-compile-warnings=no/' \
              -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
        >> $Output
    ;;
    mariadb)
       GetCommands \
        | sed -e '/groupadd/,/useradd/d' \
              -e 's/DINSTALL_SBINDIR=sbin/DINSTALL_SBINDIR=bin/' \
              -e '/mysql_install_db/,/make install-mysql/d' \
              -e 's/\(.*\)&&$/\1/' \
         >> $Output
    ;;
    nasm)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/make install/make INSTALLROOT="${CUR_DIR}" install/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    nautilus)
       GetCommands \
        | sed -e 's/packagekit/packagekit --libexecdir=\/usr\/lib\/nautilus/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    neon)
       GetCommands \
        | sed -e 's/disable-static/disable-static \\\n\              --with-expat --with-ssl=openssl \\\n\              --with-ca-certificates=\/etc\/ssl\/ca-bundle.crt/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    netctl)
       if $useDESTDIR; then
         GetInternalCommands netctldestdirComms >> $Output
       else
         GetInternalCommands netctlComms >> $Output
       fi
    ;;
    ntificatn-demon)
       GetInternalCommands basicComms \
        | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/notification-daemon/' \
        >> $Output
    ;;
    net-tools)
       GetCommands \
        | sed -e '/configure_commands()/i sed -i "s#\/sbin#\/bin#" Makefile\nsed -i "s#\/usr##" man\/Makefile' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    networkmanager)
       if [ "$SYSTEMD" = yes ]; then
         GetInternalCommands ntwrkmngrComms >> $Output
       else
         GetCommands \
          | sed -e 's/disable-ppp/disable-ppp --libexecdir=\/usr\/lib\/networkmanager --sbindir=\/usr\/bin/' \
                -e '/make install-networkmanager/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    netwrk-mngr-app)
       GetCommands \
        | sed -e '/sysconfdir=/i\              --libexecdir=\/usr\/lib\/networkmanager \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    nss)
       GetCommands \
        | sed -e '/cd ..\/dist/d' \
              -e '/install -v -m755 Linux\*\/lib/i\  cd ..\/dist\n\  mkdir -pv \/usr\/{bin,include,lib\/pkgconfig}' \
              -e '/cp -v -RL/ i cd ..\/dist' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    nss-mdns)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static \\\n\              --disable-lynx/' \
        >> $Output
    ;;
    nvidia)
       GetInternalCommands nvidiaComms >> $Output
    ;;
    nvidia-libgl)
       GetInternalCommands nvlibglComms >> $Output
    ;;
    nvidia-utils)
       GetInternalCommands nvutilsComms >> $Output
    ;;
    opal)
       GetCommands \
        | sed -e "/make install/ i\  sed -i '/mkdir -p \\\\\$(DESTDIR)\\\\\$(libdir); chmod 755 \\\\\$(DESTDIR)\\\\\$(libdir)/d' Makefile" \
              -e "/make install/ i\  sed -i '/mkdir -p \\\\\$(DESTDIR)\\\\\$(libdir)\\\/pkgconfig ; chmod 755 \\\\\$(DESTDIR)\\\\\$(libdir)\\\/pkgconfig/d' Makefile" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    openbox)
       GetCommands \
        | sed -e '/disable-static/i\              --libexecdir=\/usr\/lib\/openbox \\' \
              -e 's/openbox ~\/.config/openbox \/home\/john\/.config/' \
              -e '/ls -d \/usr\/share\/themes/,/lxpanel/d' \
              -e '/exec openbox-session/,/EOF/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    openjdk)
       GetCommands \
        | sed -e '/corba.tar.xz/,/jtreg/d' \
              -e "/sed -e 's\/DGifCloseFile/,/-i hotspot\/src\/share\/vm/d" \
              -e 's/OpenJDK-1.8.0.51/jdk8-openjdk/g' \
              -e 's/update-version=51/update-version=60/' \
              -e 's/build-number=b16/build-number=b24/' \
              -e 's/--with-giflib=system/--enable-unlimited-crypto/' \
              -e '/chown -R root:root/d' \
              -e '/pt_BR/d' \
              -e '/cat > \/opt\/jdk\/bin\/mkcacerts/i if [ ! -e \/opt\/jdk\/bin\/mkcacerts ]; then' \
              -e '/chmod -c 0755 \/opt\/jdk\/bin\/mkcacerts/i fi' \
              -e '/-f \/opt\/jdk\/jre\/lib\/security/,/bin\/keytool -list -keystore jre\/lib/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    openldap)
       GetCommands \
        | sed -e '/groupadd/,/ldapsearch/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    openobex)
       GetInternalCommands openobexComms >> $Output
    ;;
    openssh)
       if ! $as_root; then
         GetCommands \
          | sed -e '/-v -m700 -d \/var\/lib\/sshd/,/-u 50 sshd/d' \
                -e '/with-md5-passwords/i\              --sbindir=/usr/bin \\\n\              --libexecdir=/usr/lib/ssh \\\n\              --with-ssl-engine \\\n\              --with-pam \\' \
                -e '/ssh-keygen/,/echo "ChallengeResponseAuthentication/d' \
                -e '/make install-sshd/,/systemctl start sshd.socket/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/with-md5-passwords/i\              --sbindir=/usr/bin \\\n\              --libexecdir=/usr/lib/ssh \\\n\              --with-ssl-engine \\\n\              --with-pam \\' \
                -e '/ssh-keygen/,/echo "ChallengeResponseAuthentication/d' \
                -e '/make install-sshd/,/systemctl start sshd.socket/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    openssl)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/make MANDIR/make INSTALL_PREFIX=$CUR_DIR MANDIR/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    pango)
       GetCommands \
        | sed -e '/pango-querymodules/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    pangox-compat)
        GetInternalCommands basicComms >> $Output
    ;;
    parted)
       GetCommands \
        | sed -e 's/--disable-static/\\\n\              --sbindir=\/usr\/bin \\\n\              --disable-debug \\\n\              --disable-static/' \
              -e '/make -C doc html/,/dvips/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    pciutils)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/make PREFIX=\/usr/make PREFIX=\/usr SBINDIR=\/usr\/bin/' \
                -e '/install install-lib/i\       DESTDIR="${CUR_DIR}" \\' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;; 
    pcre)
       if [ "$SYSTEMD" = yes ]; then 
         GetCommands \
          | sed -e '/mv -v/,/ln -sfv/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
           >> $Output
       fi
    ;;
    php)
       rtrnCom="" # need the version of php used in the book commands
       getComms $pkgname $xmlsec
       numcomms=${#rtrnCom[@]}
       phpXBookVers ${rtrnCom[numcomms-10]}
       if $useDESTDIR; then
         GetCommands \
          | sed -e '/sysconfdir=/i\              --sbindir=\/usr\/bin        \\' \
                -e '/install -v -m644 p/a\  install -v -m755 -d \/usr\/share\/doc\/php-'"${phpvers}"'' \
                -e '/tar -xvf/,/no-same-owner/d' \
                -e "s/$phpXbookvers/$phpvers/" \
                -e '/make install-php/d' \
                -e 's/make install/make INSTALL_ROOT=${CUR_DIR} install/' \
                -e '/install -v -m644    CODING_STANDARDS/i install -m755 -d ${CUR_DIR}\/etc\/httpd\ninstall -v -m644 ${blfsfiles}/conf-files/httpd.conf ${CUR_DIR}\/etc\/httpd/httpd.conf' \
                -e 's/\/etc\/httpd\/httpd.conf/${CUR_DIR}\/etc\/httpd\/httpd.conf/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/install -v -m644 p/a\  install -v -m755 -d \/usr\/share\/doc\/php-'"${phpvers}"'' \
                -e '/tar -xvf/,/no-same-owner/d' \
                -e "s/$phpXbookvers/$phpvers/" \
                -e '/install -v -m644 php.ini-production/i\  install -D -m755 libs\/libphp5.so \/usr\/lib\/libphp5.so' \
                -e '/make install-php/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    pidgin)
       GetCommands \
        | sed -e '/disable-avahi/d' \
              -e '/disable-idn/,/disable-tcl/d' \
              -e '/disable-meanwhile/a\              --disable-vv' \
              -e '/gtk-update-icon-cache/,/update-desktop-database/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    pinentry)
       GetCommands \
        | sed -e "s/\.\/configure/CXXFLAGS+=' -std=c++11' \.\/configure/" \
              -e '/makeinfo --html/,/make -k -C doc/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    pm-utils)
       GetCommands \
        | sed -e '/sysconfdir=/i\              --sbindir=\/usr\/bin \\' \
              -e '/ln -sv pm-action.8/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    polkit)
       if ! $as_root; then
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e '/groupadd/,/-g polkitd -s \/bin\/false polkitd/d' \
                  -e '/--enable-libsystemd-login=no \\/d' \
                  -e '/disable-static/i\              --libdir=/usr/lib \\\n\              --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system \\' \
                  -e 's/--with-authfw=shadow/--libexecdir=\/usr\/lib\/polkit-1 \\\n\              --enable-libsystemd-login=yes/' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/groupadd/,/-g polkitd -s \/bin\/false polkitd/d' \
                  -e 's/--with-authfw=shadow/--libexecdir=\/usr\/lib\/polkit-1/' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       else
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e 's/--with-authfw=shadow/--libexecdir=\/usr\/lib\/polkit-1 \\\n\              --enable-libsystemd-login=yes/' \
                  -e '/--enable-libsystemd-login=no \\/d' \
                  -e '/disable-static/i\              --libdir=/usr/lib \\\n\              --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system \\' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e 's/--with-authfw=shadow/--libexecdir=\/usr\/lib\/polkit-1/' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       fi
    ;;
    polkit-gnome)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr \\\n\              --sysconfdir=\/etc \\\n\              --localstatedir=\/var \\\n\              --libexecdir=\/usr\/lib\/polkit-gnome \\\n\              --disable-static/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    poppler)
       GetCommands \
        | sed -e '/setqt4/,/setqt5/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    ptlib)
       if ! $useDESTDIR; then
         GetCommands \
          | sed -e "/make install/i\  sed -e '/mkdir -p \$(DESTDIR)\$(LIBDIR)\\\/pkgconfig/d' \\\\" \
                -e "/make install/i\      -e '/chmod 755 \$(DESTDIR)\$(LIBDIR)\\\/pkgconfig/d' -i Makefile" \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi 
    ;;
    pulseaudio)
       GetCommands \
        | sed -e '/groupadd/,/usermod -a -G/d' \
              -e '/disable-rpath/i\              --libexecdir=/usr/lib \\\n\              --disable-default-build-tests \\\n\              --with-udev-rules-dir=/usr/lib/udev/rules.d \\\n\              --with-database=tdb \\\n\              --disable-tcpwrap \\' \
              -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    py2-atspi)
       GetInternalCommands py2atspiComms >> $Output
    ;;
    py3-atspi)
       GetInternalCommands py2atspiComms \
        | sed -e 's/python2/python3/' \
        >> $Output
    ;;
    py2-beaker)
       GetInternalCommands py2beakerComms >> $Output
    ;;
    py3-beaker)
       GetInternalCommands py3beakerComms >> $Output
    ;;
    py2-xdg|py3-xdg|docutils|py2-markupsafe|py3-markupsafe|py2-mako|py3-mako)
       GetInternalCommands pyComms >> $Output
    ;;
    py2-dbus)
       GetInternalCommands py2dbusComms >> $Output
    ;;
    py3-dbus)
       GetInternalCommands py3dbusComms >> $Output
    ;;
    py2-gobject3)
       GetInternalCommands basicComms \
        | sed -e "/configure_commands()/i sed -i '/Werror=format/d' configure" \
              -e 's/disable-static/disable-static --with-python=\/usr\/bin\/python2/' \
        >> $Output
    ;;
    py3-gobject3)
       GetInternalCommands basicComms \
        | sed -e "/configure_commands()/i sed -i '/Werror=format/d' configure" \
              -e 's/disable-static/disable-static --with-python=\/usr\/bin\/python3/' \
        >> $Output
    ;;
    py2-setuptools)
       GetInternalCommands py2setuptoolsComms >> $Output
    ;;
    py3-setuptools)
       GetInternalCommands py3setuptoolsComms >> $Output
    ;;
    pysolfc)
       GetInternalCommands pysolfcComms >> $Output
    ;;
    pysolss)
       GetInternalCommands pysolssComms >> $Output
    ;;
    python2)
       GetCommands \
        | sed -e '/make -C Doc html/d' \
              -e '/cp -rfv Doc/d' \
              -e '/tar --strip-components=1/d' \
              -e '/-xvf ../d' \
              -e '/export PYTHONDOCS=/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    python3)
       GetCommands \
        | sed -e '/tar --strip/ i install -v -m755 -d /usr/share/doc/python-${Python3vers}/html' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    qemu)
       GetCommands \
        | sed -e '/prefix=\/usr                \\/a\              --libexecdir=\/usr\/lib\/qemu   \\\n\              --localstatedir=\/var       \\' \
              -e '/egrep/,/export/d' \
              -e '/qemu-img create/,/chmod +x \/etc\/qemu-ifdown/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    qt4)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/mkdir \/opt\/qt-4.8.7/mkdir -pv ${CUR_DIR}\/opt\/qt-4.8.7/' \
                -e 's/ln -sfnv qt-4.8.7 \/opt\/qt4/ln -sfnv qt-4.8.7 ${CUR_DIR}\/opt\/qt4/' \
                -e '/bindir         \/usr\/bin\/qt4/,/examplesdir    \/usr\/share\/doc/d' \
                -e 's/make install/make INSTALL_ROOT="${CUR_DIR}" install/' \
                -e '/cd    qtwebkit-/a export QTDIR=\$QT4PREFIX' \
                -e '/Tools\/Scripts\/build-webkit/i qtweb_make_commands()\n{ :' \
                -e 's/Tools\/Scripts\/build-webkit/  Tools\/Scripts\/build-webkit/' \
                -e '/Tools\/Scripts\/build-webkit/a }\nqtweb_install_commands()\n{ :' \
                -e '/make -C WebKitBuild\/Release/a }\necho -n qtWebkitCompile...\n{ qtweb_make_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/qtwebkitmake.err" ;} &>"$CUR_DIR/qtwebkitmake.log"\ntest_pipe\necho -n qtWebkitInstall...\n{ qtweb_install_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/qtwebkitinstall.err" ;} &>"$CUR_DIR/qtwebkitinstall.log"\ntest_pipe' \
                -e 's/make -C WebKitBuild\/Release install/  make -C WebKitBuild\/Release INSTALL_ROOT="${CUR_DIR}" install/' \
                -e '/QT4BINDIR=/i cd ..' \
                -e '/for file in moc uic rcc qmake/i install -m755 -d ${CUR_DIR}\/usr\/bin' \
                -e '/ldconfig/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/mkdir \/opt\/qt-4.8.7/,/examplesdir    \/usr\/share\/doc/d' \
                -e '/cd    qtwebkit-/a export QTDIR=\$QT4PREFIX' \
                -e '/Tools\/Scripts\/build-webkit/i qtweb_make_commands()\n{ :' \
                -e 's/Tools\/Scripts\/build-webkit/  Tools\/Scripts\/build-webkit/' \
                -e '/Tools\/Scripts\/build-webkit/a }\nqtweb_install_commands()\n{ :' \
                -e '/make -C WebKitBuild\/Release/a }\necho -n qtWebkitCompile...\n{ qtweb_make_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/qtwebkitmake.err" ;} &>"$CUR_DIR/qtwebkitmake.log"\ntest_pipe\necho -n qtWebkitInstall...\n{ qtweb_install_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/qtwebkitinstall.err" ;} &>"$CUR_DIR/qtwebkitinstall.log"\ntest_pipe' \
                -e 's/make -C WebKitBuild\/Release install/  make -C WebKitBuild\/Release install/' \
                -e '/QT4BINDIR=/i cd ..' \
                -e 's/QTDIR=$QT4DIR/QTDIR=\\$QT4DIR/' \
                -e 's/pathappend $QT4DIR/pathappend \\$QT4DIR/' \
                -e '/ldconfig/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
        fi
    ;;
    rsync)
        if [ "$SYSTEMD" = yes ]; then
          GetCommands \
           | sed -e '/groupadd -g 48 rsyncd/,/\/bin\/false -u 48 rsyncd/d' \
                 -e '/make install-rsyncd/,/systemctl start rsyncd.socket/d' \
                 -e 's/\(.*\)&&$/\1/' \
           >> $Output
        else
          GetCommands \
           | sed -e '/groupadd -g 48 rsyncd/,/\/bin\/false -u 48 rsyncd/d' \
                 -e '/make install-rsyncd/d' \
                 -e 's/\(.*\)&&$/\1/' \
           >> $Output
        fi
    ;;
    ruby)
       GetCommands \
        | sed -e '/cp -v template/,/doxygen/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    samba)
       if [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e '/sysconfdir=/i\      --sbindir=\/usr\/bin \\\n\      --libdir=\/usr\/lib \\' \
                -e 's/pammodulesdir=\/lib/pammodulesdir=\/usr\/lib/' \
                -e '/--without-systemd/d' \
                -e '/with-piddir=/i\      --with-sockets-dir=\/run\/samba \\\n\      --with-ads \\\n\      --with-winbind \\\n\      --with-acl-support \\\n\      --enable-gnutls \\\n\      --with-pam --with-configdir=\/etc\/samba \\\n\      --with-lockdir=\/var\/cache\/samba \\' \
                -e '/mv -v \/usr\/lib\/libnss_win/,/libnss_wins.so.2/d' \
                -e '/groupadd -g 99 nogroup/,/false -u 99 nobody/d' \
                -e '/make install-samba/,/systemctl start smbd.socket/d' \
                -e 's/\(.*\)&&$/\1/' \
         >> $Output
       else
         GetCommands \
          | sed -e '/groupadd -g 99 nogroup/,/make install-winbindd/d' \
                -e 's/\(.*\)&&$/\1/' \
         >> $Output
       fi
    ;;
    scons)
       if $useDESTDIR; then
         GetCommands \
          | sed -e '/install-data/i\                          --root="$CUR_DIR" \\' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    sdl)
       GetCommands \
        | sed -e '/cd test/,/make/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    sdl2)
       GetInternalCommands sdl2Comms >> $Output
    ;;
    seamonkey)
       GetCommands \
        | sed -e '/Yasm/,/disable-libnotify/d' \
              -e 's/\# ac_add_options --enable-startup-notification/ac_add_options --enable-startup-notification/' \
              -e 's/\# ac_add_options --enable-system-sqlite/ac_add_options --enable-system-sqlite/' \
              -e 's/\# ac_add_options --enable-system-libevent/ac_add_options --enable-system-libevent/' \
              -e 's/\# ac_add_options --with-system-libvpx/ac_add_options --with-system-libvpx/' \
              -e 's/\# ac_add_options --with-system-nspr/ac_add_options --with-system-nspr/' \
              -e 's/\# ac_add_options --with-system-nss/ac_add_options --with-system-nss/' \
              -e '/make -C moz-build-dir install/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    sgml-common)
       GetCommands \
        | sed -e '/install-catalog --remove/,/\/etc\/sgml\/sgml-ent.cat/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    shadow)
        # assume cracklib support with Linux-PAM
        # don't install foreign man pages
       if $useDESTDIR; then
         GetCommands \
          | sed -e '/DICTPATH\\t\/lib\/cracklib/d' \
                -e "/configure_commands()/i sed -i -e 's\/po cs da de es fi fr hu id it ja ko pl pt_BR ru sv tr \\\\\\\//' \\\\\n\       -e 's\/zh_CN zh_TW\/\/' \\\\\n\       -e 's\/po cs da de es fi fr hu id it ja ko pl pt_BR ru sv tr\//'  man/Makefile.in" \
                -e 's/sysconfdir=\/etc --with-group-name-max-length=32/prefix=\/usr \\\n\              --bindir=\/usr\/bin \\\n\              --sbindir=\/usr\/bin \\\n\              --libdir=\/usr\/lib \\\n\              --mandir=\/usr\/share\/man \\\n\              --sysconfdir=\/etc \\\n\              --with-libpam \\\n\              --with-group-name-max-length=32/' \
                -e '/mv -v \/usr\/bin\/passwd/d' \
                -e '/install -v -m644 \/etc\/login.defs/i if [ -e \/etc\/login.defs ]; then' \
                -e '/install -v -m644 \/etc\/login.defs/a fi' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/DICTPATH\\t\/lib\/cracklib/d' \
                -e "/configure_commands()/i sed -i -e 's\/po cs da de es fi fr hu id it ja ko pl pt_BR ru sv tr \\\\\\\//' \\\\\n\       -e 's\/zh_CN zh_TW\/\/' \\\\\n\       -e 's\/po cs da de es fi fr hu id it ja ko pl pt_BR ru sv tr\//'  man/Makefile.in" \
                -e 's/sysconfdir=\/etc --with-group-name-max-length=32/prefix=\/usr \\\n\              --bindir=\/usr\/bin \\\n\              --sbindir=\/usr\/bin \\\n\              --libdir=\/usr\/lib \\\n\              --mandir=\/usr\/share\/man \\\n\              --sysconfdir=\/etc \\\n\              --with-libpam \\\n\              --with-group-name-max-length=32/' \
                -e '/mv -v \/usr\/bin\/passwd/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    smpeg)
       GetInternalCommands basicComms \
        |sed -e '/prefix=\/usr/i\  \.\/autogen.sh' \
             -e 's/prefix=\/usr/prefix=\/usr --mandir=\/usr\/share\/man/' \
        >> $Output
    ;;
    snappy)
       GetInternalCommands basicComms \
        | sed -e 's/\.\/configure/CXXFLAGS+=\\ -DNDEBUG \.\/configure/' \
        >> $Output
    ;;
    speechd)
       GetInternalCommands speechdComms >> $Output
    ;;
    speex)
       GetCommands \
        | sed -e '/cd speexdsp-/a dspconfigure_commands()\n{ :' \
              -e '/share\/doc\/speexdsp/a }\necho -n dspConfigure...\n{ dspconfigure_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/dspconfigure.err" ;} &>"$CUR_DIR/dspconfigure.log"\ntest_pipe\necho -n dspCompile...\n{ make_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/dspmake.err" ;} &>"$CUR_DIR/dspmake.log"\ntest_pipe\necho -n dspInstall..\n{ install_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/dspinstall.err" ;} &>"$CUR_DIR/dspinstall.log"\ntest_pipe' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    sqlite)
       GetCommands \
        | sed -e '/unzip/d' \
              -e '/cp -v -R sqlite-doc/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    squid)
       GetInternalCommands squidComms >> $Output
    ;;
    subversion)
       GetCommands \
        | sed -e 's/disable-static/disable-static \\\n\              --with-apr=\/usr --with-apr-util=\/usr \\\n\              --with-apache-libexecdir=\/usr\/lib\/httpd\/modules \\\n\              --with-ruby-sitedir=\/usr\/lib\/ruby\/vendor_ruby/' \
              -e '/cp -v -R sqlite-doc/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    sudo)
       GetCommands \
        | sed -e "/configure_commands()/i sed -e 's/\$(INSTALL_OWNER)//g' \\\\\n    -i lib/util/Makefile.in \\\\\n    -i plugins/group_file/Makefile.in \\\\\n    -i plugins/sudoers/Makefile.in \\\\\n    -i plugins/system_group/Makefile.in \\\\\n    -i src/Makefile.in \\\\\n    -i include/Makefile.in \\\\\n    -i doc/Makefile.in \\\\\n    -i examples/Makefile.in" \
              -e '/with-secure-path/i\              --sbindir=\/usr\/bin      \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    systemd)
       if [ "$BOOK_VERSION" = systemd ]; then
         GetCommands \
          | sed -e '/export SYSTEMD_VERSION=/d' \
                -e "/patch -Np1 -i/i export SYSTEMD_VERSION=$SYSTEMD_VERSION" \
                -e "/configure_commands()/i sed -e '/install-touch-usr-hook/d' \\\\\n    -e '/touch -c/d' \\\\\n    -i Makefile.in" \
                -e '/with-rootprefix=/d' \
                -e 's/rootlibdir=\/lib/rootlibdir=\/usr\/lib/' \
                -e '/enable-split-usr/d' \
                -e '/systemctl start rescue.target/d' \
                -e '/mv -v \/usr\/lib/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
        else
          GetInternalCommands systemdComms \
           | sed -e "/configure_commands()/i sed -e '/install-touch-usr-hook/d' \\\\\n    -e '/touch -c/d' \\\\\n    -i Makefile.in" \
           >> $Output
        fi
    ;;
    tcl) # destdir uses INSTALL_ROOT=, not DESTDIR=
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/make install/make INSTALL_ROOT="${CUR_DIR}" install/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    tdb)
       GetInternalCommands basicComms \
        | sed -e "/configure_commands()/i sed -i -e 's#python#python2#g' buildtools/bin/waf" \
              -e 's/sysconfdir=\/etc/sysconfdir=\/etc\/samba/' \
              -e 's/usr\/lib \\/usr\/lib/' \
              -e '/disable-static/d' \
        >> $Output
    ;;
    tlpthy-frstream|telepathy-gabl|telepathy-haze|telepathy-idle|telepathy-logr)
       if [ "$BOOK_VERSION" = systemd ]; then
         GetCommands \
          | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib\/telepathy/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms \
          | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/telepathy/' \
          >> $Output
       fi
    ;;
    telepathy-glib)
       if [ "$BOOK_VERSION" = systemd ]; then
         GetCommands \
          | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib\/telepathy/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms \
          | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/telepathy/' \
                -e '/disable-static/i\              --enable-vala-bindings \\' \
          >> $Output
       fi
    ;;
    telepathy-salut)
       if [ "$BOOK_VERSION" = systemd ]; then
         GetCommands \
          | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib\/telepathy/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms \
          | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/telepathy/' \
                -e '/--disable-static/i\              --disable-avahi-tests \\\n\              --docdir=/usr/share/doc/telepathy-salut-'"${telepathysalutvers}"' \\' \
          >> $Output
       fi
    ;;
    tpthymisscntrl)
       GetInternalCommands basicComms \
        | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/telepathy/' \
              -e '/disable-static/i\              --with-connectivity=nm \\\n\              --enable-gtk-doc \\\n\              --disable-upower \\' \
        >> $Output
    ;;
    thunderbird)
       GetCommands \
        | sed -e '/DBus-Glib/,/GStreamer/d' \
              -e '/ac_add_options --disable-gstreamer/d' \
              -e 's/\#ac_add_options --enable-gstreamer/ac_add_options --enable-gstreamer/' \
              -e 's/\#ac_add_options --enable-startup-notification/ac_add_options --enable-startup-notification/' \
              -e 's/ac_add_options --disable-pulseaudio/\#ac_add_options --disable-pulseaudio/' \
              -e 's/make -f client.mk/SHELL=\/bin\/sh make -f client.mk/' \
              -e '/chown -R 0:0 \/usr\/lib\/thunderbird/d' \
              -e '/make -C thunderbuild install/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    tk) # destdir uses INSTALL_ROOT=, not DESTDIR=
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/make install/make INSTALL_ROOT="${CUR_DIR}" install/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    traceroute)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/make prefix=\/usr install/make prefix=\/usr DESTDIR="${CUR_DIR}" install/' \
                -e '/mv \/usr\/bin\/traceroute/d' \
                -e '/rm -fv \/usr\/share\/man\/man1\/traceroute.1/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/mv \/usr\/bin\/traceroute/d' \
                -e '/rm -fv \/usr\/share\/man\/man1\/traceroute.1/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    tracker)
       GetCommands \
        | sed -e '/disable-static/i\              --libexecdir=/usr/lib/tracker \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    udisks)
       if [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e 's/--disable-static/--disable-static --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system \\\n\              --sbindir=\/usr\/bin \\\n\              --libexecdir=\/usr\/lib \\\n\              --with-udevdir=\/usr\/lib\/udev/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    unzip)
       if $useDESTDIR; then
         GetCommands \
          | sed -e '/This.block.must.be.edited/,/End.of.editable.block/d' \
                -e '/configure_commands()/i sed -i "/MANDIR =/s#)/#)/share/#" unix/Makefile' \
                -e 's/make prefix=\/usr MANDIR=\/usr\/share\/man\/man1/make prefix="${CUR_DIR}"\/usr/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/This.block.must.be.edited/,/End.of.editable.block/d' \
          >> $Output
       fi
    ;;
    upower)
       GetCommands \
        | sed -e '/disable-static/i\              --libexecdir=\/usr\/lib\/upower \\\n\              --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system \\\n\              --with-udevrulesdir=\/usr\/lib\/udev \\' \
              -e '/systemctl enable upower/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    v4l-utils)
       if $useDESTDIR; then
         GetInternalCommands v4lComms \
          | sed -e 's/rm \/usr\/bin\/ivtv-ctl/rm ${CUR_DIR}\/usr\/bin\/ivtv-ctl/' \
          >> $Output
       else
         GetInternalCommands v4lComms >> $Output
       fi
    ;;
    vlc)
       GetCommands \
        | sed -e 's/--prefix=\/usr/--prefix=\/usr --disable-lua/' \
              -e '/gtk-update-icon-cache/,/update-desktop-database/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    vte)
       GetCommands \
        | sed -e 's/introspection/introspection --libexecdir=\/usr\/lib\/vte/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    wavpack)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static --enable-mmx/' \
        >> $Output
    ;;
    wayland)
       if [ "$BOOK_VERSION" = systemd ]; then
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms \
          | sed -e 's/disable-static/disable-static --disable-documentation/' \
          >> $Output
       fi
    ;;
    webkitgtk)
         GetInternalCommands webkitgtkComms >> $Output
    ;;
    webkit2gtk)
       GetCommands \
        | sed -e '/Wno-dev/i\        -DLIBEXEC_INSTALL_DIR=/usr/lib/webkit2gtk-4.0 \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    weston)
       if ! $as_root; then
         if [ "$BOOK_VERSION" = systemd ]; then
           GetCommands \
            | sed -e 's/--prefix=\/usr/--prefix=\/usr --libexecdir=\/usr\/lib\/weston/' \
                  -e 's/clients-install/clients-install \\\n\              --disable-setuid-install/' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetInternalCommands westonComms \
            | sed -e 's/clients-install/clients-install \\\n\              --disable-setuid-install/' \
            >> $Output
         fi
       else # as root
         if [ "$BOOK_VERSION" = systemd ]; then
           GetCommands \
            | sed -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetInternalCommands westonComms >> $Output
         fi
       fi
    ;;
    wget)
      GetCommands \
       | sed -e 's/sysconfdir=\/etc/sysconfdir=\/etc  \\\n\              --with-ssl=\$SSLTYPE/' \
             -e 's/\(.*\)&&$/\1/' \
       >> $Output
    ;;
    which)
       GetCommands \
        | sed -e '/cat/,/chown/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    wireless_tools)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/make PREFIX=\/usr INSTALL_MAN=\/usr\/share\/man install/make INSTALL_DIR="${CUR_DIR}\/usr\/bin" \\\n\       INSTALL_LIB="${CUR_DIR}\/usr\/lib" \\\n\       INSTALL_INC="${CUR_DIR}\/usr\/include" \\\n\       INSTALL_MAN="${CUR_DIR}\/usr\/share\/man" \\\n\       install/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    wpa_supplicant)
       if $useDESTDIR; then
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e 's/BINDIR=\/sbin LIBDIR=\/lib/BINDIR=\/usr\/bin LIBDIR=\/usr\/lib/' \
                  -e 's/qmake/\/opt\/qt4\/bin\/qmake/' \
                  -e 's#/sbin/#/usr/bin/#' \
                  -e '/install -v -m755 wpa_{cli,passphrase,supplicant}/i\  make LIBDIR=\/usr\/lib BINDIR=\/usr\/bin DESTDIR="${CUR_DIR}" install\n\  install -d -m755 "${CUR_DIR}\/usr\/share\/man\/man"{5,8}' \
                  -e '/install -v -m755 wpa_{cli,passphrase,supplicant}/d' \
                  -e '/dbus\/fi/i\  install -d -m755 ${CUR_DIR}\/usr\/lib\/systemd\/system\n\  install -v -m644 systemd\/*.service ${CUR_DIR}\/usr\/lib\/systemd\/system' \
                  -e '/install -v -m644 dbus\/fi.{epitest.hostap/i\  install -d -m755 ${CUR_DIR}\/usr\/share\/dbus-1\/system-services' \
                  -e 's/\/usr\/share\/dbus-1\/system-services\//${CUR_DIR}\/usr\/share\/dbus-1\/system-services\//' \
                  -e '/install -v -m644 dbus\/dbus-wpa_supplicant/i\  install -d -m755 ${CUR_DIR}\/etc\/dbus-1\/system.d' \
                  -e '/install -v -m644 doc\/docbook\/wpa_gui.8/a\  install -d -m755 ${CUR_DIR}/usr/share/{applications,pixmaps}' \
                  -e '/update-desktop-database/d' \
                  -e '/systemctl enable wpa_supplicant/d' \
                  -e '/wpa_passphrase/,/systemctl start wpa_supplicant/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/wpa_passphrase/,/ifup \*\*EDITMEwifi0EDITME\*\*/d' \
                  -e '/update-desktop-database/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       else
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e 's/BINDIR=\/sbin LIBDIR=\/lib/BINDIR=\/usr\/bin LIBDIR=\/usr\/lib/' \
                  -e 's/qmake/\/opt\/qt4\/bin\/qmake/' \
                  -e 's#/sbin/#/usr/bin/#' \
                  -e '/install -v -m755 wpa_{cli,passphrase,supplicant}/i\  make LIBDIR=\/usr\/lib BINDIR=\/usr\/bin DESTDIR="${CUR_DIR}" install' \
                  -e '/dbus\/fi/i\  install -v -m644 systemd\/*.service \/usr\/lib\/systemd\/system' \
                  -e '/update-desktop-database/d' \
                  -e '/systemctl enable wpa_supplicant/d' \
                  -e '/wpa_passphrase/,/systemctl start wpa_supplicant/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/wpa_passphrase/,/ifup \*\*EDITMEwifi0EDITME\*\*/d' \
                  -e '/update-desktop-database/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       fi
    ;;
    x264)
       if $useDESTDIR; then
         GetInternalCommands x264Comms \
          | sed -e 's/make bindir=/make DESTDIR="$CUR_DIR" bindir=/' \
          >> $Output
       else
         GetInternalCommands x264Comms >> $Output
       fi
    ;;
    x265)
       GetInternalCommands x265Comms >> $Output
    ;;
    $xapp)
        GetXCommands \
        | sed -e 's/bash -e/set -e/' \
              -e '/for package in/ i cd $curdir' \
              -e '/configure/i\  for curFile in .\/*; do\n  permval=$(stat -c %a $curFile)\n  if [ $permval -eq 555 ]; then\n   chmod 755 $curFile\n  fi\n  done' \
              -e 's/XORG_CONFIG/XORG_CONFIG --disable-selective-werror 2>\&1 | tee ..\/\${packagedir}-configure.log/' \
              -e 's/as_root make install/make install 2>\&1 | tee ..\/\${packagedir}-install.log/' \
              -e '/exit/d' \
              -e 's/\(.*\)&&$/\1/' \
         | awk '{
if( $1 == "make" && $2 == "")
  print "  "$1" 2>&1 | tee ../${packagedir}-make.log";
else
  print $0;
}' \
       >> $Output
    ;;
    xboard)
       GetInternalCommands basicComms \
        | sed -e "/configure_commands()/i sed -i 's/fairymax/gnuchess/g' {xaw,gtk}/xboard.h xboard.conf" \
              -e 's/disable-static/disable-static \\\n\              --with-gtk \\\n\              --enable-zippy/' \
              -e '/make install/a\  install -Dm755 cmail /usr/bin/cmail' \
       >> $Output
    ;;
    xfce4-xkb-plugin)
       GetCommands \
        | sed -e '/disable-static/i\              --libexecdir=\/usr\/lib \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    xfce4-session)
       GetCommands \
        | sed -e '/.xinitrc/d' \
              -e '/\*\*EDITMEUSERNAMEEDITME\*\*/,/sudoers/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    $xlib)
        GetXCommands \
        | sed -e 's/bash -e/set -e/' \
              -e '/for package in/ i cd $curdir' \
              -e '/case $packagedir in/i\  for curFile in .\/*; do\n  permval=$(stat -c %a $curFile)\n  if [[ $permval -eq 555 || $permval -eq 444 ]]; then\n   chmod 755 $curFile\n  fi\n  done' \
              -e 's/disable-devel-docs/disable-devel-docs 2>\&1 | tee ..\/\${packagedir}-configure.log/' \
              -e 's/appdefaultdir=\/etc\/X11\/app-defaults/appdefaultdir=\/etc\/X11\/app-defaults 2>\&1 | tee ..\/\${packagedir}-configure.log/' \
              -e 's/as_root make install/    make install 2>\&1 | tee ..\/\${packagedir}-install.log/' \
              -e '/as_root \/sbin\/ldconfig/d' \
              -e '/exit/d' \
              -e '/ln -sv \$XORG_PREFIX/d' \
              -e 's/\(.*\)&&$/\1/' \
        | awk '{
if ($1 == "./configure" && $2 == "$XORG_CONFIG")
{
  icount++;
  if (icount == 3)
    print "      "$1" "$2" 2>&1 | tee ../${packagedir}-configure.log";
  else
    print $0;
}
else if ($1 == "make" && $2 == "")
  print "      "$1" 2>&1 | tee ../${packagedir}-make.log";
else
  print $0;
}' \
       >> $Output
    ;;
    xml-sax) # need a response file to a question
        GetCommands \
         | sed -e '/configure_commands()/i cp \${blfsfiles}/xml-sax-response ..' \
               -e 's/Makefile.PL/Makefile.PL < ..\/xml-sax-response/' \
               -e 's/\(.*\)&&$/\1/' \
         >> $Output
    ;;
    xorg-intel)
        GetCommands \
         | sed -e 's/enable-kms-only/enable-kms-only --libexecdir=\/usr\/lib/' \
               -e 's/\(.*\)&&$/\1/' \
         >> $Output
    ;;
    xorg-server)
       GetInternalCommands xorgservComms >> $Output
    ;;
    xorg-vmmouse)
        GetCommands \
         | sed -e '/without-hal-fdi-dir/,/without-hal-callouts-dir/d' \
               -e 's/--with-udev-rules-dir=\/lib/--with-udev-rules-dir=\/usr\/lib/' \
               -e 's/\(.*\)&&$/\1/' \
         >> $Output
    ;;
    xorg-wacom)
        if [ "$SYSTEMD" = yes ]; then
          GetInternalCommands xorgwacomComms >> $Output
        else
          GetInternalCommands xorgwacomnosysdComms >> $Output
        fi
    ;;
    $xproto|$xfont)
        GetXCommands \
         | sed -e 's/bash -e/set -e/' \
              -e '/for package in/ i cd $curdir' \
              -e '/.\/configure \$XORG_CONFIG/i\  for curFile in .\/*; do\n  permval=$(stat -c %a $curFile)\n  if [[ $permval -eq 555 || $permval -eq 444 ]]; then\n   chmod 755 $curFile\n  fi\n  done' \
              -e 's/.\/configure \$XORG_CONFIG/.\/configure \$XORG_CONFIG 2>\&1 | tee ..\/\${packagedir}-configure.log/' \
              -e 's/as_root make install/make install 2>\&1 | tee ..\/\${packagedir}-install.log/' \
              -e 's/as_root rm -rf \$packagedir/rm -rf \$packagedir/' \
              -e '/exit/d' \
              -e 's/\(.*\)&&$/\1/' \
         | awk '{
if( $1 == "make" && $2 == "")
  print "  "$1" 2>&1 | tee ../${packagedir}-make.log";
else
  print $0;
}' \
         >> $Output
    ;;
    xterm)
        GetCommands \
         | sed -e '/make install-ti/d' \
               -e '/cat/,/EOF/d' \
               -e 's/\(.*\)&&$/\1/' \
         >> $Output
    ;;
    yajl)
        GetInternalCommands yajlComms >> $Output
    ;;
    zenity)
        GetInternalCommands basicComms \
         | sed -e 's/\.\/configure/\.\/autogen.sh/' \
         >> $Output
    ;;
    zip)
        if $useDESTDIR; then
          GetCommands \
           | sed -e 's/make prefix=\/usr MANDIR=\/usr\/share\/man\/man1/make prefix="${CUR_DIR}"\/usr MANDIR=${CUR_DIR}\/usr\/share\/man\/man1/' \
                 -e 's/\(.*\)&&$/\1/' \
           >> $Output
        else
          GetCommands \
           | sed -e 's/\(.*\)&&$/\1/' \
           >> $Output
        fi
    ;;
    *)
        GetCommands \
         | sed -e 's/\(.*\)&&$/\1/' \
         >> $Output
        return_val=$?
        if [ $return_val -eq $RETURN_PARAM ]; then # no build file
          echo "No build file available in ${LFS}${srcrootdir}/pkguser"
          echo "Please place the build file there"
          exit 1
        fi
    ;;
esac
} # end WriteScript
#
cleanstart () {
for Script in ${Section}.sh; do
  for loc in $LFS ~/; do
    if [ -e $loc/$Script ]; then rm $loc/$Script;fi
  done
done
} #end cleanstart
#
PkgDepend () {
cat >> $Output << "EOF"
PkgDepend () {
declare -a ndep
declare -a tdep
foundDep=false
dpName=${FuncName}dep # package dependencies
depfile=${blfsfiles}/dependencies/${Section}-dependencies
if [ ! -e $depfile ]; then
 return $RETURN_PARAM
else
  while read depline
  do
    case $depline in
      $dpName*)
        foundDep=true
        ic=0
        ndep=""
        tdep=""
        stordep=""
        ndeps=($depline)
        for (( i=1; i<${#ndeps[@]}-1; i++ )); do
          tdep[ic++]=${ndeps[i]}
        done
      ;;
    esac
  done < $depfile
  if ! $foundDep; then # no deps found for this package
    return $RETURN_NOTSET
  else
    DepRtrn=(${tdep[@]})
    return 0
  fi
fi
} # end PkgDepend
EOF
} # end PkgDepend
#
testDeps () {
cat >> $Output << "EOF"
testDeps () {
declare -a tstDeps=("${!1}")
declare -a stordep
countdep=0
for (( k=0; k<${#tstDeps[@]}; k++ )); do
  pfile=$(echo ${tstDeps[k]} | awk 'BEGIN {FS="/"}{print $2}')
  case $pfile in
    systemd_gudev)
        tstDeps[k]="core/systemd"
    ;;
    dbus_launch)
        if [ "$SYSTEMD" = yes ]; then
          tstDeps[k]="core/dbus"
        else
          tstDeps[k]="sysutils/dbus"
        fi
    ;;
    eudev_gudev)
        tstDeps[k]="core/eudev"
    ;;
  esac
  testfile=${PKGUSERDIR}/${tstDeps[k]}/.${pfile}
  if [ ! -f $testfile ]; then 
    if [ "$SYSTEMD" = yes ]; then 
      case $pfile in 
         libcap)
           : # already installed in lfs
         ;;
         consolekit|eudev_gudev)
           : # not present in a systemd system
         ;;
         *)
           stordep[countdep++]=${tstDeps[k]} # package dependency not met
         ;;
      esac
    else
      case $pfile in
         netctl|systemd_gudev)
           : # not required if not systemd
         ;;
         *) 
           stordep[countdep++]=${tstDeps[k]}
         ;;
      esac
    fi
  fi
done
if [ $countdep -gt 0 ]; then # some dependencies not met
  rtrnDepNotMet=(${stordep[@]})
  return $RETURN_DEPNOTMET
else
  return $RETURN_ALLDEPSMET # all dependencies met
fi
} # end testDeps
EOF
} # end testDeps
#
numcharInstall () { # get the number of chars in the install group
cat >> $Output << "EOF"
numcharInstall () {
group="/etc/group"
grpname=$1
while read line; do
  case $line in
    $grpname*)
         numchars=$( printf $line | wc -c ) # should be <= 2048
         return 0
    ;;
  esac
done < $group
} # end numcharInstall
EOF
} # end numcharInstall
#
setMime () {
cat >> $Output << "EOF"
setMime () {
# sets everything under /usr/share/mime to owner $1
onr=$1
chown $onr:$onr /usr/share/mime/{aliases,generic-icons,globs,globs2,icons,magic,mime.cache,subclasses,treemagic,types,version,XMLnamespaces}
chown -R $onr:$onr /usr/share/mime/{application,audio,image,inode,message,model,multipart,packages,text,video,x-content,x-epoc}
} # end setMime
EOF
} # end setMime
#
SetXorgVars () {
mkdir -p ${LFS}/etc/profile.d
if [ ! -e ${LFS}/etc/profile.d/xorg.sh ]; then
  xorgsh="${LFS}/etc/profile.d/xorg.sh"
  echo "XORG_PREFIX=$XORG_PREFIX" >> $xorgsh
  cat >> $xorgsh << "EOF"
XORG_CONFIG="--prefix=$XORG_PREFIX \
             --sysconfdir=/etc \
             --mandir=$XORG_PREFIX/share/man \
             --localstatedir=/var"
VDPAU_DRIVER=nouveau
export XORG_PREFIX XORG_CONFIG VDPAU_DRIVER
EOF
  chmod 644 $xorgsh
  if [ "$XORG_PREFIX" != "/usr" ]; then
    cat >> $xorgsh << "EOF"
pathappend $XORG_PREFIX/bin PATH
pathappend $XORG_PREFIX/lib/pkgconfig PKG_CONFIG_PATH
pathappend $XORG_PREFIX/share/pkgconfig PKG_CONFIG_PATH
export PATH PKG_CONFIG_PATH
EOF
    echo "${XORG_PREFIX}/lib" >> ${LFS}/etc/ld.so.conf
    sed 's@/usr/X11R6@<PREFIX>@g' -i ${LFS}/etc/man_db.conf
    case $(uname -m) in
        x86_64)
             install -v -m755 -d ${LFS}$XORG_PREFIX
             install -v -m755 -d ${LFS}$XORG_PREFIX/lib
             ln -s lib ${LFS}$XORG_PREFIX/lib64
        ;;
    esac
  fi
fi
} # end SetXorgVars
#
altFileNames () {
IFS=' '
declare -a pkgnm=""
declare -a srcnm=""
declare -a cmdnm=""
secFiles=${BLFSBUILDFILES}/files/${1}-files
if [ ! -e $secFiles ]; then
  return $RETURN_PARAM
else
  ic=0
  while read n1 n2 n3 n4; do
# don't include a line if it begins with #
    case $n1 in
       \#*)
           : # do nothing
       ;;
       *)
           pkgnm[ic++]=$n2
           srcnm[ic++]=$n3
           cmdnm[ic++]=${n4%??} # strip last 2 chars
       ;;
    esac
  done < $secFiles
fi
rtrnPkg=(${pkgnm[@]})
rtrnSrc=(${srcnm[@]})
rtrnCmd=(${cmdnm[@]})
return 0
} # end altFileNames
#
pkgInSection () {
pkgToTest=$1
InSection=$2
pkgFiles=${BLFSBUILDFILES}/files/${InSection}-files
if [ ! -e $pkgFiles ]; then # try and get the section-files
  if [ ! -e ${LFS}/${blfsfilesTar} ]; then
    echo "The file $blfsfilesTar should be in $LFS"
    echo "Please place it there in order to continue"
    echo "Exiting now"
    exit 1
  else # tar file exists so unpack it
    if [ ! -d ${LFS}${blfsBuildFiles} ]; then 
      install -v -m0755 -d ${LFS}${blfsBuildFiles}
    fi
    if [ -d $BLFSBUILDFILES ]; then
      rm -rf $BLFSBUILDFILES
    fi
    unpackBLFSfiles # files define pkg names and dependencies
  fi
else # section files exist - but first test if tar file present
  if [ -e ${LFS}/${blfsfilesTar} ]; then # ask if want to replace the build files
    echo "**Warning** - $blfsfilesTar present and $BLFSBUILDFILES exists."
    echo "Replace $BLFSBUILDFILES with the contents of $blfsfilesTar? (Y/n)"
    read reply
      case $reply in
         [nN]|[nN][Oo])
            echo "okay - continuing with existing $BLFSBUILDFILES"
         ;;
         *)
            echo "okay replacing $BLFSBUILDFILES"
            rm -rf ${LFS}${blfsBuildFiles}
            mkdir -pv ${LFS}${blfsBuildFiles}
            unpackBLFSfiles
         ;;
      esac
  fi 
fi
# test again if the section-files exist
if [ ! -e $pkgFiles ]; then
  echo "Couldn't find $pkgFiles"
  if [ "$InSection" = all ]; then
    echo "You've requested ALL sections"
    echo "You must specify the section that contains $pkgToTest and"
  fi
  echo "make sure it's in $BLFSBUILDFILES"
  exit 1
fi
while read aline; do
pkg_is=$(echo $aline | awk -F= '{print $1}')
  case $pkg_is in
     $pkgToTest)
          return 0
     ;;
  esac
done < $pkgFiles
return $RETURN_PARAM
} # end pkgInSection
#
delElement () { # deletes an element from a specified position in an array
cat >> $Output << "EOF"
delElement () {
# array input in $1, position to delete is $2
declare -a arrayIn=("${!1}")
pos=$2
arrayIn=(${arrayIn[@]:0:$pos} ${arrayIn[@]:$(($pos + 1))})
rtrDelArray=(${arrayIn[@]})
} # end delElement
EOF
} # end delElement
#
delElementPattern () { # deletes an array element that matches a pattern
cat >> $Output << "EOF"
delElementPattern () {
# array input in $1, pattern to delete is $2
declare -a arrayInput=("${!1}")
patToMatch=$2
declare -a delPatArray=( ${arrayInput[@]/$patToMatch*/} )
rtrPlessArray=(${delPatArray[@]})
} # end delElementPattern
EOF
} # end delElementPattern
#
subElementPattern () { # substitutes a pattern with a given string
cat >> $Output << "EOF"
subElementPattern () {
# array input in $1, pattern to substitute is $2, string is $3
declare -a arrayInput=("${!1}")
patToMatch=$2
subString=$3
declare -a subPatArray=( ${arrayInput[@]/$patToMatch*/$subString} ) # honour white space too
rtrPlessArray=(${subPatArray[@]})
} # end subElementPattern
EOF
} # end subElementPattern
#
min2 () { # return min of two integers
if [ -z "$2" ]
then
  return $RETURN_PARAM
fi
if [ "$1" -eq "$2" ]
then
  return $1
else
  if [ "$1" -lt "$2" ]
  then
    return $1
  else
    return $2
  fi
fi
} # end min2
#
# Return the value of an operation e.g addition: z=$(float_val "$x + $y")
float_val () {
     echo | awk 'END { print '"$1"'; }'
}
#
# Return status code of a comparison e.g. float_test "$x > $y" && num=$x
# or float_test "$x < $y" && num=$y to find greater of two floating point numbers
float_test () {
echo "float_test () {
     echo | awk 'END { exit ( !( '\"\$1\"')); }'
}" >> $Output
}
#
Start () {
declare -a PkgName=("${!2}")
declare -a SrcName=("${!3}")
declare -a CommandName=("${!4}")
Section=$1
secFiles=${BLFSBUILDFILES}/files/${Section}-files
cursection=$Section
if ! $single_package; then
  cleanstart
  Output=${LFS}/${Section}.sh
else
  if [ -e ${LFS}/${SINGLE_PACKAGE}.sh ]; then rm ${LFS}/${SINGLE_PACKAGE}.sh; fi
  Output=${LFS}/${SINGLE_PACKAGE}.sh
fi
Getxmlsec $Section
if [[ "$Section" == x ]]; then SetXorgVars; fi
REPODIR=${BLFS_BOOK_LOC_DIR}/$version
Header
if ! $as_root; then
  pkguser # need it if installing as a package user
  if [ "$Section" = xfcegnome ]; then updateSection; fi
  numcharInstall # check that numchars in current install line in /etc/group is < 2048
fi
if [ "$Section" != blfs ]; then
  PkgDepend
  testDeps
fi
if [[ "$GNOME_OR_XFCE" = xfce ]]; then
  if [[ "$Section" = networks || "$Section" = sysutils || "$Section" = x || "$Section" = xlibs || "$Section" = multimedia ]]; then
  delElementPattern
  fi
  if [[ "$Section" == xlibs || "$Section" == networks || "$Section" == multimedia ]]; then subElementPattern; fi # for webkitgtk and geoclue and pulseaudio, if xfce installed
fi
if [[ "$Section" == gnomeplatform || "$Section" == gnomedesktop || "$Section" == gnomeapps || "$Section" == xfcegnome ]]; then
  setMime
fi
if $useDESTDIR; then
  cleanPkgDir
  SetPkgVers
  createPkgfile
fi
pkgusernum=0
for (( pkgn=0; pkgn<${#PkgName[@]}; pkgn++ )); do
  if $single_package; then # find the package
    if [[ "$SINGLE_PACKAGE" == "${PkgName[$pkgn]}" ]]; then # found the package
      pkgname=${PkgName[pkgn]}
      FuncName=$( echo $pkgname | sed -e s/-//g -e s/_//g )
      srcname=${SrcName[pkgn]}
      commandname=${CommandName[pkgn]}
      if [[ "$cursection" != "$Section" ]]; then # section changed - reset
        cursection=$Section
      fi
      Output=$LFS/${SINGLE_PACKAGE}.sh
      case $pkgname in
        consolekit) # not present if using systemd
           if [ "$SYSTEMD" = no ]; then
             Function
           else
             echo "To install consolekit, set SYSTEMD=no"
             exit 1
           fi
        ;;
        dbus)
           if [ "$SYSTEMD" = yes ]; then # dbus already installed in core
             cursection=core
             if ! $as_root; then updatePkgUser; fi
           fi
           Function
        ;;
        eudev|libcap|shadow|systemd) # these are core LFS
           cursection=core
           if ! $as_root; then updatePkgUser; fi
           Function
        ;;
        jdkbin)
           srcname=${srcname}${jdkvers}
           Function
        ;;
        libevdev|libvdpau)
           if [ "$SYSTEMD" = no ]; then # this pkg is in x
             commandname=$xdriver
           fi
           Function
        ;;
        *)
           Function
        ;;
      esac
      break
    fi
  elif [[ "$Section" = browser ]]; then
    if [[ "$BROWSER" == "${PkgName[$pkgn]}" ]]; then
      pkgname=${PkgName[pkgn]}
      FuncName=$( echo $pkgname | sed -e s/-//g -e s/_//g )
      srcname=${SrcName[pkgn]}
      commandname=${CommandName[pkgn]}
      Output=$LFS/${Section}.sh
      Function
      break
    fi
  else # entire section, not single package
    pkgname=${PkgName[pkgn]}
    FuncName=$( echo $pkgname | sed -e s/-//g -e s/_//g )
    srcname=${SrcName[pkgn]}
    commandname=${CommandName[pkgn]}
    if [[ "$cursection" != "$Section" ]]; then # section changed - reset
      cursection=$Section
    fi
    Output=$LFS/${Section}.sh
    case $pkgname in
       consolekit) # not present if using systemd
          if [ "$SYSTEMD" = no ]; then
            Function
          fi
       ;;
       dbus|systemd) # installed in core when systemd used
          if [ "$SYSTEMD" = yes ]; then # dbus already installed in core
            cursection=core
            if ! $as_root; then updatePkgUser; fi
          fi
          Function
       ;;
       dconf|gconf|gcr|libsecret|polkit-gnome)
          if [ "$cursection" = xfcegnome ]; then # set the correct section for package
            cursection=gnomeplatform
          fi
          Function
       ;;
       eudev|libcap|shadow) # installed in core LFS
          cursection=core
          if ! $as_root; then updatePkgUser; fi
          Function
       ;;
       gvfs|gnome-keyring|adwaita-icn-thm)
          if [ "$cursection" = xfcegnome ]; then # set the correct section for package
            cursection=gnomedesktop
          fi
          Function
       ;;
       jdkbin)
          if $jdkoracle; then srcname=${srcname}${jdkvers}-; fi
          Function
       ;;
       libevdev|libvdpau)
          if [ "$SYSTEMD" = no ]; then # this pkg is in x
            commandname=$xdriver
          fi
          Function
       ;;
       netwrk-mngr-app)
          if [ "$cursection" = xfcegnome ]; then # set the correct section for package
            cursection=gnomeapps
          fi
          Function
       ;;
       *)
          Function
       ;;
    esac
  fi
done
#
tmpFile=/tmp/$(date +%d%B%Y_%H:%M)tmp.file
awk '/_\ \(\)\ \{/ {print $1}' $Output >> $tmpFile
#
# this next section allows you to change the order of, add or remove, a package
#
while read eachFunc; do
  case $eachFunc in
      colordgtk_|farstream_|geoclue2_|gtkvnc_|ibus_|libinput_|libmbim_|libnice_|liboauth_|libpciaccess_|libpwquality_|libqmi_|libxkbcommon_|modemmanager_|py2atspi_|py3atspi_|uhttpmock_|wayland_|weston_) # don't use if SYSTEMD is no
          if [ "$SYSTEMD" = yes ]; then echo $eachFunc >> $Output; fi
      ;;
      shadow_|libcap_)
          echo $eachFunc >> $Output
          if ! $as_root; then echo "pkguser_" >> $Output; fi
      ;;
      eudev_)
          if [ "$SYSTEMD" = no ]; then
            echo $eachFunc >> $Output
            if ! $as_root; then echo "pkguser_" >> $Output; fi
          fi 
      ;;
      dbus_)
          if [ "$SYSTEMD" = yes ]; then # already installed in core
            echo $eachFunc >> $Output
            if ! $as_root; then echo "pkguser_" >> $Output; fi
          else # is installed in sysutils
            echo $eachFunc >> $Output
          fi
      ;;
      firewall_|consolekit_)
          if [ "$SYSTEMD" = no ]; then
            echo $eachFunc >> $Output
          fi 
      ;;
      systemd_) # use if $SYSTEMD = yes
          if [ "$SYSTEMD" = yes ]; then
            echo $eachFunc >> $Output
            if ! $as_root; then echo "pkguser_" >> $Output; fi
          fi
      ;;
      dconf_|gconf_|gcr_|libsecret_|polkitgnome_)
          if [ "$Section" = xfcegnome ]; then
            echo "updateSection gnomeplatform" >> $Output
            echo $eachFunc >> $Output
          else
            echo $eachFunc >> $Output
          fi
      ;;
      gvfs_|gnomekeyring_|adwaitaicnthm_)
          if [ "$Section" = xfcegnome ]; then
            echo "updateSection gnomedesktop" >> $Output
            echo $eachFunc >> $Output
          else
            echo $eachFunc >> $Output
          fi
      ;;
      netwrkmngrapp_)
          if [ "$Section" = xfcegnome ]; then
            echo "updateSection gnomeapps" >> $Output
            echo $eachFunc >> $Output
          else
            echo $eachFunc >> $Output
          fi
      ;;
      *)
          echo $eachFunc >> $Output
      ;;
  esac
done < $tmpFile
rm $tmpFile
chmod 700 $Output
if $single_package; then
  fpkgnme=${LFS}/${SINGLE_PACKAGE}.sh
else
  fpkgnme=${LFS}/${Section}.sh
fi
sed -e 's@BuildLog='$LFS'@BuildLog=@' -i $fpkgnme
# remove any test statements and the root and edit comments
sed -e '/make check/d' \
    -e '/make -j1 check/d' \
    -e '/make -j1 test/d' \
    -e '/make -k check/d' \
    -e '/make -kj1 check/d' \
    -e '/make test/d' \
    -e '/\# End root commands/d' \
    -e '/\# Run this as root/d' \
    -e '/\# This block must be edited to suit your needs./d' \
    -e '/\# End of editable block./d' \
    -i $fpkgnme
# if using DESTDIR, change install commands to install to a specified DIR
if $useDESTDIR; then
  sed -e 's/make install/make DESTDIR="$CUR_DIR" install/' -i $fpkgnme # make install
  sed -e 's/install --optimize/install --root="$CUR_DIR" --optimize/' -i $fpkgnme # py module install
  case $Section in
     libraries)
       sed -e 's/chmod -v 755 \/usr\/lib\/libpt.so/chmod -v 755 ${CUR_DIR}\/usr\/lib\/libpt.so/' -i $fpkgnme # ptlib
       sed -e 's/bootstrap.sh --prefix=\/usr/bootstrap.sh --with-toolset=gcc --with-icu --with-python=\/usr\/bin\/python2/' \
           -e '/b2 install threading/i\  install -dm755 ${CUR_DIR}\/usr' \
           -e 's/b2 install/b2 --prefix=${CUR_DIR}\/usr install/' -i $fpkgnme # for boost
       sed -e '/install -v -m644 fc-/i\  mkdir -pv ${CUR_DIR}\/usr\/share\/man\/{man1,man3,man5}' \
           -e 's/1          \/usr\/share\/man\/man1/1          ${CUR_DIR}\/usr\/share\/man\/man1/' \
           -e 's/3           \/usr\/share\/man\/man3/3           ${CUR_DIR}\/usr\/share\/man\/man3/' \
           -e 's/fonts-conf.5  \/usr\/share\/man\/man5/fonts-conf.5  ${CUR_DIR}\/usr\/share\/man\/man5/' \
           -i $fpkgnme # for fontconfig
       sed -e '/install -v -m 755 scripts\/ispell/i\mkdir -pv ${CUR_DIR}\/usr\/bin' \
           -e 's/ln -svfn aspell-0.60 \/usr/ln -svfn aspell-0.60 ${CUR_DIR}\/usr/' \
           -e 's/install -v -m 755 scripts\/ispell \/usr/install -v -m 755 scripts\/ispell ${CUR_DIR}\/usr/' \
           -e 's/install -v -m 755 scripts\/spell \/usr/install -v -m 755 scripts\/spell ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for aspell
       sed -e 's/\/usr\/include\/js-17.0/${CUR_DIR}\/usr\/include\/js-17.0/' \
           -e 's/\/usr\/lib\/libmozjs-17.0/${CUR_DIR}\/usr\/lib\/libmozjs-17.0/' \
           -e 's/\/usr\/lib\/pkgconfig\/mozjs-17.0.pc/${CUR_DIR}\/usr\/lib\/pkgconfig\/mozjs-17.0.pc/' \
           -i $fpkgnme # for js
       sed -e 's/\/usr\/include\/mozjs-24/${CUR_DIR}\/usr\/include\/mozjs-24/' \
           -e 's/\/usr\/lib\/libmozjs-24/${CUR_DIR}\/usr\/lib\/libmozjs-24/' \
           -e 's/\/usr\/lib\/pkgconfig\/mozjs-24.pc/${CUR_DIR}\/usr\/lib\/pkgconfig\/mozjs-24.pc/' \
           -i $fpkgnme # for js2
       sed -e 's/chmod -v 755 \/usr\/lib\/libexiv2.so/chmod -v 755 ${CUR_DIR}\/usr\/lib\/libexiv2.so/' \
           -i $fpkgnme # for exiv2
       sed -e 's/make prefix=\/usr install/make prefix=\/usr DESTDIR="$CUR_DIR" install/' \
           -i $fpkgnme # for poppler
       sed -e '/install -m755 libglade-convert/i\  mkdir -pv ${CUR_DIR}\/usr\/bin' \
           -e 's/libglade-convert \/usr/libglade-convert ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for libglade
       sed -e ':1;s/make docdir\(.*install\)/make DESTDIR="$CUR_DIR" docdir\1/;t1' -i $fpkgnme
       sed -e 's/cp apps\/lib\/\*\.h \/usr\/include\/openobex/cp apps\/lib\/\*\.h ${CUR_DIR}\/usr\/include\/openobex/' \
           -e 's/libopenobex-apps-common.a \/usr\/lib\/libopenobex/libopenobex-apps-common.a ${CUR_DIR}\/usr\/lib\/libopenobex/' \
           -i $fpkgnme # for openobex
     ;;
     multimedia)
       sed -e ':1;s/make pkghtmldir\(.*install\)/make DESTDIR="$CUR_DIR" pkghtmldir\1/;t1' \
           -i $fpkgnme # for lame
       sed -e 's/install -D -m644 90-alsa-restore.rules \/usr\/lib\/udev\/rules.d/install -D -m644 90-alsa-restore.rules ${CUR_DIR}\/usr\/lib\/udev\/rules.d/' \
           -i $fpkgnme # for alsa-utils
       sed -e ':1;s/make htmldocdir\(.*install\)/make DESTDIR="$CUR_DIR" htmldocdir\1/;t1' \
           -i $fpkgnme # for libsndfile
       sed -e ':1;s/make pkgdocdir\(.*install\)/make DESTDIR="$CUR_DIR" pkgdocdir\1/;t1' \
           -i $fpkgnme # for soundtouch
#       sed -e ':1;s/make prefix=\(.*install\)/make DESTDIR="$CUR_DIR" prefix=\1/;t1' \
#           -i $fpkgnme # for dvdrw-tools
       sed -e 's/chmod -v 755 \/usr\/lib\/libxvidcore.so/chmod -v 755 ${CUR_DIR}\/usr\/lib\/libxvidcore.so/' \
           -i $fpkgnme # for xvid
       sed -e '/cat > \/usr\/lib\/pkgconfig\/mad.pc/i install -m755 -d ${CUR_DIR}\/usr\/lib\/pkgconfig' \
           -e 's/cat > \/usr\/lib\/pkgconfig\/mad.pc/cat > ${CUR_DIR}\/usr\/lib\/pkgconfig\/mad.pc/' \
           -i $fpkgnme # for libmad
       sed -e '/cp liba52\/a52_internal.h/i\mkdir -pv ${CUR_DIR}\/usr\/include\/a52dec' \
           -e 's/cp liba52\/a52_internal.h \/usr/cp liba52\/a52_internal.h ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for liba52
       sed -e 's/chmod -v 644 \/usr\/lib\/libopal/chmod -v 644 ${CUR_DIR}\/usr\/lib\/libopal/' \
           -i $fpkgnme # for opal
       sed -e 's/mkdir -pv \/usr\/lib\/udev\/hwdb.d/mkdir -pv ${CUR_DIR}\/usr\/lib\/udev\/hwdb.d/' \
           -e 's/mkdir -pv \/usr\/lib\/udev\/rules.d/mkdir -pv ${CUR_DIR}\/usr\/lib\/udev\/rules.d/' \
           -e 's/LD_LIBRARY_PATH=\/usr\/lib\${LD_LIBRARY_PATH:/LD_LIBRARY_PATH=${CUR_DIR}\/usr\/lib\${LD_LIBRARY_PATH:/' \
           -e 's/CAMLIBS=\/usr\/lib\/libgphoto2/CAMLIBS=${CUR_DIR}\/usr\/lib\/libgphoto/' \
           -e 's/\/usr\/lib\/libgphoto2\/print-camera-list/${CUR_DIR}\/usr\/lib\/libgphoto2\/print-camera-list/' \
           -e 's/\/usr\/lib\/udev\/hwdb.d\/20-gphoto.hwdb/${CUR_DIR}\/usr\/lib\/udev\/hwdb.d\/20-gphoto.hwdb/' \
           -e 's/\/usr\/lib\/udev\/rules.d\/40-gphoto.rules/${CUR_DIR}\/usr\/lib\/udev\/rules.d\/40-gphoto.rules/' \
           -e 's/\/usr\/include\/gphoto2\/gphoto2/${CUR_DIR}\/usr\/include\/gphoto2\/gphoto2/' \
           -e '/rm -rf \/opt\/qt4/d' \
           -i $fpkgnme # for libgphoto2
       sed -e 's/make -C docs\/plugins install-data/make -C docs\/plugins DESTDIR="$CUR_DIR" install-data/' \
           -i $fpkgnme # for gst-plgns-ugly0, gst-plgns-good0
       sed -e ':1;s/make docdir\(.*install\)/make DESTDIR="$CUR_DIR" docdir\1/;t1' -i $fpkgnme # libcanberra, vlc
       sed -e 's/\/etc\/dbus-1\/system.d\/pulseaudio-system.conf/${CUR_DIR}\/etc\/dbus-1\/system.d\/pulseaudio-system.conf/' \
           -e 's/-i \/etc\/pulse\/default.pa/-i ${CUR_DIR}\/etc\/pulse\/default.pa/' \
           -i $fpkgnme # for pulseaudio
       sed -e 's/tools\/qt-faststart \/usr/tools\/qt-faststart ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for ffmpeg
       sed -e 's/chmod 644 \/usr\/lib\/libespeak.a/chmod 644 ${CUR_DIR}\/usr\/lib\/libespeak.a/' \
           -i $fpkgnme # for espeak
     ;;
     security)
       sed -e 's/xtables-multi \/usr/xtables-multi ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for iptables
       sed -e 's/chmod   -v   755 \/usr\/lib\/lib{hogweed,nettle/chmod   -v   755 ${CUR_DIR}\/usr\/lib\/lib{hogweed,nettle/' \
           -i $fpkgnme # for nettle
       sed -e 's/\/usr\/share\/dict\/cracklib-words/${CUR_DIR}\/usr\/share\/dict\/cracklib-words/' \
           -e 's/\/usr\/share\/dict\/words/${CUR_DIR}\/usr\/share\/dict\/words/' \
           -e 's/install -v -m755 -d      \/usr\/lib\/cracklib/install -v -m755 -d      ${CUR_DIR}\/usr\/lib\/cracklib/' \
           -e 's/\/usr\/share\/dict\/cracklib-extra-words/${CUR_DIR}\/usr\/share\/dict\/cracklib-extra-words/' \
           -i $fpkgnme # for cracklib
       sed -e 's/install -v -m755 -d \/etc\/pam.d/install -v -m755 -d ${CUR_DIR}\/etc\/pam.d/' \
           -i $fpkgnme # for linux-pam
       sed -e 's/\/etc\/default\/useradd/${CUR_DIR}\/etc\/default\/useradd/' \
           -e 's/\/etc\/login.defs/${CUR_DIR}\/etc\/login.defs/g' \
           -e 's/cat > \/etc\/pam.d\/login/cat > ${CUR_DIR}\/etc\/pam.d\/login/' \
           -e 's/cat > \/etc\/pam.d\/passwd/cat > ${CUR_DIR}\/etc\/pam.d\/passwd/' \
           -e 's/cat > \/etc\/pam.d\/su <</cat > ${CUR_DIR}\/etc\/pam.d\/su <</' \
           -e 's/cat > \/etc\/pam.d\/chage/cat > ${CUR_DIR}\/etc\/pam.d\/chage/' \
           -e 's/install -v -m644 \/etc\/pam.d\/chage/install -v -m644 ${CUR_DIR}\/etc\/pam.d\/chage/' \
           -e 's/\/etc\/pam.d\/${PROGRAM}/${CUR_DIR}\/etc\/pam.d\/${PROGRAM}/' \
           -e 's/\/etc\/login.access/${CUR_DIR}\/etc\/login.access/g' \
           -e 's/\/etc\/limits/${CUR_DIR}\/etc\/limits/g' \
           -i $fpkgnme # for shadow
       sed -e 's/\/lib\/security\/pam_cap.so/${CUR_DIR}\/lib\/security\/pam_cap.so/' \
           -i $fpkgnme # for libcap
       sed -e 's/\/usr\/lib\/sudo\/libsudo_util/${CUR_DIR}\/usr\/lib\/sudo\/libsudo_util/' \
           -e '/cat > \/etc\/pam.d\/sudo <</i mkdir -pv ${CUR_DIR}\/etc\/pam.d' \
           -e 's/cat > \/etc\/pam.d\/sudo <</cat > ${CUR_DIR}\/etc\/pam.d\/sudo <</' \
           -e 's/chmod 644 \/etc\/pam.d\/sudo/chmod 644 ${CUR_DIR}\/etc\/pam.d\/sudo/' \
           -i $fpkgnme # for sudo
       sed -e 's/mkdir -pv \/usr\/lib\/systemd\/system\/{sockets/mkdir -pv ${CUR_DIR}\/usr\/lib\/systemd\/system\/{sockets/' \
           -e 's/ln -sf ..\/dm-event.socket \/usr\/lib\/systemd\/system/ln -sf ..\/dm-event.socket ${CUR_DIR}\/usr\/lib\/systemd\/system/' \
           -e 's/ln -sf ..\/lvm2-lvmetad.socket \/usr\/lib\/systemd\/system/ln -sf ..\/lvm2-lvmetad.socket ${CUR_DIR}\/usr\/lib\/systemd\/system/' \
           -i $fpkgnme # for lvm2
       sed -e 's/install -v -m755 contrib\/ssh-copy-id \/usr\/bin/install -v -m755 contrib\/ssh-copy-id ${CUR_DIR}\/usr\/bin/' \
           -e 's/contrib\/ssh-copy-id.1 \/usr\/share\/man/contrib\/ssh-copy-id.1 ${CUR_DIR}\/usr\/share\/man/' \
           -e 's/>> \/etc\/ssh\/sshd_config/>> ${CUR_DIR}\/etc\/ssh\/sshd_config/' \
           -e '/\/etc\/pam.d\/login > \/etc\/pam.d\/sshd/d' \
           -e '/chmod 644 \/etc\/pam.d\/sshd/d' \
           -i $fpkgnme # for openssh
       sed -e 's/cat > \/etc\/pam.d\/polkit-1/cat > ${CUR_DIR}\/etc\/pam.d\/polkit-1/' \
           -i $fpkgnme # for polkit
       sed -e 's/mkdir -pv \/usr\/{bin,include,lib\/pkgconfig}/mkdir -pv ${CUR_DIR}\/usr\/{bin,include,lib\/pkgconfig}/' \
           -e 's/install -v -m755 Linux\*\/lib\/\*.so              \/usr\/lib/install -v -m755 Linux\*\/lib\/\*.so              ${CUR_DIR}\/usr\/lib/' \
           -e 's/install -v -m644 Linux\*\/lib\/{\*.chk,libcrmf.a} \/usr\/lib/install -v -m644 Linux\*\/lib\/{\*.chk,libcrmf.a} ${CUR_DIR}\/usr\/lib/' \
           -e 's/\/usr\/include\/nss/${CUR_DIR}\/usr\/include\/nss/' \
           -e 's/{certutil,nss-config,pk12util} \/usr\/bin/{certutil,nss-config,pk12util} ${CUR_DIR}\/usr\/bin/' \
           -e 's/nss.pc  \/usr\/lib\/pkgconfig/nss.pc  ${CUR_DIR}\/usr\/lib\/pkgconfig/' \
           -i $fpkgnme # for nss
       sed -e 's/install -v -dm700 \/var\/lib\/sasl/mkdir -pv ${CUR_DIR}\/var\/lib\/sasl/' \
           -i $fpkgnme # for cyrus-sasl
       sed -e 's/ln -svf \${f}2.1 \/usr\/share\/man\/man1\/\$f.1/ln -svf \${f}2.1 ${CUR_DIR}\/usr\/share\/man\/man1\/\$f.1/' \
           -e 's/ln -svf \${f}2   \/usr\/bin\/\$f/ln -svf \${f}2   ${CUR_DIR}\/usr\/bin\/\$f/' \
           -i $fpkgnme # for gnupg
       sed -e 's/chmod -v 755 \/usr\/lib\/lib\$LIBRARY.so/chmod -v 755 ${CUR_DIR}\/usr\/lib\/lib\$LIBRARY.so/' \
           -e 's/install -dm 755 \/var\/lib\/krb5kdc/mkdir -pv ${CUR_DIR}\/var\/lib\/krb5kdc\nmkdir -pv ${CUR_DIR}\/etc/' \
           -e 's/config-files\/kdc.conf \/var\/lib\/krb5kdc\/kdc.conf/config-files\/kdc.conf ${CUR_DIR}\/var\/lib\/krb5kdc\/kdc.conf/' \
           -e 's/config-files\/krb5.conf \/etc\/krb5.conf/config-files\/krb5.conf ${CUR_DIR}\/etc\/krb5.conf/' \
           -e '/ac_check_krb5.m4 \/usr\/share\/aclocal/i install -m755 -d ${CUR_DIR}\/usr\/share\/aclocal' \
           -e 's/ac_check_krb5.m4 \/usr\/share\/aclocal/ac_check_krb5.m4 ${CUR_DIR}\/usr\/share\/aclocal/' \
           -e 's/chmod -v 755 \/bin\/ksu/chmod -v 755 ${CUR_DIR}\/usr\/bin\/ksu/' \
           -i $fpkgnme # for krb5
     ;;
     networks)
       sed -e 's/make -C client install/make -C client DESTDIR="$CUR_DIR" install/' \
           -e '/install -v -m755 client\/scripts\/linux/i mkdir -pv ${CUR_DIR}\/usr\/bin' \
           -e 's/install -v -m755 client\/scripts\/linux \/usr\/bin\/dhclient-script/install -v -m755 client\/scripts\/linux ${CUR_DIR}\/usr\/bin\/dhclient-script/' \
           -e 's/cat > \/etc\/dhcp\/dhclient.conf/cat > ${CUR_DIR}\/etc\/dhcp\/dhclient.conf/' \
           -e 's/install -v -dm 755 \/var\/lib\/dhclient/install -v -dm 755 ${CUR_DIR}\/var\/lib\/dhclient/' \
           -i $fpkgnme # for dhcp
       sed -e 's/make update/make DESTDIR=${CUR_DIR}\/usr update/' \
           -i $fpkgnme # for net-tools
       sed -e 's/echo ca-directory=\/etc\/ssl\/certs >> \/etc\/wgetrc/echo ca-directory=\/etc\/ssl\/certs >> ${CUR_DIR}\/etc\/wgetrc/' \
           -i $fpkgnme # for wget
       sed -e 's/ln -sv -f traceroute \/bin\/traceroute6/ln -sv -f traceroute ${CUR_DIR}\/usr\/bin\/traceroute6/' \
           -e 's/ln -sv -f traceroute.8 \/usr\/share\/man\/man8\/traceroute6.8/ln -sv -f traceroute.8 ${CUR_DIR}\/usr\/share\/man\/man8\/traceroute6.8/' \
           -i $fpkgnme # for traceroute
       sed -e 's/make prefix=\/usr install-whois/make prefix=\/usr BASEDIR="${CUR_DIR}" install-whois/' \
           -e 's/make prefix=\/usr install-mkpasswd/make prefix=\/usr BASEDIR="${CUR_DIR}" install-mkpasswd/' \
           -e 's/make prefix=\/usr install-pos/make prefix=\/usr BASEDIR="${CUR_DIR}" install-pos/' \
           -i $fpkgnme # for whois
       sed -e 's/make SBINDIR=\/usr\/bin install/make DESTDIR="${CUR_DIR}" SBINDIR=\/usr\/bin install/' \
           -i $fpkgnme # for iw
       sed -e '/cat > \/etc\/rsyncd.conf <</i mkdir -pv ${CUR_DIR}\/etc' \
           -e 's/cat > \/etc\/rsyncd.conf << /cat > ${CUR_DIR}\/etc\/rsyncd.conf << /' \
           -i $fpkgnme # for rsync
       sed -e 's/cp \/blfsBuildFiles\/blfsfiles\/conf-files\/squid.conf \/etc\/squid/cp \/blfsBuildFiles\/blfsfiles\/conf-files\/squid.conf ${CUR_DIR}\/etc\/squid/' \
           -e '/cat > \/etc\/pam.d\/squid << "SQUIDEOF"/i mkdir -pv ${CUR_DIR}\/etc\/pam.d' \
           -e 's/cat > \/etc\/pam.d\/squid << "SQUIDEOF"/cat > ${CUR_DIR}\/etc\/pam.d\/squid << "SQUIDEOF"/' \
           -i $fpkgnme # for squid
       sed -e '/scons PREFIX=\/usr install/i\  install -m755 -d ${CUR_DIR}\/usr' \
           -e 's/scons PREFIX=\/usr install/scons PREFIX=${CUR_DIR}\/usr install/' \
           -i $fpkgnme # for serf
       sed -e 's/\/usr\/share\/bash-completion\/completions\/netctl/${CUR_DIR}\/usr\/share\/bash-completion\/completions\/netctl/' \
           -e 's/\/usr\/share\/zsh\/site-functions\/_netctl/${CUR_DIR}\/usr\/share\/zsh\/site-functions\/_netctl/' \
           -i $fpkgnme # for netctl
       sed -e 's/examples\/smb.conf.default \/etc\/samba/examples\/smb.conf.default ${CUR_DIR}\/etc\/samba/' \
           -e 's/\/etc\/openldap\/schema/${CUR_DIR}\/etc\/openldap\/schema/' \
           -e '/ln -v -sf \/usr\/bin\/smbspool/i mkdir -pv ${CUR_DIR}\/usr\/lib\/cups\/backend' \
           -e 's/ln -v -sf \/usr\/bin\/smbspool \/usr/ln -v -sf \/usr\/bin\/smbspool ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for samba
       sed -e 's/cli,passphrase,supplicant} \/usr/cli,passphrase,supplicant} ${CUR_DIR}\/usr/' \
           -e 's/wpa_supplicant.conf.5 \/usr/wpa_supplicant.conf.5 ${CUR_DIR}\/usr/' \
           -e 's/cli,passphrase,supplicant}.8 \/usr/cli,passphrase,supplicant}.8 ${CUR_DIR}\/usr/' \
           -e 's/\/etc\/dbus-1\/system.d\/wpa_supplicant/${CUR_DIR}\/etc\/dbus-1\/system.d\/wpa_supplicant/' \
           -e 's/wpa_gui-qt4\/wpa_gui \/usr/wpa_gui-qt4\/wpa_gui ${CUR_DIR}\/usr/' \
           -e 's/docbook\/wpa_gui.8 \/usr/docbook\/wpa_gui.8 ${CUR_DIR}\/usr/' \
           -e 's/wpa_gui-qt4\/wpa_gui.desktop \/usr/wpa_gui-qt4\/wpa_gui.desktop ${CUR_DIR}\/usr/' \
           -e 's/wpa_gui-qt4\/icons\/wpa_gui.svg \/usr/wpa_gui-qt4\/icons\/wpa_gui.svg ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for wpa_supplicant
       sed -e 's/cat >> \/etc\/NetworkManager\/NetworkManager.conf/cat >> ${CUR_DIR}\/etc\/NetworkManager\/NetworkManager.conf/' \
           -i $fpkgnme # for networkmanager
     ;;
     programming)
       sed -e ':1;s/make docdir\(.*install\)/make DESTDIR="$CUR_DIR" docdir\1/;t1' -i $fpkgnme # for check
       sed -e 's/make -C doc install-pdf/make -C doc DESTDIR="$CUR_DIR" install-pdf/' -i $fpkgnme # for cvs
       sed -e 's/cp -v doc\/info\/\*         \/usr/cp -v doc\/info\/\*         ${CUR_DIR}\/usr/' \
           -e '/cp -v doc\/info/i install -m755 -d ${CUR_DIR}\/usr\/share\/info' \
           -e 's/install-info \/usr\/share\/info\/nasm.info \/usr/install-info ${CUR_DIR}\/usr\/share\/info\/nasm.info ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for nasm
       sed -e 's/chmod -v 755 \/usr\/lib\/libslang.so/chmod -v 755 ${CUR_DIR}\/usr\/lib\/libslang.so/' \
           -e 's/\/usr\/lib\/slang\/v2\/modules\/\*.so/${CUR_DIR}\/usr\/lib\/slang\/v2\/modules\/\*.so/' \
           -i $fpkgnme # for s-lang
       sed -e 's/ln -v -sf wish8.6 \/usr\/bin\/wish/ln -v -sf wish8.6 ${CUR_DIR}\/usr\/bin\/wish/' \
           -e 's/chmod -v 755 \/usr\/lib\/libtk8.6.so/chmod -v 755 ${CUR_DIR}\/usr\/lib\/libtk8.6.so/' \
           -i $fpkgnme # for tk
       sed -e 's/chmod -v 755 \/usr\/lib\/libpython2.7.so.1.0/chmod -v 755 ${CUR_DIR}\/usr\/lib\/libpython2.7.so.1.0/' \
           -i $fpkgnme # for python2
       sed -e 's/ln -v -sf tclsh8.6 \/usr\/bin\/tclsh/ln -v -sf tclsh8.6 ${CUR_DIR}\/usr\/bin\/tclsh/' \
           -e 's/chmod -v 755 \/usr\/lib\/libtcl8.6.so/chmod -v 755 ${CUR_DIR}\/usr\/lib\/libtcl8.6.so/' \
           -i $fpkgnme # for tcl
       sed -e '/install -v -m644 doc\/gc.man/i\  install -m755 -d ${CUR_DIR}/usr/share/man/man3' \
           -e 's/install -v -m644 doc\/gc.man \/usr/install -v -m644 doc\/gc.man ${CUR_DIR}\/usr/' \
           -e 's/ln -sfv gc_malloc.3 \/usr/ln -sfv gc_malloc.3 ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for gc
       sed -e 's/for file in \/usr\/lib\/lib{clang,LLVM,LTO}/for file in ${CUR_DIR}\/usr\/lib\/lib{clang,LLVM,LTO}/' \
           -e 's/install -v -dm755 \/usr\/lib\/clang-analyzer/install -v -dm755 ${CUR_DIR}\/usr\/lib\/clang-analyzer/' \
           -e 's/tools\/clang\/tools\/\$prog \/usr/tools\/clang\/tools\/\$prog ${CUR_DIR}\/usr/' \
           -e 's/clang-analyzer\/\$prog\/\$prog \/usr/clang-analyzer\/\$prog\/\$prog ${CUR_DIR}\/usr/' \
           -e 's/clang \/usr\/lib\/clang-analyzer/clang ${CUR_DIR}\/usr\/lib\/clang-analyzer/' \
           -e 's/mv -v \/usr\/lib\/clang-analyzer\/scan-build\/scan-build.1 \/usr/mv -v ${CUR_DIR}\/usr\/lib\/clang-analyzer\/scan-build\/scan-build.1 ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for llvm
       sed -e 's/mv \/usr\/share\/doc\/guile-2.0.11\//mv ${CUR_DIR}\/usr\/share\/doc\/guile-2.0.11\//' \
           -e '/mv \/usr\/lib\/libguile-\*-gdb.scm \/usr/i install -m755 -d ${PkgUserDir}\/${PkgName}\/usr\/share\/gdb\/auto-load\/usr\/lib' \
           -e 's/mv \/usr\/lib\/libguile-\*-gdb.scm \/usr/mv ${PkgUserDir}\/${PkgName}\/usr\/lib\/libguile-\*-gdb.scm ${PkgUserDir}\/${PkgName}\/usr/' \
           -i $fpkgnme # for guile
       sed -e 's/chmod -v 755 \/usr\/lib\/libpython3/chmod -v 755 ${CUR_DIR}\/usr\/lib\/libpython3/' \
           -e 's/install -v -m755 -d \/usr\/share\/doc\/python-\${Python3vers/install -v -m755 -d ${CUR_DIR}\/usr\/share\/doc\/python-\${Python3vers/' \
           -e 's/-C \/usr\/share\/doc\/python-3.4.3\/html/-C ${CUR_DIR}\/usr\/share\/doc\/python-3.4.3\/html/' \
           -i $fpkgnme # for python3
       sed -e 's/install --prefix=\/usr --optimize/install --prefix=\/usr --root="$CUR_DIR" --optimize/' \
           -e 's/rm \/usr\/bin\/easy_install/rm ${CUR_DIR}\/usr\/bin\/easy_install/' \
           -i $fpkgnme # for py2setuptools
       sed -e 's/mv \/usr\/bin\/mako-render \/usr\/bin\/mako-render2/mv ${CUR_DIR}\/usr\/bin\/mako-render ${CUR_DIR}\/usr\/bin\/mako-render2/' \
           -i $fpkgnme # for py2-mako
       sed -e 's/-d \/usr\/share\/\${code}\/LC_MESSAGES/-d ${CUR_DIR}\/usr\/share\/\${code}\/LC_MESSAGES/' \
           -e 's/install -v -d \/usr\/share\/\${code}\/LC_MESSAGES/install -v -d ${CUR_DIR}\/usr\/share\/\${code}\/LC_MESSAGES/' \
           -e 's/cp \${code}\/LC_MESSAGES\/git.mo \/usr/cp \${code}\/LC_MESSAGES\/git.mo ${CUR_DIR}\/usr/' \
           -e 's/-C \/usr\/share\/man --no-same-owner --no-overwrite-dir/-C ${CUR_DIR}\/usr\/share\/man --no-same-owner --no-overwrite-dir/' \
           -i $fpkgnme # for git
       sed -e '/install -v -m644 php.ini-production \/etc\/php.ini/i\  install -m755 -d ${CUR_DIR}\/etc\n\  install -D -m755 libs/libphp5.so ${CUR_DIR}/usr/lib/libphp5.so' \
           -e 's/\/etc\/php.ini/${CUR_DIR}\/etc\/php.ini/' \
           -e 's/mv -v \/etc\/php-fpm.conf{.default,}/mv -v ${CUR_DIR}\/etc\/php-fpm.conf{.default,}/' \
           -e 's/\/usr\/share\/doc\/php-/${CUR_DIR}\/usr\/share\/doc\/php-/' \
           -i $fpkgnme # for php
       sed -e 's/make -j1 install/make -j1 DESTDIR="${CUR_DIR}" install/' \
           -i $fpkgnme # for subversion
       sed -e 's/\.\/waf install/\.\/waf install --destdir="${CUR_DIR}"/' \
           -i $fpkgnme # for py2cairo
       sed -e 's/ln -sv pysol.py \/usr\/bin\/pysol/ln -sv pysol.py ${CUR_DIR}\/usr\/bin\/pysol/' \
           -i $fpkgnme # for pysolfc
     ;;
     sysutils)
       sed -e 's/chmod -v 755 \/usr\/lib\/libpci.so/chmod -v 755 ${CUR_DIR}\/usr\/lib\/libpci.so/' \
           -i $fpkgnme # for pciutils
       sed -e 's/install -dm755 \/usr\/share\/hwdata\//install -dm755 ${CUR_DIR}\/usr\/share\/hwdata\//' \
           -e '/www.linux-usb.org\/usb.ids -O \/usr\/share\/hwdata\/usb.ids/d' \
           -i $fpkgnme # for usbutils
       sed -e 's/install -v -m644 man\/\*\.1 \/usr\/share\/man\/man1/install -v -m644 man\/\*\.1 ${CUR_DIR}\/usr\/share\/man\/man1/' \
           -e 's/install -v -m644 man\/\*\.8 \/usr\/share\/man\/man8/install -v -m644 man\/\*\.8 ${CUR_DIR}\/usr\/share\/man\/man8/' \
           -i $fpkgnme # for pm-utils
       sed -e 's/install -v -m755 -d \/etc\/acpi\/events/install -v -m755 -d ${CUR_DIR}\/etc\/acpi\/events/' \
           -i $fpkgnme # for acpid
       sed -e 's/\/usr\/lib\/tmpfiles.d\/legacy.conf/${CUR_DIR}\/usr\/lib\/tmpfiles.d\/legacy.conf/' \
           -e 's/rm -r \/usr\/lib\/rpm/rm -r ${CUR_DIR}\/usr\/lib\/rpm/' \
           -e 's/if \[ \! -d \/etc\/pam.d/if \[ \! -d ${CUR_DIR}\/etc\/pam.d/' \
           -e 's/install -m755 -d \/etc\/pam.d/install -m755 -d ${CUR_DIR}\/etc\/pam.d/' \
           -e 's/cat >> \/etc\/pam.d\/system-session/cat >> ${CUR_DIR}\/etc\/pam.d\/system-session/' \
           -e 's/cat > \/etc\/pam.d\/systemd-user/cat > ${CUR_DIR}\/etc\/pam.d\/systemd-user/' \
           -i $fpkgnme # for systemd
       sed -e 's/ln -svf ..\/lib\/bluetooth\/bluetoothd \/usr/ln -svf ..\/lib\/bluetooth\/bluetoothd ${CUR_DIR}\/usr/' \
           -e 's/install -v -dm755 \/etc\/bluetooth/install -v -dm755 ${CUR_DIR}\/etc\/bluetooth/' \
           -e 's/install -v -m644 src\/main.conf \/etc\/bluetooth/install -v -m644 src\/main.conf ${CUR_DIR}\/etc\/bluetooth/' \
           -i $fpkgnme # for bluez
     ;;
     java)
       sed -e 's/install -vdm755 \/opt\/\${SrcName}bin/install -vdm755 ${CUR_DIR}\/opt\/\${SrcName}bin/' \
           -e 's/mv -v \* \/opt\/\${SrcName}bin/mv -v * ${CUR_DIR}\/opt\/\${SrcName}bin/' \
           -e 's/ln -svf \${SrcName}bin \/opt\/jdk/ln -svf \${SrcName}bin ${CUR_DIR}\/opt\/jdk/' \
           -i $fpkgnme # for jdkbin
       sed -e 's/\/usr\/share\/java\/\$/${CUR_DIR}\/usr\/share\/java\/\$/' \
           -i $fpkgnme # for java-hamcrest
       sed -e 's/build.sh -Ddist.dir=\/opt\/ant-1.9.6 dist/build.sh -Ddist.dir=${CUR_DIR}\/opt\/ant-1.9.6 dist/' \
           -e 's/ln -v -sfn ant-1.9.6 \/opt\/ant/ln -v -sfn ant-1.9.6 ${CUR_DIR}\/opt\/ant/' \
           -i $fpkgnme # for apache-ant
       sed -e 's/install -v -m755 -d \/usr\/share\/{doc,java}\/junit-4.1/install -v -m755 -d ${CUR_DIR}\/usr\/share\/{doc,java}\/junit-4.1/' \
           -e 's/cp -v -R junit\*\/javadoc\/\*             \/usr\/share\/doc\/junit-4.11/cp -v -R junit\*\/javadoc\/\*             ${CUR_DIR}\/usr\/share\/doc\/junit-4.11/' \
           -e 's/\/usr\/share\/java\/junit-4.11/${CUR_DIR}\/usr\/share\/java\/junit-4.11/' \
           -i $fpkgnme # for junit
       sed -e '/cp -RT build\/\*\/images\/j2sdk-image/i\  install -vm755 -d ${CUR_DIR}\/opt\/jdk8-openjdk' \
           -e 's/cp -RT build\/\*\/images\/j2sdk-image \/opt/cp -RT build\/\*\/images\/j2sdk-image ${CUR_DIR}\/opt/' \
           -e 's/ln -v -nsf jdk8-openjdk \/opt\/jdk/ln -v -nsf jdk8-openjdk ${CUR_DIR}\/opt\/jdk/' \
           -e 's/mkdir -pv \/usr\/share\/applications/mkdir -pv ${CUR_DIR}\/usr\/share\/applications/' \
           -e 's/cat > \/usr\/share\/applications\/openjdk-8/cat > ${CUR_DIR}\/usr\/share\/applications\/openjdk-8/' \
           -e 's/install -v -Dm0644 javaws.png \/usr\/share\/pixmaps/install -v -Dm0644 javaws.png ${CUR_DIR}\/usr\/share\/pixmaps/' \
           -e 's/\/opt\/jdk\/bin\/mkcacerts/${CUR_DIR}\/opt\/jdk\/bin\/mkcacerts/' \
           -i $fpkgnme # for openjdk
     ;;
     genutils)
       sed -e 's/\/usr\/share\/man\/man1\/tidy.1/${CUR_DIR}\/usr\/share\/man\/man1\/tidy.1/' \
           -i $fpkgnme # for htmltidy
       sed -e ':1;s/make DOCUMENTATION_PATH\(.*install\)/make DESTDIR="$CUR_DIR" DOCUMENTATION_PATH\1/;t1' \
           -i $fpkgnme # for imagemagick
     ;;
     pst)
       sed -e 's/install -v -m755 -d \/usr\/share\/xml\/docbook\/xsl-stylesheets/install -v -m755 -d ${CUR_DIR}\/usr\/share\/xml\/docbook\/xsl-stylesheets/' \
           -i $fpkgnme # for docbook-xsl
       sed -e ':1;s/make docdir\(.*install\)/make DESTDIR="$CUR_DIR" docdir\1/;t1' \
           -e 's/\/etc\/sgml\/sgml-ent.cat/${CUR_DIR}\/etc\/sgml\/sgml-ent.cat/' \
           -e 's/\/usr\/share\/sgml\/sgml-iso/${CUR_DIR}\/usr\/share\/sgml\/sgml-iso/' \
           -e 's/\/etc\/sgml\/sgml-docbook.cat/${CUR_DIR}\/etc\/sgml\/sgml-docbook.cat/' \
           -i $fpkgnme # for sgml-common
       sed -e '/docdir=\/usr\/share\/doc\/OpenSP/{n; s/install/DESTDIR="$CUR_DIR" install/}' \
           -e 's/onsgmls   \/usr\/bin\/nsgmls/onsgmls   ${CUR_DIR}\/usr\/bin\/nsgmls/' \
           -e 's/osgmlnorm \/usr\/bin\/sgmlnorm/osgmlnorm ${CUR_DIR}\/usr\/bin\/sgmlnorm/' \
           -e 's/ospam     \/usr\/bin\/spam/ospam     ${CUR_DIR}\/usr\/bin\/spam/' \
           -e 's/ospcat    \/usr\/bin\/spcat/ospcat    ${CUR_DIR}\/usr\/bin\/spcat/' \
           -e 's/ospent    \/usr\/bin\/spent/ospent    ${CUR_DIR}\/usr\/bin\/spent/' \
           -e 's/osx       \/usr\/bin\/sx/osx       ${CUR_DIR}\/usr\/bin\/sx/' \
           -e 's/osx       \/usr\/bin\/sgml2xml/osx       ${CUR_DIR}\/usr\/bin\/sgml2xml/' \
           -e 's/libosp.so \/usr\/lib\/libsp.so/libosp.so ${CUR_DIR}\/usr\/lib\/libsp.so/' \
           -i $fpkgnme # for opensp
       sed -e 's/rm -rf \/tmp\/cupsinit/rm -rf ${CUR_DIR}\/tmp/' \
           -e '/ln -svnf ..\/cups\/doc/i install -vm755 -d ${CUR_DIR}\/usr\/share\/doc' \
           -e 's/ln -svnf ..\/cups\/doc-'"${cupsvers}"' \/usr/ln -svnf ..\/cups\/doc-'"${cupsvers}"' ${CUR_DIR}\/usr/' \
           -e 's/\/var\/run\/cups\/cups.sock" > \/etc/${CUR_DIR}\/var\/run\/cups\/cups.sock" > ${CUR_DIR}\/etc/' \
           -e 's/rm -rf \/usr\/share\/cups\/banners/rm -rf ${CUR_DIR}\/usr\/share\/cups\/banners/' \
           -e 's/rm -rf \/usr\/share\/cups\/data\/testprint/rm -rf ${CUR_DIR}\/usr\/share\/cups\/data\/testprint/' \
           -e '/cat > \/etc\/pam.d\/cups/i install -vm755 -d ${CUR_DIR}\/etc\/pam.d' \
           -e 's/cat > \/etc\/pam.d\/cups/cat > ${CUR_DIR}\/etc\/pam.d\/cups/' \
           -e 's/\/usr\/lib\/cups/${PkgUserDir}\/${PkgName}\/usr\/lib\/cups/' \
           -e 's/chgrp install \/usr\/share\/cups/chgrp install ${PkgUserDir}\/${PkgName}\/usr\/share\/cups/' \
           -e 's/chmod g+w,o+t \/usr\/share\/cups/chmod g+w,o+t ${PkgUserDir}\/${PkgName}\/usr\/share\/cups/' \
           -e 's/chgrp install \/etc\/cups/chgrp install ${PkgUserDir}\/${PkgName}\/etc\/cups/' \
           -e 's/chmod g+w,o+t \/etc\/cups/chmod g+w,o+t ${PkgUserDir}\/${PkgName}\/etc\/cups/' \
           -e 's/\/etc\/cups\/printers.conf/${PkgUserDir}\/${PkgName}\/etc\/cups\/printers.conf/' \
           -e 's/chown root:lp \/etc\/cups/chown root:lp ${PkgUserDir}\/${PkgName}\/etc\/cups/' \
           -e 's/chown root:lp \/var\/cache/chown root:lp ${PkgUserDir}\/${PkgName}\/var\/cache/' \
           -e 's/chown root:lp \/var\/spool/chown root:lp ${PkgUserDir}\/${PkgName}\/var\/spool/'\
           -e 's/chown root \/usr\/bin\/cupsd/chown root ${PkgUserDir}\/${PkgName}\/usr\/bin\/cupsd/' \
           -e 's/\/usr\/share\/applications\/cups.desktop/${PkgUserDir}\/${PkgName}\/usr\/share\/applications\/cups.desktop/' \
           -e '/gtk-update-icon-cache/d' \
           -i $fpkgnme # for cups
       sed -e 's/make soinstall/make DESTDIR="$CUR_DIR" soinstall/' \
           -e 's/install -v -m644 base\/\*.h \/usr\/include\/ghostscript/install -v -m644 base\/\*.h ${CUR_DIR}\/usr\/include\/ghostscript/' \
           -e 's/ln -v -s ghostscript \/usr\/include\/ps/ln -v -s ghostscript ${CUR_DIR}\/usr\/include\/ps/' \
           -e 's/ln -sfv ..\/ghostscript\/9.16\/doc \/usr/ln -sfv ..\/ghostscript\/9.16\/doc ${CUR_DIR}\/usr/' \
           -e 's/\/usr\/share\/ghostscript/${CUR_DIR}\/usr\/share\/ghostscript/' \
           -i $fpkgnme # for ghostscript
     ;;
     server)
       sed -e ':1;s/make docdir\(.*install\)/make DESTDIR="$CUR_DIR" docdir\1/;t1' \
           -i $fpkgnme # for berkeley db
       sed -e 's/mv -v \/usr\/bin\/suexec \/usr/mv -v ${CUR_DIR}\/usr\/bin\/suexec ${CUR_DIR}\/usr/' \
           -e 's/chgrp apache           \/usr/chgrp apache           ${CUR_DIR}\/usr/' \
           -e 's/chmod 4754             \/usr\/lib\/httpd\/suexec/chmod 4754             ${CUR_DIR}\/usr\/lib\/httpd\/suexec/' \
           -e 's/chown -v -R apache:apache \/srv\/www/chown -v -R apache:apache ${CUR_DIR}\/srv\/www/' \
           -i $fpkgnme # for apache
       sed -e 's/chmod -v 0755 \/usr\/lib\/lib{bind9/chmod -v 0755 ${CUR_DIR}\/usr\/lib\/lib{bind9/' \
           -e 's/install -vm755 -d \/srv\/named/install -vm755 -d ${CUR_DIR}\/srv\/named/' \
           -e 's/cd \/srv\/named/cd ${CUR_DIR}\/srv\/named/' \
           -e 's/touch \/srv\/named\/managed/touch ${CUR_DIR}\/srv\/named\/managed/'\
           -i $fpkgnme # for bind
       sed -e 's/install -v -dm 755 \/etc\/mysql/install -v -dm 755 ${CUR_DIR}\/etc\/mysql/' \
           -e 's/cat > \/etc\/mysql\/my.cnf/cat > ${CUR_DIR}\/etc\/mysql\/my.cnf/' \
           -i $fpkgnme # for mariadb
     ;;
     x)
       sed -e 's/make -C xdemos DEMOS_PREFIX=\$XORG_PREFIX/make -C xdemos DEMOS_PREFIX=\$XORG_PREFIX DESTDIR="$CUR_DIR"/' \
           -e 's/rm -f \$XORG_PREFIX\/bin\/xkeystone/rm -f ${CUR_DIR}\/\$XORG_PREFIX\/bin\/xkeystone/' \
           -e 's/install -v -d -m755 \/usr\/share\/fonts/install -v -d -m755 ${CUR_DIR}\/usr\/share\/fonts/' \
           -e 's/X11\/OTF \/usr\/share\/fonts/X11\/OTF ${CUR_DIR}\/usr\/share\/fonts/' \
           -e 's/X11\/TTF \/usr\/share\/fonts/X11\/TTF ${CUR_DIR}\/usr\/share\/fonts/' \
           -e 's/make DESTDIR="$CUR_DIR" install-ti/make DESTDIR="${PkgUserDir}\/${PkgName}" install-ti/' \
           -e 's/install -m755 -d \/etc\/X11\/xorg.conf.d/install -m755 -d ${CUR_DIR}\/etc\/X11\/xorg.conf.d/' \
           -e 's/cat >> \/etc\/sysconfig\/createfiles/cat >> ${CUR_DIR}\/etc\/sysconfig\/createfiles/' \
           -i $fpkgnme # for x
     ;;
     xlibs)
       sed -e 's/rm -rf $QT4PREFIX\/tests/rm -rf ${CUR_DIR}\/$QT4PREFIX\/tests/' \
           -e 's/$QT4PREFIX\/lib/${CUR_DIR}\/$QT4PREFIX\/lib/' \
           -e 's/export QTDIR=$QT4PREFIX/export QTDIR=${CUR_DIR}\/$QT4PREFIX/' \
           -e 's/\/usr\/share\/pixmaps/${CUR_DIR}\/usr\/share\/pixmaps/' \
           -e 's/install -dm755 \/usr\/share\/applications/install -dm755 ${CUR_DIR}\/usr\/share\/applications/' \
           -e 's/cat > \/usr\/share\/applications/cat > ${CUR_DIR}\/usr\/share\/applications/' \
           -e 's/ln -sfrvn $QT4BINDIR\/$file \/usr/ln -sfrvn ${CUR_DIR}\/$QT4BINDIR\/$file ${CUR_DIR}\/usr/' \
           -e '/cat >> \/etc\/ld.so.conf/i install -m755 -d ${CUR_DIR}\/etc\/profile.d' \
           -e 's/cat >> \/etc\/ld.so.conf/cat >> ${CUR_DIR}\/etc\/ld.so.conf/' \
           -e 's/cat > \/etc\/profile.d\/qt4.sh/cat > ${CUR_DIR}\/etc\/profile.d\/qt4.sh/' \
           -e 's/QTDIR=$QT4DIR/QTDIR=\\$QT4DIR/' \
           -e 's/pathappend $QT4DIR\//pathappend \\$QT4DIR\//' \
           -e 's/cat > \/usr\/bin\/setqt/cat > ${CUR_DIR}\/usr\/bin\/setqt/' \
           -i $fpkgnme # for qt4
       sed -e 's/\/usr\/share\/gtk-doc\/html\/webkit/${CUR_DIR}\/usr\/share\/gtk-doc\/html\/webkit/' \
           -i $fpkgnme # for webkitgtk
     ;;
     xsoftware)
       sed -e 's/client.mk install/client.mk DESTDIR="$CUR_DIR" install/' \
           -e 's/mkdir -pv \/usr\/share\/{applications,pixmaps}/mkdir -pv ${CUR_DIR}\/usr\/share\/{applications,pixmaps}/' \
           -e 's/cat > \/usr\/share\/applications\/thunderbird/cat > ${CUR_DIR}\/usr\/share\/applications\/thunderbird/' \
           -e 's/\/usr\/lib\/thunderbird/${CUR_DIR}\/usr\/lib\/thunderbird/' \
           -e 's/\/usr\/share\/pixmaps\/thunderbird/${CUR_DIR}\/usr\/share\/pixmaps\/thunderbird/' \
           -i $fpkgnme # for thunderbird
       sed -e '/mandb -c \/opt\/jdk\/man/i install -m755 -d ${CUR_DIR}\/opt\/jdk\/man\ninstall -m755 -d ${CUR_DIR}\/usr\/share\/applications\ninstall -m755 -d ${CUR_DIR}\/usr\/share\/pixmaps\ninstall -m755 -d ${CUR_DIR}\/usr\/lib\/mozilla\/plugins' \
           -e 's/mandb -c \/opt\/jdk\/man/mandb -c ${CUR_DIR}\/opt\/jdk\/man/' \
           -e 's/install -v -Dm0644 itweb-settings.desktop \/usr/install -v -Dm0644 itweb-settings.desktop ${CUR_DIR}\/usr/' \
           -e 's/install -v -Dm0644 javaws.png \/usr/install -v -Dm0644 javaws.png ${CUR_DIR}\/usr/' \
           -e 's/install -m644 javaws.desktop \/usr/install -m644 javaws.desktop ${CUR_DIR}\/usr/' \
           -e 's/IcedTeaPlugin.so \/usr/IcedTeaPlugin.so ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for icedtea-web
     ;;
     browser)
       sed -e 's/client.mk install/client.mk DESTDIR="$CUR_DIR" install/' \
           -e 's/mkdir -pv    \/usr\/lib\/mozilla/mkdir -pv    ${CUR_DIR}\/usr\/lib\/mozilla/' \
           -e 's/\/usr\/lib\/firefox/${CUR_DIR}\/usr\/lib\/firefox/' \
           -e 's/\/usr\/share\/applications/${CUR_DIR}\/usr\/share\/applications/' \
           -e 's/\/usr\/share\/pixmaps/${CUR_DIR}\/usr\/share\/pixmaps/' \
           -i $fpkgnme # for firefox
     ;;
     gnomedesktop)
       sed -e 's/cat > \/etc\/profile.d\/gnome.sh/cat > ${CUR_DIR}\/etc\/profile.d\/gnome.sh/' \
           -i $fpkgnme # for gnome-session
       sed -e 's/\/usr\/share\/gnome-shell\/modes/${CUR_DIR}\/usr\/share\/gnome-shell\/modes/' \
           -i $fpkgnme # for gnome-shell
     ;;
     gnomeapps)
       sed -e 's/\/usr\/bin\/cmail/${CUR_DIR}\/usr\/bin\/cmail/' \
           -i $fpkgnme # for xboard
       sed -e 's/compileall \/usr\/lib\/python2.7/compileall ${CUR_DIR}\/usr\/lib\/python2.7/' \
           -i $fpkgnme # for alacarte
     ;;
  esac
fi
} # end Start
#
SetPkgVers () {
cat >> $Output << "EOF"
SetPkgVers () {
# $1 is the src package name
# $2 is the name to trim against - usually .tar
local pkgnm=$1
local trim=$2
local fndpkg
local pkgplusvers
local pattern="${pkgnm}[0-9].*${trim}.*z*"
if [ "$trim" = ".zip" -o "$trim" = ".tgz" ]; then
  fndpkg=$( ls -l . | grep ${pkgnm}[0-9].*${trim} | awk '{print $NF}' )
else
  case $pkgnm in
     nasm-) # -xdoc tar file also present
       pattern="${pkgnm}?.??.??${trim}.*z*"
     ;;
  esac
  fndpkg=$( ls -l . | grep $pattern | awk '{print $NF}' )
fi
pkgplusvers="${fndpkg%${trim}*}"
rtrnpkgname=($pkgplusvers)
} # end SetPkgVers
#
EOF
} # end SetPkgVers
#
GetKernelVersion () {
local moddir="${LFS}/usr/lib/modules"
IFS=' 
'
local foundmod=($(ls $moddir | grep ^[0-9])) # get all dirs beginning with numeric
local nummod=${#foundmod[@]}
rtrkernum=""
if [ $nummod -eq 1 ]; then
  rtrkernum=${foundmod[0]}
  return 0
elif [ $nummod -eq 0 ]; then
  echo "No numerical dir in /usr/lib/modules found."
  echo "Couldn't determine the kernel version."
  return $RETURN_PARAM
else
  echo "Found these numerical dirs in /usr/lib/modules:"
  for ((i=0; i<$nummod; i++)); do
    echo "${foundmod[i]}"
  done
  echo "So couldn't determine the kernel version"
  return $RETURN_MTOV
fi
} # end GetKernelVersion
#
GetSeriesNum () {
# $1 is the version number
local versnumber=$1
rtrseries=""
IFS='.' # parse using a .
digitarray=($versnumber)
rtrseries="${digitarray[0]}.${digitarray[1]}"
unset IFS
} # GetSeriesNum
#
GetPkgVersion () {
# $1 is the location of the src package
# $2 is the name of the package
# $3 is the name to trim against - usually tar
local found
local fileExt
local pkgvers=""
rtrvers=""
GetVersionNum $1 $2 $3
retval=$?
if [ $retval -eq $RETURN_PARAM ]; then
  echo "*** Directory $1 doesn't exist ***"
  return $RETURN_PARAM
elif [ $retval -eq $RETURN_FNF ]; then
  echo "*** No file found containing the name $2 and $3 found ***"
  return $RETURN_FNF
elif [ $retval -eq $RETURN_MTOV ]; then
  echo "*** More than one version of $2 found in $1 ***"
    return $RETURN_MTOV
else
    return 0
fi
} # GetPkgVersion
#
GetVersionNum () {
# $1 is the location of the src package
# $2 is the name of the package
# $3 is the name to trim against - usually tar
local pkgloc=$1
local pkgnm=$2
local trimto=$3
local found
local fileExt
local num
local pkgvers=""

if [ ! -e $pkgloc ]; then return $RETURN_PARAM; fi # pkg loc does not exist
IFS='
'
# test if more than one version is present in pkgloc
case $pkgnm in
   Linux-PAM-) # a docs file as well
      found=($( ls -l $pkgloc | grep "${pkgnm}.\..\..\.tar.*z*" | awk '{print $NF}' ))
   ;;
   *)
      found=($( ls -l $pkgloc | grep ${pkgnm}[0-9].*.${trimto}.*z* | awk '{print $NF}' ))
   ;;
esac
num=${#found[@]}
if [ $num -gt 1 ]; then return $RETURN_MTOV; fi # more than one version present

if [ -z $found ]; then # might be a patch file
  found=$( ls -l $pkgloc | grep ${pkgnm}[0-9].*${trimto} | awk '{print $NF}' )
fi
if [ -z $found ]; then return $RETURN_FNF; fi # file not found

fileExt="${found#*${pkgnm}}"
pkgvers="${fileExt%${trimto}*}"
rtrvers=($pkgvers)
return 0
} # end GetVersionNum
#
phpXBookVers () {
# $1 the command to parse for the version #
fileis=$(echo $1 | awk -F\/ '{print $5}')
phpXbookvers="${fileis#php-}"
} # end phpXBookVers
#
evolutionVersion () {
echo "evolutionVersion () {
baseval=0.0 # assume version # will be > 0
evoldir="/usr/lib/evolution"
for evers in \${evoldir}/*; do # loop through all files in the directory
  evoltest=\$( echo \$evers | awk -F\/ '{print \$NF}' )
  if [[ \"\$evoltest\" =~ ^[0-9]+([.][0-9]+)?$ ]]; then # a number so test its value
    float_test \"\$evoltest > \$baseval\" && evolVers=\$evoltest
    baseval=\$evolVers
  fi
done
}" >> $Output
} # end evolutionVersion
#
GetjdkComVers () {
jdkfile=${DumpedCommands}/general/???-java
local pkgnm="OpenJDK-"
local trimto="-bin"
while read cmdLine; do
  if [[ ${cmdLine:0:1} != '#' ]]; then # ignore line if it has a hash at the start
    jdkcomfnd=$( echo $cmdLine | awk -F\/ '{print $NF}' | grep ${pkgnm}[0-9] )
    if [ ! -z $jdkcomfnd ]; then break; fi
  fi
done < $jdkfile
jdkExt="${jdkcomfnd#*${pkgnm}}"
jdkcomvers="${jdkExt%${trimto}*}"
} # end GetjdkComvers
#
# ***main program***  - call the functions
#
configEdit # option to change the config file
retval=$?
if [ $retval -eq $RETURN_PARAM ]; then
 echo "Cancel pressed. Exiting now"
 exit 1
fi
source $cfg # make sure config file values are current
if [ "$DESTDIR" = yes ]; then
  useDESTDIR=true
else
  useDESTDIR=false
fi
# check compatible values
if [[ "$BOOK_VERSION" == KBLFS && "$BOOK" == svn ]]; then
  echo "BOOK_VERSION is $BOOK_VERSION but BOOK is $BOOK"
  echo "These are incompatible values"
  echo "Either change BOOK to git or change BOOK_VERSION to an svn source."
  echo "Exiting now."
  exit 1
elif [[ "$BOOK" == git && "$BOOK_VERSION" != KBLFS ]]; then
  echo "BOOK_VERSION is $BOOK_VERSION but BOOK is $BOOK"
  echo "These are incompatible values"
  echo "Either change BOOK to svn or change BOOK_VERSION to KBLFS."
  echo "Exiting now."
  exit 1
fi
SECTION=$(echo ${SECTION,,*}) # convert SECTION to lower case
SOURCES=$(echo ${SOURCES,,*}) # convert SOURCES to lower case
xversion=$XVERSION # set up the x version
as_root=false
if [ "$AS_ROOT" = yes ]; then as_root=true; fi
#
if [[ "$SINGLE_PACKAGE" == no ]]; then
  single_package=false
else
  single_package=true
  pkgnamenohyph=$( echo ${SINGLE_PACKAGE/-/} ) # remove any - in package name
  pkgInSection $pkgnamenohyph $SECTION
  retv=$?
  if [ $retv -eq $RETURN_PARAM ]; then
    echo "Package $SINGLE_PACKAGE not found in section $SECTION"
    echo "exiting now"
    exit 1
  else
    echo "Package $SINGLE_PACKAGE found in section $SECTION"
    echo "Will produce a script called $SINGLE_PACKAGE.sh for this single package"
  fi
fi
#
# get the book
#
bookDir=$BLFS_BOOK_LOC_DIR
book_version=$BOOK_VERSION
if [[ "$book_version" = systemd || "$book_version" = KBLFS ]]; then bookDir=${bookDir}/SYSTEMD; fi
#
if [ "$BOOK" = svn ]; then
  GetSvnUrl # make sure the svn url is set
  if [ "$book_version" != blank ]; then #check if the requested book is present locally
    ChkLocalBook ${bookDir} ${book_version}
    if [ "$?" -eq $RETURN_PARAM ]; then
      echo "Exiting now"
      exit 1
    fi
    SetBLFSBook
  else #version set to blank so ask for which book
    WhichBLFSBook # choose which BLFS version to download the xml files
    # check if the requested book is already present locally
    ChkLocalBook $bookDir ${book_version}
    if [ "$?" -eq $RETURN_PARAM ]; then
      echo "Exiting now"
      exit 1
    fi
  fi
  if [ "$SOURCES" = download ]; then CleanLocalREPO $bookDir/${book_version}; fi # delete any files in local book repository
  CheckoutBook  $bookDir/${book_version} # svn the requested book xml files
  SVNINFO="$(svn info $bookDir/${book_version} | awk '{printf $0"|"}')"
# Note, tagged | on the end so it can be used as a record separator later
# e.g.
# echo $SVNINFO | awk 'BEGIN{ RS = "|" }; {print $0}'
# will 'reconstitute it
elif [ "$BOOK" = git ]; then # download the xml from git
# first check the latest commit
  latestCommit=$(git ls-remote ${BOOK_URL}.git refs/heads/master | cut -f 1)
# check if a local book already exits
  ChkLocalBook $bookDir ${book_version}
  if [ "$?" -eq $RETURN_PARAM ]; then # git commit already present locally
    echo "Exiting now"
    exit 1
  else
    echo "Will get the book from $BOOK_URL"
    echo "and place it in $bookDir"
    rm -rf ${bookDir}/${book_version} # must not exist before cloning
    mkdir -pv ${bookDir}/${book_version}
    git clone ${BOOK_URL}.git ${bookDir}/${book_version}
    GetGitInfo ${bookDir}/${book_version}
    version=$book_version
  fi
else  # local book requested. Make sure it exists
  if [ "$book_version" = "blank" ]; then # need to choose book version
    GetLocalREPO $bookDir/${book_version}
    return_val=$?
    if [ $return_val -eq $RETURN_PARAM ]; then #no local book found
      echo "You did not choose a local $REPO book"
      echo "Change the local dir of the book or svn it. Exiting now"
      exit 1
    else # config file would have changed so source it
      source $cfg
      LocalBook ${bookDir} ${book_version}
    fi
  else
    ChkLocalBookExists $bookDir ${book_version}
    return_val=$?
    if [ $return_val -eq $RETURN_PARAM ]; then #no local book found
      echo "The requested book was not found at $bookDir."
      echo "Change the local dir of the book or svn it. Exiting now"
      exit 1
    else
      LocalBook ${bookDir} ${book_version} # set values for locally stored book xml
      echo "Local book found for $book_version at '$bookDir'"
    fi
  fi
fi
case $BOOK in
    git)
        DumpCommands $REPO ${bookDir}/${book_version} commit
    ;;
    svn)
        DumpCommands $REPO ${bookDir}/${book_version} Revision
    ;;
    local) # check for .git or .svn
        if [ -d ${bookDir}/${book_version}/.git ]; then
          GetGitInfo ${bookDir}/${book_version}
          DumpCommands $REPO ${bookDir}/${book_version} commit
        elif [ -d ${bookDir}/${book_version}/.svn ]; then
          DumpCommands $REPO ${bookDir}/${book_version} Revision
        else
          echo "No .git or .svn directory found in ${bookDir}/${book_version}"
          echo "Couldn't get book commands - aborting"
          exit 1
        fi
     ;;
     *)
        echo "BOOK value should be git, svn or local."
        echo "Aborting"
        exit 1
     ;;
esac
#
if ! $single_package; then # test if the build files dir exists
  if [ ! -d $BLFSBUILDFILES ]; then # doesn't exist so try and build it
    if [ ! -e ${LFS}/${blfsfilesTar} ]; then
      echo "The file $blfsfilesTar should be in $LFS"
      echo "Please place it there in order to continue"
      echo "Exiting now"
      exit 1
    else # tar file exists so unpack it
      if [ ! -d ${LFS}${blfsBuildFiles} ]; then
        mkdir -pv ${LFS}${blfsBuildFiles}
      fi
      unpackBLFSfiles # files define pkg names and dependencies
    fi
  else # build files exist - test if tar file present
    if [ -e ${LFS}/${blfsfilesTar} ]; then # ask if want to replace the build files
      echo "**Warning** - $blfsfilesTar present and $BLFSBUILDFILES exists."
      echo "Replace $BLFSBUILDFILES with the contents of $blfsfilesTar? (Y/n)"
      read reply
        case $reply in
           [nN]|[nN][Oo])
              echo "okay - continuing with existing $BLFSBUILDFILES"
           ;;
           *)
              echo "okay replacing $BLFSBUILDFILES"
              rm -rf ${LFS}${blfsBuildFiles}
              mkdir -pv ${LFS}${blfsBuildFiles}
              unpackBLFSfiles
           ;;
        esac
    fi
  fi
fi
#
# update the proxy settings for wget
#
setHostProxy
#
SetupSections # create the array SectionsAll. Contains the sections to build
for (( ij=0; ij<$numSections; ij++ )); do # loop through each section to get the sources
  Section=${SectionsALL[$ij]}
  skipSection=false
  if [ "$GNOME_OR_XFCE" = gnome ]; then # skip section xfce
    if [ "$Section" = xfce ]; then skipSection=true; fi
  else # requested xfce so skip all the gnome sections
    if [[ "$Section" == gnomeplatform || "$Section" == gnomedesktop || "$Section" == gnomeapps ]]; then
    skipSection=true
    fi
  fi
  if $skipSection; then
    :
  else # build the section
    rtrnPkg=""
    rtrnSrc=""
    rtrnCmd=""
    altFileNames $Section # get pkg name, src name and command name for each package in this section
    return_val=$?
    if [ $return_val -eq $RETURN_PARAM ]; then
      echo "no ${Section}-files  file found. It should be in ${BLFSBUILDFILES}/files"
      echo "If $Section is spelt correctly then"
      echo "place it there in order to continue. Exiting now"
      exit 1
    fi
    if [[ "$SOURCES" = download || "$SOURCES" = downloads ]]; then # download the sources for this section
      if [ "$CLEAN_SRC_DIR" = yes ]; then
        CleanSourceDir $Section # clean the sources file if not empty
        if [ "$Section" = x ]; then # delete the x subdirs
          rm -rf ${SOURCEDIR}/${Section}/${xproto}
          rm -rf ${SOURCEDIR}/${Section}/${xlib}
          rm -rf ${SOURCEDIR}/${Section}/${xapp}
          rm -rf ${SOURCEDIR}/${Section}/${xfont}
        fi
      else
        if [ ! -d ${SOURCEDIR}/${Section} ]; then
          install -v -m0755 -d ${SOURCEDIR}/${Section}
        fi
      fi
      if [[ "$Section" = browser && "$BROWSER" = chromium ]]; then
        echo "Chromium source will be downloaded using wget"
      else
        if [[ "$CLEAN_SRC_DIR" = no && -e ${SOURCEDIR}/${Section}/${WgetList} ]]; then
          echo "$WgetList file already in ${SOURCEDIR}/${Section}. Will use that."
        else
          GetListFile $bookDir $WgetList #get wget-list file
        fi
        if [[ "$CLEAN_SRC_DIR" = no && -e ${SOURCEDIR}/${Section}/${sortedfile} ]]; then
          echo "$sortedfile file already in ${SOURCEDIR}/${Section}. Will use that."
        else
          SortWgetList $Section rtrnPkg[@] rtrnSrc[@] # URL list of files for this section
        fi
        if [[ "$UPDATEWGETLIST" = yes && -e ${SOURCEDIR}/${Section}/${sortedfile} ]]; then
          GetLatestVers $Section $sortedfile # update sortedfile with any newer versions
          [ "$Section" = x ] && updateXtraX # update the md5sums files
        elif [[ ! -e ${SOURCEDIR}/${Section}/${sortedfile} ]]; then
          echo "No ${sortedfile} file in ${SOURCEDIR}/${Section}"
          echo "Cannot get latest source versions"
        fi
        GetSources $Section $sortedfile $SOURCEURL # download the sources in the $sortedfile file
      fi
    else # sources are local - check if update of wget-list file requested
        if [[ "$UPDATEWGETLIST" = yes && -e ${SOURCEDIR}/${Section}/${sortedfile} ]]; then
          GetLatestVers $Section $sortedfile # update sortedfile with any newer versions
# *** note *** this may put the wget-list file out of kilter with the downloaded sources
          [ "$Section" = x ] && updateXtraX # update the md5sums files
        elif [[ ! -e ${SOURCEDIR}/${Section}/${sortedfile} ]]; then
          echo "No ${sortedfile} file in ${SOURCEDIR}/${Section}"
          echo "Cannot get latest source versions"
        fi
    fi
# check all the requested src files are present
    if [[ "$Section" = browser && "$BROWSER" = chromium ]]; then
      : # do nothing
    else
      if [ -e ${SOURCEDIR}/${Section}/${sortedfile} ]; then
        ChkSrcPresent ${SOURCEDIR}/${Section} ${SOURCEDIR}/${Section}/${sortedfile}
      else
         echo "No ${sortedfile} file in ${SOURCEDIR}/${Section}"
         echo "Cannot check presence of source files"
      fi
      ret_val=$?
      if [ $ret_val -eq $RETURN_PARAM ]; then 
        echo "Not all requested files in ${SOURCEDIR}/${Section}/${sortedfile} have been downloaded."
        echo "If the required sources are not being downloaded with wget in the script, then"
        echo "you will have to download them yourself and place in ${SOURCEDIR}/${Section}"
        echo "Do you want to continue? (Y/n)"
        read reply
        case $reply in
           [yY]|[yY][Ee][Ss])
                echo "okay continuing"
           ;;  
           [nN]|[nN][Oo])
                echo "Exiting now"
                exit 1
           ;;  
           *)  
                echo "okay continuing"
           ;;  
        esac
      fi
      ChkEmptySrcFiles $Section # check for empty source files
      return_val=$?
      if [ $return_val -eq $RETURN_PARAM ]; then
        echo "Dir ${LFS}${srcrootdir}/${Section} is empty or has empty files."
        echo "If the required sources are not being downloaded with wget in the script, then"
        echo "you will have to download them to ${LFS}${srcrootdir}/${Section}"
        echo "Continuing to make the script(s) for section $Section"
      fi
    fi
    if [ "$Section" = browser ]; then
      if [ "$BROWSER" = firefox ]; then
        if [ -z $ffoxvers ]; then # null, so fill
          firefoxloc="${LFS}${srcrootdir}/browser"
          if [ -d $firefoxloc ]; then
            : # okay, so continue
          else
            firefoxloc="${LFS}${PKGUSERDIR}/browser/firefox"
            if [ -d $firefoxloc ]; then
              : # okay, so continue
            else
              echo "Requested Firefox version but cannot find source location"
              echo "Modify this script to include the correct source location"
              echo "Exiting now"
              exit 1
            fi           
          fi
          rtrvers=""
          GetPkgVersion $firefoxloc firefox- .source
          if [ ! -z $rtrvers ]; then
            ffoxvers=$rtrvers
            echo "Firefox version is $ffoxvers"
          else
            echo "*** failed to get Firefox version ***"
          fi
        fi
      fi
    fi
    if ! $single_package; then
# get the perl version installed by LFS - this is not reinstalled in BLFS
      rtrvers=""
      if [ -d ${LFS}/sources/systemd ]; then # try the LFS sources dir first
        GetPkgVersion ${LFS}/sources/systemd perl- .tar
        if [ ! -z $rtrvers ]; then
          perlvers=$rtrvers
        else
          echo "*** failed to get perl version ***"
        fi
      else
        GetPkgVersion ${LFS}${PKGUSERDIR}/core/perl perl- .tar
        if [ ! -z $rtrvers ]; then
          perlvers=$rtrvers
        else
          echo "*** failed to get perl version ***"
        fi
      fi
      case $Section in
        avr)
          rtrvers=""
          GetPkgVersion ${LFS}${PKGUSERDIR}/core/gcc gcc- .tar # for gcc version
          if [ ! -z $rtrvers ]; then
            gccvers=$rtrvers
            echo "gcc version is $gccvers"
          else
            echo "*** failed to get gcc version ***"
          fi
        ;;
        java)
          OracleVers="jdk-8u60"
          jdksrcDir=""
          jdkbinSrcdir="/home/john/Downloads"
          if [ ! -e ${LFS}${srcrootdir}/java/${OracleVers}* ]; then # ask to copy it
            echo "No Oracle version $OracleVers found in ${LFS}${srcrootdir}/java"
            echo "Do you want to put it there? (Y/n)"
            read reply
            case $reply in
               [yY]|[yY][Ee][Ss])
                    echo "Directory holding jdk file (default is $jdkbinSrcdir)"
                    read jdksrcDir
                    if [ -z $jdksrcDir ]; then jdksrcDir=$jdkbinSrcdir; fi
                    echo "okay copying from $jdksrcDir"
                    if [ -e ${jdksrcDir}/${OracleVers}* ]; then
                      cp -v ${jdksrcDir}/${OracleVers}* ${LFS}${srcrootdir}/java/
                    else
                      echo "no Oracle version found in $jdkbinSrcdir"
                      echo " You'll need to download it"
                    fi
               ;;
               [nN]|[nN][Oo])
                    echo "Continuing without copying Oracle jdk"
               ;;
               *)
                    echo "Directory holding jdk file (default is $jdkbinSrcdir)"
                    read jdksrcDir
                    if [ -z $jdksrcDir ]; then jdksrcDir=$jdkbinSrcdir; fi
                    echo "okay copying from $jdksrcDir"
                    if [ -e ${jdksrcDir}/${OracleVers}* ]; then
                      cp -v ${jdksrcDir}/${OracleVers}* ${LFS}${srcrootdir}/java/
                    else
                      echo "no Oracle version found in $jdkbinSrcdir"
                      echo " You'll need to download it"
                    fi
               ;;
            esac
          fi
          if [ -e ${LFS}${srcrootdir}/java/${OracleVers}* ]; then # oracle version exists
            trimto=-linux
            jdktitle=jdk-
            jdkoracle=true
          else
            case $(uname -m) in
              x86_64)
                 trimto=-x86_64
              ;;
              *)
                 trimto=-i686
              ;;
            esac
            jdktitle=OpenJDK-
            jdkoracle=false
          fi
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/java $jdktitle $trimto
          if [ ! -z $rtrvers ]; then
            jdkvers=$rtrvers
            echo "jdk binary version is $jdkvers"
          else
            echo "*** failed to get Oracle jdk binary version ***"
          fi
          GetjdkComVers # get the OpenJDK version from the commands
          echo "jdk version from the commands is $jdkcomvers"
        ;;
        libraries)
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/libraries freetype- .tar
          if [ ! -z $rtrvers ]; then
            freetypevers=$rtrvers
            echo "freetype version is $freetypevers"
          else
            echo "*** failed to get freetype version ***"
          fi
        ;;
        nvidia)
          rtrkernum=""
          GetKernelVersion
          if [ "$?" -eq $RETURN_MTOV ]; then
            echo "*** Warning - Couldn't get the kernel version number ***"
          else
            echo "kernel version from modules dir is $rtrkernum"
            GetSeriesNum $rtrkernum
            echo "kernel series is $rtrseries"
            _extramodules="extramodules-${rtrseries}"
          fi
        ;;
        programming)
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/programming llvm- .src
          if [ ! -z $rtrvers ]; then
            llvmvers=$rtrvers
            echo "llvm version is $llvmvers"
          else
            echo "*** failed to get llvm version ***"
          fi
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/programming php- .tar
          if [ ! -z $rtrvers ]; then
            phpvers=$rtrvers
            echo "php version is $phpvers"
          else
            echo "*** failed to get php version ***"
          fi
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/programming Python-2. .tar
          if [ ! -z $rtrvers ]; then
            Python2vers=2.$rtrvers
            GetSeriesNum $Python2vers
            py2series=$rtrseries
            echo "Python2 version is $Python2vers"
            echo "Python2 series is $py2series"
          else
            echo "*** failed to get Python-2 version ***"
          fi
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/programming Python-3. .tar
          if [ ! -z $rtrvers ]; then
            Python3vers=3.$rtrvers
            GetSeriesNum $Python3vers
            py3series=$rtrseries
            echo "Python3 version is $Python3vers"
            echo "Python3 series is $py3series"
          else
            echo "*** failed to get Python-3 version ***"
          fi
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/programming git- .tar
          if [ ! -z $rtrvers ]; then
            gitvers=$rtrvers
            echo "git version is $gitvers"
          else
            echo "*** failed to get git version ***"
          fi
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/programming vala- .tar
          if [ ! -z $rtrvers ]; then
            valavers=$rtrvers
            GetSeriesNum $valavers
            valaseries=$rtrseries
            echo "Vala version is $valavers"
            echo "Vala series is $valaseries"
          else
            echo "*** failed to get vala version ***"
          fi
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/programming ruby- .tar
          if [ ! -z $rtrvers ]; then
            rubyvers=$rtrvers
            echo "Ruby version is $rubyvers"
            rubyseries="${rubyvers%?}0"
          else
            echo "*** failed to get ruby version ***"
          fi
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/programming cmake- .tar
          if [ ! -z $rtrvers ]; then
            cmakevers=$rtrvers
            echo "cmake version is $cmakevers"
          else
            echo "*** failed to get cmake version ***"
          fi
        ;;
        pst)
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/pst cups- -source
          if [ ! -z $rtrvers ]; then
            cupsvers=$rtrvers
            echo "cups version is $cupsvers"
          else
            echo "*** failed to get cups version ***"
          fi
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/pst docbook-xsl- .tar
          if [ ! -z $rtrvers ]; then
            docbookxslvers=$rtrvers
            echo "docbook-xsl version is $docbookxslvers"
          else
            echo "*** failed to get docbook-xsl version ***"
          fi
        ;;
        security)
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/security krb5- -signed
          if [ ! -z $rtrvers ]; then
            krb5vers=$rtrvers
            echo "krb5 version is $krb5vers"
          else
            echo "*** failed to get krb5 version ***"
          fi
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/security Linux-PAM- .tar
          if [ ! -z $rtrvers ]; then
            linuxpamvers=$rtrvers
            echo "Linux-PAM version is $linuxpamvers"
          else
            echo "*** failed to get Linux-PAM version ***"
          fi
        ;;
        sysutils)
          if [ "$SYSTEMD" = yes ]; then
            rtrvers=""
            if [ -d ${LFS}/sources/systemd ]; then # try the LFS sources dir first
              GetPkgVersion ${LFS}/sources/systemd systemd- .tar
              if [ ! -z $rtrvers ]; then
                SYSTEMD_VERSION=$rtrvers
                echo "systemd version is $SYSTEMD_VERSION"
              else
                echo "*** failed to get systemd version ***"
              fi
            else
              GetPkgVersion ${LFS}${PKGUSERDIR}/core/systemd systemd- .tar
              if [ ! -z $rtrvers ]; then
                SYSTEMD_VERSION=$rtrvers
                echo "systemd version is $SYSTEMD_VERSION"
              else
                echo "*** failed to get systemd version ***"
                echo "Check source file is in ${LFS}${PKGUSERDIR}/core/systemd"
              fi
            fi
          fi
        ;;
        telepathy)
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/telepathy telepathy-salut- .tar
          if [ ! -z $rtrvers ]; then
            telepathysalutvers=$rtrvers
            echo "telepathy-salut version is $telepathysalutvers"
          else
            echo "no source file available"
            telepathysalutvers=0.8.1
            echo "will assume version is $telepathysalutvers"
          fi
        ;;
      esac
    else
      case $SINGLE_PACKAGE in
        freetype)
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/libraries freetype- .tar
          if [ ! -z $rtrvers ]; then
            freetypevers=$rtrvers
            echo "freetype version is $freetypevers"
          else
            echo "*** failed to get freetype version ***"
          fi
        ;;
        git)
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/programming git- .tar
          if [ ! -z $rtrvers ]; then
            gitvers=$rtrvers
            echo "git version is $gitvers"
          else
            echo "*** failed to get git version ***"
          fi
        ;;
        linux-pam)
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/security Linux-PAM- .tar
          if [ ! -z $rtrvers ]; then
            linuxpamvers=$rtrvers
            echo "Linux-PAM version is $linuxpamvers"
          else
            echo "*** failed to get Linux-PAM version ***"
          fi
        ;;
        php)
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/programming php- .tar
          if [ ! -z $rtrvers ]; then
            phpvers=$rtrvers
            echo "php version is $phpvers"
          else
            echo "*** failed to get php version ***"
          fi
        ;;
        python2)
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/programming Python-2. .tar
          if [ ! -z $rtrvers ]; then
            Python2vers=2.$rtrvers
            echo "Python2 version is $Python2vers"
          else
            echo "*** failed to get Python-2 version ***"
          fi
        ;;
        python3)
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/programming Python-3. .tar
          if [ ! -z $rtrvers ]; then
            Python3vers=3.$rtrvers
            echo "Python3 version is $Python3vers"
          else
            echo "*** failed to get Python-3 version ***"
          fi
        ;;
        jdkbin)
          case $(uname -m) in
            x86_64)
               trimto=-linux
            ;;
            *)
               trimto=-i686
            ;;
          esac
          rtrvers=""
          GetPkgVersion ${LFS}${srcrootdir}/java jdk- $trimto
          if [ ! -z $rtrvers ]; then
            jdkvers=$rtrvers
            echo "jdk binary version is $jdkvers"
          else
            echo "*** failed to get Oracle jdk binary version ***"
          fi
          GetjdkComVers # get the OpenJDK version from the commands
          echo "jdk version from the commands is $jdkcomvers"
        ;;
      esac
    fi
    Start $Section rtrnPkg[@] rtrnSrc[@] rtrnCmd[@] # build the script for this section
  fi
done
