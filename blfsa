#!/bin/bash
#
if [ $UID -ne 0 ]; then echo Please run this script as root. ; exit 1; fi
LFS=$LFS
if [ "$LFS" = "" ]; then
  echo "The LFS variable is not set"
  echo "do: export LFS=/mnt/lfs to install blfs packages"
  echo "    export LFS=local to install blfs packages on this (local) machine"
  echo
  exit 1
fi

# repository will be for BLFS
REPO="BLFS"
blfs="blfs"
if [ "$LFS" = /mnt/lfs ]; then
  echo "Target is $LFS"
elif [ "$LFS" = local ]; then
  LFS="/" # local machine
  echo "Target is local machine"
else
  echo "Don't recognise $LFS. Edit this script."
  echo "Exit now"
  exit 1
fi
#
# global variables
#
# Set variables for current file & dir
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
echo "This script is $__file"
#
BLFS=${blfs^^} # uppercase version of $blfs
blfscommands="/${blfs}-commands"
DumpedCommands=${LFS}${blfscommands}
Dumpedhtml=$LFS/${blfs}-html
#echo "blfscommands is $blfscommands"
#echo "DumpedCommands is $DumpedCommands"
#echo "Dumpedhtml is $Dumpedhtml"
WgetList="wget-list" # default name for the source list file
ncc="--no-check-certificate" # used with wgetopts in some packages
hostwgetopts="" # Options for wget on the host, e.g. proxy settings, certs.
wgetopts="" # Options for wget, e.g. proxy settings, certs etc on LFS
sortedfile="sortedfile" # name of the sorted WgetList file
anduin_src_root="http://anduin.linuxfromscratch.org/sources/BLFS/svn"
patch_root="http://www.linuxfromscratch.org/patches/blfs" # patch url
gnomeBaseURL="https://download.gnome.org/sources" # url for gnome sources
# return values from a function
RETURN_PARAM=65  # error return
RETURN_NOTSET=67 #  no dependencies set
RETURN_DEPNOTMET=69 # package dependency not met
RETURN_ALLDEPSMET=71 # all dependencies met
RETURN_FNF=73 # file not found
RETURN_MTOV=75 # more than one version of a file found
RETURN_GT=77 # used in test of which version is later. returned if $1 > $2
RETURN_EQ=79 # used in compare_versions - returned if versions are equal
RETURN_PVF=81 # denotes failure to get the version of the package source tarfile
RETURN_EMPTY=83 # file is empty
RETURN_BFD=85 # Arch Binary file(s) downloaded
srcrootdir=/${blfs}-sources # all source files are under this dir
#echo "srcrootdir is $srcrootdir"
blfsBuildFiles=/${blfs}BuildFiles # location of the pkgs, pkg-order and pkg-dependencies files
#echo "blfsBuildFiles is $blfsBuildFiles"
PKGUSERDIR=/usr/src # pkguser dir will be $PKGUSERDIR/$Section
BuildLog=${LFS}/${BLFS}-build.log # keep a record of packages and times
#echo "BuildLog is $BuildLog"
if [ ! -e $BuildLog ]; then
  touch $BuildLog
fi
SOURCEDIR=${LFS}${srcrootdir}
#echo "SOURCEDIR is $SOURCEDIR"
build="build" # name of the build file for each package
cfg=~/${BLFS}.conf # config file to hold required params
#initialize the config variables
BLFS_BOOK_LOC_DIR=${HOME}/LFS_SVN/${REPO} # define local dir for the downloaded book xml
SVN_URL="svn://svn.linuxfromscratch.org/blfs/" # svn url
BOOK_URL=$SVN_URL # use the svn book by default
BOOK_VERSION=$BOOK_VERSION
SOURCES=$SOURCES
SOURCEURL=$SOURCEURL
CLEAN_SRC_DIR=$CLEAN_SRC_DIR
UPDATESRCFILES=$UPDATESRCFILES
USE_ARCH_VERSIONS=$USE_ARCH_VERSIONS
BOOK=$BOOK
SECTION=$SECTION
XORG_PREFIX=$XORG_PREFIX
XVERSION=$XVERSION
INSTALLDSKTP=$INSTALLDSKTP
BLFSFILESTAR=$BLFSFILESTAR
SINGLE_PACKAGE=$SINGLE_PACKAGE
AS_ROOT=$AS_ROOT # 'no' install as package user, 'yes' install as root
SYSTEMD=$SYSTEMD # 'yes' - use systemd. 'no' use sysvinit.
DESTDIR=$DESTDIR
INSTALLDEST=$INSTALLDEST
USEPROXY=$USEPROXY
RUNIT=$RUNIT
PRINTIT=$PRINTIT
if [ -e $cfg ]; then
  source $cfg # exists so source it
else
  touch $cfg #cfg is new
fi
if [ -z "$BOOK_VERSION" ]; then
  BOOK_VERSION="BOOK"
fi
if [ -z "$SOURCES" ]; then
  SOURCES="download"
fi
if [ -z "$SOURCEURL" ]; then
  SOURCEURL="url_in_book"
fi
if [ -z "$CLEAN_SRC_DIR" ]; then
  CLEAN_SRC_DIR="no"
fi
if [ -z "$UPDATESRCFILES" ]; then
  UPDATESRCFILES="no"
fi
if [ -z "$USE_ARCH_VERSIONS" ]; then
  USE_ARCH_VERSIONS="yes"
fi
if [ -z "$BOOK" ]; then
  BOOK="svn"
fi
if [ -z "$SECTION" ]; then
  SECTION="libraries"
fi
if [ -z "$XORG_PREFIX" ]; then
  XORG_PREFIX="/usr"
fi
if [ -z "$XVERSION" ]; then
  XVERSION="7.7"
fi
if [ -z "$INSTALLDSKTP" ]; then
  INSTALLDSKTP="Gnome"
fi
if [ -z "$BLFSFILESTAR" ]; then
  BLFSFILESTAR="blfsfiles.tar.xz"
fi
if [ -z "$SINGLE_PACKAGE" ]; then
  SINGLE_PACKAGE="no"
fi
if [ -z "$AS_ROOT" ]; then
  AS_ROOT="no"
fi
if [ -z "$SYSTEMD" ]; then
  SYSTEMD="yes"
fi
if [ -z "$DESTDIR" ]; then
  DESTDIR="no"
fi
if [ -z "$INSTALLDEST" ]; then
  INSTALLDEST="no"
fi
if [ -z "$USEPROXY" ]; then
  USEPROXY="no"
fi
if [ -z "$RUNIT" ]; then
  RUNIT="true"
fi
if [ -z "$PRINTIT" ]; then
  PRINTIT="false"
fi
# store the values in a new config file
if [ -e $cfg ]; then
  rm $cfg
  touch $cfg
fi
# ensure compatible values
if [[ "$BOOK_VERSION" = systemd && "$SYSTEMD" = no ]]; then SYSTEMD="yes"; fi
echo "BLFS_BOOK_LOC_DIR=$BLFS_BOOK_LOC_DIR" | tee $cfg
echo "BOOK_URL=$BOOK_URL" | tee -a $cfg
echo "BOOK_VERSION=$BOOK_VERSION" | tee -a $cfg
echo "SOURCES=$SOURCES" | tee -a $cfg
echo "SOURCEURL=$SOURCEURL" | tee -a $cfg
echo "CLEAN_SRC_DIR=$CLEAN_SRC_DIR" | tee -a $cfg
echo "UPDATESRCFILES=$UPDATESRCFILES" | tee -a $cfg
echo "USE_ARCH_VERSIONS=$USE_ARCH_VERSIONS" | tee -a $cfg
echo "BOOK=$BOOK" | tee -a $cfg
echo "SECTION=$SECTION" | tee -a $cfg
echo "XORG_PREFIX=$XORG_PREFIX" | tee -a $cfg
echo "XVERSION=$XVERSION" | tee -a $cfg
echo "INSTALLDSKTP=$INSTALLDSKTP" | tee -a $cfg
echo "BLFSFILESTAR=$BLFSFILESTAR" | tee -a $cfg
echo "SINGLE_PACKAGE=$SINGLE_PACKAGE" | tee -a $cfg
echo "AS_ROOT=$AS_ROOT" | tee -a $cfg
echo "SYSTEMD=$SYSTEMD" | tee -a $cfg
echo "DESTDIR=$DESTDIR" | tee -a $cfg
echo "INSTALLDEST=$INSTALLDEST" | tee -a $cfg
echo "USEPROXY=$USEPROXY" | tee -a $cfg
echo "RUNIT=$RUNIT" | tee -a $cfg
echo "PRINTIT=$PRINTIT" | tee -a $cfg
#
# functions
#
msg () {
  echo >&2 -e "${1-}"
}
#
die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}
#
_log() {                      # turn on debugging commands with _DEBUG=true
  if [ "$_DEBUG" = true ]; then
    echo 1>&2 "$@"
  fi
} # end _log
#
configEdit () {
local DIALOG_OK=0
local DIALOG_CANCEL=1
local DIALOG_HELP=2
local DIALOG_EXTRA=3
local DIALOG_ITEM_HELP=4
local DIALOG_ESC=255
local HEIGHT=0
local WIDTH=0
#
display_configFile () {
  dialog \
    --backtitle "BLFS config file editor" \
    --title "Config File Contents" \
    --textbox "$1" $HEIGHT $WIDTH
}
#
_edit () {
local value
local newval
local exit_status
local tochange
local display
#
itemMenu=$(awk -F\= '{print $1,$2}' $cfg)
exec 3>&1
tochange=$(dialog \
    --backtitle "BLFS config file editor" \
    --title "Item Menu" \
    --menu "Select item to edit" 0 0 0 $itemMenu \
    2>&1 1>&3)
exit_status=$?
exec 3>&-
case $exit_status in
  $DIALOG_CANCEL)
    return 0
  ;;
  $DIALOG_ESC)
    echo "Program aborted." >&2
    exit 1
  ;;
  $DIALOG_OK)
    case $tochange in
       BLFS_BOOK_LOC_DIR)
           display="Enter the local directory to store the BLFS Book"
       ;;
       BOOK_URL)
           display="Enter the url of the BLFS book. Default is the svn url"
       ;;
       BOOK_VERSION)
           display="BLFS book version. For the current book, type BOOK. Type blank to get a list. If SOURCES is ArchBinaries, BOOK_VERSION is automatically set to arch."
       ;;
       BOOK)
           display="Enter svn or local. If local the book must be in $BLFS_BOOK_LOC_DIR unless SOURCES is ArchBinaries, in which case it's automatically set to arch"
       ;;
       SOURCES)
           display="Type download, local or ArchBinaries. If local, source files must be in ${SOURCEDIR}/BOOK_VERSION/${SECTION}. If ArchBinaries, create the wget-list file in ${SOURCEDIR}/Arch/${SECTION} and the binaries will be downloaded."
       ;;
       SOURCEURL)
           display="Currently only url_in_book works. anduin is not maintained"
       ;;
       CLEAN_SRC_DIR)
           display="If yes, all files in $WgetList in ${SOURCEDIR}/BOOK_VERSION/${SECTION} will be deleted. Default is no"
       ;;
       UPDATESRCFILES)
           display="If yes, source files for this section will be updated and the urls in the wget-list file made consistent. For this to work, the source files and a wget-list file must exist. Default is no"
       ;;
       USE_ARCH_VERSIONS)
           display="If yes or Arch, the version numbers of the src packages for this SECTION are updated using the Arch Linux website. This is used for those packages that are not in the book (for e.g. python-modules). Default is yes"
       ;;
       SECTION)
           display="options are blfs, security, virtualization, libraries, genutils, sysutils, programming, perlmodules, pythonmodules, pythonmodbin, java, networks, server, x, xlibs, displaymanager, windowmanager, icons, gnomeplatform, telepathy, gnomedesktop, gnomeapps, xfce, xfcegnomeplatform, xfcegnomedesktop, xfcebrowser, lxde, kdeforlxqt, lxdeforlxqt, lxqt, browser, office, xsoftware, multimedia, pst, avr, emergent, openelec, kodi,  nvidia"
       ;;
       XORG_PREFIX)
           display="Choose the installation prefix for Xorg"
       ;;
       XVERSION)
           display="Enter the current X version in the BLFS book"
       ;;
       INSTALLDSKTP)
           display="Options are Gnome, Xfce, LXDE or LXQt. Default is Gnome."
       ;;
       BLFSFILESTAR)
         display="tar file containing the package names and dependencies files. Default is blfsfiles.tar.xz. Place this file in the root directory (i.e. /)"
       ;;
       SINGLE_PACKAGE)
           if [[ "$SECTION" = ALL || "$SECTION" = all ]]; then
             display="Name of the package to install. There is no section ALL, so change it to the correct section for the package you have specified."
           else
             display="Name of the package to install. It must be in $SECTION. If specified, this will take precedence. Type no to switch off this option"
           fi
       ;;
       AS_ROOT)
           display="If yes, install packages as root. If no, install as package user"
       ;;
       SYSTEMD)
           display="Set to yes if LFS was installed using systemd. Otherwise set to no."
       ;;
       DESTDIR)
           display="Set to yes to install a package to a specified directory. Otherwise set to no."
       ;;
       INSTALLDEST)
	   display="Say yes to install from the files created by DESTDIR. Default is no but if DESTDIR=yes then a binary package file is created"
       ;;
       USEPROXY)
           display="Set to yes if a proxy server is running on the host. Otherwise no."
       ;;
       RUNIT)
           display="Default is true. Used in updating source package files. RUNIT=true to update them. Use false when debugging the code."
       ;;
       PRINTIT)
           display="Default is false. Used in updating source package files. Use true when debugging the code."
       ;;
    esac
    value=$(awk -F\= -v x=$tochange '$1==x {print $2}' $cfg)
  ;;
esac
exec 3>&1
newval=$(dialog \
    --backtitle "BLFS config file editor" \
    --title "Change value" \
    --clear \
    --inputbox "$display" 0 0 $value \
    2>&1 1>&3)
case ${newval+x$newval} in
  (x)
     dialog --infobox "Value can't be empty" 0 0
     sleep 2
     exit_status=1
  ;;
  ("")
     dialog --infobox "Value can't be unset" 0 0
     sleep 2
     exit_status=1
  ;;
  (x*[![:blank:]]*)
     exit_status=$? # non blank
  ;;
  (*)
     dialog --infobox "Value can't be blank" 0 0
     sleep 2
     exit_status=1
  ;;
esac
exec 3>&-
case $exit_status in
  $DIALOG_CANCEL)
    return 0
  ;;
  $DIALOG_ESC)
    echo "Program aborted." >&2
    exit 1
  ;;
  $DIALOG_OK)
    dialog \
    --backtitle "BLFS config file editor" \
    --title "Confirmation" \
    --yesno "Commit ?" 0 0
    exit_status=$?
    case $exit_status in
       1)
          dialog \
          --backtitle "BLFS config file editor" \
          --infobox "Value not changed" 0 0
          sleep 1
       ;;
       0)
          awk -v x=$tochange -v n=$newval '
               BEGIN {FS=OFS="="}$1==x {$2=n} {print}
               ' $cfg > $cfg.tmp
          mv $cfg.tmp $cfg
       ;;
    esac
  ;;
esac
return 0
}

_main () {
while true; do
  exec 3>&1
  selection=$(dialog \
    --backtitle "BLFS config file editor" \
    --title "Menu" \
    --clear \
    --cancel-label "Cancel" \
    --menu "Please choose an option:" $HEIGHT $WIDTH 4 \
            1 "View the config file" \
            2 "Edit config file" \
            3 "Exit from this menu" 2>&1 1>&3)
  exit_status=$?
  exec 3>&-
  case $exit_status in
    $DIALOG_CANCEL)
      echo "Cancel pressed. Exit program"
      exit 1
    ;;
    $DIALOG_ESC)
      echo "Program aborted."
      exit 1
    ;;
    $DIALOG_OK)
      case $selection in
        1)
           display_configFile $cfg
        ;;
        2)
           _edit
           display_configFile $cfg
        ;;
        3)
          echo "Exit and process config file"
          return 0
        ;;
      esac
  esac
done
}
_main
} #end configEdit
#
print_Table () {
local dataIn="$(rmBlankLines "$1")"
local delimiter=$2
local i j
local eachWord numColumns
if [ -z "$delimiter" ]; then
  echo "delimiter not set - cannot continue"
  exit 1
fi
#echo "dataIn is ${dataIn[@]}"
numLines=$(wc -l <<< "${dataIn}")
#echo "numLines is $numLines"
i=1
IFS='
'
for aline in ${dataIn[@]}; do
    numColumns="$(awk -F "${delimiter}" '{print NF}' <<< "${aline}")"
  if [ $i -eq 1 ]; then
    currentTable=$(printf '%s#*' "$(repeatStrng '#*' "${numColumns}")")
  fi
  currentTable="${currentTable}\n" # add a new line char
  for ((j=1; j<=$numColumns; j++)); do
    currentTable="${currentTable}$(printf '#|  %s' "$(cut -d "${delimiter}" -f "$j" <<< "${aline}")")"
  done
  currentTable="${currentTable}#|\n" # add a separator and new line
  if [[ $i -eq 1 || $i -eq $numLines ]]; then
    currentTable="${currentTable}$(printf '%s#*' "$(repeatStrng '#*' "${numColumns}")")"
  fi
  i=$((i+1))
done
#echo "currentTable is $currentTable"
# remove leading space and replace spaces with dashes on the * lines
finalTable="$(echo -e "${currentTable}" | column -s '#' -t | awk '{ sub(/^[ \t]+/, ""); print }' | awk '/*/{gsub(" ", "-", $0)} 1')"

echo "$finalTable"
} # end print_Table
#
rmBlankLines () {
local lines="$1"
echo -e "$lines" | sed '/^\s*$/d'
} # endrmBlankLines
#
repeatStrng () {
local strng="${1}"
local numCols="${2}"
if [ ! -z "$strng" ]; then # not null
  local charToReplace="$(printf "%${numCols}s")"
# replace char with the symbol
  echo -e "${charToReplace// /${strng}}"
  return 0
else
  echo "strng is null - abort"
  return 1
fi
} # end repeatStrng
#
GetAllSections () {
local allsec=""
if [ -e "${BLFSBUILDFILES}/allSections" ]; then
  secfile=${BLFSBUILDFILES}/allSections # edit allSections for the sections that 'all' will create
else
  echo "file allSections should be in $BLFSBUILDFILES"
  echo "place it there to continue"
  echo "Exiting now"
  exit 1
fi
if [ ! -e $secfile ]; then
  return $RETURN_PARAM
else
local IFS='
'
allsec=( $( < $secfile ) )
rtrnSec=(${allsec[@]})
return 0
fi
} # end GetAllSections
#
SetupSections () {
numSections=1
if [ "$SECTION" = all ]; then
  rtrnSec=""
  GetAllSections
  return_val=$?
  if [ $return_val -eq $RETURN_PARAM ]; then
    echo "Error reading in allSections file."
    echo "Make sure file allSections is in $BLFSBUILDFILES"
    echo "Exiting now"
    exit 1
  else
    SectionsALL=(${rtrnSec[@]})
    numSections=${#SectionsALL[@]}
  fi
else
  SectionsALL[0]=$SECTION
fi
} # end SetupSections
#
GetLocalREPO () {
local bookdir=$1
# got here because book_version = blank
# create a list of local BLFS books - only works relative to $bookdir
unset Paths
for Path in $( find $bookdir -name index.xml -exec dirname {} ';' ); do
  if [ -e $Path/.svn ]; then
    Paths="$Paths $Path"
  fi
done
PathCount=$( echo $Paths | awk '{print NF}' )
case $PathCount in
   0) echo >&2 "Couldn't find any local BLFS book in $bookdir"
      echo >&2 "Suggest you svn one or specify a different location"
      return $RETURN_PARAM
   ;;
   1) Path=$Paths
      svn info $Path >&2
      PS3="Is this correct? : "
      select confirm in Yes No; do
        case $confirm in
          '') echo >&2 "Please enter 1 for Yes or 2 for No"
          ;;
          ?*) break
          ;;
        esac
      done
      case $confirm in
         No) echo >&2 "This is the only BLFS book in $bookdir"
             return $RETURN_PARAM
         ;;
         Yes) 
            BOOK_VERSION=$(echo $Path | awk 'BEGIN {FS="/"}{print $5}')
            tochange="BOOK_VERSION"
            awk -v x=$tochange -v n=$BOOK_VERSION '
               BEGIN {FS=OFS="="}$1==x {$2=n} {print}
               ' $cfg > $cfgtmp
            mv $cfgtmp $cfg
            return 0
         ;;
      esac
   ;;
   *)
      PS3="which is your $REPO svn repo? : "
      select Path in $( echo $Paths | sed 's@'$HOME'@~@g'); do
        Path=$( echo $Path | sed 's@~@'$HOME'@' )
        case $Path in
         '') echo >&2 "Please select using number"
         ;;
         ?*) echo >&2 "You have selected svn repo"
             svn info $Path >&2
             PS3="Is this correct? : "
             select confirm in Yes No; do
               case $confirm in
                '') echo >&2 "Please enter 1 for Yes or 2 for No"
                ;;
                ?*) break
                ;;
               esac
             done
             case $confirm in
               No) 
                   return $RETURN_PARAM
               ;;
               Yes)
                   BOOK_VERSION=$(echo $Path | awk 'BEGIN {FS="/"}{print $5}')
                   tochange="BOOK_VERSION"
                   awk -v x=$tochange -v n=$BOOK_VERSION '
                   BEGIN {FS=OFS="="}$1==x {$2=n} {print}
                   ' $cfg > $cfgtmp
                   mv $cfgtmp $cfg
                   return 0
               ;;
             esac
         ;;
        esac
      done
   ;;
esac
} # end GetLocalREPO
#
ChkLocalBook () {
# $1 is the book dir
# $2 is the book version
# $3 is either svn or local, as retrieving it from github is currently not available
local localbookdir=$1
local version=$2
local book=$3
echo "Requested book version is $version"
if [ "$book" = local ]; then
  echo "Check to see if it is present in $localbookdir"
  ChkLocalBookExists $localbookdir $version
  return_val=$?
  if [ $return_val -eq $RETURN_PARAM ]; then # requested book not present
    echo "Requested book $version is not present locally. Will need to svn it."
    return 0
  else # book present, test if need to svn or git clone an update
    ChkLocalBookDetails $localbookdir $version
    return_val=$?
    if [ $return_val -eq $RETURN_PARAM ]; then
      exit 1
    else
      echo "Book version $version present in $localbookdir"
      echo "Will use that one."
      return 0
    fi
  fi
elif [ "$book" = svn ]; then
  ChkLocalBookExists $localbookdir $version # check if recently downloaded
  return_val=$?
  if [ $return_val -eq $RETURN_PARAM ]; then # requested book not present locally
    return 0
  else # book present
    ChkLocalBookDetails $localbookdir $version
    return_val=$?
    if [ $return_val -eq $RETURN_PARAM ]; then
      exit 1
    else
      return 0
    fi
  fi
fi
} # end ChkLocalBook
#
ChkLocalBookExists () {
# $1 is the book dir
# $2 is the book version
local bookdir=$1
local version=$2
#
svnorgit="svn"
if [ "$version" = KBLFS ]; then svnorgit="git"; fi
unset BookPath
if [ -d $bookdir ]; then
  for BookPath in $( find $bookdir -name index.xml -exec dirname {} ';' ); do
    if [ -e ${BookPath}/.${svnorgit} ]; then # a book exists, check the version
      if [ "$BookPath" == "${bookdir}/${version}" ]; then
        return 0 #requested version is present locally
      fi
    fi
  done
else
  echo "Dir $bookdir not present locally."
fi
return $RETURN_PARAM #requested book not present locally
} #end ChkLocalBookExists
#
ChkLocalBookDetails () {
# $1 is the dir of the book
# $2 is the book version
local bookdir=$1
local book_version=$2
local datesArray
#
if [ "$book_version" = BOOK ]; then
  # check the last changed date of the book
  local localBookDate=$(svn info ${bookdir}/${book_version} | grep Date)
  retval=$?
  if [ $retval -eq 0 ]; then # svn succeeded
    local onlineBookdate=$(svn info svn://svn.linuxfromscratch.org/blfs/trunk/${book_version} | grep Date)
    ret_val=$?
    if [ $ret_val -eq 0 ]; then 
      if [ "$localBookDate" = "$onlineBookdate" ]; then
        echo "The same book already downloaded today"
        echo "To use it, set BOOK=local in the config file."
        echo "To download it again, delete ${bookdir}/${book_version}"
        return $RETURN_PARAM
      else
        return 0
      fi
    else
      echo "Could not retrieve date of last change of online book."
      echo "Will svn the requested book"
      return 0
    fi
  else
      echo "Could not retrieve date of last change of local book."
      echo "Will svn the requested book"
      return 0
  fi
elif [ "$book_version" = KBLFS ]; then # get the commit hash
  pushd $bookdir > /dev/null
    local -a localCommit=( $(git log --max-count=1) )
  popd > /dev/null
  if [ "$latestCommit" == "${localCommit[1]}" ]; then
    echo "The same commit is already present in $bookdir."
    echo "Set BOOK=local in the config file to use it."
    return $RETURN_PARAM
  else
    return 0
  fi
else # book is a release version so don't update it
  echo "Requested book is present locally and is a release version"
  echo "so update not necessary"
  return $RETURN_PARAM
fi
} # end ChkLocalBookDetails
#
CleanLocalREPO () { # delete any files in the local directory
# $1 is the book dir
# $2 is the book version
local bookdir=$1
local book_version=$2
if [ -d ${bookdir}/${book_version} ]; then #local dir exists
  if [ "$(ls -A ${bookdir}/${book_version})" ]; then
    rm -rf ${bookdir}/${book_version} # delete contents of local book dir
  fi
else  # create it
  install -v -m0755 -d ${bookdir}/${book_version}
fi
} # end CleanLocalREPO
#
GetSvnUrl () {
if [ "$BOOK_URL" = blank ]; then
  BOOK_URL="svn://svn.linuxfromscratch.org/blfs/"
fi
} # end GetSvnUrl
#
WhichBLFSBook () {
# note - type and book_version are global variables
local Ignore="bootscripts"
local blfsVers=$(svn ls ${BOOK_URL}tags | grep -vE "$Ignore")
PS3="Please select the book version : "
select TAG in 'Current Development' $blfsVers; do
  case $TAG in
    '') echo >&2 "Please select a numbered option";;
    Current*)
      type=trunk
      book_version=BOOK
      BOOK_VERSION="Current_Development"
    ;;
    ?*)
      type="tags"
      book_version=$TAG
      BOOK_VERSION=$TAG
    ;;
  esac
  BOOK_FULL_URL="${BOOK_URL}$type/$book_version"
  echo >&2 "You have selected '$TAG'"
  echo >&2 "$BOOK_FULL_URL"
  PS3="Is this correct? : "
  select confirm in Yes No
  do
    case $confirm in
      '') echo >&2 "Please enter 1 for Yes or 2 for No"
      ;;
      ?*) break
      ;;
    esac
  done
  case $confirm in
    No) PS3="Please select the book version : "
    ;;
# update the config file with the book version
    Yes) awk -v x=BOOK_VERSION -v n=$BOOK_VERSION '
             BEGIN {FS=OFS="="}$1==x {$2=n} {print}
             ' $cfg > $cfg.tmp
             mv $cfg.tmp $cfg
         break
    ;;
  esac
done
} #end WhichBLFSBook
#
SetBLFSBook () {
# note - type and book_version are global variables
# $1 is the book version
local version=$1
case $version in
   Current_Development|BOOK)
         type="trunk"
         book_version="BOOK"
   ;;
   *)
         type="tags"
         book_version=$version
   ;;
esac
} #end SetBLFSBook
#
LastAccessSvn () {
# gets the download date from <book-location>/.svn/entries in the form 20160920
# and compares it with today's date in that same format
#
local bookdir=$BLFS_BOOK_LOC_DIR
BookLoc=${bookdir}/${book_version}
if [ -e ${BookLoc}/.svn/entries ]; then #check time of last svn
  EntriesDate=$( stat --printf=%y ${BookLoc}/.svn/entries | awk 'gsub(/-/,"") {printf $1}' )
  date=$(date +'%Y-%m-%d %H:%M:%S') # today's date
  read Y M D h m s <<< ${date//[-: ]/ }
  today=$Y$M$D
  if [ $EntriesDate -eq $today ]; then
    return 0
  else
    return $RETURN_PARAM # dates not equal
  fi
else
  echo "No entries file found in ${BookLoc}/.svn/"
  echo "Abort"
  exit 1
fi
} # end LastAccessSvn
CheckoutBook () {
local bookdir=$1
local version=$2
#
Url="${BOOK_URL}${type}/${version}"
#
echo "Will svn the LFS book at $Url"
echo "and place it in ${bookdir}/${version}"
svn co $Url ${bookdir}/${version} # get the requested book
#
} # end CheckoutBook
#
LocalBookFound () {
# $1 is the book dir
# $2 is the book version
local bookdir=$1
local version=$2
# note - type is a global variable and also SVNINFO
case $version in
   BOOK)
     type="trunk"
   ;;
   *)
     type="tags"
   ;;
esac
if [ "$version" != KBLFS ]; then
  SVNINFO="$(svn info ${bookdir}/${version} | awk '{printf $0"|"}')"
fi
} # end LocalBookFound
#
CleanSourceDir () {
# $1 is the current section
DirToClean=${SOURCEDIR}/${1}
wgetFile=${DirToClean}/${WgetList}
sortedFile=${DirToClean}/${sortedfile}
if [ -d $DirToClean ]; then
  if [ "$(ls -A $DirToClean)" ]; then # dir has files in it
    if [ -e $wgetFile ]; then
      for File in ${DirToClean}/*; do
        fndfile=$( echo $File | awk -F\/ '{print $NF}' )
        if [ -e $wgetFile ]; then
          if [ "$( grep -q $fndfile $wgetFile ; echo $? )" = "0" ]; then
            rm -rf ${DirToClean}/${fndfile} # delete the file if in wget-list
          fi
        fi
      done
      if [ -e $wgetFile ]; then rm $wgetFile; fi
      if [ -e $sortedFile ]; then rm $sortedFile; fi
    else
      echo "List file $wgetFile not present. Cannot clean directory $DirToClean"
    fi
  else
     echo "directory $DirToClean is empty"
  fi
else
  install -v -m0755 -d $DirToClean
fi
} #end CleanSourceDir
#
ChkSrcPresent () {
# check that all sources in the sortedfile ${srcdir}/${section}/${sortedfile} have been downloaded
# if installing Arch binaries, check if the binary package has been downloaded
#
# $1 is the source dir
# $2 is the section
# $3 is the sortedfile name
# $4 is only used if it is archbinaries
# $5 is the Arch binary package name
fileMissing=false
local srcdir=$1
local section=$2
local sortedfile=$3
local sources=$4
local binaryPkg=$5
local foundit
local SrcPath=${srcdir}/${section}
local fullFile=${srcdir}/${section}/${sortedfile}
if [ ! -e $fullFile ]; then # sortedfile not found
  return 1
fi
# if $5 is given, just search SrcPath for this name
if [ ! -z "$binaryPkg" ]; then
  foundit=$( find $SrcPath -name "*$binaryPkg*" )
  if [ ! -z "$foundit" ]; then
    if $printit; then echo "file ${SrcPath}/${binaryPkg} downloaded"; fi
    return 0
  else
    if $printit; then echo "file ${SrcPath}/${binaryPkg} not downloaded"; fi
    return $RETURN_PARAM
  fi
else
  if [ -s ${srcdir}/${section}/${sortedfile} ]; then # file is not empty
    while read FileUrl; do
      if [[ ${FileUrl:0:1} != '#' ]]; then # ignore file if it has a hash at the start
        filetofind=$( echo $FileUrl | awk -F\/ '{print $NF}' )
        case $filetofind in
           v5*) # file is chromium-launcher-5
             filetofind=chromium-launcher-5.tar.gz
           ;;
           midori*) # file is in browser section
             SrcPath="${srcdir}/browser"
           ;;
           openbox*) # file is in windowmanager
             SrcPath="${srcdir}/windowmanager"
           ;;
           sddm*) # file is in displaymanager
             SrcPath="${srcdir}/displaymanager"
           ;;
        esac
        if [ ! -e ${SrcPath}/${filetofind} ]; then
          echo "file ${SrcPath}/${filetofind} not downloaded"
          fileMissing=true
        fi
      fi
    done < $fullFile
    if $fileMissing; then
      return $RETURN_PARAM
    else
      return 0
    fi
  else # empty
    return $RETURN_EMPTY
  fi
fi
} # end ChkSrcPresent
#
createMd5File () {
local commandname=$1
local bookSection="x"
rtrnCom=""
local filetoget=${commandname}fnames
getComms $filetoget $bookSection
#for ((jkl=0; jkl<${#rtrnCom[@]}; jkl++)); do
#  echo "rtrnCom[$jkl] is ${rtrnCom[jkl]}"
#done
# write rtrnCom to a temp file and execute it to create the .md5 file
local tempfile=$(date +%d%B%Y_%H:%M)tmp.file
printf "%s\n" "${rtrnCom[@]}" > ${SrcPath}/${commandname}/${tempfile} #write to a tmp file
pushd ${SrcPath}/${commandname}
bash -e $tempfile
rm $tempfile
popd
return 0
} # createMd5File
#
GetXtraFiles () {
local commandname=$1
local bookSection="x"
rtrnCom=""
local filetoget=${commandname}wget
getComms $filetoget $bookSection
#for ((jkl=0; jkl<${#rtrnCom[@]}; jkl++)); do
#  echo "rtrnCom[$jkl] is ${rtrnCom[jkl]}"
#done
tempfile=$(date +%d%B%Y_%H:%M)tmp.file
printf "%s\n" "${rtrnCom[@]}" | sed -e 's/mkdir /mkdir -pv /' \
                                    -e 's/\(.*\)&&$/\1/' \
                              > ${SrcPath}/${1}/${tempfile}
pushd ${SrcPath}/${commandname}
bash -e $tempfile
rm $tempfile
popd
return 0
} # end GetXtraFiles
#
# convert char to ascii and vice versa
chr() {
  [ "$1" -lt 256 ] || return 1
  printf "\\$(printf '%03o' "$1")"
} # end of chr
#
ord() {
  LC_CTYPE=C printf '%d' "'$1"
} # end ord
#
GetAsciiVal () {
# $1 is the string to convert to ascii
local inputStr=$1
local sum=0
local value
for (( i=0; i<${#inputStr}; i++ )); do
  value=$(ord ${inputStr:$i:1})
  sum=$((sum+$value))
done
echo "$sum"
return 0
} # end GetAsciiVal
#
GetPubGnome () {
local pubgnome=""
local pubgnomefile=${BLFSBUILDFILES}/latestpubgnomesources
if [ ! -e $pubgnomefile ]; then
  return $RETURN_PARAM
else
local IFS='
'
pubgnome=( $( < $pubgnomefile ) )
rtrnPubGnome=(${pubgnome[@]})
return 0
fi
} # end GetPubGnome
#
updateSorted () {
# $1 is the array holding the list of "Click to enter 'version' strings"
# $2 is the url
# $3 is the package name, no version num but include the - after the name
# $4 is the file extension, .tar.xz, .tar.bz2, .tar.gz, .tgz or .zip
# $5 is the index number in ClickToDnld containing the filename
local ClickToEnter=("${!1}")
#echo "in updateSorted"
local ClickToDnld # array containing list of "Click to download 'filename' strings"
local latestVer=${ClickToEnter[1]} # assumes the first one is the latest - note [0] is empty
latestVer=${latestVer#"Click to enter "} # version number
local url="${2}${latestVer}/" # new url for page to search
local pattern
case $3 in
   boost_)
     latestVer="${latestVer//./_}" # version is _
     pattern="${3}${latestVer}${4}"
   ;;
   cracklib-words-)
     latestVer=${latestVer//-/}
     pattern="${3}${latestVer}${4}"
   ;;
   faad2-)
     pattern="${latestVer}/${latestVer}${4}"
   ;;
   libusb-)
     pattern="${latestVer}${4}"
   ;;
   sqlite-*)
     pattern=$3
     url=${url/e 3/e%203} # fix the space in the version number
   ;;
   tk8.)
     pattern="${fnameonly}${latestVer}-src.tar.gz"
   ;;
   *)
     pattern="${3}${latestVer}${4}"
   ;;
esac
#echo "url is $url"
#echo "pattern is $pattern"
local foundPat=$(/usr/bin/php srcFileVers.php -- $pattern $url $3)
if [ "$foundPat" = "" ]; then
  return $RETURN_PARAM
fi
# page found so update array
readarray -t ClickToDnld <<< "$foundPat"
#echo "ClickToDnld is ${ClickToDnld[@]}"
local indexnum=$5
local filename=${ClickToDnld[indexnum]} #  [0] is empty
#echo "filename is $filename"
filename=${filename#*"Click to download "}
#echo "filename is $filename"
rtrnFname=$filename
#echo "exit updateSorted"
return 0
} # end updateSorted
#
do_version_check() {
# compare two version numbers, $1 and $2
# #3 is the char to split up the version - usually .
# $4 is the char to split up the part separated by #3
# e.g. 1.8.10p3 $3 is . $4 is p
local split=$3
local subsplit=$4

   [ "$1" == "$2" ] && return $RETURN_EQ

   ver1front=`echo $1 | cut -d "$split" -f -1`
   ver1back=`echo $1 | cut -d "$split" -f 2-`

   ver2front=`echo $2 | cut -d "$split" -f -1`
   ver2back=`echo $2 | cut -d "$split" -f 2-`

   if [ "$ver1front" != "$1" ] || [ "$ver2front" != "$2" ]; then
       [ "$ver1front" -gt "$ver2front" ] && return $RETURN_GT
       [ "$ver1front" -lt "$ver2front" ] && return 0

       [ "$ver1front" == "$1" ] || [ -z "$ver1back" ] && ver1back=0
       [ "$ver2front" == "$2" ] || [ -z "$ver2back" ] && ver2back=0
       do_version_check "$ver1back" "$ver2back" "$split" "$subsplit"
       return $?
   else
      if [[ ! -z "$subsplit" && $ver1front == *$subsplit* ]]; then
           do_version_check "$ver1back" "$ver2back" "$subsplit" "$subsplit"
      else # test if need to split ver2front
          if [[ ! -z "$subsplit" && $ver2front == *$subsplit* ]]; then
            do_version_check "$ver1back" "$ver2back" "$subsplit" "$subsplit"
          else
            [[ "$1" > "$2" ]] && return $RETURN_GT || return 0 # string comparison
#            [ "$1" -gt "$2" ] && return $RETURN_GT || return 0
          fi
      fi
   fi
} # end do_version_check
#
compare_versions () {
#
# compares two version numbers
# returns $RETURN_GT if $1 > $2 
# return $RETURN_EQ if $1 = $2
# otherwise returns 0, i.e. $2 > $1
# $3 is the separator to parse the version number, usually .
#
local IFS="$3"
local a1=( $1 )
local a2=( $2 )
# some versions have a - in them, e.g. ImageMagick
local b1=$(IFS='-'; echo "${a1[*]}") # string b1 is now - delimited
local b2=$(IFS='-'; echo "${a2[*]}")
IFS='-' read -ra a1 <<< "$b1" # put delimited string back into array
IFS='-' read -ra a2 <<< "$b2"
#echo "a1 is ${a1[@]}"
#echo "a2 is ${a2[@]}"
local num_a1=${#a1[@]}
local num_a2=${#a2[@]}
#echo "numa1, numa2 are $num_a1 $num_a2"
local max=$(( $num_a1 > $num_a2 ? $num_a1 : $num_a2 ))
local im
for (( im=0; im<$max; im++ )); do
# deal with invalid octal. usbutils uses 00 type versioning.
  if [ "${a1[im]}" = "08" -o "${a1[im]}" = "09" ]; then a1[im]=${a1[im]#?}; fi
  if [ "${a2[im]}" = "08" -o "${a2[im]}" = "09" ]; then a2[im]=${a2[im]#?}; fi
  if [ "${a1[im]}" = "008" -o "${a1[im]}" = "009" ]; then a1[im]=${a1[im]#??}; fi
  if [ "${a2[im]}" = "008" -o "${a2[im]}" = "009" ]; then a2[im]=${a2[im]#??}; fi
#echo "a1 is ${a1[im]}"
#echo "a2 is ${a2[im]}"
  if [ "${a1[im]}" -eq "${a1[im]}" ] 2>/dev/null; then # is integer
    if [ "${a2[im]}" -eq "${a2[im]}" ] 2>/dev/null; then # can compare
      (("${a1[im]}" > "${a2[im]}")) && return $RETURN_GT
      (("${a2[im]}" > "${a1[im]}")) && return 0
    else
         return $RETURN_GT # a2 missing so a1 greater
    fi
  else
         return 0 # a2 greater
  fi
done
# if got here then a1 and a2 are equal
return $RETURN_EQ
} # end compare_versions
#
findMaxVers () {
# $1 is the array holding the filenames
# $2 is the extension of the file - xz, bz2, gz, patch.gz, tgz or zip
# $3 is the pattern to trim to
# $4 is the current version in the wget-list file
# $5 is the package tar filename
local filesArray=("${!1}")
local extType=$2
local trimto=$3
local extension="tar.xz"
local CurrentMaxVers=$4
local fname=$5
local instor=0 # the index of the max version file in the filesArray array
local foundit=false # true if $maxVers found in filesArray
local maxVers=$CurrentMaxVers # this will change if there is a later version
#
case $extType in
   bz2)
     extension="tar.bz2"
   ;;
   gz)
     extension="tar.gz"
   ;;
   gz2)
     extension=".gz"
   ;;
   patch.gz)
     extension="patch.gz"
   ;;
   tgz)
     extension=".tgz"
   ;;
   zip)
     extension=".zip"
   ;;
   tar)
     extension=".tar"
   ;;
   lzma)
    extension="tar.lzma"
   ;;
esac
for ((in=0; in<${#filesArray[@]}; in++)); do
  case ${filesArray[in]} in
     *$extension) # parse the version number of all files of type $extension
        namePlusVer="${filesArray[in]%${trimto}*}" # name plus version
        case $fname in
           bind-*)
             justVers=${namePlusVer#bind-}
             do_version_check "$justVers" "$maxVers" "." "-P"
             ret_val=$?
           ;;
           boost_*) # uses underscore
             justVers=${namePlusVer#boost_}
             case $justVers in
                *rc*) # release candidate - ignore
                  ret_val=0
                ;;
                *)
                  compare_versions $justVers $maxVers "_"
                  ret_val=$?
                ;;
             esac
           ;;
           cracklib-words-*)
             namePlusVer="${filesArray[in]%".gz"*}" # name plus version
             justVers="${namePlusVer#"cracklib-words-"}"
             compare_versions $justVers $maxVers "_"
             ret_val=$?
           ;;
           icu4c*)
             namePlusVer="${filesArray[in]%-src*}" # name plus version
             justVers=$(echo $namePlusVer | awk -F\- '{print $NF}')
             case $justVers in
                *rc*) # release candidate - ignore
                  ret_val=0
                ;;
                *)
                  compare_versions $justVers $maxVers "_"
                  ret_val=$?
                ;;
             esac
           ;;
           ImageMagick-*)
             justVers=${namePlusVer#"ImageMagick-"}
             case $justVers in
                *rc*) # release candidate - ignore
                  ret_val=0
                ;;
                *)
                  compare_versions $justVers $maxVers "."
                  ret_val=$?
                ;;
             esac
           ;;
           LVM2*)
             justVers=${namePlusVer#"LVM2."}
             case $justVers in
                *rc*) # release candidate - ignore
                  ret_val=0
                ;;
                *)
                  compare_versions $justVers $maxVers "."
                  ret_val=$?
                ;;
             esac
           ;;
           speex-*) # if latest version is of the form 1.2rc2.tar.gz - can't handel that
             case ${filesArray[in]} in
                *1.2rc2*)
                  instor=$in
                ;;
             esac
             ret_val=$RETURN_EQ
           ;;
           sudo-*) # has p1, p2, p3 etc in the version
             justVers=$(echo $namePlusVer | awk -F\- '{print $NF}')
             do_version_check "$justVers" "$maxVers" "." "p"
             ret_val=$?
           ;;
           "tk8"*"-src"*)
             justVers=${namePlusVer#"tk8."}
             compare_versions $justVers $maxVers "."
             ret_val=$?
           ;;
           whois-*)
             justVers=${namePlusVer#whois-} # changed from whois_ to whois-, 02/10/18
             case $justVers in
                *rc*) # release candidate - ignore
                  ret_val=0
                ;;
                *)
                  compare_versions $justVers $maxVers "."
                  ret_val=$?
                ;;
             esac
           ;;
           wireless_tools*)
             justVers=$(echo $namePlusVer | awk -F\. '{print $NF}')
             case $justVers in
                *rc*) # release candidate - ignore
                  ret_val=0
                ;;
                *)
                  compare_versions $justVers $maxVers "."
                  ret_val=$?
                ;;
             esac
           ;;
           zip*)
             justVers=${namePlusVer#"zip"}
             compare_versions $justVers $maxVers "."
             ret_val=$?
           ;;
           *)
             justVers=$(echo $namePlusVer | awk -F\- '{print $NF}')
             case $justVers in
                *rc*|*RC*|*c1*) # release candidate - ignore. gimp has RC, pyxdg has c1
                  ret_val=0
                ;;
                *)
#echo "justVers is $justVers"
#echo "maxVers is $maxVers"
                  compare_versions $justVers $maxVers "."
                  ret_val=$?
                ;;
             esac
           ;;
        esac
        if [ $ret_val -eq $RETURN_GT ]; then # justVers is >
          maxVers=$justVers
          foundit=true
          instor=$in # store the index of current max version
        elif [ $ret_val -eq $RETURN_EQ ]; then
          foundit=true
          instor=$in # versions are the same so store the index
        fi
     ;;
  esac
done
if [ "$maxVers" = "$CurrentMaxVers" ]; then # CurrentmaxVers unchanged
  if ! $foundit; then
    return $RETURN_PARAM
  else
    echo $instor # array index of the max version
    return $RETURN_EQ
  fi
else
  echo $instor # return the array index of the max version
  return 0
fi
} # end findMaxVers
#
setup_colors() {
# WB is white background
cat >> $Output << "EOF"
setup_colors() {
NC=$(tput sgr 0) RED=$(tput setaf 1) GREEN=$(tput setaf 2) YELLOW=$(tput setaf 3) BLUE=$(tput setaf 4) MAGENTA=$(tput setaf 5) CYAN=$(tput setaf 6) WHITE=$(tput setaf 7) BOLD=$(tput bold) WB=$(tput setab 7)
} # end setup_colors
setup_colors # setup colors to indicate status of dependencies
EOF
} # end setup_colors
#
uniqueArray () {
# $1 is the array to sort
local unsorted_array=("${!1}")
local ip
local IFS=$'\n'
local sorted_array=( $(printf "%s\n" "${unsorted_array[@]}" | sort -u) )
rtrnSorted=(${sorted_array[@]})
} # end uniqueArray
#
detExtType () {
# determine the extension type of a tar file
# the hierarchy is zst, xz, bz2, gz, tgz and zip
local sortedVers=("${!1}")
local isZST=false
local isXZ=false
local isLZMA=false
local isBZ2=false
local isGZ=false
local isGZ2=false
local ispatchGZ=false
local isTGZ=false
local isZIP=false
local isTAR=false
local extType
#
for ((in=0; in<${#sortedVers[@]}; in++)); do # decide which files to test, .xz, .bz2, .gz, .tgz or zip
  case ${sortedVers[in]} in
     *tar.zst*)
        isZST=true
        break
     ;;
     *tar.xz*)
        isXZ=true # if .xz file present, don't need to continue searching
        break
     ;;
     *.tar.lzma*) # e.g. curl
        isLZMA=true
        break
     ;;
     *tar.bz2*)
        isBZ2=true
     ;;
     *tar.gz*)
        isGZ=true
     ;;
     *.patch.gz*) # for libpng patch file
        ispatchGZ=true
        break
     ;;
     *[0-9].gz*) # for cracklib-words - no tar in name
        isGZ2=true
        trimto=".gz"
     ;;
     *.tgz*)
        isTGZ=true
     ;;
     *.zip*)
        isZIP=true
     ;;
     *-signed.tar) # for krb5
        isTAR=true
        break
     ;;
  esac
done
# Set extension type to use, based on the hierarchy of tar files
if $isZST; then
  extType="zst"
elif $isXZ; then
  extType="xz"
elif $isLZMA; then
  extType="lzma"
elif $isBZ2; then
  extType="bz2"
elif $isGZ; then
  extType="gz"
elif $ispatchGZ; then
  extType="patch.gz"
elif $isGZ2; then
  extType="gz2"
elif $isTGZ; then
  extType="tgz"
elif $isZIP; then
  extType="zip"
elif $isTAR; then
  extType="tar"
else
  return $RETURN_PARAM
fi
echo $extType
return 0
} # end detExtType
#
getPkgVersion () {
# used with GetLatestFiles
# get the package name and version from the src file name
# $1 is the src file name
# $2 is the pattern to trim to - usually .tar
local pkgfile=$1
local trimto=$2
local pkgPlusVers="${pkgfile%${trimto}*}"
local pkgvers
local pkgnm
#echo "pkgfile is $pkgfile"
#echo "trimto is $trimto"
#echo "pkgPlusVers is $pkgPlusVers"
case $pkgPlusVers in
   "bind-"*"P"*) # test if filename has a P
      pkgvers=$(echo $pkgPlusVers | awk -F\- '{print $2"-"$NF}')
   ;;
   boost_*)
      pkgvers=$(echo $pkgPlusVers | awk -F\_ '{print $2"_"$3"_"$4}') # _ underscore
   ;;
#   gcc-*)
#      pkgvers=$(echo $pkgPlusVers | awk -F\- '{print $2"-"$NF}')
#   ;;
   ImageMagick-*) # versions are of the form 7.0.10-43
      pkgvers=$(echo $pkgPlusVers | awk -F\- '{print $2"-"$NF}')
   ;;
   libdbusmenu-qt_*)
      pkgvers=$(echo $pkgPlusVers | awk -F\_ '{print $NF}') # _ separator
   ;;
   LVM2.*)
      pkgvers=$(echo $pkgPlusVers | awk -F\. '{print $2"."$3"."$4}') # . separator
   ;;
   midori_*)
      pkgvers=$(echo $pkgPlusVers | awk -F\_ '{print $2"_"$3"_"}') # _ separator
   ;;
   tk8.*)
      pkgvers=$(echo $pkgPlusVers | awk -F\. '{print $2"."$3}') # . separator
   ;;
   wireless_tools.*)
      pkgvers=$(echo $pkgPlusVers | awk -F\. '{print $2}')
   ;;
   x265_*|libaio_*)
      pkgvers=$(echo $pkgPlusVers | awk -F\_ '{print $NF}') # _ separator
   ;;
   *)
      pkgvers=$(echo $pkgPlusVers | awk -F\- '{print $NF}')
   ;;
esac
#echo "In getPkgVers - pkgvers is $pkgvers"
# trim to the version number
pkgnm="${pkgPlusVers%${pkgvers}}"
#echo "pkgnm is $pkgnm"
# return pkgnm and pkgvers as the RtrnVars global array
RtrnVars[0]=$pkgnm
RtrnVars[1]=$pkgvers
} # end getPkgVersion
#
Getbooksec () {
# $1 is the section
# returns the name of the section in the book corresponding to $section
local section=$1
local bookSection=general
#
case $section in
  blfs|security|virtualization)
        bookSection=postlfs
  ;;
  gnomeplatform|gnomedesktop|gnomeapps|xfcegnomeplatform|xfcegnomedesktop)
        bookSection=gnome
  ;;
  kdeforlxqt)
        bookSection=kde
  ;;
  lxde|lxdeforlxqt)
        bookSection=lxde
  ;;
  lxqt)
        bookSection=lxqt
  ;;
  multimedia)
        bookSection=multimedia
  ;;
  networks)
        bookSection=basicnet
  ;;
  office|xsoftware|browser|xfcebrowser)
        bookSection=xsoft
  ;;
  pst)
        bookSection=pst
  ;;
  server)
        bookSection=server
  ;;
  icons|x|xlibs|displaymanager|windowmanager)
        bookSection=x
  ;;
  xfce)
        bookSection=xfce
  ;;
esac
echo $bookSection
} # end Getbooksec
#
getCurrentSrcFile () {
# $1 is the current section
# $2 is the search string for the filename
# creates the global array fileExists containing the source files that match the search string
unset fileExists # clear any elements of the array
local section=$1
local srcLoc="${SOURCEDIR}/${section}"
local searchString=$2
#echo "in getCurrentSrcFile"
#echo "section is $section"
#echo "search string is $searchString"
fileExists=($(find $srcLoc -type f -name "$searchString"))
} # end getCurrentSrcFile
#
delAndDnld () {
# delete existing files and download new ones
# $1 is the array of existing files
# $2 is the file to download
# $3 is the full url of the file to download
# $4 is the source destination - usually $sourceLoc, but not for section x
# $5 is a flag set if the files are coming from x7app, x7font or x7lib source
# this is so the src url is NOT written to the wget-list file
local -a delFile=("${!1}")
local fileToDownload=$2
local fullUrl=$3
local srcLoc=$4
local x7source=${5:-false}
local num
local fileToUse
local nstor
local -a src
num=${#delFile[@]}
if [ $num -gt 0 ]; then
  for ((n=0; n<$num; n++)); do
    src[n]=$(echo ${delFile[n]} | awk -F\/ '{print $NF}') # just the filename
  done
  if [ $num -eq 1 ]; then
    if $printit; then echo "This package: ${src[0]} is in $srcLoc"; fi
  else
    if $printit; then echo "These packages: ${src[@]} are present in $srcLoc"; fi
  fi
  if [ ! -z "$pkgvers" ]; then
    storvers=$pkgvers # version of file to download
  else # check if this is the php manual
    if [ "${src[0]}" = "php_manual_en.html.gz" ]; then
      echo "php_manual_en.html.gz already downloaded"
      return 0
    else
      echo "Warning - pkgnm is null"
      echo "Abort -"
      exit 1
    fi
  fi
# if $fileToDownload is a tar file, then deal with general tar files
  case $fileToDownload in
     *tar.xz*|*tar.bz2*|*tar.gz*|*tar.lzma*)
       for ((n=0; n<$num; n++)); do
         if [[ "${src[n]}" == *tar.*z* ]]; then
           fileToUse=${src[n]} # need this to determine if it is deleted
           nstor=n
           break
         fi
       done
     ;;
     *.tgz*) # tgz extension
       case $fileToDownload in
          zip30.tgz) # http and ftp filenames are different - zip30.tar.gz and zip30.tgz
            fileToUse="zip30.tar.gz"
          ;;
          unzip60.tgz) # http and ftp filenames are different - unzip60.tar.gz and unzip60.tgz
            fileToUse="unzip60.tar.gz"
          ;;
          *)
            for ((n=0; n<$num; n++)); do
              if [[ "${src[n]}" == *.tgz* ]]; then
                fileToUse=${src[n]}
                nstor=n
                break
              fi
            done
          ;;
       esac
     ;;
     *.zip*) # zip files
       for ((n=0; n<$num; n++)); do
         if [[ "${src[n]}" == *.zip* ]]; then
           fileToUse=${src[n]}
           nstor=n
           break
         fi
       done
     ;;
     *.patch*) # deal with a patch file
       for ((n=0; n<$num; n++)); do
         if [[ "${src[n]}" == *.patch* ]]; then
           fileToUse=${src[n]}
           nstor=n
           break
         fi
       done
     ;;
     *amd64.deb*) # .deb file in chromium
       for ((n=0; n<$num; n++)); do
         if [[ "${src[n]}" == *amd64.deb* ]]; then
           fileToUse=${src[n]}
           nstor=n
           break
         fi
       done
     ;;
  esac
  if $printit; then echo "fileToUse is $fileToUse"; fi
  RtrnVars=""
  case $fileToUse in
       apache-maven-*-bin.*)
            getPkgVersion $fileToUse "-bin"
       ;;
       *.deb)
            RtrnVars[0]=$(echo $fileToUse | awk -F\_ '{print $1}')
            RtrnVars[0]="${RtrnVars[0]}_"
            versionPlus="${fileToUse#${pkgnm}*}"
            RtrnVars[1]=$(echo $versionPlus | awk -F\_ '{print $1}')
       ;;
       gnome-user-docs-*)
            getPkgVersion $fileToUse ".tar" # version after the docs-
       ;;
       *-docs*) # version before docs
            getPkgVersion $fileToUse "-docs" # e.g. Linux-PAM-
       ;;
       gtk-doc-*) # trim to .tar
            getPkgVersion $fileToUse ".tar" # needed here or gets caught in next line
       ;;
       *-doc-*)
            getPkgVersion $fileToUse "-doc" # e.g. freetype-doc
       ;;
       exiv2-*)
            getPkgVersion $fileToUse "-Source"
       ;;
       icu4c-*-src*|rustc-*-src*|apache-ant-*-src.*|apache-maven-*-src.*)
            getPkgVersion $fileToUse "-src"
       ;;
       jdk-*)
	    getPkgVersion $fileToUse "_linux"
       ;;
       libevent-*)
            getPkgVersion $fileToUse "-stable"
       ;;
       libpng-*patch.*z*)
            getPkgVersion $fileToUse "-apng"
       ;;
       LVM2.*)
            getPkgVersion $fileToUse ".tgz"
       ;;
       mupdf-*|cups-[0-9]*)
            getPkgVersion $fileToUse "-source"
       ;;
       *.patch)
           case $fileToUse in
              x265_*)
                RtrnVars[0]=$(echo $fileToUse | awk -F\_ '{print $1}') # _ separator
                RtrnVars[0]="${RtrnVars[0]}_"
              ;;
              *)
                RtrnVars[0]=$(echo $fileToUse | awk -F\- '{print $1}')
                RtrnVars[0]="${RtrnVars[0]}-"
              ;;
            esac
            versionPlus="${fileToUse#${pkgnm}*}"
            RtrnVars[1]=$(echo $versionPlus | awk -F\- '{print $1}')
       ;;
       unzip60.tar*)
            RtrnVars[0]="unzip"
            RtrnVars[1]=60
       ;;
       zip30.tar*)
            RtrnVars[0]="zip"
            RtrnVars[1]=30
       ;;
       *)
            getPkgVersion $fileToUse ".tar"
       ;;
  esac
  pkgnm=${RtrnVars[0]}
  pkgvers=${RtrnVars[1]}
  if $printit; then echo "pkgnm is $pkgnm"; fi
  if $printit; then echo "pkgvers is $pkgvers"; fi
  if $printit; then echo "version to install is $storvers"; fi
  if [ "$pkgvers" = "$storvers" ]; then
    echo "Version $pkgvers of $pkgnm already downloaded."
# don't need to change urlarray
#    if $runit; then echo "$fullUrl" >> ${sourceLoc}/${wgetlist}; fi
  else # cycle through the files in src[@] asking whether to delete them
    if $runit; then
      local fileToUseNotDel=false # true if $fileToUse not deleted
      for ((n=0; n<$num; n++)); do
        local deleted=true
        echo "delete ${src[n]} [Y/n]?"
          read replyDel
          case $replyDel in
            [yY]|[yY][Ee][Ss])
              rm -v ${delFile[n]}
            ;;
            [nN]|[nN][Oo])
              echo "file ${src[n]} not deleted"
	      deleted=false
# is the URL in the urlarray?
              local keepURL=""
              keepURL=$(printf '%s\n' "${urlarray[@]}" | grep -P "${src[n]}")
              if [ -z "$keepURL" ]; then # null so not in the wget-list file
#
# Note - this file has been kept so is likely a later version than the src file in the book
# If it hasn't been added to the wget-list file then the URL for this file
# is not available in this code. Therefore recommend the URL be added manually to the wget-list file.
#
                echo "The URL for ${src[n]} is not in the wget-list file"
		echo "You should add it so this can work correctly"
	      else
		if $printit; then echo "URL of kept file is $keepURL"; fi
	      fi
            ;;
            *)
              rm -v ${delFile[n]}
            ;;
          esac
          if $deleted; then
            local pattern=$(printf '%s\n' ${urlarray[@]} | grep -P "${src[n]}")
            urlarray=( "${urlarray[@]/$pattern}" ) # delete url from the urlarray
          else # not deleted
            fileToUseNotDel=true
          fi
      done
      echo "Download $fileToDownload [Y/n]?"
      read reply_Dwnld
      case $reply_Dwnld in
         [yY]|[yY][Ee][Ss])
           wget -O ${srcLoc}/${fileToDownload} $fullUrl
           chown 0:0 ${srcLoc}/${fileToDownload}
           if ! $x7source; then
             if $printit; then echo "Will add $fullUrl to the urlarray"; fi
             urlarray+=($fullUrl)
#             echo "$fullUrl" >> ${sourceLoc}/${wgetlist}
           fi
         ;;
         [nN]|[nN][Oo])
           echo "File not downloaded"
           reply_Dwnld=$(echo ${reply_Dwnld,,*}) # make sure it's lowercase
           if [ "$reply_Dwnld" = n -a $fileToUseNotDel = true ]; then # a later version than that in the book
             echo "File $fileToUse not deleted and"
             echo "File $fileToDownload not downloaded"
# if fileToDownload URL is in the urlarray, delete it
             local pattern=""
	     pattern=$(printf '%s\n' ${urlarray[@]} | grep -P "$fileToDownload")
	     if [ ! -z "$pattern" ]; then
               if $printit; then echo "found $fileToDownload URL in the urlarray - delete it"; fi
	       urlarray=( "${urlarray[@]/$pattern}" )
	     fi
      	     case $fileToUse in
                *"jdk-"*"tar.gz"*) # the jdk in the book
                 echo "URL $keepURL already in the urlarray - do nothing"
                ;;
                *)
# test which of fileToUse and fileToDownLoad is the later version
# TODO - trimto for npv1 may be different from trimto for npv2 - not allowed for here
                  case $fileToUse in
                     apache-maven-*-bin*)
                       trimto="-bin"
		     ;;
                     rustc-*-src*|apache-maven-*-src*|apache-ant-*-src*)
                       trimto="-src"
                     ;;
                     *)
                       trimto=".tar"
                     ;;
                  esac
                  npv1="${fileToUse%${trimto}*}" # name plus version
                  npv2="${fileToDownload%${trimto}*}"
                  case $npv1 in
                     ImageMagick*) # version is of the type 7.0.10-43
                       justvers1=$(echo $npv1 | awk -F\- '{print $2"-"$NF}')
                       justvers2=$(echo $npv2 | awk -F\- '{print $2"-"$NF}')
                     ;;
                     *)
                       justvers1=$(echo $npv1 | awk -F\- '{print $NF}')
                       justvers2=$(echo $npv2 | awk -F\- '{print $NF}')
                     ;;
                  esac
                  if $printit; then echo "call compare_versions"; fi
                  if $printit; then echo "v1 and v2 are $pkgvers $storvers"; fi
                  compare_versions $pkgvers $storvers "."
                  ret_val=$?
                  if $printit; then echo "ret_val is $ret_val"; fi
                  if [ $ret_val -eq $RETURN_GT ]; then
	            if [ ! -z "$keepURL" ]; then # already in the urlarray - do nothing
	              newFullUrl=$keepURL
		    else
                      justfname=$(echo $fullUrl | awk -F\/ '{print $NF}')
                      justURL="${fullUrl%${justfname}*}"
                      newFullUrl=${justURL}${fileToUse}
		    fi
                  else
                    fileToUse=$fileToDownload
                    newFullUrl=$fullUrl
                  fi
                  if $printit; then echo "newFullUrl is $newFullUrl"; fi
                  echo "Will add $newFullUrl to the urlarray"
                  urlarray=( "${urlarray[@]/$newFullUrl}" ) # try to delete it in case it's already there
                  urlarray+=($newFullUrl)
                ;;
	     esac
           fi
         ;;
         *)
           wget -O ${srcLoc}/${fileToDownload} $fullUrl
           chown 0:0 ${srcLoc}/${fileToDownload}
           if ! $x7source; then
             if $printit; then echo "Will add $fullUrl to the urlarray"; fi
             urlarray+=($fullUrl)
           fi		 
         ;;
      esac
    fi # runit
  fi
else # num=0, no existing files to delete
  echo "No previous versions of this package were found in $srcLoc"
  if $runit; then
    case $fileToDownload in
       clang-*)
         echo "package clang will be downloaded at install time"
       ;;
       compiler-rt-*)
         echo "package compiler-rt will be downloaded at install time"
       ;;
       jtreg-*)
         echo "jtreg- test harness not used - download if need to run tests in jdk"
       ;;
       lua-*tests*)
         echo "package lua-<version>-tests.tar.gz not used here."
       ;;
       ralcgm-*)
         echo "package ralcgm not required"
       ;;
       t1lib-*)
         echo "package t1lib not required"
       ;;
       urt-*)
         echo "package urt not required"
       ;;
       *)
         echo "Download $fileToDownload [Y/n]?"
         read reply_Dwnld
         case $reply_Dwnld in
            [yY]|[yY][Ee][Ss])
               wget -O ${srcLoc}/${fileToDownload} $fullUrl
               chown 0:0 ${srcLoc}/${fileToDownload}
               if $printit; then echo "Will add $fullUrl to the urlarray"; fi
               urlarray+=($fullUrl)
            ;;
            [nN]|[nN][Oo])
               echo "File not downloaded"
            ;;
            *)
               wget -O ${srcLoc}/${fileToDownload} $fullUrl
               chown 0:0 ${srcLoc}/${fileToDownload}
               if $printit; then echo "Will add $fullUrl to the urlarray"; fi
               urlarray+=($fullUrl)
            ;;
         esac
       ;;
    esac
  fi
fi
} # end delAndDnld
#
x7FileChk () {
# $1 is the x7 section - x7app, x7font, x7lib
# $2 is the lines from the book containing the md5sums and filenames
local x7section=$1
local mdPlusfname=("${!2}")
local num=${#mdPlusfname[@]}
local curSec="${x7section#x7}"
local srcLoc="${sourceLoc}/${x7section}/${curSec}"
local j
local im
local count=0
local -a filename
local -a md5sum
local serchstr
local otherFiles
local xorgPubUrl="http://ftp.x.org/pub/individual/${curSec}/"
local fileUrl
local pkgnm
if $printit; then
  echo "x7section is $x7section"
  echo "curSec is $curSec"
  echo "srcLoc is $srcLoc"
  echo "xorgPubUrl is $xorgPubUrl"
fi
for ((j=1; j<$num; j+=2)); do
# store the md5sum
  md5sum[count]=${mdPlusfname[j]}
  ((count++))
done
# remove class literal from the first element
local classlit='class="literal">'
md5sum[0]="${md5sum[0]#*${classlit}}"
local total=${#md5sum[@]}
local lastE=$((total-1))
if [[ "${md5sum[lastE]}" == *"<code"* ]]; then # remove it
  unset 'md5sum[total-1]'
fi
if $printit; then
  for ((im=0; im<${#md5sum[@]}; im++)); do
    echo "md5sum[$im] is ${md5sum[im]}"
  done
fi
# get the file names only
count=0
for ((j=2; j<$num; j+=2)); do
# get the tar file names
  filename[count]=${mdPlusfname[j]}
  ((count++))
done
#remove the </code> tag from the last element of array
total=${#filename[@]}
lastE=$((total-1))
local codebit='</code>'
filename[lastE]="${filename[lastE]%${codebit}*}"
#if $printit; then
#  for ((im=0; im<${#filename[@]}; im++)); do
#    echo "filename[$im] is ${filename[im]}"
#  done
#fi
# write the new md5sums file
local md5File="${sourceLoc}/${x7section}/${curSec}-7.md5"
if [ ! -d ${sourceLoc}/${x7section} ]; then # create it
  install -d -m0755 ${sourceLoc}/${x7section}
  touch "${sourceLoc}/${x7section}/${curSec}-7.md5"
fi
if $runit; then
  rm -rf $md5File # if it exists remove the old one
  for ((im=0; im<${#filename[@]}; im++)); do
    echo "${md5sum[im]}  ${filename[im]}" >> $md5File
  done
fi
# compare filenames with those already downloaded
local fileToDownload
for ((j=0; j<${#filename[@]}; j++)); do
  fileToDownload=${filename[j]}
  if $printit; then echo "file to Download is $fileToDownload"; fi
  if [ -e "${srcLoc}/${fileToDownload}" ]; then
    echo "file $fileToDownload already downloaded"
  else
    echo "Will download $fileToDownload and place in $srcLoc"
    if [ ! -d $srcLoc ]; then install -d -m0755  $srcLoc; fi
    RtrnVars=""
    getPkgVersion $fileToDownload ".tar"
    pkgnm=${RtrnVars[0]}
    pkgvers=${RtrnVars[1]}
    serchstr="${pkgnm}*"
    fileUrl=${xorgPubUrl}${fileToDownload}
    otherFiles=($(find $srcLoc -type f -name "$serchstr"))
    delAndDnld otherFiles[@] $fileToDownload $fileUrl $srcLoc true
  fi
done
return 0
} # end x7FileChk
#
getVersFromComs () {
# this is used to get the version of a package that is being downloaded by this script
# $1 is the srcname
# $2 is the first pattern to find
# $3 is the second pattern to find
# $__file is global and is the full name of this script
# $newLines is a tmp file to hold the commands to print the pkgvers of the srcname
local srcname=$1
local pattern1="$2"
local pattern2="$3"
local holdLine=$(sed -n "/$pattern1/,/$pattern2/{/$pattern1/!{/$pattern2/!p}}" $__file | grep "cur_vers")
echo "srcname=\"$srcname\"" > $newLines
local ip
for (( ip=0; ip<${#holdLine[@]}; ip++ )); do
  holdLine[ip]="${holdLine[ip]//local/}"
  holdLine[ip]="$(echo -e "${holdLine[ip]}" | sed -e 's/^[[:space:]]*//')" # delete leading spaces
  echo "${holdLine[ip]}" >> $newLines
done
echo "echo \"$srcname version is \$pkgvers\"" >> $newLines
eval $newLines
} # end getVersFromComs
#
FullPkgUrl () {
# returns the full URL for the package in the book
# $1 is the srcfile name
# $2 is the pkgname
# $3 is the default html extension i.e. pkgname.html
# $3 is the URL to use without the page html name
# $4 is the base Src URL
#
local currentSrcFile=$1
local pkgname=$2
local bookPage=$3
local SrcURLtoUse=$4
local baseSrcURL=$5
# open the following to test input values
#echo "currentSrcFile is $currentSrcFile"
#echo "pkgname is $pkgname"
#echo "bookPage is $bookPage"
#echo "SrcURLtoUse is $SrcURLtoUse"
#echo "baseSrcURL is $baseSrcURL"
# returns the full page url via FinalURLtoUse
local FinalURLtoUse
#
case $currentSrcFile in
    autoconf-2.1)
      FinalURLtoUse="${SrcURLtoUse}/autoconf213.html"
    ;;
# perl modules in the book
    Archive-Zip-|File-Which-|Module-Build-|Parse-Yapp-|URI-|XML-Simple-) # perl modules
      FinalURLtoUse="${SrcURLtoUse}/perl-modules.html"
    ;;
# perl-module dependencies
    Alien-Build-|Alien-Libxml2-|Capture-Tiny-|File-chdir-|IPC-System-Simple-|Path-Tiny-|SUPER-|Test-MockModule-|XML-LibXML-|XML-NamespaceSupport-|XML-SAX-1.|XML-SAX-Base-|XML-SAX-Expat-)
      FinalURLtoUse="${SrcURLtoUse}/perl-deps.html"
    ;;
    bind-) # this is needed in section networks for bind-utilities
      FinalURLtoUse="${baseSrcURL}/server/bind.html"
    ;;
    cairomm-)
      FinalURLtoUse="${SrcURLtoUse}/cairomm-1.0.html"
    ;;
    colord-1.3.)
      FinalURLtoUse="${SrcURLtoUse}/colord.html"
    ;;
    docbook-xml-)
      FinalURLtoUse="${SrcURLtoUse}/docbook.html"
    ;;
    docbook-xsl-nons-)
      FinalURLtoUse="${SrcURLtoUse}/docbook-xsl.html"
    ;;
    freetype-)
      FinalURLtoUse="${SrcURLtoUse}/freetype2.html"
    ;;
    GConf-)
      FinalURLtoUse="${SrcURLtoUse}/GConf.html"
    ;;
    geoclue-)
      FinalURLtoUse="${SrcURLtoUse}/geoclue2.html"
    ;;
    ghostscript-)
      FinalURLtoUse="${SrcURLtoUse}/gs.html"
    ;;
    glib-)
      FinalURLtoUse="${SrcURLtoUse}/glib2.html"
    ;;
    gstreamer-)
      FinalURLtoUse="${SrcURLtoUse}/gstreamer10.html"
    ;;
    gst-plugins-base-|gst-plugins-bad-|gst-plugins-ugly-|gst-plugins-good-)
      local mod1="${currentSrcFile%?}.html"
      local mod2=${mod1/gst/gst10}
      FinalURLtoUse="${SrcURLtoUse}/${mod2}"
    ;;
    gst-libav-)
      FinalURLtoUse="${SrcURLtoUse}/gst10-libav.html"
    ;;
    gtk+-2.)
      FinalURLtoUse="${SrcURLtoUse}/gtk2.html"
    ;;
    gtk+-3.)
      FinalURLtoUse="${SrcURLtoUse}/gtk3.html"
    ;;
    gtksourceview-3.) # these are in section xlibs in the book
      FinalURLtoUse="http://www.linuxfromscratch.org/blfs/view/systemd/x/gtksourceview.html"
    ;;
    gtksourceview-4.)
      FinalURLtoUse="http://www.linuxfromscratch.org/blfs/view/systemd/x/gtksourceview4.html"
    ;;
    boost_|firefox-78.|gmime-3.|icu4c-|tiff-|apr-1.|LVM2.|openjpeg-|openssl-1.1.|Linux-PAM-|polkit-0.|ConsoleKit2-|graphviz-|ImageMagick-|zip|unzip|dbus-1.|raptor2-|libaio_|tk8.|Python-2.|Python-3.|jdk15u-jdk-|lynx2.|net-tools-CVS_|wireless_tools.|whois-|NetworkManager-|httpd-|gtkmm-2.|gtkmm-3.|clutter-1.|qt-everywhere-src-|libdbusmenu-qt_|sawfish_|libwnck-3.|vte-0.6|nautilus-3.|pipewire-0.3.|tracker-2.|tracker-3.|tracker-miners-2.|tracker-miners-3.|yelp-3.|midori_|cdparanoia-III-|xvidcore-|SDL-|SDL2-|a52dec-|dvd+rw-tools-|libmusicbrainz-5.|x265_|ffmpeg-3.|OpenSP-|cups-2.)
      FinalURLtoUse="${SrcURLtoUse}/${pkgname}.html" # use the package name
    ;;
    iproute2-) # this is reinstalled in networks for openvpn to find it
      FinalURLtoUse="http://linuxfromscratch.org/lfs/view/systemd/chapter08/iproute2.html"
    ;;
    junit4-)
      FinalURLtoUse="${SrcURLtoUse}/junit.html"
    ;;
    krb5-)
      FinalURLtoUse="${SrcURLtoUse}/mitkrb.html"
    ;;
    kwindowsystem-|kwayland-|libkscreen-|kidletime-|solid-|kguiaddons-)
      FinalURLtoUse="${SrcURLtoUse}/lxqt-${pkgname}.html"
    ;;
    libhandy-)
      FinalURLtoUse="${SrcURLtoUse}/libhandy1.html"
    ;;
    libjpeg-turbo-)
      FinalURLtoUse="${SrcURLtoUse}/libjpeg.html"
    ;;
    libsigc++-)
      FinalURLtoUse="${SrcURLtoUse}/libsigc.html"
    ;;
    libevdev-|libinput-|libva-|libvdpau-1.|libvdpau-va-gl-)
      FinalURLtoUse="${x7driverLoc}"
    ;;
    libwnck-2.)
      FinalURLtoUse="${SrcURLtoUse}/libwnck2.html"
    ;;
    ModemManager-) # for some reason this has been left uppercase
      FinalURLtoUse="${SrcURLtoUse}/${bookPage}"
    ;;
    dbus-python-|docutils-|lxml-|Mako-|MarkupSafe-|pyatspi-|py2cairo-|pycairo-|pycryptodome-|pygobject-2.|pygobject-3.|pygtk-|python-dbusmock-|pyxdg-|six-)
      FinalURLtoUse="${SrcURLtoUse}/python-modules.html"
    ;;
    openjdk-)
      FinalURLtoUse="${SrcURLtoUse}/java.html"
    ;;
    openssl-1.0.)
      FinalURLtoUse="${SrcURLtoUse}/openssl10.html"
    ;;
    qtwebengine-everywhere-src-)
      FinalURLtoUse="${SrcURLtoUse}/qtwebengine.html"
    ;;
    qtwebkit-opensource-src-)
      FinalURLtoUse="${SrcURLtoUse}/${pkgname}5.html"
    ;;
    rustc-)
      FinalURLtoUse="${SrcURLtoUse}/rust.html"
    ;;
    sqlite-autoconf-) # send just sqlite- to BShref to get the doc file as well
      currentSrcFile="sqlite-"
      FinalURLtoUse="${SrcURLtoUse}/${pkgname}.html"
    ;;
    udisks-2.)
      FinalURLtoUse="${SrcURLtoUse}/udisks2.html"
    ;;
    vte-0.6)
      FinalURLtoUse="${SrcURLtoUse}/vte.html"
    ;;
    xf86-input-evdev-|xf86-input-libinput-|xf86-input-synaptics-|xf86-input-vmmouse-|xf86-input-wacom-|xf86-video-intel-|xf86-video-amdgpu-)
      FinalURLtoUse="${x7driverLoc}"
    ;;
    *)
      FinalURLtoUse="${SrcURLtoUse}/${bookPage}"
      case $currentSrcFile in
         GConf-|libXau-|libXdmcp-) # don't lowercase
           :
         ;;
         *)
           FinalURLtoUse=$(echo "${FinalURLtoUse,,}") # lowercase
         ;;
      esac
    ;;
  esac
# return it
echo "$FinalURLtoUse"
} # end FullPkgUrl
#
GetLatestPkgVers () {
# used with the single_package option
# Takes a single package from a given section and checks whether the downloded
# version in blfs-sources/BOOK/$section matches the one in the requested book.
# assumes that the package is in section, so need to check it before entering
# this script
# $1 is the package name
# $2 is the section
# $3 is the wget-list file to use
# $4 is the book - default is blfs-systemd. Alternative is blfs-sysv
# NOTE this script needs beautifulsoup4 and python3 installed in order for BShref.py to work
#
local pkgname=$1
local section=$2
local wgetlist=$3
local book=${4:-blfs-systemd}
if [ "$book" = "blfs-sysv" ]; then
  local bookVersion=svn
else
  local bookVersion=systemd
fi
local sourceLoc="${SOURCEDIR}/${section}"
local reqPkgLoc="${BLFSBUILDFILES}/files"
local x7driverLoc="http://www.linuxfromscratch.org/blfs/view/${bookVersion}/x/x7driver.html"
#
echo "will update the source file for package $pkgname in section $section"
echo "using the book $bookVersion"
# global variables:
echo "runit is $runit"
echo "printit is $printit"
#
# get the src name for the package
rtrnPkg=""
rtrnSrc=""
rtrnCmd=""
altFileNames $section
return_val=$?
if [ $return_val -eq $RETURN_PARAM ]; then # this should already have been checked
  echo "Requested section is $section but there is no"
  echo "${section}-files file in ${BLFSBUILDFILES}/files."
  echo "If $section is correct then create ${section}-files and"
  echo "place it in ${BLFSBUILDFILES}/files in order to continue."
  echo " Exiting now"
  exit 1
fi
local i
# match the given pkgname with the one in rtrnPkg
for ((i=0; i<${#rtrnPkg[@]}; i++)); do
#  echo "rtrnPkg is ${rtrnPkg[i]}"
  if [ "$pkgname" = "${rtrnPkg[i]}" ]; then
    local srcname=${rtrnSrc[i]}
    if $printit; then echo "source name is $srcname"; fi
    break
  fi
done
#
# get the url of the install page of the package in the book
local bookSection=$(Getbooksec $section)
local baseSrcURL="http://www.linuxfromscratch.org/blfs/view/${bookVersion}"
local SrcURLtoUse="${baseSrcURL}/${bookSection}"
if $printit; then echo "URL of section page is $SrcURLtoUse"; fi
# specify default book page extension
local bookPage
case $srcname in
   x7app|x7font|x7lib)
       bookPage="${srcname}.html"
   ;;
   nautilus-3.|yelp-3.|gnome-shell-3.) # remove last 3 chars
       bookPage="${srcname%???}.html"
   ;;
   *)
# if the last char is - or a . then remove it
       if [[ "$srcname" == *- || "$srcname" == *. ]]; then
         bookPage="${srcname%?}.html" # remove last char
       fi
   ;;
esac
# call FullPkgUrl to get the complete url of the page
#FullPkgUrl $srcname $pkgname $bookPage $SrcURLtoUse $baseSrcURL # use to test it
SrcURLtoUse=$(FullPkgUrl $srcname $pkgname $bookPage $SrcURLtoUse $baseSrcURL)
if $printit; then echo "URL of package in book is $SrcURLtoUse"; fi
case $srcname in
   x7app|x7font|x7lib)
       lines=($(python3 BSliteral.py $SrcURLtoUse))
#       if $printit; then
#         for ((im=0; im<${#lines[@]}; im++)); do
#           echo "lines[$im] is ${lines[im]}"
#         done
#       fi
       x7FileChk $srcname lines[@]
   ;;
   *)
       lines=($(python3 BShref.py $SrcURLtoUse)) # scrape the book for source files
       if $printit; then echo "lines are ${lines[@]}"; fi
       local srcfile filenameOnly
       for srcfile in ${lines[@]}; do
	  filenameOnly=${srcfile##*/}
#echo "filenameOnly is $filenameOnly"
# check if this file is in blfs-sources
	 if [[ -f "${sourceLoc}/${filenameOnly}" ]]; then
	   break
	 else
	   if $printit; then echo "file $filenameOnly not found in $sourceLoc"; fi
           if $printit; then echo "will check if an earlier version is present"; fi
# set a search string
           local serchstr="$srcname*"
           if $printit; then echo "serchstr is $serchstr"; fi
           local fileExists=($(find $sourceLoc -type f -name "$serchstr"))
           if (( ${#fileExists[@]} )); then # not empty
             if $printit; then echo "fileExists array is ${fileExists[@]}"; fi
           else
             if $printit; then echo "fileExists array is empty"; fi
	     echo "No previous version of $srcname are present in $sourceLoc"
	   fi
	   echo "will download $srcfile and delete ${fileExists[@]}"
	 fi
       done
       if $printit; then echo "file $srcfile already downloaded - do nothing"; fi
   ;;
esac
} # end GetLatestPkgVers
#
GetLatestFiles () {
# $1 is the source section to update
# $2 is the name of the wget-list file
# $3 is the current section
# $4 is the book - either blfs-sysv or blfs-systemd. Default is blfs-systemd
# compares the src versions in the requested BLFS book with those in /blfs-sources/BOOK/$SECTION
# NOTE this script needs beautifulsoup4 and python3 installed in order for BShref.py to work
#
local section=$1
local wgetlist=$2
local cursection=$3
local IFS
local sourceLoc="${SOURCEDIR}/${section}"
local reqPkgLoc="${BLFSBUILDFILES}/files"
local book=${4:-blfs-systemd}
if [ "$book" = "blfs-sysv" ]; then
  local bookVersion=svn
else
  local bookVersion=systemd
fi
local x7driverLoc="http://www.linuxfromscratch.org/blfs/view/${bookVersion}/x/x7driver.html"
echo "Will update sources in section $section using the files in $cursection"
echo "and the $book book."
echo "runit is $runit"
echo "printit is $printit"
#
# read the lines in the wgetlist file
if [ -e "${sourceLoc}/${wgetlist}" ]; then
# read the wget-list urls into an array
  while IFS= read -r line; do
    urlarray+=($line) # urlarray is global because it'll be updated and written back to the wget-list file
  done < "${sourceLoc}/${wgetlist}"
  if $printit; then echo "urlarray is ${urlarray[@]}"; fi
  if $runit; then
# sections telepathy, openelec, nvidia have no files in the book so cannot re-create the wget-list file
    case $cursection in
       openelec|telepathy|nvidia)
           : # do nothing
       ;;
       *)
           rm -rf ${sourceLoc}/${wgetlist} # remove the old wgetlist file for this section
           rm -rf ${sourceLoc}/${sortedfile} # remove sortedfile if it exists
       ;;
    esac
  fi
fi
# get pkg name, src name and command name for each package in this cursection
rtrnPkg=""
rtrnSrc=""
rtrnCmd=""
altFileNames $cursection
return_val=$?
if [ $return_val -eq $RETURN_PARAM ]; then
  echo "Requested section is $cursection but there is no"
  echo "${cursection}-files file in $reqPkgLoc."
  echo "If $cursection is correct then create ${cursection}-files and"
  echo "place it in $reqPkgLoc in order to continue."
  echo " Exiting now"
  exit 1
fi
if $printit; then echo "Source names are ${rtrnSrc[@]}"; fi
# need unique names for Pkg and Src - don't change the order
# NOTE - uniq only removes duplicates that are adjacent in the array
# if they are not adjacent, you could try this:
# readarray -t NewArray < <(printf '%s\n' "${OriginalArray[@]}" | awk '!x[$0]++')
local SrcNames=($(printf "%s\n" ${rtrnSrc[@]} | uniq))
# *** don't use the PkgNames for section pythonmodules because of Py2 and Py3 prefixes ***
#     They won't correspond with the order in SrcNames
local PkgNames=($(printf "%s\n" ${rtrnPkg[@]} | uniq))
if $printit; then
  echo "Unique source names are ${SrcNames[@]}"
  echo "Unique package names are ${PkgNames[@]}"
fi
local bookSection=$(Getbooksec $cursection)
if $printit; then echo "bookSection is $bookSection"; fi
exts=".tar.xz|.tar.lzma|.tar.bz2|.tar.gz|.gz|.tgz|.zip|.patch|.deb|.jar"
local -a arr
local -a urlist
processit=true
local i
local currentSrcFile
local bookPage
local baseSrcURL SrcURLtoUse
local serchstr
newLines=/tmp/$(date +%d%B%Y_%H:%M).temp # write commands to get the pkgvers for packages not in the book
touch $newLines
chmod u+x $newLines
for (( i=0; i<${#SrcNames[@]}; i++ )); do
  currentSrcFile=${SrcNames[i]}
  if $printit; then echo "Processing $currentSrcFile"; fi
  case $currentSrcFile in
     x7app|x7font|x7lib)
         bookPage="${currentSrcFile}.html"
     ;;
     nautilus-3.|yelp-3.|gnome-shell-3.) # remove last 3 chars
         bookPage="${currentSrcFile%???}.html"
     ;;
     *)
# if the last char is - remove it
         if [ "${currentSrcFile: -1}" == "-" ]; then
           bookPage="${currentSrcFile%?}.html" # remove the - from the end of src name
         fi
     ;;
  esac
  baseSrcURL="http://www.linuxfromscratch.org/blfs/view/${bookVersion}"
  SrcURLtoUse="${baseSrcURL}/${bookSection}"
  case $currentSrcFile in
# security and file systems
    libssh-|nss-mdns-|pkcs11-helper-)
      echo "don't process $currentSrcFile not in the book"
      processit=false
      case $currentSrcFile in
         libssh-)
           local pat1='libssh-) \# src not in the book'
           local pat2='libunwind-)'
         ;;
         nss-mdns-)
           local pat1='nss-mdns-) \# src not in the book'
           local pat2='ode-)'
        ;;
        pkcs11-helper-)
           local pat1='pkcs11-helper-) \# src not in the book'
           local pat2='pyasn1-)'
        ;;
      esac
      getVersFromComs $currentSrcFile "$pat1" "$pat2"
    ;;
    pambase-|ca-certificates-utils-|nftables-)
      echo "don't process $currentSrcFile not in the book"
      processit=false
    ;;
# libraries
    appstream-glib-|firefox-68.|fmt-|gcab-|gexiv2-|gobject-introspection-runtime-|hunspell-|hunspell-en_US-|hyphen-|ijs-|jemalloc-|libedit-|libsass-|libunwind-|lz4-|rapidjson-|snappy-|yajl-|yaml-)
      echo "don't process $currentSrcFile not in the book"
      processit=false
    ;;
# genutils
    bash-completion-|dialog|grep-|re2-|rpmextract-|tdb-)
      echo "don't process $currentSrcFile not in the book"
      processit=false
    ;;
# sysutils
    zlib-|weston-)
      echo "don't process $currentSrcFile not in the book"
      processit=false
    ;;
# perl modules not in the book
    ExtUtils-Depends-|ExtUtils-PkgConfig-|File-BaseDir-|Tie-IxHash-)
      echo "don't process $currentSrcFile not accessible in the book"
      processit=false
    ;;
# python modules
    appdirs-|backports|backports.functools_lru_cache-|Beaker-|beautifulsoup4-|chardet-|cssselect-|cycler-|cython-|decorator-|funcsigs-|future-|idna-|importlib_metadata-|ipython-|kiwisolver-|lapack-|numpy-|ordered-set-|path-|packaging-|pexpect-|pickleshare-|ply-|prompt_toolkit-|pycrypto-|ptyprocess-|python2-backports.shutil_|pytz-|PySocks-|pyasn1-|python-dateutil-|Pygments-|py2-setuptools-|python-soupsieve-|setuptools-|setuptools_scm-|traitlets-|urllib3-|Scrapy-|requests-|python2-pyparsing-|python-pyparsing-|pyparsing_|PyQt5_gpl-|scandir-|scipy-|sip-|Theano-|scikit-learn-|simplejson-|matplotlib-|nltk-|wcwidth-)
      echo "don't process $currentSrcFile not in the book"
      processit=false
    ;;
# programming
    ccache-|cmocka-|dotconf-|ragel-|sassc-|waf-|codelite|cuda_)
      echo "don't process $currentSrcFile not in the book"
      processit=false
    ;;
# java
    hamcrest-)
      echo "don't process $currentSrcFile not in the book"
      processit=false
    ;;
# networks
    libev-|libnftnl-|libnice-|libproxy-|netctl-|openvpn-|squid-|windscribe-)
      echo "don't process $currentSrcFile not in the book"
      processit=false
    ;;
# server
    mariadb-libs-|mariadb-clients-)
      echo "don't process $currentSrcFile not in the book"
      processit=false
    ;;
# x
    dejavu-fonts-ttf-)
      echo "don't process $currentSrcFile not in the book"
      processit=false
    ;;
# xlibs
    pangox-compat-|qtbase-everywhere-src-|qtsvg-everywhere-src-|qtx11extras-everywhere-src-|wxWidgets-)
      echo "don't process $currentSrcFile not in the book"
      processit=false
    ;;
# displaymanager
    sddm-)
      echo "don't process $currentSrcFile not in the book"
      processit=false
      local pat1='sddm-) \# src not in the book'
      local pat2='SDL2-)'
      getVersFromComs $currentSrcFile "$pat1" "$pat2"
    ;;
# openelec
    crossguid-|dav1d-|dcadec-|glew-|kodi-common-|kodi-x11-|libbluray-|libmodplug-|libaacs-|libcec-|libmicrohttpd-|libnfs-|libplist-|lirc-|lockdev_|p8-platform-|setconf-|tinyxml_)
     echo "don't process $currentSrcFile not in the book"
     processit=false
    ;;
# gnomeplatform
    gnome-common-|gssdp-|gupnp-|gupnp-igd-|yelp-tools-|libgnome-keyring-|grilo-plugins-|polkit-gnome-)
      echo "don't process $currentSrcFile not in the book"
      processit=false
    ;;
# gnomedesktop
    cantarell-fonts-|caribou-)
      echo "don't process $currentSrcFile not in the book"
      processit=false
    ;;
# gnomeapps
    gnome-dictionary-|aisleriot-|xboard-|gedit-|gnuchess-|gnome-chess-|gnome-clocks-|nautilus-sendto-|gnome-user-share-)
      echo "don't process $currentSrcFile not in the book"
      processit=false
    ;;
# xsoftware
    icedtea-web-)
      echo "don't process $currentSrcFile not in the book"
      processit=false
    ;;
# multimedia
    smpeg-|vamp-plugin-sdk-|portsmf|icedtea-sound-|celt-|jack2-|serd-|sord-|x264-snapshot-|wavpack-|pa_stable_|libgphoto2-|media-player-info-|google-chrome-stable_|lv2-|sratom-|lilv-|flash_player_npapi_linux|espeak-|pipewire-0.2.|PySolFC-|speech-dispatcher-|speexdsp-|farstream-)
      echo "don't process $currentSrcFile not in the book"
      processit=false
    ;;
# nvidia
    bbswitch-|bumblebee-|NVIDIA-Linux-x86_64-|primus)
      echo "don't process $currentSrcFile not in the book"
      processit=false
    ;;
    *) # all these are in the book as of 2020/08/25
# Note - 2020/12/01 iproute2 is reinstalled so the chapter08 page from the LFS book is given
      SrcURLtoUse=$(FullPkgUrl $currentSrcFile ${PkgNames[i]} $bookPage $SrcURLtoUse $baseSrcURL)
    ;;
  esac
  if $processit; then # only process packages that are in the book
    if $printit; then echo "SrcURLtoUse is $SrcURLtoUse"; fi
    case $currentSrcFile in
       x7app|x7font|x7lib)
           lines=($(python3 BSliteral.py $SrcURLtoUse))
#           if $printit; then
#             for ((im=0; im<${#lines[@]}; im++)); do
#               echo "lines[$im] is ${lines[im]}"
#             done
#           fi
           x7FileChk $currentSrcFile lines[@]
       ;;
       *)
           if [ "$currentSrcFile" = iproute2- ]; then # special case, not in BLFS, only LFS
             lines[0]="https://www.kernel.org/pub/linux/utils/net/iproute2/iproute2-${iproute2vers}.tar.xz"
           else
             lines=($(python3 BShref.py $SrcURLtoUse)) # scrape the book for source files
           fi
           if $printit; then echo "lines are ${lines[@]}"; fi
           srcfiles=""
# in chromium the i386 files are not required
# so need to keep a count of the x86_64 files that are needed so urlist is correct
           declare -a storcount
           kount=0
           for ((j=0; j<${#lines[@]}; j++)); do
             src=$(echo ${lines[j]} | awk -F\/ '{print $NF}' | grep -E $exts) # src filename or patch
             case $src in
                XML-LibXML-Simple-*) # picked up from XML-Simple-
                  :
                ;;
        	Module-Build-Tiny-*) # picked up from Module-Build-
                  :
		;;
                *flash_player_ppapi_linux.i386.tar.gz*) # chromium - don't want flash_player i386 version
                  :
                ;;
                *i386.deb*) # chromium - don't want the i386 deb file
                  :
                ;;
                *)
                  srcfiles="$srcfiles $src"
                  storcount[kount]=$j
                  ((kount++))
                ;;
             esac
           done
           if $printit; then echo "srcfiles is $srcfiles"; fi
           if [[ "$(declare -p arr)" =~ "declare -a" ]]; then # test if arr is an array
             if $printit; then echo "unsetting arrays arr and urlist"; fi
             unset arr[@]
             unset urlist[@]
           fi
           set -- $srcfiles
# remove any duplicates
           count=0 # counter for the unique entries
           loopcount=0 # counter for number of times through loop
           for c in $@; do
             dups=false
             for((k=0; k<${#arr[@]}; k++)); do
               if [ "${arr[k]}" = "$c" ] ;then
                   dups=true
                   break
               fi
             done
             if $dups; then
               if $printit; then # usually an http and an ftp URL given in the book
                 echo "** NOTE ** duplicate found for $c"
               else
                 :
               fi
             else
               arr[count]="$c"
               urlist[count]=${lines[${storcount[loopcount]}]}
               ((count++))
             fi
             ((loopcount++))
           done
           if $printit; then echo "arr is ${arr[@]}"; fi # arr is the current source tarfile name from the book
           if $printit; then echo "urlist is ${urlist[@]}"; fi # urlist is the full url of the arr tarfile
           if $printit; then echo "currentSrcFile is $currentSrcFile"; fi
	   for ((j=0; j<${#arr[@]}; j++)); do # get the src tarfile name
# find the file that may need downloading
# get the pkg name, pkgvers and fileToDnld
             fileToDnld=${arr[j]}
             fileToHold=$fileToDnld # not sure if this is necessary any more - will test it
             processPkg=true
             tailbit="" # used in setting the patch serchstr
             RtrnVars=""
#             if $printit; then echo "fileToDnld is $fileToDnld"; fi
             case ${arr[j]} in
                "$currentSrcFile"*)
                   if $printit; then echo "fileToDnld is $fileToDnld"; fi
                   case $fileToDnld in
                      *.patch) # deal with patch files first
                        case $fileToDnld in
                           "bind-"*"P"*) # test if there is a P in the patch filename
                             RtrnVars[0]=$(echo $fileToDnld | awk -F\- '{print $1}')
                             RtrnVars[0]="${RtrnVars[0]}-"
                             versionPlus="${fileToDnld#${RtrnVars[0]}*}"
                             RtrnVars[1]=$(echo $versionPlus | awk -F\- '{print $1"-"$2}')
                           ;;
                           cdparanoia-III-*|cyrus-sasl-*|mypaint-brushes-*|net-tools-*|sgml-common-*)
                             RtrnVars[0]=$(echo $fileToDnld | awk -F\- '{print $1"-"$2}')
                             RtrnVars[0]="${RtrnVars[0]}-"
                             versionPlus="${fileToDnld#${RtrnVars[0]}*}"
                             RtrnVars[1]=$(echo $versionPlus | awk -F\- '{print $1}')
                           ;;
		           docbook-xsl-nons-*)
                             RtrnVars[0]=$(echo $fileToDnld | awk -F\- '{print $1"-"$2"-"$3}')
			     RtrnVars[0]="${RtrnVars[0]}-"
			     versionPlus="${fileToDnld#${RtrnVars[0]}*}"
			     RtrnVars[1]=$(echo $versionPlus | awk -F\- '{print $1}')
			   ;;
                           x265_*)
                             RtrnVars[0]=$(echo $fileToDnld | awk -F\_ '{print $1}') # _ separator
                             RtrnVars[0]="${RtrnVars[0]}_"
                             versionPlus="${fileToDnld#${RtrnVars[0]}*}"
                             RtrnVars[1]=$(echo $versionPlus | awk -F\- '{print $1}')
                           ;;
                           xcb-proto-*|xorg-server-*)
                             RtrnVars[0]=$(echo $fileToDnld | awk -F\- '{print $1"-"$2}')
                             RtrnVars[0]="${RtrnVars[0]}-"
                             versionPlus="${fileToDnld#${RtrnVars[0]}*}"
                             RtrnVars[1]=$(echo $versionPlus | awk -F\- '{print $1}')
                           ;;
                           *)
                             RtrnVars[0]=$(echo $fileToDnld | awk -F\- '{print $1}')
                             RtrnVars[0]="${RtrnVars[0]}-"
                             versionPlus="${fileToDnld#${RtrnVars[0]}*}"
                             RtrnVars[1]=$(echo $versionPlus | awk -F\- '{print $1}')
                           ;;
                        esac
                        tailbit="${fileToDnld#*${RtrnVars[1]}}"
                      ;;
                      apache-ant-*-src*)
                        getPkgVersion $fileToDnld "-src"
                      ;;
                      apache-maven-*-src*|icu4c-*-src*|rustc-*|tk8*)
                        getPkgVersion $fileToDnld "-src"
			tailbit="${fileToDnld#*${RtrnVars[1]}}"
                      ;;
	              apache-maven-*-bin*)
                        getPkgVersion $fileToDnld "-bin"
			tailbit="${fileToDnld#*${RtrnVars[1]}}"
                      ;;
                      cdparanoia-III-*|doxygen-*)
                        getPkgVersion $fileToDnld ".src"
                      ;;
                      cracklib-words-*)
                        getPkgVersion $fileToDnld ".gz"
                      ;;
                      cups-[0-9]*|mupdf-*) # not cups-filters
                        getPkgVersion $fileToDnld "-source"
                      ;;
                      exiv2-*)
                        getPkgVersion $fileToDnld "-Source"
                      ;;
                      git-[0-9]*) # not git-manpages or git-htmldocs
                        getPkgVersion $fileToDnld ".tar"
                      ;;
	              libaio_*orig*)
			getPkgVersion $fileToDnld ".orig"
		      ;;
                      libevent-*)
                        getPkgVersion $fileToDnld "-stable"
                      ;;
                      libpng-*.patch.*z*) # the patch file
                        getPkgVersion $fileToDnld "-apng"
                      ;;
                      Linux-PAM-*-docs*)
                        getPkgVersion $fileToDnld "-docs"
                      ;;
                      llvm-*)
                        getPkgVersion $fileToDnld ".src"
                      ;;
                      LVM2.*|openldap-*|sgml-common-*|xterm-*)
                        getPkgVersion $fileToDnld ".tgz"
                      ;;
                      lua-*tests*)
                        getPkgVersion $fileToDnld "-tests"
                      ;;
                      lynx2.*) # trouble deciding on the pkgvers
                        RtrnVars[0]="lynx"
			RtrnVars[1]="2.8.9rel.1"
                      ;;
                      nasm-*xdoc*) # nasm-pkgvers-xdoc.tar.xz
                        getPkgVersion $fileToDnld "-xdoc"
                        tailbit="${fileToDnld#*${RtrnVars[1]}}"
                      ;;
                      openobex-*)
                        getPkgVersion $fileToDnld "-Source"
                      ;;
                      sqlite-doc-*|docbook-xml-*) # .zip file
                        getPkgVersion $fileToDnld ".zip"
                      ;;
                      thunderbird-*|firefox-*)
                        getPkgVersion $fileToDnld ".source"
                      ;;
                      wayland-[0-9]*) # not wayland-protocols
                        getPkgVersion $fileToDnld ".tar"
                      ;;
                      xmlts*)
                        RtrnVars[0]="xmlts"
                        RtrnVars[1]="20130923"
                        fileToDnld="${RtrnVars[0]}${RtrnVars[1]}.tar.gz"
                      ;;
                      unzip*.tgz|unzip*.tar.*z*)
                        RtrnVars[0]="unzip"
                        RtrnVars[1]="60"
                      ;;
                      zip*.tgz|zip*.tar.*z*) # there are 2 versions available, tgz and tar.gz
                        RtrnVars[0]="zip"
                        RtrnVars[1]="30"
                      ;;
                      Alien-Build-|Alien-Libxml2-|Archive-Zip-|Capture-Tiny-|Test-MockModule-|File-BaseDir-|File-chdir-|File-Which-|Module-Build-|Parse-Yapp-|Path-Tiny-|URI-|XML-Simple-)
                        getPkgVersion $fileToDnld ".tar"
                      ;;
                      *)
                        getPkgVersion $fileToDnld ".tar"
                      ;;
                   esac
                ;;
                "python-2"*"-docs-"*)
                   getPkgVersion $fileToDnld "-docs"
                   RtrnVars[0]="python-${RtrnVars[1]}-docs-"
                ;;
                "python-3"*"-docs-"*)
                   getPkgVersion $fileToDnld "-docs"
                   RtrnVars[0]="python-${RtrnVars[1]}-docs-"
                ;;
                "v5.tar.gz") # chromium-launcher-5
                   RtrnVars[0]="chromium-launcher-"
                   RtrnVars[1]="5"
                   fileToDnld="${RtrnVars[0]}${RtrnVars[1]}.tar.gz"
                ;;
                *"amd64.deb") # the amd deb file
                   RtrnVars[0]="google-chrome-stable_"
                   versionPlus="${fileToDnld#${RtrnVars[0]}*}"
                   RtrnVars[1]=$(echo $versionPlus | awk -F\_ '{print $1}')
                ;;
                docbook-xsl-doc-*)
                   RtrnVars[0]=$(echo $fileToDnld | awk -F\- '{print $1"-"$2"-"$3}')
                   RtrnVars[0]="${RtrnVars[0]}-"
                   versionPlus="${fileToDnld#${RtrnVars[0]}*}"
                   RtrnVars[1]=$(echo $versionPlus | awk -F\- '{print $1}')
                ;;		
                "flash_player_ppapi_linux.x86_64.tar.gz") # flash player
                   RtrnVars[0]="flash_player_ppapi_linux"
                   RtrnVars[1]="x86_64"
                ;;
                gtksourceview4-*.patch) # patch is different pkgname from the src tarfile
                   RtrnVars[0]="gtksourceview4-"
                   RtrnVars[1]="4.8.1"
                   tailbit="buildfix-1.patch"
                ;;
                jai-core-*.jar)
                   RtrnVars[0]="jai-core-"
                   RtrnVars[1]="1.1.3"
                ;;
                jai-codec-*.jar)
                   RtrnVars[0]="jai-codec-"
                   RtrnVars[1]="1.1.3"
                ;;
            	jdk-[0-9]*) # this is the src file for OpenJDK in the book
                   RtrnVars[0]="jdk15u-jdk-"
                   RtrnVars[1]="15.0.2"
                ;;
                jtreg-*) # jdk test harness - not used
                   RtrnVars[0]="jtreg-"
                   RtrnVars[1]="4.2-b12"
                ;;
                lua-*) # this is on the libpeas page in the book
                   RtrnVars[0]="lua-"
                   RtrnVars[1]="5.1.5"
                ;;
                "NetRexx-"*".zip") # package on apache-ant page
                   RtrnVars[0]="NetRexx-"
                   RtrnVars[1]="3.06"
                ;;
                node-*) # this file is downloaded in the script as nodejs-
                   getPkgVersion $fileToDnld ".tar"
                ;;
                numlockx_*) # this is on the openbox page
                   RtrnVars[0]="numlockx_"
                   RtrnVars[1]="1.2"
                ;;
                OpenJDK-*)
                   getPkgVersion $fileToDnld "-i686"
                ;;
                openjdk-*)
                   getPkgVersion $fileToDnld "_linux"
	        ;;
                php_manual_en.html.gz|php_manual_en.tar.gz)
                   RtrnVars[0]="php_manual_en*"
                   RtrnVars[1]="" # no version #
                ;;
       		qt-*.patch) # the qt patch has different pkgnm from the src file
                   RtrnVars[0]=$(echo $fileToDnld | awk -F\- '{print $1}')
                   RtrnVars[0]="${RtrnVars[0]}-"
                   versionPlus="${fileToDnld#${RtrnVars[0]}*}"
                   RtrnVars[1]=$(echo $versionPlus | awk -F\- '{print $1}')
		   tailbit="${fileToDnld#*${RtrnVars[1]}}"
		;;
                "xmlts20130923.tar.gz") # the test suite for libxml2
                   RtrnVars[0]="xmlts"
                   RtrnVars[1]="20130923"
                ;;
                "ralcgm-3.51.tar.gz") # optional package on ImageMagick page
                   RtrnVars[0]="ralcgm-"
                   RtrnVars[1]="3.51"
                ;;
                raptor-*.patch) # raptor patch has different pkgnm from the src file
                   RtrnVars[0]="raptor-"
                   RtrnVars[1]="2.0.15"
                   tailbit="security_fixes-1.patch"
                ;;
                UCD.zip) # Unicode Character Database for ibus
                   RtrnVars[0]="UCD"
                   RtrnVars[1]=""
                ;;
                "urt-3.1b.tar.gz") # optional package on ImageMagick page
                   RtrnVars[0]="urt-"
                   RtrnVars[1]="3.1b"
                ;;
                "wireless_tools-"*".patch") # here because srcname is wireless_tools.
                   RtrnVars[0]="wireless_tools-"
                   RtrnVars[1]="29"
                   tailbit="-fix_iwlist_scanning-1.patch"
                ;;
                xz-*.jar)
                   RtrnVars[0]="xz-"
                   RtrnVars[1]="1.0"
                ;;
	        clang-*) # file downloaded at runtime for llvm
		   getPkgVersion $fileToDnld ".src"
		;;   
                compiler-rt-*) # file downloaded at runtime for llvm
		   getPkgVersion $fileToDnld ".src"
                ;;
                "speexdsp-1.2.0.tar.gz") # speex file downloaded at runtime
                   RtrnVars[0]="speexdsp-"
                   RtrnVars[1]="1.2.0"
                ;;
                "t1lib-5.1.2.tar.gz") # evince page, not wanted
                   RtrnVars[0]="t1lib-"
                   RtrnVars[1]="5.1.2"
                ;;
                "libcdio-paranoia-"*".tar.gz") # needed with libcdio
                   RtrnVars[0]="libcdio-paranoia-"
                   RtrnVars[1]="10.2+2.0.1"
                ;;
                "gnu-gs-fonts-other-"*".tar.gz") # more ghostscript fonts
                   RtrnVars[0]="gnu-gs-fonts-other-"
                   RtrnVars[1]="6.0"
                ;;
# deal with perl modules that are not $currentSrcFile
                Archive-Zip-*|autovivification-*|Business-ISBN-*|Business-ISMN-*|Business-ISSN-*|Class-Accessor-*|Data-Compare-*|Data-Dump-*|Data-Uniqid-*|DateTime-Calendar-Julian-*|DateTime-Format-Builder-*|Encode-EUCJPASCII-*|Encode-HanExtra-*|Encode-JIS2K-*|File-Slurper-*|File-Which-*|HTML-Parser-*|HTTP-Daemon-*|IO-Socket-SSL-*|IO-String-*|IPC-Run3-*|Lingua-Translit-*|List-AllUtils-*|List-MoreUtils-*|Log-Log4perl-*|LWP-Protocol-https-*|Module-Build-*|Net-DNS-*|Parse-RecDescent-*|Parse-Yapp-*|PerlIO-utf8_strict-*|Regexp-Common-*|SGMLSpm-*|Sort-Key-*|Test-Command-*|Test-Differences-*|Text-BibTeX-*|Text-CSV-*|Text-Roman-*|Unicode-Collate-*|Unicode-LineBreak-*|URI-*|XML-LibXML-Simple-*|XML-LibXSLT-*|XML-Simple-*|XML-Writer-*)
                  RtrnVars[0]=""
                  RtrnVars[1]=""
                  processPkg=false
                ;;
# deal with perl-module dependencies that are not $currentSrcFile
                Algorithm-Diff-*|Alien-Build-*|Alien-Libxml2-*|B-COW-*|B-Hooks-EndOfScope-*|Business-ISBN-Data-*|Capture-Tiny-*|Class-Data-Inheritable-*|Class-Inspector-*|Class-Singleton-*|Class-Tiny-*|Clone-*|Config-AutoConf-*|CPAN-Meta-Check-*|DateTime-*|DateTime-Format-Strptime-*|DateTime-Locale-*|DateTime-TimeZone-*|Devel-StackTrace-*|Dist-CheckConflicts-*|Encode-Locale-*|Eval-Closure-*|Exception-Class-*|Exporter-Tiny-*|ExtUtils-LibBuilder-*|FFI-CheckLib-*|File-chdir-*|File-Copy-Recursive-*|File-Find-Rule-*|File-Listing-*|File-ShareDir-*|File-ShareDir-Install-*|HTML-Tagset-*|HTTP-Cookies-*|HTTP-Date-*|HTTP-Message-*|HTTP-Negotiate-*|Importer-*|IO-HTML-*|IPC-System-Simple-*|libwww-perl-*|List-MoreUtils-XS-*|List-SomeUtils-*|List-SomeUtils-XS-*|List-UtilsBy-*|LWP-MediaTypes-*|MIME-Charset-*|Module-Implementation-*|Module-Pluggable-*|Module-Runtime-*|MRO-Compat-*|namespace-autoclean-*|namespace-clean-*|Net-HTTP-*|Net-SSLeay-*|Number-Compare-*|Package-Stash-*|Params-Validate-*|Params-ValidationCompiler-*|Path-Tiny-*|Role-Tiny-*|Scope-Guard-*|Specio-*|Sub-Exporter-Progressive-*|Sub-Identify-*|Sub-Info-*|Sub-Quote-*|Sub-Uplevel-*|SUPER-*|Term-Table-*|Test-Deep-*|Test-Exception-*|Test-Fatal-*|Test-File-*|Test-File-ShareDir-*|Test-LeakTrace-*|Test-MockModule-*|Test-Needs-*|Test-Requires-*|Test-RequiresInternet-*|Test-utf8-*|Test-Warnings-*|Test-Without-Module-*|Test2-Plugin-NoWarnings-*|Test2-Suite-*|Text-CSV_XS-*|Text-Diff-*|Text-Glob-*|Tie-Cycle-*|TimeDate-*|Try-Tiny-*|Variable-Magic-*|WWW-RobotRules-*|XML-LibXML-*|XML-NamespaceSupport-*|XML-SAX-Base-*|XML-SAX-Expat-*|XML-SAX-*)
                  RtrnVars[0]=""
                  RtrnVars[1]=""
                  processPkg=false
                ;;
# deal with python modules in the book that are not $currentSrcFile
                dbus-python-*|decorator-*|docutils-*|py3c-*|pyatspi-*|pycairo-*|pycairo-*.patch|pycryptodome-*|python-dbusmock-*|Pygments-*|pygobject-2.*|pygobject-2.*.patch|pygobject-3.*|pygtk-*|pyxdg-*|libxml2-*|lxml-*|MarkupSafe-*|Jinja2-*|Mako-*|python-slip-*|scour-*|PyYAML-*|six-*)
                  RtrnVars[0]=""
                  RtrnVars[1]=""
                  processPkg=false
                ;;
# deal with the x7drivers that are not $currentSrcFile
                libevdev-*|xf86-input-evdev-*|libinput-*|xf86-input-libinput-*|xf86-input-synaptics-*|xf86-input-vmmouse-*|xf86-input-wacom-*|xf86-video-amdgpu-*|xf86-video-ati-*|xf86-video-fbdev-*|xf86-video-intel-*|xf86-video-nouveau-*|xf86-video-vmware-*|libva-*|intel-vaapi-driver-*|libvdpau-1.*|libvdpau-va-gl-*)
                  RtrnVars[0]=""
                  RtrnVars[1]=""
                  processPkg=false
                ;;
                *)
                   if $printit; then
                     echo "*** WARNING ***"
                     echo "File $fileToDnld not processed"
                     echo "******************************"
                   fi
                ;;
             esac
             pkgnm=${RtrnVars[0]}
             pkgvers=${RtrnVars[1]}
             if $processPkg; then
               if $printit; then echo "pkgnm is $pkgnm"; fi
               if $printit; then echo "pkgvers is $pkgvers"; fi
               if [ ! -z "$tailbit" ]; then
	         if $printit; then echo "tailbit is $tailbit"; fi
               fi
#
               serchstr=""
               if [ ! -e ${sourceLoc}/${fileToDnld} ]; then # file not in $sourceLoc
                 if $printit; then echo "file $fileToDnld not in $sourceLoc"; fi
                 echo "Update $fileToDnld found"
# set serchstr to test if previous versions exist in source location
                 case $fileToDnld in
                    *.patch) # only look for patch files - do these first
                       if [ -z "$tailbit" ]; then
                         serchstr="${pkgnm}*.patch"
                       else
                         serchstr="${pkgnm}*${tailbit}"
                       fi
                    ;;
	            apache-maven-*)
                      serchstr="apache-maven-*$tailbit" # distinguish -src from -bin
		    ;;
                    chromium-[0-9]*) # not chromium-launcher
                      serchstr="${pkgnm}[0-9]*.tar.*z*"
                    ;;
	            clang-*)
		      serchstr="${pkgnm}*.tar.*z*"
		    ;;  
                    compiler-rt-*)
                      serchstr="${pkgnm}*.tar.*z*"
                    ;;
                    cups-[0-9]*) # not cups-filters
                      serchstr="${pkgnm}[0-9]*.tar.*z*"
                    ;;
                    dconf-editor-*)
                      serchstr="${pkgnm}*.tar.*z*"
                    ;;
                    docbook-xsl-doc-*)
                       serchstr="docbook-xsl-doc-*"
                    ;;
                    freetype-doc-*)
                      serchstr="${pkgnm}*"
                    ;;
                    ghostscript-fonts-std-*)
                        serchstr="${pkgnm}*.tar.*z*"
                    ;;
                    ghostscript-[0-9]*) # serchstr needs a numeric after name
                        serchstr="${pkgnm}[0-9]*"
                    ;;
                    gimp-[0-9]*) # not the help file
                       if [ "$pkgnm" = "gimp-" ]; then serchstr='gimp-[0-9]*'; fi
                    ;;
                    git-[0-9]*) # don't want the manpages or the htmldocs files
                       if [ "$pkgnm" = "git-" ]; then serchstr='git-[0-9]*'; fi
                    ;;
                    git-manpages-*|git-htmldocs-*)
                       serchstr="${pkgnm}*.tar.*z*"
                    ;;
#                    gtk+-2.*|gtk+-3.*|gtkmm-2.*|gtkmm-3.*|pygobject-2.*|pygobject-3.*|Python-2.*|Python-3.*|webkitgtk-2.14.*)
#                       serchstr="$currentSrcFile*"
#                    ;;
                    gnu-gs-fonts-other-*)
                       serchstr="${pkgnm}*.tar.*z*"
                    ;;
                    iproute2-*) # ** special case ** don't want to mess with the patch
                       serchstr="${pkgnm}*.tar.*z*"
		    ;;
	            jtreg-*)
                       serchstr="${pkgnm}*.tar.*z*"
		    ;;
	            libcdio-paranoia-*)
		       serchstr="libcdio-paranoia-*.tar.*z*"
		    ;;
                    libpng-*.tar.*z*) # not the patch.gz file
                       serchstr="${pkgnm}*.tar.*z*"
                    ;;
                    libpng-*patch.*z*) # the patch file
                       serchstr="${pkgnm}*patch.*z*"
                    ;;
                    libusb-compat-*) # don't confuse with libusb-
                       serchstr="${pkgnm}*.tar.*z*"
                    ;;
                    libva-[0-9]*) # not libva-intel-driver
                       if [ "$pkgnm" = "libva-" ]; then serchstr='libva-[0-9]*'; fi
                    ;;
                    lightdm-gtk-greeter-*)
                       serchstr="${pkgnm}*.tar.*z*"
                    ;;
                    Linux-PAM*-docs.tar.*z*)
                       serchstr="${pkgnm}*-docs.tar.*z*"
                    ;;
                    lua-*-tests.tar.*z*)
                       serchstr="${pkgnm}*-tests.tar.*z*"
                    ;;
                    lua-[0-9]*) # lua found on the libpeas page - set serchstr
                       serchstr="${pkgnm}*.tar.*z*"
                    ;;
                    mesa-*.tar.xz)
                       serchstr="${pkgnm}*tar.xz" # don't include the patch with the xz file
                    ;;
	            mypaint-brushes-*)
		      serchstr="${pkgnm}*.tar.*z*"
		    ;;
                    nasm-*xdoc*)
                      serchstr="${pkgnm}*${tailbit}"
                    ;;
                    numlockx_*)
                      serchstr="${pkgnm}*.tar.*z*"
                    ;;
		    php_manual_en.html.gz|php_manual_en.tar.gz)
		       serchstr="php_manual_en*"
		    ;;
                    python-2*-docs*)
                       serchstr="python-2*-docs*"
                    ;;
                    python-3*-docs*)
                       serchstr="python-3*-docs*"
                    ;;
                    poppler-[0-9]*) # not poppler-data
                       serchstr="${pkgnm}[0-9]*.tar.*z*"
                    ;;
                    poppler-data*)
                       serchstr="${pkgnm}*.tar.*z*"
		    ;;
                    ralcgm-*)
                       serchstr="ralcgm-*"
                    ;;
                    sane-frontends-*)
                       serchstr="sane-frontends-*"
                    ;;
            	    speexdsp-*)
	                serchstr="speexdsp-*"
	            ;;
                    sqlite-doc-*)
                       serchstr="sqlite-doc-*"
                    ;;
                    t1lib-*)
                       serchstr="t1lib-*"
                    ;;
                    UCD.zip)
                       serchstr="UCD"
                    ;;
                    urt-*)
                       serchstr="urt-*"
                    ;;
                    wayland-[0-9]*) # don't want wayland-protocols
                       serchstr='wayland-[0-9]*'
                    ;;
                    xf86-input-libinput-*)
                       serchstr="${pkgnm}*.tar.*z*"
                    ;;
	            xmlts*)
		       serchstr="xmlts*.tar.*z*"
		    ;;
                    *)
                       serchstr="$currentSrcFile*"
                    ;;
                 esac
                 if $printit; then echo "serchstr is $serchstr"; fi
# search for existing files matching serchstr
#                 getCurrentSrcFile $Section "$serchstr"
                 fileExists=($(find $sourceLoc -type f -name "$serchstr"))
		 if (( ${#fileExists[@]} )); then # not empty
                   if $printit; then echo "fileExists array is ${fileExists[@]}"; fi
		 else
                   if $printit; then echo "fileExists array is empty"; fi
                 fi
# ignore lua on the libpeas page
                 case $currentSrcFile in
                    libpeas-*)
                      case $fileToDnld in
                         lua-*)
                           echo "$fileToDnld is dealt with in section programming, not $section"
                         ;;
                      esac			 
		    ;;
                    *)
                      delAndDnld fileExists[@] $fileToDnld ${urlist[j]} $sourceLoc
                    ;;
                 esac
               else # fileToDnld exists in the src dir
                 echo "file $fileToDnld already downloaded"
                 if [ "$fileToDnld" != "$fileToHold" ]; then
                   echo "fileToDnld is $fileToDnld and fileToHold is $fileToHold"
                   echo "Should these be the same? Why are they different?"
                   exit 1
                 fi
# check to see if $fileToDnld is in the urlarray
                 local pattern=""
                 pattern=$(printf '%s\n' ${urlarray[@]} | grep "$fileToDnld")
                 if [ -z "$pattern" ]; then # version downloaded not found in wget-list file
                   local foundit=false
                   for ((kl=0; kl<${#urlarray[@]}; kl++ )); do # search urlarray for the pkg name
                     if [ "${urlarray[kl]}" = *"$pkgnm"* ]; then # found file with pkgnm in array
                       pkgverstor=$pkgvers
                       if $printit; then echo "version already downloaded is $pkgverstor"; fi
                       pkgplusvers=$(echo ${urlarray[kl]} | awk -F\/ '{print $NF}')
                       RtrnVars=""
                       getPkgVersion $pkgplusvers ".tar" # get the version from wget-list
                       pkgvers=${RtrnVars[1]}
                       if $printit; then echo "version from wget-list file is $pkgvers"; fi
                       if [ "$pkgverstor" != "$pkgvers" ]; then
                         if $printit; then echo "find which of $pkgverstor and $pkgvers is later"; fi
                         compare_versions $pkgverstor $pkgvers "."
                         ret_val=$?
                         if [ $ret_val -eq $RETURN_GT ]; then # add the downloaded version to the urlarray
                           newurl=${urlarray[kl]/${pkgvers}/${pkgverstor}}
                           if $runit; then urlarray+=($newurl); fi
                         fi
                       fi
                       echo "*** Check that $pkgnm has been written correctly to $wgetlist ***"
                       foundit=true
                       break
                     fi
                   done
                   if ! $foundit; then # didn't find that package name in the wget-list file
# add the fileToDnld url to the urlarray
                     echo "$fileToDnld not in the $wgetlist file"
		     echo "will add ${lines[j]} to the urlarray"
		     urlarray+=(${lines[j]})
                   fi
                 else # is in urlarray, don't need to add it
                   if $printit; then echo "pattern is $pattern"; fi
                   local numPats=$(echo "$pattern" | wc -l)
                   if [ $numPats -gt 1 ]; then # duplicate urls in the urlarray
                     echo "*** NOTE There are duplicate urls in the urlarray for $fileToDnld ***"
                     pattern=$(echo "$pattern" | uniq)
                   fi
                   if $printit; then echo "file $fileToDnld is in the urlarray - do nothing."; fi
                 fi # test pattern
               fi # end test if fileToDnld is in the source location
             fi # processPkg
           done # loop through arr
       ;;
    esac # currentSrcFile
  else # processit is false
    case $currentSrcFile in
       gtksourceview*) # want to add the url for this package because it's in the src dir
         local afile
         for afile in ${sourceLoc}/*; do
           case $afile in
              *gtksourceview-*)
                afile=$(echo $afile | awk -F\/ '{print $NF}')
                local trimto=".tar"
                break
              ;;
           esac
         done
         revsrcnm=""
         gnmvers=""
         gnmPkgVers "gtksourceview-" $afile $trimto
         gtksourceviewURL="${gnomeBaseURL}/gtksourceview/${gnmvers}/${afile}"
         if $runit; then echo "$gtksourceviewURL" >> ${sourceLoc}/${wgetlist}; fi
       ;;
    esac
  fi # processit test
processit=true
done # loop through src names
#
if [ "$cursection" = browser ]; then
  # need to make sure the flash_player_ppapi_linux.x86_64.tar.gz file is up-to-date
  fileToDownload="flash_player_ppapi_linux.x86_64.tar.gz"
  local flash_vers="32.0.0.223"
  local flashURL="https://fpdownload.adobe.com/pub/flashplayer/pdc/${flash_vers}/${fileToDownload}"
  echo "update $fileToDownload [Y/n]?"
  if $runit; then
    read replyUpdate
    case $replyUpdate in
      [yY]|[yY][Ee][Ss])
        if $printit; then echo "Will remove ${sourceLoc}/${fileToDownload}"; fi
        rm -rf "${sourceLoc}/${fileToDownload}"
        if $printit; then echo echo "Will download $flashURL and place in ${sourceLoc}/${fileToDownload}"; fi
        wget -O ${sourceLoc}/${fileToDownload} $flashURL
        chown 0:0 ${sourceLoc}/${fileToDownload}
        echo "Will add $flashURL to the urlarray"
#        echo "$flashURL" >> ${sourceLoc}/${wgetlist}
      ;;
      [nN]|[nN][Oo])
        echo "file $fileToDownload not updated."
        echo "Assume it is the latest version"
# don't need to change the urlarray
#        echo "$flashURL" >> ${sourceLoc}/${wgetlist}
      ;;
      *)
        if $printit; then echo "Will remove ${sourceLoc}/${fileToDownload}"; fi
        rm -rf "${sourceLoc}/${fileToDownload}"
        if $printit; then echo echo "Will download $flashURL and place in ${sourceLoc}/${fileToDownload}"; fi
        wget -O ${sourceLoc}/${fileToDownload} $flashURL
        chown 0:0 ${sourceLoc}/${fileToDownload}
        echo "Will add $flashURL to the urlarray"
#        echo "$flashURL" >> ${sourceLoc}/${wgetlist}
      ;;
    esac
  fi # end runit
fi
if $runit; then
# write the urlarray to ${sourceLoc}/${wgetlist}
  case $cursection in
     openelec|telepathy|nvidia)
       : # do nothing - didn't delete the wget-list file
     ;;
     *)
       if $printit; then
         echo "Will write this urlarray to ${sourceLoc}/${wgetlist}"
         echo "${urlarray[@]}"
       fi
       printf "%s\n" "${urlarray[@]}" | sort -u > ${sourceLoc}/${wgetlist}
# create the sortedfile
       if $printit; then echo "create the $sortedfile in $sourceLoc"; fi
       sort -u ${sourceLoc}/${wgetlist} > ${sourceLoc}/${sortedfile}
     ;;
  esac
fi
} #end GetLatestFiles
#
GetSources () {
# $1 is the src dir
# $2 is section
# $3 is the sortedfile name
# $4 is where to get the src url
#
local srcdir=$1
local section_name=$2
local sortedfile=$3
local src_url=$4
local fname
local extName
# anduin is no longer functional - can delete all the anduin code
local SrcPath
local fullFile=${srcdir}/${section_name}/${sortedfile}
#
while read url_line; do
  fname=$(echo $url_line |  awk -F\/ '{print $NF}' )
  skipit=false # download this file by default
  SrcPath=${srcdir}/${section_name}
  case $fname in
     midori*)
       SrcPath="${srcdir}/browser"
     ;;
     openbox*)
       SrcPath="${srcdir}/windowmanager"
     ;;
     sddm*)
       SrcPath="${srcdir}/displaymanager"
     ;;
  esac
  if [ -e ${SrcPath}/${fname} ]; then # file exists
    echo "$fname is already downloaded"
    skipit=true
  else
    extName=$(echo $fname | awk -F\. '{print $NF}' )
    case $section_name in
        java)
           case $fname in
             OpenJDK*bin*)  # only want to download one binary
                    case $(uname -m) in
                      x86_64) # don't want the i686 version
                          case $fname in
                            *i686-bin*)
                                 skipit=true
                            ;;
                            *x86_64-bin*) # don't want either binary
                                 skipit=true # using the oracle binary
                            ;;
                          esac
                      ;;
                      *) # don't want the x86_64 version
                          case $fname in
                            *x86_64-bin*)
                                 skipit=true
                            ;;
                          esac
                      ;;
                    esac
                    if [ "$src_url" = anduin ]; then
                      initial=${fname:0:1}
                      initial=$(echo ${initial,,*}) # make sure first char is lowercase
                    fi
             ;;
             OpenJDK*) # don't want the book downloads - use wget
                    skipit=true
             ;;
             *)
                    if [ "$src_url" = anduin ]; then
                      initial=${fname:0:1}
                      initial=$(echo ${initial,,*}) # make sure first char is lowercase
                    fi
             ;;
           esac
        ;;
        programming)
           if [ "$src_url" = anduin ]; then
             case $fname in
               Alien-Build*|Alien-Libxml2*|Archive*|Capture-Tiny*|ExtUtils*|File-chdir*|File-Which*|Glib*|Module-Build*|Path-Tiny*|URI*|XML*) # perl modules
                 initial="perl-modules"
               ;;
               pyatspi*|pygtk*|pygobject*|pyxdg*|scons*) # python modules
                 initial="python-modules"
               ;;
               *)
                 initial=${fname:0:1}
                 initial=$(echo ${initial,,*}) # make sure first char is lowercase
               ;;
             esac
           fi
        ;;
        x)
           if [ "$src_url" = anduin ]; then
             case $fname in # MesaLib is not part of Xorg
               MesaLib*)
                 initial="m"
               ;;
               *)
                 initial="Xorg"
               ;;
             esac
           fi
        ;;
        *)
           if [ "$src_url" = anduin ]; then
             initial=${fname:0:1}
             initial=$(echo ${initial,,*}) # make sure first char is lowercase
           fi
        ;;
    esac
  fi
  if ! $skipit; then # get the source
    case $src_url in
        anduin)
            full_url=${anduin_src_root}/${initial}/${fname} # use anduin
        ;;
        url_in_book)
            full_url=$url_line # use the url in the wget-list file
        ;;
    esac
    if [ "$extName" = patch ]; then
      case $book_version in
         BOOK)
           full_url=${patch_root}/svn/${fname}
         ;;
         *)
           full_url=${patch_root}/${book_version}/${fname}
         ;;
      esac
    fi
    wget $hostwgetopts $full_url -P $SrcPath
  fi
done < $fullFile
#
if [ "$section_name" = x ]; then # get all the extra files
  srcUrl="http://xorg.freedesktop.org/releases/individual"
# set up the dirs under x
  if [ ! -d ${SrcPath}/${xlib} ]; then
    install -v -d ${SrcPath}/${xlib}
  fi
  if [ ! -d ${SrcPath}/${xapp} ]; then
    install -v -d ${SrcPath}/${xapp}
  fi
  if [ ! -d ${SrcPath}/${xfont} ]; then
    install -v -d ${SrcPath}/${xfont}
  fi
  createMd5File $xlib
  createMd5File $xapp
  createMd5File $xfont
  GetXtraFiles $xlib
  GetXtraFiles $xapp
  GetXtraFiles $xfont
fi
} #end GetSources
#
DnldArchBinFile () {
# download the Arch binary for requested package
# $1 is the Arch pkg name
# $2 is the Arch URL
# $3 is the location to store the downloaded bin file
#
local ArchSrcName=$1
local binfilename=$ArchSrcName
# check if last char is hyphen. Should already have been done
if [ "${ArchSrcName: -1}" = "-" ]; then # remove it
  binfilename=${ArchSrcName%?}
else # it should be
  ArchSrcName="${ArchSrcName}-"
fi
local ArchURL=$2
local SrcPath=$3
local pkgVers=""
#
pushd $SrcPath
  wget -O $binfilename $ArchURL # need to get the binary filename
  pkgVers=$(more $binfilename | grep "Arch Linux - $binfilename" | awk '{print $5}')
# sometimes there is a colon in the Arch binary pkg version
# if so, change it to an underscore
  pkgVers=${pkgVers/:/_}
  rm -rf $binfilename # don't need this html page anymore
  local pkgtarfile="${ArchSrcName}${pkgVers}-x86_64.pkg.tar.zst"
  if [ ! -e $pkgtarfile ]; then
    wget -O $pkgtarfile ${ArchURL}/download/
    retval=$?
  fi
popd
if [ $retval -eq 0 ]; then
  return $RETURN_BFD
else
  return $RETURN_PARAM
fi
} # end DnldArchBinFile
#
spinner () {
# a spinner for while you're waiting!
shopt -s extglob
local sp="/-\|"
local sc=0
spin () {
   printf "\b${sp:sc++:1}"
   ((sc==${#sp})) && sc=0
}
endspin() {
   printf "\r%s\n" "$@"
}
}
#
GetArchBinaries () {
# $1 is the src dir
# $2 is section
# $3 is the wget-list file
# $4 if present, signifies a single package requested
# #5 if single package requested from Arch, this is the Arch source file name
local srcdir=$1
local section_name=$2
local wgetlist=$3
local sngl_pkg="${4:-false}"
local SrcPath=${srcdir}/${section_name}
local fullFile=${SrcPath}/${wgetlist}
local files_downloaded=false
local pkgname pkgvers titleline binFile matchPat
local fname=""
local ArchBinURL=""
if $sngl_pkg; then
  local ArchSrcName=$5
  echo "single package requested"
  if [ -z "$ArchSrcName" ]; then
    echo "You must give the Arch source filename for a single package"
    echo "Exit now"
    exit 1
  else
    echo "ArchSrcName is $ArchSrcName"
  fi
# NOTE SINGLE_PACKAGE is a constant global variable - do not change it!
  echo "Check if $SINGLE_PACKAGE Arch binary has been downloaded for section $section_name"
  matchPat=$ArchSrcName
  if [[ -z "$matchPat" ]]; then
    echo "The variable matchPat is Null."
    echo "No Arch binary name for $SINGLE_PACKAGE has been found."
    echo "May be $SINGLE_PACKAGE isn't in /blfsBuildFiles/blfsfiles/<section>-files"
    echo "Will continue to create the script ${SINGLE_PACKAGE}.sh"
  fi
  if [[ ! -z "$matchPat" ]]; then
    local fname=$(find $SrcPath -type f -name $matchPat*)
    if [[ ! -z "$fname" ]]; then
      echo "found the Arch binary file $fname in $SrcPath"
      return 0
    else
      echo "Download the Arch binary file for $ArchSrcName and place it in"
      echo "$SrcPath"
# download the Arch binary for requested package
      local binfilename=$ArchSrcName
# remove last char if it's a - because Arch URLs don't end in -
      if [ "${ArchSrcName: -1}" = "-" ]; then # remove it
        binfilename=${ArchSrcName%?}
      fi
      local ArchPkgGroup="extra/x86_64"
      case $ArchSrcName in
         openimageio-)
           ArchPkgGroup="community/x86_64"
         ;;
      esac
      ArchBinURL="https://www.archlinux.org/packages/${ArchPkgGroup}/${binfilename}"
      DnldArchBinFile $ArchSrcName $ArchBinURL $SrcPath
      if [ $? -eq $RETURN_PARAM ]; then
        echo "Failed to download the Arch Binary file $ArchSrcName"
        echo "Investigate why"
        exit 1
      fi
    fi
  else
    echo "Can't download the Arch binary file for $SINGLE_PACKAGE"
  fi
else # all packages in this section
  runBinCheck=true
  echo "Can check if all Arch binary files have been downloaded"
  echo "Do you want to skip this check? [y/N]"
  read Reply
  case $Reply in
     [yY]|[yY][Ee][Ss])
          echo "okay, will assume all binaries have been downloaded"
          runBinCheck=false
     ;;
     [nN]|[nN][Oo])
          echo "okay, will check if all Arch binary files have been downloaded for section $section_name"
     ;;
     *)
          echo "okay, will check if all Arch binary files have been downloaded for section $section_name"
     ;;
  esac
  if $runBinCheck; then
    while read -u 3 url_line; do # NOTE - using the file descriptor 3 to read the file because 
# of the read Reply below. This reads from STDIN so have to use a different FD for the while read.
#
      ArchSrcName=$(echo $url_line | awk -F\/ '{print $NF }')
      if $printit; then echo "Arch source name is $ArchSrcName"; fi
      case $ArchSrcName in # some Arch binaries have a different name from the src file
         apr) # distinguish from apr-utils-
           matchPat="apr-[0-9]*"
         ;;
         gobject-introspection) # distinguish from gobject-introspection-libs- and -runtime
           matchPat="gobject-introspection-[0-9]*"
         ;;
         grilo) # distinguish from grilo-plugins-
           matchPat="grilo-[0-9]*"
         ;;
         gst-plugins-base) # distinguish from gst-plugins-base-libs-
           matchPat="gst-plugins-base-[0-9]*"
         ;;
         libcdio) # distinguish from libcdio-paranoia-
           matchPat="libcdio-[0-9]*"
         ;;
         libsigcpp) # arch name is libsigc++
           matchPat="libsigc++*"
         ;;
         libusb) # distinguish from libusb-utils
           matchPat="libusb-[0-9]*"
         ;;
         mariadb) # distinguish from mariadb-clients
           matchPat="mariadb-[0-9]*"
         ;;
         nss) # distinguish from nss-mdns
           matchPat="nss-[0-9]*"
         ;;
         openssl) # distinguish from openssl-1.0
           matchPat="openssl-1.1*"
         ;;
         pam) # distinguish from pambase
           matchPat="pam-*"
         ;;
         wayland) # distinguish from wayland-protocols
           matchPat="wayland-[0-9]*"
         ;;
         xvid) # arch binary is xvidcore
           matchPat="xvidcore*"
         ;;
         *)
           matchPat="$ArchSrcName*"
         ;;
      esac
      ArchSrcName="${ArchSrcName}-" # add the hyphen to the filename
# does a binary file with this name already exist in SrcPath
#
      fname=$(find $SrcPath -type f -name $matchPat)
      if [[ ! -z "$fname" ]]; then
        echo "found file $fname"
        echo "Do you wish to use this version? [Y/n]?"
        read Reply
        case $Reply in
           [yY]|[yY][Ee][Ss])
              echo "okay continuing"
           ;;
           [nN]|[nN][Oo])
              echo "File will be deleted and a new version downloaded"
              rm -v $fname
              DnldArchBinFile $ArchSrcName $url_line $SrcPath
           ;;
           *)
              echo "okay continuing"
           ;;
        esac
      else # download the file
        if $printit; then
          echo "Call DnldArchBinFile to download the Arch binary file for $ArchSrcName"
          echo "ArchSrcName url_line SrcPath are $ArchSrcName $url_line $SrcPath"
        fi
        DnldArchBinFile $ArchSrcName $url_line $SrcPath
        if [ $? -eq $RETURN_PARAM ]; then
          echo "Failed to download the Arch Bin file for $ArchSrcName"
          echo "Check why this failed"
          exit 1
        fi
      fi
      fname=""
    done 3< $fullFile # using FD 3 because have a read within a read loop
    return $RETURN_BFD
  fi
fi
} # end GetArchBinaries
#
GetListFile () {
# $1 is the book directory
# $2 is the book version
# $3 is the wget-list file name
local bookdir=$1
local version=$2
local wgetlist=$3
REPODIR=${bookdir}/${version}
local rev="sysv"
if [ "$SYSTEMD" = yes ]; then rev="systemd"; fi
local wgetlistfile=${SOURCEDIR}/${wgetlist}
echo "wgetlistfile is $wgetlistfile"
if [ -e $wgetlistfile ]; then
  rm $wgetlistfile
fi
make -j1 -f $REPODIR/Makefile -C $REPODIR BASEDIR=$SOURCEDIR REV=$rev $wgetlist
#
} #end GetListFile
#
ChkEmptySrcFiles () {
if [ ! -d ${SOURCEDIR}/${1} ]; then
  mkdir -pv ${SOURCEDIR}/${1}
  return $RETURN_PARAM
fi
if [ "$(ls -A ${SOURCEDIR}/${1})" ]; then #  directory is not empty
  zeroLenFiles=$(ls -l $SOURCEDIR/${1}|awk '!/^d/&&$5==0 {print $NF}')
  len=${#zeroLenFiles}
  if [ $len -gt 0 ]; then
    echo -e "These files are empty:\n$zeroLenFiles"
    return $RETURN_PARAM
  else
    return 0 # no empty files found
  fi
else
  return $RETURN_PARAM # section directory is empty
fi
} # end ChkEmptySrcFiles
#
GetGitInfo () {
# $1 is the dir containing .git
local tmpfile=/tmp/$(date +%d%B%Y_%H:%M)tmp.file
pushd $1 > /dev/null
    echo "== Remote URL: $(git remote -v)" > $tmpfile
    echo "== Remote Branches: " >> $tmpfile
    git branch -r >> $tmpfile
    echo "== Local Branches:" >> $tmpfile
    git branch >> $tmpfile
    echo "== Configuration (.git/config)" >> $tmpfile
    cat .git/config >> $tmpfile
    echo "== Most Recent Commit" >> $tmpfile
    git log --max-count=1 >> $tmpfile
    GITINFO="$(more $tmpfile | awk '{printf $0"|"}')"
    rm $tmpfile
popd > /dev/null
} # end GetGitInfo
#
DumpCommands () {
# $1 is the REPO (blfs in this case)
# $2 is the dir containing the book
# $3 is the book version
# $4 is either commit or Revision depending on whether using git or svn
#
local bookdir=$2
local version=$3
local rev="sysv" # default
if [ "$SYSTEMD" = yes ]; then rev="systemd"; fi
REPODIR=${bookdir}/${version}
target=$( echo $1 | awk '{print tolower($1)}')
if [ "$4" = commit ]; then # use GITINFO
  local commitInfo=$GITINFO
else
  local commitInfo=$SVNINFO
fi
#echo "commitInfo is $commitInfo"
AllInfo=$( echo $commitInfo | awk -v pattern=$4 'BEGIN{ RS = "|" };$0 ~ pattern {print $0}' )
for dir in $DumpedCommands $Dumpedhtml; do
  if [ ! -d $dir ]; then
    install -v -m0755 -d $dir
    touch ${dir}/.${4} # prevent cat error meassage below
  else # check if there is already a revision or commit file
    if [ ! -e ${dir}/.${4} ]; then
      touch ${dir}/.${4} # prevent cat error msg
#      echo ".$4 added to $dir"
#    else
#      echo "Found ${dir}/.${4}"
    fi 
  fi
done
#echo "AllInfo is $AllInfo"
local comp=$( cat ${dir}/.${4} | awk -v pattern=$4 '$0 ~ pattern {print $0}')
#echo "comp is $comp"
for dir in $Dumpedhtml $DumpedCommands; do
  if [ -e "$dir" -a "$AllInfo" != "$comp" ]; then # remove the old contents of $DumpedCommands $Dumpedhtml
    rm -rf $dir/*
    touch ${dir}/.${4}
    pushd $REPODIR
        make -j1 DUMPDIR=$DumpedCommands BASEDIR=$Dumpedhtml REV=$rev $target dump-commands
        for dir in $DumpedCommands $Dumpedhtml; do
          echo $commitInfo | awk 'BEGIN{ RS = "|" }; {print $0}' > ${dir}/.${4}
        done
    popd > /dev/null
    if [ ! -d ${SOURCEDIR}/${version} ]; then mkdir -pv ${SOURCEDIR}/${version}; fi
    if [ ! -e ${SOURCEDIR}/${version}/wget-list ]; then
      mv ${Dumpedhtml}/wget-list ${SOURCEDIR}/${version}/
    fi
    break
  fi
done
} # end DumpCommands
#
unpackBLFSfiles () {
# * NOTE * the tar file $blfsfilesTar and the directory $blfsBuildFiles
# must exist before calling this function
#
tar -xvf ${LFS}/${blfsfilesTar} -C ${LFS}${blfsBuildFiles} --no-same-owner
#untarred so delete it
rm ${LFS}/${blfsfilesTar}
} #end unpackBLFSfiles
#
trimSpace () {  # trim whitespace before and after a string, single and multi-line strings
    echo "$1" | sed -n '1h;1!H;${;g;s/^[ \t]*//g;s/[ \t]*$//g;p;}'
} # end trimSpace
#
combineScripts () {
declare -a commands=("${!1}")
declare -a buildWrap=("${!2}")
local combine=""
local numc=${#commands[@]} # number of commands from the book
local numb=${#buildWrap[@]} # number of commands to wrap around the book commands
countc=0 # counter for the combine array
countbl=0 # counter for build lines written
testpipecount=0 # count the test_pipe commmands so can insert commands after
cur_countg=$countg # current number of commands written out
inc=false # switch for whether a configure, make and install section is present
cont=0 # number of continuation lines
ifDoc=false # true if an if block containing a doc
#
for (( i=0; i<$numb; i++ )); do
  case "${buildWrap[i]}" in
    configure_commands*)
      combine[countc++]=${buildWrap[countbl++]}
      combine[countc++]=${buildWrap[countbl++]} # the {: line
      for (( jk=$cur_countg; jk<$numc; jk++ )); do
        case ${commands[jk]} in
           make*) # assume either a make command or make install
              countg=$jk
              break
           ;;
           *"make -f client.mk"*) # make for firefox
              countg=$jk
              break
           ;;
           'LANG="en_US.UTF-8" make') # the media-player-info make command
              countg=$jk
              break
           ;;
           "LC_ALL=en_US make") # the gegl make command
              countg=$jk
              break
           ;;
           *"CXX='g++ -Wno-narrowing' make"*) # the make for espeak
              countg=$jk
              break
           ;;
           *"setup.py build"*) # python module build
              countg=$jk
              break
           ;;
           *"python3 setup.py install"*|*"python2 setup.py install"*) # single python2/3 command
              countg=$jk
              break
           ;;
           *"python2 setup.py"*"build"*|*"python3 setup.py"*"build"*) # e.g. py2-numpy, py3-numpy
              countg=$jk
              break
           ;;
           "pushd ipython"*) # install section for ipython
              countg=$jk
              break
           ;;
           *"export RUSTFLAGS"*) # rustc, goes with teh python3 command
              countg=$jk
              break
           ;;
           *"mach build"*) # firefox now uses mach
              countg=$jk
              break
           ;;
           "cargo build --release"*) # cbindgen
              countg=$jk
	      break
	   ;;
           *install*) # test to see if part of a continuation sequence
              case ${commands[jk]} in
                 *\\) # a continuation line
                    if [ $cont -gt 0 ]; then # part of configure sequence so store it
                      storit[cont++]="${commands[jk]}"
                      ((countg++))
                    else # assume an install cont line
                      countg=$jk
                      break
                    fi
                 ;;
                 *)
                    countg=$jk
                    break
                 ;;
              esac
           ;;
           error_count*)
              countg=$jk
              break
           ;;
           *"waf build"*)
              countg=$jk
              break
           ;;
           *"python2 waf build"*)
              countg=$jk
              break
           ;;
           './build.sh -Ddist.dir='*) # apache-ant build
              countg=$jk
              break
           ;;
           './Build') # perl module build command
              countg=$jk
              break
           ;;
           '_bindir="bin.linuxx86"'*|'./b2 stage'*) # boost
              countg=$jk
              break
           ;;
           *ninja*) # chromium make
              countg=$jk
              break
           ;;
           *)
              case "${commands[jk]}" in
                 *\\)
                    storit[cont++]="${commands[jk]}"
                    ((countg++))
                 ;;
                 *)
                    # write with any continuation lines
                    if [ $cont -gt 0 ]; then
                      for (( l=0; l<$cont; l++ )); do
                        combine[countc++]="  ${storit[l]}"
                      done
                      combine[countc++]="  ${commands[jk]}"
                      ((countg++))
                      cont=0
                      inc=true
                    else
                      combine[countc++]="  ${commands[jk]}" # configure command
                      ((countg++))
                      inc=true # found at least one configure command
                    fi
# the following test is never likely to be true - can probably remove it
                    if [ $[jk+1] -eq $numc ]; then countg=$jk; fi # all book commands written
                 ;;
              esac
           ;;
        esac
      done
      if [ $cont -gt 0 ]; then
        for (( l=0; l<$cont; l++ )); do
          combine[countc++]="  ${storit[l]}"
        done
        combine[countc++]="  ${commands[countg++]}"
        inc=true
        cont=0
      fi
      if ! $inc; then
        combine[countc++]='  echo "no configure script for this package"'
      fi
    ;;
    make_commands*)
      inc=false
      cur_countg=$countg
      combine[countc++]=${buildWrap[countbl++]}
      combine[countc++]=${buildWrap[countbl++]} # the {: command
      for (( jl=$cur_countg; jl<$numc; jl++ )); do
        case ${commands[jl]} in
           "make preinstall") # kodi- keep this with the make command
              combine[countc++]="  ${commands[jl]}" # make commands
              ((countg++))
           ;;
           *install*) # assume an install command
              case ${commands[jl]} in
                 *"/usr/bin/bjam"*) # this is boost so stay in make
                       combine[countc++]="  ${commands[jl]}"
                       ((countg++))
                 ;;
                 *)
                       countg=$jl
                       break
                 ;;
              esac
           ;;
           docsdir*)
              countg=$jl
              break
           ;;
           "make update")
              countg=$jl
              break
           ;;
           "cp -rv ant-"*) # apache-ant install
              countg=$jl
              break
           ;;
           *'cp -Rv build/*/images/jdk/'*) # openjdk install line
              countg=$jl
              break
           ;;
           "cd BLAS") # blas and cblas install
              countg=$jl
              break
           ;;
           "pushd ipython"*) # install section for ipython
              countg=$jl
              break
           ;;
           "export LIBSSH2"*) # rustc, goes with the DESTDIR command
              countg=$jl
              break
           ;;
           *"_components"*) # kodi - break here for install components
              countg=$jl
              break
           ;;
           *)
              case "${commands[jl]}" in
                 *\\)
                     storit[cont++]="${commands[jl]}"
                     ((countg++))
                 ;;
                 *)
                     if [ $cont -gt 0 ]; then # write the continuation lines
                       for (( l=0; l<$cont; l++ )); do
                         combine[countc++]="  ${storit[l]}"
                       done
                       combine[countc++]="  ${commands[jl]}"
                       ((countg++))
                       cont=0
                       inc=true
                     else
                       combine[countc++]="  ${commands[jl]}" # make commands
                       ((countg++))
                       inc=true #at least one make command found
                     fi
                     if [ $[jl+1] -eq $numc ]; then # no more commands
                       countg=$jl
                       if [[ "${commands[$countg]}" != *make* ]]; then
                         ((countc--))
                       fi
                     fi
                 ;;
              esac
           ;;
        esac
      done
       if ! $inc; then
         combine[countc++]='  echo "no make script for this package"'
       fi
    ;;
    install_commands*)
      inc=false
      foundDoc=false
      foundpushd=false # used with ipython to keep all install commands together
      kodidone=false # kodi has a for loop which goes in install, so need the done to terminate it
      cur_countg=$countg
      combine[countc++]=${buildWrap[countbl++]}
      combine[countc++]=${buildWrap[countbl++]} # the {: command
      for (( jm=$cur_countg; jm<$numc; jm++ )); do
        case ${commands[jm]} in
          *install*)
             case "${commands[jm]}" in
               *\\) # cont line so store it
                  case "${commands[jm]}" in
                    'make'*'=/usr/share/doc'*) # genuine install command
                        storit[cont++]="${commands[jm]}"
                        ((countg++))
                        inc=true
                    ;;
                    *'/usr/share/doc'*) # cont line contains a doc
                        foundDoc=true
                        storit[cont++]="${commands[jm]}"
                        ((countg++))
                    ;;
                    *) # no doc in this cont line
                        storit[cont++]="${commands[jm]}"
                        ((countg++))
                    ;;
                  esac
               ;;
               'make'*'=/usr/share/doc'*) # genuine install command
                    combine[countc++]="  ${commands[jm]}"
                    ((countg++))
                    inc=true
               ;;
               *'install -v -m755 -d /usr/share/doc/php-'*) # need this php install
                    combine[countc++]="  ${commands[jm]}"
                    ((countg++))
                    inc=true
               ;;
               *'/usr/share/doc'*) # don't write a doc install
                    ((countg++))
               ;;
               *) # install line so write it out
                    if [ $cont -gt 0 ]; then # first write out cont lines
                      for (( l=0; l<$cont; l++ )); do
                        combine[countc++]="  ${storit[l]}"
                      done
                    fi 
                    combine[countc++]="  ${commands[jm]}"
                    ((countg++))
                    inc=true
                    cont=0
               ;;
             esac
          ;;
          '#'*) # comment line so ignore it
              ((countg++))
          ;;
          "make update")
              combine[countc++]="  ${commands[jm]}"
              cont=0
              inc=true
              ((countg++))
          ;;
          *'/usr/share/doc/php'*) # php so write the docs
              for (( l=0; l<$cont; l++ )); do
                combine[countc++]="  ${storit[l]}"
              done
              combine[countc++]="  ${commands[jm]}"
              cont=0
              inc=true
              ((countg++))
          ;;
          *'/usr/share/doc/slang'*) # store this continuation line
              storit[cont++]="${commands[jm]}"
              ((countg++))
          ;;
          *'build/*/images/jdk/'*) # openjdk install lines
              combine[countc++]="  ${commands[jm]}"
              cont=0
              inc=true
              ((countg++))
          ;;
          *"cp -rv ant-"*) # apache-ant install
              combine[countc++]="  ${commands[jm]}"
              cont=0
              inc=true
              ((countg++))
          ;;
          "if ["*) # starts with if so if a doc, will need to delete the closing fi
              case ${commands[jm]} in
                 *'/usr/share/doc'*)
                     ifDoc=true
                     case ${commands[j]} in
                        *\\) # a continuation line so store it
                              storit[cont++]="${commands[jm]}"
                              ((countg++))
                        ;;
                     esac
                 ;;
                 *\\) # a continuation line
                     storit[cont++]="${commands[jm]}"
                     ((countg++))
                 ;;
                 *) # if block but not a doc or a cont line
                     case ${commands[jm]} in
                       *'modprobe.d/nvidia.conf'*) # nvidia if block
                            countg=$jm
                            cont=0
                            inc=true
                            break
                       ;;
                       *'/usr/lib/libnssckbi.so'*) # p11-kit so break
                            countg=$jm
                            break
                       ;;
                       *) # assume no more install commands so break
# uncomment the following two lines to write it out and delete the two after that
#                            combine[countc++]="  ${commands[jm]}"
#                            ((countg++))
                             countg=$jm
			     break
                       ;;
                     esac
                 ;;
              esac
          ;;
          *'/usr/share/doc'*) 
             cont=0 # doc so don't write it out
             ((countg++))
          ;;
          "ln -v -sfn          /usr/lib/php/doc"*) # php symlinks
             countg=$jm
             break
          ;;
          "find "*) # start of a find so break
             countg=$jm
             cont=0
             inc=true
             break
          ;;
          *"_components"*|*"kodi"*) # kodi - put these in install components
             combine[countc++]="  ${commands[jm]}"
             ((countg++))
             inc=true
             kodidone=true
          ;;
          *'cp -v -RL {public,private}/nss'*) # nss cp, put with install commands
             combine[countc++]="  ${commands[jm]}"
             ((countg++))
             cont=0
          ;;
          "for "*) # beginning of a for loop so break
             countg=$jm
             cont=0
             inc=true
             break
          ;;
          *"chmod"*) # break at a chmod commands
             if [ $cont -eq 0 ]; then
               break
             else # write out the cont lines
               for (( l=0; l<$cont; l++ )); do
                 combine[countc++]="  ${storit[l]}"
               done
               combine[countc++]="  ${commands[jm]}"
               ((countg++))
               cont=0
               inc=true
               break
             fi
          ;;
          sed*)
             if $foundpushd; then # write it
               combine[countc++]="  ${commands[jm]}"
               ((countg++))
             else
               break
             fi
          ;;
          "export LIBSSH2"*) # rustc, write it with the install command
             combine[countc++]="  ${commands[jm]}"
             ((countg++))
             cont=0
             inc=true
          ;;
          "cd BLAS") # blas and cblas install line
             combine[countc++]="  ${commands[jm]}"
             ((countg++))
             cont=0
             inc=true
          ;;
          "pushd ipython"*) # install section of ipython - write it
             combine[countc++]="  ${commands[jm]}"
             ((countg++))
             inc=true
             foundpushd=true
          ;;
          "pushd"*)
             if $foundpushd; then # write it
               combine[countc++]="  ${commands[jm]}"
               ((countg++))
             else # break
               break
             fi
          ;;
          popd*)
             if $foundpushd; then # write it
               combine[countc++]="  ${commands[jm]}"
               ((countg++))
             else # break
               break
             fi
          ;;
          "make docs"*) # asciidoc make docs after install
             combine[countc++]="  ${commands[jm]}"
             ((countg++))
             cont=0
             inc=true
          ;;
          *)
             case "${commands[jm]}" in
               *\\) # if a cont line, then store it
                   storit[cont++]="${commands[jm]}"
                   ((countg++))
               ;;
               *)
                 if ! $foundDoc; then # write out any cont lines
                   if [ $cont -gt 0 ]; then
                     for (( l=0; l<$cont; l++ )); do
                       combine[countc++]="  ${storit[l]}"
                     done
                     combine[countc++]="  ${commands[jm]}"
                     ((countg++))
                     cont=0
                     inc=true
                   else
                     if $kodidone; then # write the done to terminate the for loop
                       combine[countc++]="  ${commands[jm]}"
                       ((countg++))
                       break
                     else
                       countg=$jm
                       cont=0
                       inc=true
                       break
                     fi
                   fi
                 else # continuation of a doc line so ignore it
                   cont=0
                   ((countg++))
                 fi
               ;;
             esac
          ;;
        esac
      done
      if ! $inc; then
        combine[countc++]='  echo "no install script for this package"'
      fi
    ;;
    *)
      if [ $i -lt $countbl ]; then # catch up
        :
      else
        case "${buildWrap[i]}" in
           test_pipe) # can insert commands after calling configure, make or make install
             combine[countc++]=${buildWrap[i]}
             ((countbl++))
             ((testpipecount++)) # 1 is configure, 2 is compile, 3 is install
#             combine[countc++]="echo \"test_pipe count is $testpipecount\""
           ;;
           *)
             combine[countc++]=${buildWrap[i]}
             ((countbl++)) # increment because have written another build command
           ;;
        esac
      fi
    ;;
  esac
done
rtr=(${combine[@]})
} # end combineScript
#
getBuild () {
local abuild=""
buildfile=$BLFSBUILDFILES/buildsrc
if [ ! -e $buildfile ]; then
  return $RETURN_PARAM
else
local IFS='
'
abuild=( $( < $buildfile ) )
rtrnBuild=(${abuild[@]})
return 0
fi
} # end getBuild
#
getComms () {
# $1 is the package name
# $2 is the section
local -a acom=""
local -a bcom=""
local -a dummyarray=""
local localpkgname=$1
local commandsection=$2
local i
if [[ "$localpkgname" == ffmpeg || "$localpkgname" == atk || "$localpkgname" == jdkbin ]]; then # avoid at-spi2-atk which *-atk matches and gcc-java
  curfile=${DumpedCommands}/${commandsection}/???-${commandname}
else
  if [ -e ${DumpedCommands}/${commandsection}/*-${commandname} ]; then
    curfile=${DumpedCommands}/${commandsection}/*-${commandname}
  else
    echo -e 'echo "No commands matching '"${blfscommands}"'/'"${commandsection}"'/*-'"${commandname}"'"'
    echo 'echo "Either adjust the command name or add some commands. Exiting now"'
    echo "exit 1"
    exit 1
  fi
fi
local IFS='
'
acom=( $( < $curfile ) )
#for ((jkl=0; jkl<${#acom[@]}; jkl++)); do
#  echo "acom[$jkl] is ${acom[jkl]}"
#done
#
# this section changes the commands as necessary before writing them to $Output
case $localpkgname in
     aspell)
             ic=0
             foundconf=false # only need 1st configure and commands, not the 2nd
             for tline in ${acom[@]}; do
               case $tline in
                  *configure*)
                    if ! $foundconf; then
                      foundconf=true
                      bcom[ic++]=$tline
                    else
                      break
                    fi
                  ;;
                  *"sed -i"*) # need the sed
                    bcom[ic++]=$tline
                  ;;
                  *)
                    if $foundconf; then
                      bcom[ic++]=$tline
                    fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     dconf) # need only the first set of commands, as 2nd set is the same
             ic=0
             for tline in ${acom[@]}; do
               case $tline in
                  *"cd dconf-editor"*)
                      bcom[ic++]=$tline
                      break
                  ;;
                  *)
                      bcom[ic++]=$tline
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     docbook-xsl)
             ic=0
             catcount=0 # need to find 6 xmlcatalog commands then ignore the rest
             xmlcatfound=false
             for tline in ${acom[@]}; do
               case $tline in
                  xmlcatalog*)
                    ((catcount++))
                    if [ $catcount -eq 7 ]; then #ignore remaining commands
                      break
                    else
                      bcom[ic++]=$tline
                     fi
                  ;;
                  *)
                     if ! $xmlcatfound; then #write the commands
                       bcom[ic++]=$tline
                     fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     firewall)
             ic=0
             EOFfound=false # need to find 2 EOFs and ignore the remaining commands
             for tline in ${acom[@]}; do
               case $tline in
                  *EOF*)
                    if ! $EOFfound; then # found first EOF  - write til next EOF
                      EOFfound=true
                      bcom[ic++]=$tline # write the cat - EOF line
                    else # finish writing commands
                      bcom[ic++]=$tline # EOF line
                      EOFfound=false
                    fi   
                  ;;
                  modprobe*)
                    :
                  ;;
                  chmod*)
                      bcom[ic++]=$tline
                      break
                  ;;
                  *)   
                    if $EOFfound; then # write all commands until next EOF
                      bcom[ic++]=$tline
                    fi   
                  ;;   
               esac 
             done 
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     gimp) # only want the commands to the first make install
             ic=0
             for tline in ${acom[@]}; do
               case $tline in
                  "make install"*)
                     bcom[ic++]=$tline
                     break
                  ;;
                  *)
                     bcom[ic++]=$tline
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     git)
             ic=0
             foundhtml=false
             for tline in ${acom[@]}
             do
               case $tline in
                  "make htmldir"*)
                     foundhtml=true
                  ;;
                  "tar -xf ../git-manpages"*)
                     bcom[ic++]=$tline
                     foundhtml=false
                  ;;
                  *)
                     if ! $foundhtml; then
                       bcom[ic++]=$tline
                     fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     libcdio) # remove the second configure, make and make install commands
             ic=0
             foundconf=false
             for tline in ${acom[@]}; do
               case $tline in
                  *configure*)
                       if ! $foundconf; then
                         foundconf=true
                         bcom[ic++]=$tline
                       else
                         break
                       fi
                  ;;
                  *)
                       bcom[ic++]=$tline
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     libevdev) # need the first set of commands in x7driver
             for tline in ${acom[@]}; do
               case $tline in
                 "make install"*)
                      bcom[ic++]=$tline
                      break
                 ;;
                 *)
                      bcom[ic++]=$tline
                 ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     libinput) # commands are in x7driver
             ic=0
             foundbuild=false
             for tline in ${acom[@]}; do
               case $tline in
                  *"mkdir build"*)
                      bcom[ic++]=$tline
                      foundbuild=true
                  ;;
                  *"configure \$XORG_CONFIG"*) # end of libinput commands
                      if $foundbuild; then break; fi
                  ;;
                  *)
                      if $foundbuild; then
                        bcom[ic++]=$tline
                      fi
                  ;;
                esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     libva)
             ic=0
             xorgconfigfound=false
             for tline in ${acom[@]}; do
               case $tline in
                  *"XORG_CONFIG"*) # need this
                      if ! $xorgconfigfound; then bcom[ic++]=$tline; fi
                      xorgconfigfound=true
                  ;;
                  "make install"*)
                      if $xorgconfigfound; then
                        bcom[ic++]=$tline
                        break
                      fi
                  ;;
                  *)
                      if $xorgconfigfound; then
                        bcom[ic++]=$tline
                      fi
                  ;;
                esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     libvdpau-va-gl)
             ic=0
             foundmkbuild=false
             foundcd=false
             foundcmake=false
             for tline in ${acom[@]}; do
               case $tline in
                  "mkdir build"*)
                      if ! $foundmkbuild; then
                        bcom[ic++]=$tline
                        foundmkbuild=true
                      fi
                  ;;
                  "cd    build"*)
                      if $foundmkbuild; then
                        if ! $foundcd; then
                          bcom[ic++]=$tline
                          foundcd=true
                        fi
                      fi
                  ;;
                  "cmake -DCMAKE_BUILD_TYPE=Release"*)
                      bcom[ic++]=$tline
                      foundcmake=true
                  ;;
                  *)
                      if $foundcmake; then # all lines to the end
                        bcom[ic++]=$tline
                      fi
                  ;;
                esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     linux-pam) # remove all the test commands
             ic=0
             instfound=false
             for tline in ${acom[@]}; do
               case $tline in
                  "install -v -m755 -d /etc/pam.d"*)
                     instfound=true
                  ;;
                  "rm -fv /etc/pam.d"*) # last test command
                     instfound=false
                  ;;
                  *)
                     if ! $instfound; then #write the commands
                       bcom[ic++]=$tline
                     fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     lvm2) # remove the test commands
             ic=0
             toolsfound=false
             for tline in ${acom[@]}; do
               case $tline in
                  *'make -C tools'*)
                    toolsfound=true
                  ;;
                  *'make install'*)
                    bcom[ic++]=$tline
                    toolsfound=false
                  ;;
                  *)
                     if ! $toolsfound; then #write the commands
                       bcom[ic++]=$tline
                     fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     lxqt-setup) # remove the install in /usr commands
             ic=0
             usrfound=false
             profilefound=false
             for tline in ${acom[@]}; do
               case $tline in
                  *'install -vdm755 /opt'*) # want this
                    bcom[ic++]=$tline
                    usrfound=true
                  ;;
                  *'source /etc/profile'*) # only want one of these
                    if ! $profilefound; then
                      bcom[ic++]=$tline
                      profilefound=true
                    fi
                  ;;
                  *)
                     if $usrfound; then #write the commands
                       bcom[ic++]=$tline
                     fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     nss) # remove the chmod -v 644 line so can bunch the install commands
             ic=0
             for tline in ${acom[@]}; do
               case $tline in
                  *chmod*)
                    : # don't write it
                  ;;
                  *)
                    bcom[ic++]=$tline
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     openldap) # need commands for a client-only install
             ic=0
             foundpatch=false
	     founddynamic=false
             for tline in ${acom[@]}; do
               case $tline in
                 *patch*)
                       foundpatch=true
                       bcom[ic++]=$tline
                  ;;
                  *'enable-dynamic'*)
                       founddynamic=true
                       bcom[ic++]="            --enable-dynamic" # don't want the \
                  ;;
                  *'make install-slapd'*) # don't write it
                       :
		  ;;
                  make*) # need three make commands
                       bcom[ic++]=$tline
                  ;;
                  *)
                       if [[ "$foundpatch" = true && "$founddynamic" = false ]]; then
                         bcom[ic++]=$tline
                       fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     pygobject2)
             ic=0
             foundintrospec=false
             for tline in ${acom[@]}; do
               case $tline in
                  *'configure --prefix=/usr --disable-introspection'*)
                       foundintrospec=true
                       bcom[ic++]=$tline
                  ;;
                  "make install"*)
                       if $foundintrospec; then
                         bcom[ic++]=$tline
                         foundintrospec=false
                         break
                       else
                         :
                       fi
                  ;;
                  *)
                       if $foundintrospec; then
                         bcom[ic++]=$tline
                       fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     speex) # remove the second make and make install commands
             ic=0
             foundmake=false
             for tline in ${acom[@]}; do
               case $tline in
                  make)
                       if ! $foundmake; then
                         foundmake=true
                         bcom[ic++]=$tline
                       else
                         break
                       fi
                  ;;
                  *)
                       bcom[ic++]=$tline
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
# get the standard commands for perl-modules
#     tie-ixhash|xml-libxml|xml-sax-expat|xml-sax-base|xml-namespace|xml-sax|xml-simple|extutls-dpnds|extutls-pkgcnfg|perl-glib|parse-yapp|uri|archive-zip|ipc-sys-simple|module-build|file-which|file-basedir)
#             ic=0
#             found=false
#             for tline in ${acom[@]}; do
#               case $tline in
#                  perl*)
#                         if ! $found; then
#                           found=true
#                           bcom[ic++]=$tline
#                         fi
#                  ;;
#                  *install*)
#                         if $found; then
#                           bcom[ic++]=$tline
#                           rtrnCom=(${bcom[@]})
#                           return 0
#                         fi
#                  ;;
#                  *)
#                         if $found; then
#                           bcom[ic++]=$tline
#                         fi
#                  ;;
#               esac
#             done
#             return $RETURN_PARAM #install command not found
#     ;;
     xinit) # delete the second sed
             ic=0
             foundsed=false
             for tline in ${acom[@]}; do
               case $tline in
                  "sed -e"*)
                       if ! $foundsed; then
                         foundsed=true
                         bcom[ic++]=$tline
                       else # second sed found
                         foundsed=false
                       fi
                  ;;
                  *configure*)
                       bcom[ic++]=$tline
                       foundsed=true
                  ;;
                  *ldconfig*)
                       break
                  ;;
                  *)
                       if $foundsed; then
                         bcom[ic++]=$tline
                       fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     xorg-evdev|xorg-libinput|xorg-synaptics|xorg-nouveau)
# need the first set of commands
             ic=0
             foundconfig=false
             for tline in ${acom[@]}; do
               case $tline in
                  *configure*)
                       foundconfig=true
                       bcom[ic++]=$tline
                  ;;
                  *install*)
                       if $foundconfig; then
                         bcom[ic++]=$tline
                         break
                       fi
                  ;;
                  *)
                       if $foundconfig; then # write commands until make install
                         bcom[ic++]=$tline
                       fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     xorg-intel) # need the commands with enable-kms-only
             ic=0
             foundconfig=false
             for tline in ${acom[@]}; do
               case $tline in
                  *"--enable-kms-only"*) # need this
                         foundconfig=true
                         bcom[ic++]=$tline
                  ;;
                  *'./configure $XORG_CONFIG'*)
                         if $foundconfig; then # found all commands
                           break
                         fi
                  ;;
                  *)
                         if $foundconfig; then
                           bcom[ic++]=$tline
                         fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     xorg-vmmouse)
             ic=0
             foundconfig=false
             for tline in ${acom[@]}; do
               case $tline in
                  *"configure \$XORG_CONFIG               \\"*) # need cont line
                         foundconfig=true
                         bcom[ic++]=$tline
                  ;;
                  "make install"*)
                         if $foundconfig; then 
                           bcom[ic++]=$tline
                           break
                         fi
                  ;;
                  *)
                         if $foundconfig; then
                           bcom[ic++]=$tline
                         fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     ${xlib}fnames|${xapp}fnames|${xfont}fnames)
             ic=0
             for tline in ${acom[@]}; do
               case $tline in
                  mkdir*)
                     break
                  ;;
                  *)
                     bcom[ic++]=$tline
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     ${xlib}wget|${xapp}wget|${xfont}wget)
             ic=0
             mkdirfound=false
             for tline in ${acom[@]}; do
               case $tline in
                  mkdir*)
                     bcom[ic++]=$tline
                     mkdirfound=true
                  ;;
                  as_root*)
                     break
                  ;;
                  *)
                     if $mkdirfound; then
                       bcom[ic++]=$tline
                     fi
                  ;;
               esac
             done
             rtrnCom=(${bcom[@]})
             return 0
     ;;
     $xlib|$xapp|$xfont)
             ic=0
             foundbash=false
             for tline in ${acom[@]}; do
               case $tline in
                  "bash -e"*)
                     foundbash=true
                     bcom[ic++]=$tline
                  ;;
                  exit*)
                     rtrnCom=(${bcom[@]})
                     return 0
                  ;;
                  *)
                     if $foundbash; then
                       bcom[ic++]=$tline
                     fi
                  ;;
               esac
             done
     ;;
     *) # everything else return untouched
             rtrnCom=(${acom[@]})
             return 0
     ;;
esac
} # end getComms
#
GetCommands () {
# note that $cursection used here is a global variable
#get access to the arrays
rtrnBuild=""
getBuild
return_val=$?
if [ $return_val -eq $RETURN_PARAM ]; then # no buildsrc file present
  return $RETURN_PARAM
else
  buildScripts=(${rtrnBuild[@]})
  rtrnCom=""
  local commandsection=$(Getbooksec $cursection)
  case $pkgname in
      libdrm)
        if [ "$SYSTEMD" = yes -a "$BOOK_VERSION" = KBLFS ]; then # commands are in libraries
          commandsection="general"
        fi
      ;;
      midori)
        commandsection="xsoft" # installed in xfcebrowser but is in section browser
      ;;
      openbox|sddm)
        commandsection="x" # commands for these are in book section x
      ;;
  esac
  getComms $pkgname $commandsection
  commandScripts=(${rtrnCom[@]})
  numclines=${#commandScripts[@]} # # of commands
# 
# output commands until first configure found (or special chars)
#
  countg=0 # # of commands wriiten out
  cont=0
  wpa_sup=false
  mozconfigfnd=false
  rustcHere=false
  isSed=false
  isCase=false
  for line in "${commandScripts[@]}"; do
    if $mozconfigfnd || $wpa_sup; then # never both true - are in different sections
       case "$line" in
          EOF)
            echo "$line"
            ((countg++))
            if $mozconfigfnd; then 
              mozconfigfnd=false
            else
              wpa_sup=false
            fi
          ;;
          *)  # continue writing until an EOF found
            echo "$line"
            ((countg++))
          ;;
       esac
    elif $rustcHere; then # continue writing until an EOF found
       case "$line" in
          EOF)
            echo "$line"
            ((countg++))
            rustcHere=false
            break
          ;;
          *)
            echo "$line"
            ((countg++))
          ;;
       esac
    else
      case "$line" in
        'cat > wpa_supplicant/.config << "EOF"'|'cat >> wpa_supplicant/.config << "EOF"') # wpa_supp writes .config document
            wpa_sup=true
            echo $line
            ((countg++))
        ;;
        "cat > mozconfig <<"*) # firefox, seamonkey and thunderbird write mozconfig
            mozconfigfnd=true
            echo $line
            ((countg++))
        ;;
        *"cat "*"config.toml"*) # start of the rustc Here document
            rustcHere=true
            echo $line
            ((countg++))
        ;;
        sed*)
# test if sed has continuation line
          case "$line" in
            *\\)
              isSed=true # this is a sed with cont line(s)
              cacheit[cont++]="$line"
              ((countg++))
            ;;
            *)
              echo "$line"
              ((countg++))
            ;;
          esac
        ;;
        case*)
          isCase=true
          echo "$line"
          ((countg++))
        ;;
        esac*)
          if $isCase; then isCase=false; fi # end of case statement
          echo "$line"
          ((countg++))
        ;;
        export*) # catch any env variables being set up
          echo "$line"
          ((countg++))
          [ $countg -eq $numclines ] && return 0
        ;;
        'yes "" | make config'*) # the configure for net-tools
          break
        ;;
        *"python2 setup.py"*|*"python3 setup.py"*) # python modules, e.g. pycairo
          break
        ;;
        *"setup.py install"*) # python modules e.g. scons
          break
        ;;
        "scons PREFIX=/usr"*) # serf configure
          break
        ;;
        *"mach build"*) # firefox now uses mach
          break
        ;;
        'cat > /etc/rc.d/rc.iptables << "EOF"') # the firewall for iptables
          echo $line
         ((countg++))
        ;;
        *"build/linux/unbundle/replace"*) # chromium from the book
          break
        ;;
        *"meson "*"--prefix "*|*"meson "*"--prefix="*) # configure for ninja builds
          break
        ;;
        "patch "*) # patch commands may have configure, bootstrap etc so don't break here
          echo "$line"
          ((countg++))
        ;;
        "cargo build --release"*) # cbindgen
          break
        ;;
        *configure*|*Configure*|*"config --prefix="*|*bootstrap*|*autogen.sh*|cmake*|*"build.sh -Ddist.dir"*)
          if $isSed; then # test if another cont line
            case "$line" in
              *\\) # another cont line found so store it
                 cacheit[cont++]="$line"
                 ((countg++))
              ;;
              *) # write out the stored lines
                 for (( l=0; l<$cont; l++ )); do
                   echo "${cacheit[l]}"
                 done
                 echo "$line"
                 cont=0
                 ((countg++))
                 isSed=false # finished with this sed command
              ;;
            esac
          elif $isCase; then # write the line containing configure
            echo $line
            ((countg++))
          else
            if [ $cont -gt 0 ]; then countg=$countg-$cont; fi
            break
          fi
        ;;
        *"make -f client.mk"*) # make for firefox
          break
        ;;
        make*) # begins with make or install so break
          if $isSed; then # write out the sed lines
            for (( l=0; l<$cont; l++ )); do
              echo "${cacheit[l]}"
            done
            echo "$line"
            cont=0
            ((countg++))
            isSed=false # finished with any sed command
          else
            break
          fi
        ;;
        'install -v -d -m755 /usr/share/xml/docbook/xml-dtd-4.5'*) # break for docbook-xml
           break
        ;;
        qmake*) # configure for qtwebkit
          break
        ;;
        *)
          case "$line" in
            *\\) # if a continuation line, store in cache
              cacheit[cont++]="$line"
              ((countg++))
            ;;
            *)
             if [ $cont -gt 0 ]; then # write out continuation line 
               for (( l=0; l<$cont; l++ )); do
                 echo "${cacheit[l]}"
               done
               echo "$line"
               cont=0
               isSed=false # finished with any sed command
               ((countg++)) # count # of commands written to output
               [ $countg -eq $numclines ] && return 0
             else
               echo "$line"
               ((countg++)) # count # of commands written to output
               [ $countg -eq $numclines ] && return 0
             fi
            ;;
          esac
       ;;
      esac
    fi
  done
#
  rtr=""
  combineScripts commandScripts[@] buildScripts[@]
  scriptOut=(${rtr[@]})
  for t in "${scriptOut[@]}"; do
    echo $t
  done
  if [ $countg -ne $numclines ]; then # output remaining commands
    cont=0 # counter for continuation lines
    foundDoc=false # doc command
    tarcomm=false # tar command
    symtest=false # symlink
    foundconfig=false # another configure command e.g. speex
#
    for (( k=$countg; k<$numclines; k++ )); do
      case ${commandScripts[k]} in
         install*)
                case ${commandScripts[k]} in
                   *'/usr/share/doc'*)
                       case ${commandScripts[k]} in
                          *\\) # a doc continuation line
                             foundDoc=true
                          ;;
                       esac
                   ;;
                   *\\) # a continuation line
                       cacheit[cont++]=${commandScripts[k]}
                   ;;
                   *) # install but not a doc or a cont line
                       echo ${commandScripts[k]}
                   ;;
                esac
         ;;
         ln*) # is a symlink so write it
                case ${commandScripts[k]} in
                   *\\) # a continuation line
                       cacheit[cont++]=${commandScripts[k]}
                       symtest=true
                   ;;
                   *) # write it out
                       echo ${commandScripts[k]}
                   ;;
                esac
         ;;
         if*) # starts with if so if a doc, will need to delete the closing fi
                   case ${commandScripts[k]} in
                   *'/usr/share/doc'*)
                       ifDoc=true
                       case ${commandScripts[k]} in
                          *\\) # a continuation line
                                cacheit[cont++]=${commandScripts[k]}
                          ;;
                       esac
                   ;;
                   *\\) # a continuation line
                       cacheit[cont++]=${commandScripts[k]}
                   ;;
                   *) # if block but not a doc or a cont line
                       echo ${commandScripts[k]}
                   ;;
                esac
         ;;
         tar*) # untar a file, so catch any cont lines
                case ${commandScripts[k]} in
                   *\\) # a continuation line
                       cacheit[cont++]=${commandScripts[k]}
                       tarcomm=true
                   ;;
                   *) 
                       echo ${commandScripts[k]}
                   ;;
                esac
         ;;
         gunzip*) # unpack a tarball so write it
                echo ${commandScripts[k]}
         ;;
         mv*) # a move commands so write it
                for (( l=0; l<$cont; l++ )); do
                  echo "${cacheit[l]}"
                done
                cont=0
                echo ${commandScripts[k]}
         ;;
         'mkdir -p /usr/share/doc/git-'*|'mkdir    /usr/share/doc/git-'*) # want the git docs
                echo ${commandScripts[k]}
         ;;
         'find /usr/share/doc/git-'*) # need these find commmands in git
                echo ${commandScripts[k]}
         ;;
         *'/usr/share/doc/php'*) # php doc so write it
                for (( l=0; l<$cont; l++ )); do
                  echo "${cacheit[l]}"
                done
                echo ${commandScripts[k]}
                cont=0
         ;;
         *'/usr/share/doc'*)
                if $tarcomm; then
                  case ${commandScripts[k]} in
                     *\\) # another continuation line
                         cacheit[cont++]=${commandScripts[k]}
                     ;;
                     *)
                         for (( l=0; l<$cont; l++ )); do
                           echo "${cacheit[l]}"
                         done
                         echo ${commandScripts[k]}
                         tarcomm=false
                         cont=0
                     ;;
                   esac
                elif $symtest; then
                  case ${commandScripts[k]} in
                     *\\) # another continuation line
                         cacheit[cont++]=${commandScripts[k]}
                     ;;
                     *) 
                         for (( l=0; l<$cont; l++ )); do
                           echo "${cacheit[l]}"
                         done
                         echo ${commandScripts[k]}
                         symtest=false
                         cont=0
                     ;;
                   esac
                elif $foundconfig; then
                  case ${commandScripts[k]} in
                     *\\) # another continuation line
                         cacheit[cont++]=${commandScripts[k]}
                     ;;
                     *)
                         for (( l=0; l<$cont; l++ )); do
                           echo "${cacheit[l]}"
                         done
                         echo ${commandScripts[k]}
                         foundconfig=false
                         cont=0
                     ;;
                   esac
                else
                  case ${commandScripts[k]} in
                      *\\) # a continuation line
                         foundDoc=true
                      ;;
                      *)
                         if $foundDoc; then # is a doc, so don't write
                           foundDoc=false
                         fi
                         cont=0
                      ;;
                  esac
                fi
         ;;
         "fi"*)
                if $ifDoc; then # end of a doc if test - don't write it
                  ifDoc=false
                else
                  echo ${commandScripts[k]} # if block is not a doc
                fi
         ;;
         *"configure --prefix="*)
              foundconfig=true
              case ${commandScripts[k]} in
                  *\\) # continuation line, store it
                     cacheit[cont++]=${commandScripts[k]}
                  ;;
                  *)
                     if [ $cont -gt 0 ]; then # write out continuation line(s)
                       for (( l=0; l<$cont; l++ )); do
                         echo "${cacheit[l]}"
                       done
                       symtest=false
                       tarcomm=false
                       foundconfig=false
                       cont=0
                     fi
                     echo ${commandScripts[k]}
                  ;;
              esac
         ;;
         *)
              if ! $ifDoc; then # not commands within a doc if block
                case ${commandScripts[k]} in
                    *\\) # continuation line, store it
                       cacheit[cont++]=${commandScripts[k]}
                    ;;
                    *) 
                       if [ $cont -gt 0 ]; then # write out continuation line(s)
                         for (( l=0; l<$cont; l++ )); do
                           echo "${cacheit[l]}"
                         done
                         symtest=false
                         tarcomm=false
                         cont=0
                       fi
                       echo ${commandScripts[k]}
                    ;;
                esac
              fi
         ;;
      esac
    done
  fi
  return 0
fi
} # end GetCommands
#
GetXCommands () {
# note that $Section is a global variable
#get access to the xml x commands
rtrnCom=""
local IFS='
'
local bookSection=$(Getbooksec $Section)
getComms $pkgname $bookSection
commandScripts=(${rtrnCom[@]})
numclines=${#commandScripts[@]} # # of commands
for xt in "${commandScripts[@]}"; do
  echo $xt
done
return 0
} # end GetXCommands
#
GetcacertsCommands () {
# note that $Section is a global variable
rtrnCom=""
local bookSection=$(Getbooksec $Section)
getComms $pkgname $bookSection
commandScripts=(${rtrnCom[@]})
# dump all the commands
for line in "${commandScripts[@]}"; do
  echo $line
done
} # end GetcacertsCommands
#
aisleriotComms () {
aisleriotcom=""
aisleriotcom[0]="mkdir build"
aisleriotcom[1]="cd build"
aisleriotcom[2]="meson --prefix=/usr \\"
aisleriotcom[3]="      --libexecdir=/usr/lib/aisleriot \\"
aisleriotcom[4]="      -D theme_pysol=true \\"
aisleriotcom[5]="      -D theme_pysol_path=/usr/share/PySolFC \\"
aisleriotcom[6]="      -D theme_kde=false \\"
aisleriotcom[7]="      .."
aisleriotcom[8]="ninja"
aisleriotcom[9]="ninja install"
rtrncommands=(${aisleriotcom[@]})
} # end aisleriotComms
#
appstreamGlibComms () {
local appstreamglibcom=""
appstreamglibcom[0]="mkdir build"
appstreamglibcom[1]="cd build"
appstreamglibcom[2]="arch-meson \\"
appstreamglibcom[3]="      -D alpm=false \\"
appstreamglibcom[4]="      -D gtk-doc=false \\"
appstreamglibcom[5]="      -D rpm=false \\"
appstreamglibcom[6]="      -D stemmer=false  .."
appstreamglibcom[7]="ninja"
appstreamglibcom[8]="ninja install"
rtrncommands=(${appstreamglibcom[@]})
} # end appstreamGlibComms
#
audacityComms () {
local audacitycom=""
audacitycom[0]="autoreconf -vfi"
audacitycom[1]="WX_CONFIG=wx-config-gtk3 \\"
audacitycom[2]="./configure --prefix=/usr \\"
audacitycom[3]="            --with-libsndfile=system \\"
audacitycom[4]="            --with-ffmpeg=system \\"
audacitycom[5]="            --with-expat=system \\"
audacitycom[6]="            --with-lame=system \\"
audacitycom[7]="            --with-libsoxr=system \\"
audacitycom[8]="            --with-portaudio \\"
audacitycom[9]="            --with-portmidi \\"
audacitycom[10]="            --with-libflac \\"
audacitycom[11]="            --with-libid3tag \\"
audacitycom[12]="            --with-libsamplerate \\"
audacitycom[13]="            --with-sbsms \\"
audacitycom[14]="            --with-soundtouch \\"
audacitycom[15]="            --with-libtwolame \\"
audacitycom[16]="            --with-libvorbis \\"
audacitycom[17]="            --with-lv2"
audacitycom[18]="make"
audacitycom[19]="make install"
rtrncommands=(${audacitycom[@]})
} # end audacityComms
#
audioencoderComms () {
local audioencodercom=""
audioencodercom[0]="cmake . \\"
audioencodercom[1]="      -DCMAKE_INSTALL_PREFIX=/usr \\"
audioencodercom[2]="      -DCMAKE_BUILD_TYPE=Release  \\"
audioencodercom[3]="      -DBUILD_SHARED_LIBS=1       \\"
audioencodercom[4]="      -DUSE_LTO=1"
audioencodercom[5]="make"
audioencodercom[6]="make install"
rtrncommands=(${audioencodercom[@]})
} # end audioencoderComms
#
avrbinutilsComms () {
local avrbinutilscom=""
avrbinutilscom[0]="patch -Np1 -i ../binutils-2.30-avr-size.patch"
avrbinutilscom[1]="sed -i '/ac_cpp=/s/\\\$CPPFLAGS/\\\$CPPFLAGS -O2/' libiberty/configure"
avrbinutilscom[2]="config_guess=\$(./config.guess)"
avrbinutilscom[3]="rm -rf ../binutils-build"
avrbinutilscom[4]="mkdir -v ../binutils-build"
avrbinutilscom[5]="cd ../binutils-build"
avrbinutilscom[6]="../binutils-2.30/configure --prefix=/usr \\"
avrbinutilscom[7]="                             --with-lib-path=/usr/lib \\"
avrbinutilscom[8]="                             --enable-ld=default \\"
avrbinutilscom[9]="                             --enable-gold \\"
avrbinutilscom[10]="                             --enable-plugins \\"
avrbinutilscom[11]="                             --enable-threads \\"
avrbinutilscom[12]="                             --with-pic \\"
avrbinutilscom[13]="                             --enable-shared \\"
avrbinutilscom[14]="                             --disable-werror \\"
avrbinutilscom[15]="                             --disable-multilib \\"
avrbinutilscom[16]="                             --build=\${config_guess} \\"
avrbinutilscom[17]="                             --target=avr"
avrbinutilscom[18]="make configure-host"
avrbinutilscom[19]="make tooldir=/usr"
avrbinutilscom[20]="make prefix=/tmp/usr tooldir=/tmp/usr install"
avrbinutilscom[21]="for bin in ar as nm objcopy objdump ranlib strip readelf; do"
avrbinutilscom[22]="  rm -f /tmp/usr/bin/\${bin}"
avrbinutilscom[23]="done"
avrbinutilscom[24]="cp /tmp/usr/bin/avr-*  /usr/bin/"
avrbinutilscom[25]="cp /tmp/usr/lib/ldscripts/avr* /usr/lib/ldscripts/"
avrbinutilscom[26]="for info in as bfd binutils gprof ld; do"
avrbinutilscom[27]="  cp /tmp/usr/share/info/\${info}.info /usr/share/info/avr-\${info}.info"
avrbinutilscom[28]="done"
avrbinutilscom[29]="cp /tmp/usr/share/man/man1/avr-* /usr/share/man/man1/"
avrbinutilscom[30]="cp -r /tmp/usr/x86_64-unknown-linux-gnu/avr /usr/x86_64-unknown-linux-gnu/"
avrbinutilscom[31]="rm -rf /tmp/usr"
rtrncommands=(${avrbinutilscom[@]})
} # end avrbinutilsComms
#
avrgccComms () {
local avrgcccom=""
avrgcccom[0]='export CFLAGS="-O2 -pipe"'
avrgcccom[1]='export CXXFLAGS="-O2 -pipe"'
avrgcccom[2]="sed -i 's/install_to_\$(INSTALL_DEST) //' libiberty/Makefile.in"
avrgcccom[3]="sed -i '/ac_cpp=/s/\\\$CPPFLAGS/\\\$CPPFLAGS -O2/' libiberty/configure"
avrgcccom[4]="sed -i '/ac_cpp=/s/\\\$CPPFLAGS/\\\$CPPFLAGS -O2/' gcc/configure"
avrgcccom[5]="rm -rf gcc-build"
avrgcccom[6]="mkdir -v gcc-build"
avrgcccom[7]="cd gcc-build"
avrgcccom[8]="../configure --prefix=/usr               \\"
avrgcccom[9]="             --disable-cloog-version-check \\"
avrgcccom[10]="             --disable-install-libiberty \\"
avrgcccom[11]="             --disable-libssp \\"
avrgcccom[12]="             --disable-libstdcxx-pch \\"
avrgcccom[13]="             --disable-libunwind-exceptions \\"
avrgcccom[14]="             --disable-linker-build-id \\"
avrgcccom[15]="             --disable-nls \\"
avrgcccom[16]="             --disable-werror \\"
avrgcccom[17]="             --enable-__cxa_atexit \\"
avrgcccom[18]="             --enable-checking=release \\"
avrgcccom[19]="             --enable-clocale=gnu \\"
avrgcccom[20]="             --enable-cloog-backend=isl \\"
avrgcccom[21]="             --enable-gnu-unique-object \\"
avrgcccom[22]="             --enable-gold \\"
avrgcccom[23]="             --enable-languages=c,c++ \\"
avrgcccom[24]="             --enable-ld=default \\"
avrgcccom[25]="             --enable-lto \\"
avrgcccom[26]="             --enable-plugin \\"
avrgcccom[27]="             --enable-shared \\"
avrgcccom[28]="             --infodir=/usr/share/info \\"
avrgcccom[29]="             --libdir=/usr/lib \\"
avrgcccom[30]="             --libexecdir=/usr/lib \\"
avrgcccom[31]="             --mandir=/usr/share/man \\"
avrgcccom[32]="             --target=avr \\"
avrgcccom[33]="             --with-as=/usr/bin/avr-as \\"
avrgcccom[34]="             --with-gnu-as \\"
avrgcccom[35]="             --with-gnu-ld \\"
avrgcccom[36]="             --with-ld=/usr/bin/avr-ld \\"
avrgcccom[37]="             --with-plugin-ld=ld.gold \\"
avrgcccom[38]="             --with-system-zlib"
avrgcccom[39]="make"
avrgcccom[40]="make DESTDIR=/tmp install"
avrgcccom[41]='find /tmp/usr/lib -type f -name "*.a" \'
avrgcccom[42]="   -exec /usr/bin/avr-strip --strip-debug '{}' \\;"
avrgcccom[43]="cp /tmp/usr/bin/avr-*  /usr/bin/"
avrgcccom[44]="cp -r /tmp/usr/lib/gcc/avr  /usr/lib/gcc/"
avrgcccom[45]="cp /tmp/usr/share/man/man1/avr-* /usr/share/man/man1"
avrgcccom[46]="rm -rf /tmp/usr"
rtrncommands=(${avrgcccom[@]})
} # end avrgccComms
#
backportsComms () {
local bpcom=""
bpcom[0]="if [ ! -e __init__.py ]; then"
bpcom[1]="cat << EOF > __init__.py"
bpcom[2]="from pkgutil import extend_path"
bpcom[3]="__path__ = extend_path(__path__, __name__)"
bpcom[4]="EOF"
bpcom[5]="fi"
bpcom[6]="if [ ! -e __init__.pyc ]; then"
bpcom[7]="  python2 -m compileall -l ."
bpcom[8]="fi"
bpcom[9]="install -Dm644 __init__.py /usr/lib/python${py2series}/site-packages/backports/__init__.py"
bpcom[10]="install -Dm644 __init__.pyc /usr/lib/python${py2series}/site-packages/backports/__init__.pyc"
rtrncommands=(${bpcom[@]})
} # end backportsComms
#
basicComms () {
local basiccom=""
basiccom[0]="./configure --prefix=/usr \\"
basiccom[1]="            --sysconfdir=/etc \\"
basiccom[2]="            --localstatedir=/var \\"
basiccom[3]="            --libexecdir=/usr/lib \\"
basiccom[4]="            --sbindir=/usr/bin \\"
basiccom[5]="            --mandir=/usr/share/man \\"
basiccom[6]="            --disable-static"
basiccom[7]="make"
basiccom[8]="make install"
rtrncommands=(${basiccom[@]})
} # end basicComms
#
basicCmakeComms () {
local basiccmakecom=""
basiccmakecom[0]="mkdir -pv build"
basiccmakecom[1]="cd build"
basiccmakecom[2]="cmake -DCMAKE_INSTALL_PREFIX=/usr      \\"
basiccmakecom[3]="      -DCMAKE_BUILD_TYPE=Release       \\"
basiccmakecom[4]="      .."
basiccmakecom[5]="make"
basiccmakecom[6]="make install"
rtrncommands=(${basiccmakecom[@]})
} # end basicCmakeComms
#
basicNinjaComms () {
local basicninjacom=""
basicninjacom[0]="mkdir build"
basicninjacom[1]="cd build"
basicninjacom[2]="arch-meson .."
basicninjacom[3]="ninja"
basicninjacom[4]="ninja install"
rtrncommands=(${basicninjacom[@]})
} # end basicNinjaComms
#
basicpy2WafComms () {
local basicwafcom=""
basicwafcom[0]="python2 waf configure --prefix=/usr \\"
basicwafcom[1]="                      --libdir=/usr/lib"
basicwafcom[2]="python2 waf build"
basicwafcom[3]="python2 waf install"
rtrncommands=(${basicwafcom[@]})
} # end basicpy2WafComms
#
basicpy3WafComms () {
local basicwafcom=""
basicwafcom[0]="sed -i '/ldconfig/d' wscript"
basicwafcom[1]="python3 waf configure --prefix=/usr \\"
basicwafcom[2]="                      --mandir=/usr/share/man"
basicwafcom[3]="python3 waf build"
basicwafcom[4]="python3 waf install"
rtrncommands=(${basicwafcom[@]})
} # end basicpy3WafComms
#
bbswitchComms () {
local bbswitchcom=""
bbswitchcom[0]="sed -i 's/copy_from_user/raw_copy_from_user/' bbswitch.c"
bbswitchcom[1]="make KDIR=/usr/lib/modules/\${_kernver}/build"
bbswitchcom[2]="install -Dm644 bbswitch.ko /usr/lib/modules/\${_extramodules}/bbswitch.ko"
bbswitchcom[3]="gzip /usr/lib/modules/\${_extramodules}/bbswitch.ko"
bbswitchcom[4]="if  [ ! -e /usr/lib/modules/\${_extramodules}/version ]; then"
bbswitchcom[5]='  echo $_kernver > /usr/lib/modules/${_extramodules}/version'
bbswitchcom[6]="fi"
bbswitchcom[7]="if [ ! -L /usr/lib/modules/\${_kernver}/extramodules ]; then"
bbswitchcom[8]="  ln -sv ../\${_extramodules} /usr/lib/modules/\${_kernver}/extramodules"
bbswitchcom[9]="fi"
rtrncommands=(${bbswitchcom[@]})
} # end bbswitchComms
#
blasComms () {
local blascom=""
blascom[0]="sed -e 's|/CMAKE/|/cmake/|' -i CBLAS/CMakeLists.txt"
blascom[1]="mkdir -pv build"
blascom[2]="cd build"
blascom[3]="cmake -DCMAKE_BUILD_TYPE=Release \\"
blascom[4]="      -DCMAKE_SKIP_RPATH=ON \\"
blascom[5]="      -DBUILD_SHARED_LIBS=ON \\"
blascom[6]="      -DBUILD_TESTING=OFF \\"
blascom[7]="      -DCMAKE_INSTALL_PREFIX=/usr \\"
blascom[8]="      -DCMAKE_INSTALL_LIBDIR=lib \\"
blascom[9]="      -DCMAKE_Fortran_COMPILER=gfortran \\"
blascom[10]="      -DLAPACKE=ON \\"
blascom[11]="      -DCBLAS=ON \\"
blascom[12]="      -DBUILD_DEPRECATED=ON \\"
blascom[13]="      .."
blascom[14]="make"
blascom[15]="cd BLAS"
blascom[16]="make install"
rtrncommands=(${blascom[@]})
} # blasComms
#
blfsbtscrptsComms () {
local blfscom=""
blfscom[0]='make install-$btscrpt'
rtrncommands=(${blfscom[@]})
} # end blfsbtscrptsComms
#
bumblebeeComms () {
local bumblebeecom=""
bumblebeecom[0]="for ptch in ../*.patch; do"
bumblebeecom[1]="  patch -Np1 -i \"\$ptch\""
bumblebeecom[2]="done"
bumblebeecom[3]="./configure                                                             \\"
bumblebeecom[4]="        CONF_DRIVER_MODULE_NVIDIA=nvidia                                \\"
bumblebeecom[5]="        CONF_LDPATH_NVIDIA=/usr/lib/nvidia:/usr/lib32/nvidia            \\"
bumblebeecom[6]="        CONF_MODPATH_NVIDIA=/usr/lib/nvidia/xorg/,/usr/lib/xorg/modules \\"
bumblebeecom[7]="        --prefix=/usr                                                   \\"
bumblebeecom[8]="        --sbindir=/usr/bin                                              \\"
bumblebeecom[9]="        --with-udev-rules=/usr/lib/udev/rules.d/                        \\"
bumblebeecom[10]="        --sysconfdir=/etc                                               \\"
bumblebeecom[11]="        --without-pidfile"
bumblebeecom[12]="make"
bumblebeecom[13]="make install completiondir=/usr/share/bash-completion/completions"
bumblebeecom[14]="mkdir -pv /usr/lib/modprobe.d/"
bumblebeecom[15]="if [ ! -e /usr/lib/modprobe.d/bumblebee.conf ]; then"
bumblebeecom[16]="  install -Dm644 ../bumblebee.conf /usr/lib/modprobe.d/bumblebee.conf"
bumblebeecom[17]="fi"
bumblebeecom[18]='install -D -m644 "scripts/systemd/bumblebeed.service" /usr/lib/systemd/system/bumblebeed.service'
bumblebeecom[19]='sed -i "s/sbin/bin/" /usr/lib/systemd/system/bumblebeed.service'
bumblebeecom[20]="mv -v /usr/share/bash-completion/completions/{bumblebee,optirun}"
rtrncommands=(${bumblebeecom[@]})
} # end bumblebeeComms
#
busyboxComms () {
local busyboxcom=""
busyboxcom[0]="cp \${blfsfiles}/conf-files/busybox.config .config"
busyboxcom[1]="sed '1,1i#include <sys/resource.h>' -i include/libbb.h"
busyboxcom[2]="make"
busyboxcom[3]="install -Dm755 busybox /usr/bin/busybox"
rtrncommands=(${busyboxcom[@]})
} # end busyboxComms
#
cantarellComms () {
local cantarellcom=""
cantarellcom[0]="mkdir -pv build"
cantarellcom[1]="cd build"
cantarellcom[2]="arch-meson --default-library shared .."
cantarellcom[3]="ninja"
cantarellcom[4]="ninja install"
rtrncommands=(${cantarellcom[@]})
} # end cantarellComms
#
ccacheComms () {
local ccachecom=""
ccachecom[0]='CHOST="x86_64-pc-linux-gnu"'
ccachecom[1]="cmake \\"
ccachecom[2]="  -DCMAKE_INSTALL_PREFIX=/usr \\"
ccachecom[3]="  -DCMAKE_BUILD_TYPE=None \\"
ccachecom[4]="  -Wno-dev \\"
ccachecom[5]="  -B build \\"
ccachecom[6]="  -S ."
ccachecom[7]="make VERBOSE=1 -C build"
ccachecom[8]="make install -C build"
ccachecom[9]="install -d /usr/lib/ccache/bin"
ccachecom[10]="for _prog in gcc g++ c++; do"
ccachecom[11]="  ln -svf /usr/bin/ccache /usr/lib/ccache/bin/\$_prog"
ccachecom[12]="  ln -svf /usr/bin/ccache /usr/lib/ccache/bin/\${CHOST}-\$_prog"
ccachecom[13]="done"
ccachecom[14]="for _prog in cc clang clang++; do"
ccachecom[15]="  ln -svf /usr/bin/ccache /usr/lib/ccache/bin/\$_prog"
ccachecom[16]="done"
rtrncommands=(${ccachecom[@]})
} # end ccacheComms
#
ccachedestdirComms () {
local ccachedestdircom=""
ccachedestdircom[0]='CHOST="x86_64-pc-linux-gnu"'
ccachedestdircom[1]="cmake \\"
ccachedestdircom[2]="  -DCMAKE_INSTALL_PREFIX=/usr \\"
ccachedestdircom[3]="  -DCMAKE_BUILD_TYPE=None \\"
ccachedestdircom[4]="  -Wno-dev \\"
ccachedestdircom[5]="  -B build \\"
ccachedestdircom[6]="  -S ."
ccachedestdircom[7]="make VERBOSE=1 -C build"
ccachedestdircom[8]="make DESTDIR=\$CUR_DIR install -C build"
ccachedestdircom[9]="install -d \${CUR_DIR}/usr/lib/ccache/bin"
ccachedestdircom[10]="for _prog in gcc g++ c++; do"
ccachedestdircom[11]="  ln -svf /usr/bin/ccache \${CUR_DIR}/usr/lib/ccache/bin/\$_prog"
ccachedestdircom[12]="  ln -svf /usr/bin/ccache \${CUR_DIR}/usr/lib/ccache/bin/\${CHOST}-\$_prog"
ccachedestdircom[13]="done"
ccachedestdircom[14]="for _prog in cc clang clang++; do"
ccachedestdircom[15]="  ln -svf /usr/bin/ccache \${CUR_DIR}/usr/lib/ccache/bin/\$_prog"
ccachedestdircom[16]="done"
rtrncommands=(${ccachedestdircom[@]})
} # end ccachedestdirComms
#
cmockaComms () {
local cmockacom=""
cmockacom[0]="if [ ! -d build ]; then mkdir build; fi"
cmockacom[1]="cd build"
cmockacom[2]="cmake -DCMAKE_INSTALL_PREFIX=/usr \\"
cmockacom[3]="      -DCMAKE_BUILD_TYPE=Release  \\"
cmockacom[4]="      -DUNIT_TESTING=ON  .."
cmockacom[5]="make"
cmockacom[6]="make install"
rtrncommands=(${cmockacom[@]})
} # end cmockaComms
#
codeliteComms () {
local codelitecom=""
codelitecom[0]='cmake -G "Unix Makefiles" \'
codelitecom[1]="      -DCMAKE_INSTALL_PREFIX=/usr \\"
codelitecom[2]="      -DCMAKE_BUILD_TYPE=Release ."
codelitecom[3]="make -j4"
codelitecom[4]="make DESTDIR=/usr/src/programming/codelite install"
rtrncommands=(${codelitecom[@]})
} # end codeliteComms
#
coinComms () {
local coincom=""
coincom[0]="sed -i '/^prefix/c prefix=\"/usr/\"' bin/coin-config"
coincom[1]="sed -i '/fonts\\/freetype.h/i #include <cstdlib>\\n#include <cmath>' src/fonts/freetype.cpp"
coincom[2]="sed -i '/^#include <Inventor\\/C\\/basic.h>$/i #include <Inventor/C/errors/debugerror.h>' include/Inventor/SbBasic.h"
coincom[3]="./configure \\"
coincom[4]="         --prefix=/usr \\"
coincom[5]="         --mandir=/usr/share/man \\"
coincom[6]="         --enable-optimization \\"
coincom[7]="         --enable-3ds-import \\"
coincom[8]="         --enable-javascript-api \\"
coincom[9]="         --enable-threadsafe \\"
coincom[10]="         --enable-exceptions \\"
coincom[11]="         --enable-man \\"
coincom[12]="         --enable-html \\"
coincom[13]="         --with-mesa \\"
coincom[14]="         --disable-debug \\"
coincom[15]="         --enable-shared \\"
coincom[16]="         --disable-maintainer-mode \\"
coincom[17]="         --disable-dependency-tracking \\"
coincom[18]="         --enable-system-expat"
coincom[19]="make"
coincom[20]="make install"
coincom[21]="for _FILE in threads errors events ; do"
coincom[22]="  mv /usr/share/man/man3/\${_FILE}.3 /usr/share/man/man3/coin-\${_FILE}.3"
coincom[23]="done"
rtrncommands=(${coincom[@]})
} # end coincom
#
connmanComms () {
local conncom=""
conncom[0]="patch -Np1 -i ../connman-allow_group_network-1.patch"
conncom[1]="./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var \\"
conncom[2]="            --bindir=/usr/bin --sbindir=/usr/bin \\"
conncom[3]="            --with-systemdunitdir=/usr/lib/systemd/system \\"
conncom[4]="            --enable-polkit --enable-openvpn \\"
conncom[5]="            --enable-client"
conncom[6]="make"
conncom[7]="make install"
conncom[8]="install -Dm755 client/connmanctl /usr/bin/connmanctl"
conncom[9]="sed -e 's/s\\(bin\\)/\\1/' \\"
conncom[10]="    -i /usr/lib/systemd/system/{connman-vpn.service,connman.service} \\"
conncom[11]="       /usr/share/dbus-1/system-services/net.connman.vpn.service"
rtrncommands=(${conncom[@]})
} # end connmanComms
#
crdaComms () {
local crdacom=""
crdacom[0]="patch -p1 -i ../crda-3.18-fixes-1.patch"
crdacom[1]="patch -p1 -i ../crda-3.18-no-ldconfig-1.patch"
crdacom[2]="mkdir -pv /usr/lib/crda"
crdacom[3]="if [ ! -e /usr/lib/crda/regulatory.bin ]; then"
crdacom[4]="  cp -v ../regulatory.bin /usr/lib/crda/"
crdacom[5]="fi"
crdacom[6]="make"
crdacom[7]="make UDEV_RULE_DIR=/usr/lib/udev/rules.d/ SBINDIR=/usr/bin/ install"
crdacom[8]="sed 's|/sbin/crda|/usr/bin/crda|' -i /usr/lib/udev/rules.d/85-regulatory.rules"
crdacom[9]="echo 'ACTION==\"add\" SUBSYSTEM==\"module\", DEVPATH==\"/module/cfg80211\", RUN+=\"/usr/bin/set-wireless-regdom\"' >> /usr/lib/udev/rules.d/85-regulatory.rules"
crdacom[10]='cat > /usr/bin/set-wireless-regdom << "CRDAEOF"'
crdacom[11]='#!/bin/bash'
crdacom[12]="unset WIRELESS_REGDOM"
crdacom[13]=". /etc/conf.d/wireless-regdom"
crdacom[14]='[ -n "${WIRELESS_REGDOM}" ] && iw reg set ${WIRELESS_REGDOM}'
crdacom[15]="CRDAEOF"
rtrncommands=(${crdacom[@]})
} # end crdaComms
#
crossguidComms () {
local crossguidcom=""
crossguidcom[0]="cmake ."
crossguidcom[1]="make"
crossguidcom[2]="install -D -m644 libxg.a /usr/lib/libxg.a"
crossguidcom[3]="install -D -m644 Guid.hpp /usr/include/Guid.hpp"
rtrncommands=(${crossguidcom[@]})
} # end crossguidComms
#
cudaComms () {
local cudacom=""
cudacom[0]="sed -e 's|can_add_for_all_users;|1;|g' \\"
cudacom[1]="    -e 's|=\\\\\"\$prefix\\\\\\\"|=/opt/cuda|g' \\"
cudacom[2]="    -e 's|Terminal=No|Terminal=false|g' \\"
cudacom[3]="    -e 's|ParallelComputing|ParallelComputing;|g' \\"
cudacom[4]="    -i pkg/install-linux.pl"
cudacom[5]="sed -e 's|\\\$cudaprefix\\\\|\\\\/opt\\\\/cuda\\\\|g' \\"
cudacom[6]="    -i pkg/install-sdk-linux.pl"
cudacom[7]="find pkg -name '*.py' | xargs sed -i -e 's|env python|env python2|g' -e 's|bin/python|bin/python2|g'"
cudacom[8]='for f in pkg/samples/*/*/findgllib.mk; do'
cudacom[9]='    patch $f cuda-findgllib_mk.diff'
cudacom[10]="done"
cudacom[11]="cd pkg"
cudacom[12]='curdir=$( echo $PWD )'
cudacom[13]="export PERL5LIB=. # needed to find InstallUtils.pm which is in pkg"
cudacom[14]="perl install-linux.pl -prefix=/opt/cuda -noprompt"
cudacom[15]="perl install-sdk-linux.pl -cudaprefix=/opt/cuda -prefix=/opt/cuda/samples -noprompt"
cudacom[16]="# use gcc-8"
cudacom[17]="ln -s /usr/bin/gcc-8 /opt/cuda/bin/gcc"
cudacom[18]="ln -s /usr/bin/g++-8 /opt/cuda/bin/g++"
cudacom[19]="install -Dm644 ../cuda.conf /etc/ld.so.conf.d/cuda.conf"
cudacom[20]="install -Dm755 ../cuda.sh /etc/profile.d/cuda.sh"
cudacom[21]="rm -rf /opt/cuda/doc/man"
cudacom[22]="rm -rf /opt/cuda/cuda-samples"
cudacom[23]="rm -rf /opt/cuda/jre"
cudacom[24]="sed -e 's|../jre/bin/java|/opt/jdk/bin/java|g' \\"
cudacom[25]="    -i /opt/cuda/libnsight/nsight.ini \\"
cudacom[26]="    -i /opt/cuda/libnvvp/nvvp.ini"
cudacom[27]='rm -rf /opt/cuda/"{bin,samples}"/.uninstall_manifest_do_not_delete.txt'
cudacom[28]="rm -rf /opt/cuda/samples/uninstall_cuda_samples_10.0.pl"
cudacom[29]="rm -rf /opt/cuda/bin/cuda-install-samples-10.0.sh"
cudacom[30]="rm -rf /opt/cuda/bin/uninstall_cuda_toolkit_10.0.pl"
rtrncommands=(${cudacom[@]})
} # end cudaComms
#
dbusComms () {
local dbuscom=""
dbuscom[0]="./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var \\"
dbuscom[1]="            --libexecdir=/usr/lib/dbus-1.0 --with-dbus-user=messagebus \\"
dbuscom[2]="            --with-system-pid-file=/run/dbus/pid \\"
dbuscom[3]="            --with-system-socket=/run/dbus/system_bus_socket \\"
dbuscom[4]="            --with-console-auth-dir=/run/console/ \\"
dbuscom[5]="            --enable-inotify --disable-dnotify \\"
dbuscom[6]="            --disable-verbose-mode --disable-static \\"
dbuscom[7]="            --disable-tests --disable-asserts \\"
dbuscom[8]="            --with-systemdsystemunitdir=/usr/lib/systemd/system \\"
dbuscom[9]="            --enable-systemd"
dbuscom[10]="make"
dbuscom[11]="make install"
rtrncommands=(${dbuscom[@]})
} # end dbusComms
#
dejavuComms () {
local dejavucom=""
dejavucom[0]="install -v -m644 ttf/*.ttf /usr/share/fonts/TTF/"
dejavucom[1]="install -m644 fontconfig/*.conf /etc/fonts/conf.avail/"
dejavucom[2]="pushd /etc/fonts/conf.avail"
dejavucom[3]="for config in *dejavu*; do"
dejavucom[4]='  ln -sf ../conf.avail/${config} ../conf.d/${config}'
dejavucom[5]="done"
dejavucom[6]="popd"
dejavucom[7]="fc-cache -v /usr/share/fonts/"
rtrncommands=(${dejavucom[@]})
} # end dejavuComms
#
docbkXmlDestdirComms () {
local docbkcom=""
docbkcom[0]="install -v -d -m755 \${CUR_DIR}/usr/share/xml/docbook/xml-dtd-4.5"
docbkcom[1]="install -v -d -m755 \${CUR_DIR}/etc/xml"
docbkcom[2]="chown -R  docbook-xml:docbook-xml ."
docbkcom[3]="cp -v -af docbook.cat *.dtd ent/ *.mod \\"
docbkcom[4]="    \${CUR_DIR}/usr/share/xml/docbook/xml-dtd-4.5"
docbkcom[5]="if [ ! -e \${CUR_DIR}/etc/xml/docbook ]; then"
docbkcom[6]="    xmlcatalog --noout --create \${CUR_DIR}/etc/xml/docbook"
docbkcom[7]="fi"
docbkcom[8]='xmlcatalog --noout --add "public" \'
docbkcom[9]='    "-//OASIS//DTD DocBook XML V4.5//EN" \'
docbkcom[10]='    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" \'
docbkcom[11]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[12]='xmlcatalog --noout --add "public" \'
docbkcom[13]='    "-//OASIS//DTD DocBook XML CALS Table Model V4.5//EN" \'
docbkcom[14]='    "file:///usr/share/xml/docbook/xml-dtd-4.5/calstblx.dtd" \'
docbkcom[15]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[16]='xmlcatalog --noout --add "public" \'
docbkcom[17]='    "-//OASIS//DTD XML Exchange Table Model 19990315//EN" \'
docbkcom[18]='    "file:///usr/share/xml/docbook/xml-dtd-4.5/soextblx.dtd" \'
docbkcom[19]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[20]='xmlcatalog --noout --add "public" \'
docbkcom[21]='    "-//OASIS//ELEMENTS DocBook XML Information Pool V4.5//EN" \'
docbkcom[22]='    "file:///usr/share/xml/docbook/xml-dtd-4.5/dbpoolx.mod" \'
docbkcom[23]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[24]='xmlcatalog --noout --add "public" \'
docbkcom[25]='    "-//OASIS//ELEMENTS DocBook XML Document Hierarchy V4.5//EN" \'
docbkcom[26]='    "file:///usr/share/xml/docbook/xml-dtd-4.5/dbhierx.mod" \'
docbkcom[27]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[28]='xmlcatalog --noout --add "public" \'
docbkcom[29]='    "-//OASIS//ELEMENTS DocBook XML HTML Tables V4.5//EN" \'
docbkcom[30]='    "file:///usr/share/xml/docbook/xml-dtd-4.5/htmltblx.mod" \'
docbkcom[31]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[32]='xmlcatalog --noout --add "public" \'
docbkcom[33]='    "-//OASIS//ENTITIES DocBook XML Notations V4.5//EN" \'
docbkcom[34]='    "file:///usr/share/xml/docbook/xml-dtd-4.5/dbnotnx.mod" \'
docbkcom[35]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[36]='xmlcatalog --noout --add "public" \'
docbkcom[37]='    "-//OASIS//ENTITIES DocBook XML Character Entities V4.5//EN" \'
docbkcom[38]='    "file:///usr/share/xml/docbook/xml-dtd-4.5/dbcentx.mod" \'
docbkcom[39]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[40]='xmlcatalog --noout --add "public" \'
docbkcom[41]='    "-//OASIS//ENTITIES DocBook XML Additional General Entities V4.5//EN" \'
docbkcom[42]='    "file:///usr/share/xml/docbook/xml-dtd-4.5/dbgenent.mod" \'
docbkcom[43]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[44]='xmlcatalog --noout --add "rewriteSystem" \'
docbkcom[45]='    "http://www.oasis-open.org/docbook/xml/4.5" \'
docbkcom[46]='    "file:///usr/share/xml/docbook/xml-dtd-4.5" \'
docbkcom[47]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[48]='xmlcatalog --noout --add "rewriteURI" \'
docbkcom[49]='    "http://www.oasis-open.org/docbook/xml/4.5" \'
docbkcom[50]='    "file:///usr/share/xml/docbook/xml-dtd-4.5" \'
docbkcom[51]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[52]="if [ ! -e \${CUR_DIR}/etc/xml/catalog ]; then"
docbkcom[53]="    xmlcatalog --noout --create \${CUR_DIR}/etc/xml/catalog"
docbkcom[54]="fi"
docbkcom[55]='xmlcatalog --noout --add "delegatePublic" \'
docbkcom[56]='    "-//OASIS//ENTITIES DocBook XML" \'
docbkcom[57]='    "file:///etc/xml/docbook" \'
docbkcom[58]="    \${CUR_DIR}/etc/xml/catalog"
docbkcom[59]='xmlcatalog --noout --add "delegatePublic" \'
docbkcom[60]='    "-//OASIS//DTD DocBook XML" \'
docbkcom[61]='    "file:///etc/xml/docbook" \'
docbkcom[62]="    \${CUR_DIR}/etc/xml/catalog"
docbkcom[63]='xmlcatalog --noout --add "delegateSystem" \'
docbkcom[64]='    "http://www.oasis-open.org/docbook/" \'
docbkcom[65]='    "file:///etc/xml/docbook" \'
docbkcom[66]="    \${CUR_DIR}/etc/xml/catalog"
docbkcom[67]='xmlcatalog --noout --add "delegateURI" \'
docbkcom[68]='    "http://www.oasis-open.org/docbook/" \'
docbkcom[69]='    "file:///etc/xml/docbook" \'
docbkcom[70]="    \${CUR_DIR}/etc/xml/catalog"
docbkcom[71]="for DTDVERSION in 4.1.2 4.2 4.3 4.4"
docbkcom[72]="do"
docbkcom[73]='  xmlcatalog --noout --add "public" \'
docbkcom[74]='    "-//OASIS//DTD DocBook XML V$DTDVERSION//EN" \'
docbkcom[75]='    "http://www.oasis-open.org/docbook/xml/$DTDVERSION/docbookx.dtd" \'
docbkcom[76]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[77]='  xmlcatalog --noout --add "rewriteSystem" \'
docbkcom[78]='    "http://www.oasis-open.org/docbook/xml/$DTDVERSION" \'
docbkcom[79]='    "file:///usr/share/xml/docbook/xml-dtd-4.5" \'
docbkcom[80]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[81]='  xmlcatalog --noout --add "rewriteURI" \'
docbkcom[82]='    "http://www.oasis-open.org/docbook/xml/$DTDVERSION" \'
docbkcom[83]='    "file:///usr/share/xml/docbook/xml-dtd-4.5" \'
docbkcom[84]="    \${CUR_DIR}/etc/xml/docbook"
docbkcom[85]='  xmlcatalog --noout --add "delegateSystem" \'
docbkcom[86]='    "http://www.oasis-open.org/docbook/xml/$DTDVERSION/" \'
docbkcom[87]='    "file:///etc/xml/docbook" \'
docbkcom[88]="    \${CUR_DIR}/etc/xml/catalog"
docbkcom[89]='  xmlcatalog --noout --add "delegateURI" \'
docbkcom[90]='    "http://www.oasis-open.org/docbook/xml/$DTDVERSION/" \'
docbkcom[91]='    "file:///etc/xml/docbook" \'
docbkcom[92]="    \${CUR_DIR}/etc/xml/catalog"
docbkcom[93]="done"
rtrncommands=(${docbkcom[@]})
} # end docbkXmlDestdirComms
#
docbkXslDestdirComms () {
local docbkxslcom=""
docbkxslcom[0]="install -v -m755 -d /usr/share/xml/docbook/xsl-stylesheets-1.78.1"
docbkxslcom[1]="cp -v -R VERSION common eclipse epub extensions fo highlighting html \\"
docbkxslcom[2]="         htmlhelp images javahelp lib manpages params profiling \\"
docbkxslcom[3]="         roundtrip slides template tests tools webhelp website \\"
docbkxslcom[4]="         xhtml xhtml-1_1 \\"
docbkxslcom[5]="    \${CUR_DIR}/usr/share/xml/docbook/xsl-stylesheets-1.78.1"
docbkxslcom[6]="ln -s VERSION \${CUR_DIR}/usr/share/xml/docbook/xsl-stylesheets-1.78.1/VERSION.xsl"
docbkxslcom[7]="install -v -m755 -d \${CUR_DIR}/usr/share/doc/docbook-xsl-1.78.1"
docbkxslcom[8]="install -v -m644 -D README \\"
docbkxslcom[9]="                    \${CUR_DIR}/usr/share/doc/docbook-xsl-1.78.1/README.txt"
docbkxslcom[10]='install -v -m644    RELEASE-NOTES* NEWS* \'
docbkxslcom[11]="                    \${CUR_DIR}/usr/share/doc/docbook-xsl-1.78.1"
docbkxslcom[12]="if [ ! -d \${CUR_DIR}/etc/xml ]; then install -v -m755 -d \${CUR_DIR}/etc/xml; fi"
docbkxslcom[13]="if [ ! -f \${CUR_DIR}/etc/xml/catalog ]; then"
docbkxslcom[14]="    xmlcatalog --noout --create \${CUR_DIR}/etc/xml/catalog"
docbkxslcom[15]="fi"
docbkxslcom[16]='xmlcatalog --noout --add "rewriteSystem" \'
docbkxslcom[17]='           "http://docbook.sourceforge.net/release/xsl/1.78.1" \'
docbkxslcom[18]='           "/usr/share/xml/docbook/xsl-stylesheets-1.78.1" \'
docbkxslcom[19]="    \${CUR_DIR}/etc/xml/catalog"
docbkxslcom[20]='xmlcatalog --noout --add "rewriteURI" \'
docbkxslcom[21]='           "http://docbook.sourceforge.net/release/xsl/1.78.1" \'
docbkxslcom[22]='           "/usr/share/xml/docbook/xsl-stylesheets-1.78.1" \'
docbkxslcom[23]="    \${CUR_DIR}/etc/xml/catalog"
docbkxslcom[24]='xmlcatalog --noout --add "rewriteSystem" \'
docbkxslcom[25]='           "http://docbook.sourceforge.net/release/xsl/current" \'
docbkxslcom[26]='           "/usr/share/xml/docbook/xsl-stylesheets-1.78.1" \'
docbkxslcom[27]="    \${CUR_DIR}/etc/xml/catalog"
docbkxslcom[28]='xmlcatalog --noout --add "rewriteURI" \'
docbkxslcom[29]='           "http://docbook.sourceforge.net/release/xsl/current" \'
docbkxslcom[30]='           "/usr/share/xml/docbook/xsl-stylesheets-1.78.1" \'
docbkxslcom[31]="    \${CUR_DIR}/etc/xml/catalog"
rtrncommands=(${docbkxslcom[@]})
} # end docbkXslDestdirComms
#
dosfstoolsComms () {
local dosfstoolscom=""
dosfstoolscom[0]="./configure --prefix=/usr --libexecdir=/usr/lib \\"
dosfstoolscom[1]="            --sbindir=/usr/bin --mandir=/usr/share/man \\"
dosfstoolscom[2]="            --docdir=/usr/share/doc/dosfstools --enable-compat-symlinks"
dosfstoolscom[3]="make"
dosfstoolscom[4]="make install"
rtrncommands=(${dosfstoolscom[@]})
} # end dosfstoolsComms
#
emergentComms () {
local emergentcom=""
emergentcom[0]="export QTDIR=/opt/qt5"
emergentcom[1]="./configure --prefix=/usr --qt5"
emergentcom[2]="sed -e '/#define dSINGLE/d' \\"
emergentcom[3]="    -i src/temt/ta_core/ta_stdef.h"
emergentcom[4]="make"
emergentcom[5]="make install"
emergentcom[6]="install -m644 src/temt/ta_gui/images/emergent_32x32.png /usr/share/icons/hicolor/32x32/apps/emergent.png"
emergentcom[7]="install -m644 src/temt/ta_gui/images/emergent_128x128.png /usr/share/icons/hicolor/128x128/apps/emergent.png"
emergentcom[8]="install -m644 build/src/emergent/bin/emergent.desktop /usr/share/applications/emergent.desktop"
emergentcom[9]="sed -e '/Icon=\/usr\/share/d' \\"
emergentcom[10]="    -e '/Categories=/i Icon=/usr/share/icons/hicolor/32x32/apps/emergent.png' \\"
emergentcom[11]="    -i /usr/share/applications/emergent.desktop"
rtrncommands=(${emergentcom[@]})
} # end emergentComms
#
espeakComms () {
local espeakcom=""
espeakcom[0]="cd src"
espeakcom[1]="cp portaudio19.h portaudio.h"
espeakcom[2]="CXX='g++ -Wno-narrowing' make AUDIO=runtime"
espeakcom[3]="make install"
espeakcom[4]="chmod 644 /usr/lib/libespeak.a"
rtrncommands=(${espeakcom[@]})
} # end espeakComms
#
eudevComms () {
local eudevcom=""
eudevcom[0]="sed -r -i 's|/usr(/bin/test)|\1|' test/udev-test.pl"
eudevcom[1]="./configure --prefix=/usr           \\"
eudevcom[2]="            --bindir=/sbin          \\"
eudevcom[3]="            --sbindir=/sbin         \\"
eudevcom[4]="            --libdir=/usr/lib       \\"
eudevcom[5]="            --sysconfdir=/etc       \\"
eudevcom[6]="            --libexecdir=/lib       \\"
eudevcom[7]="            --with-rootprefix=      \\"
eudevcom[8]="            --with-rootlibdir=/lib  \\"
eudevcom[9]="            --enable-split-usr      \\"
eudevcom[10]="            --enable-libkmod        \\"
eudevcom[11]="            --enable-rule_generator \\"
eudevcom[12]="            --enable-keymap         \\"
eudevcom[13]="            --enable-introspection \\"
eudevcom[14]="            --enable-gudev"
eudevcom[15]="make"
eudevcom[16]="make install"
rtrncommands=(${eudevcom[@]})
} # end eudevComms
#
evoldataservComms () {
local evoldataservcom=""
evoldataservcom[0]="cmake . -G Ninja \\"
evoldataservcom[0]="    -DCMAKE_INSTALL_PREFIX=/usr \\"
evoldataservcom[1]="    -DLIBEXEC_INSTALL_DIR=/usr/lib/evolution-data-server \\"
evoldataservcom[2]="    -DSYSCONF_INSTALL_DIR=/etc \\"
evoldataservcom[3]="    -DENABLE_INTROSPECTION=ON \\"
evoldataservcom[4]="    -DENABLE_VALA_BINDINGS=ON \\"
evoldataservcom[5]="    -DENABLE_UOA=OFF \\"
evoldataservcom[6]="    -DENABLE_GOOGLE_AUTH=ON \\"
evoldataservcom[7]="    -DENABLE_GTK_DOC=OFF"
evoldataservcom[8]="ninja"
evoldataservcom[9]="ninja install"
rtrncommands=(${evoldataservcom[@]})
} # end evoldataservComms
#
farstreamComms () {
farstreamcom=""
farstreamcom[0]="patch -p1 -i ../farstream-0.2.9-make-4.3.patch"
farstreamcom[1]="./autogen.sh"
farstreamcom[2]="./configure --prefix=/usr \\"
farstreamcom[3]="            --disable-gtk-doc \\"
farstreamcom[4]="            --with-package-name='LFS farstream package'\\"
farstreamcom[5]="            --with-package-origin='http://linuxfromscratch.org'"
farstreamcom[6]="make"
farstreamcom[7]="make install"
rtrncommands=(${farstreamcom[@]})
} # end farstreamComms
#
fehComms () {
local fehcom=""
fehcom[0]="make PREFIX=/usr exif=1 help=1 stat64=1"
fehcom[1]="make PREFIX=/usr install"
rtrncommands=(${fehcom[@]})
} # end fehComms
#
flashComms () {
local flashcom=""
flashcom[0]="install -v -Dm755 libflashplayer.so /usr/lib/mozilla/plugins/libflashplayer.so"
flashcom[1]="install -v -Dm755 usr/bin/flash-player-properties /usr/bin/flash-player-properties"
flashcom[2]="for res in 16 22 24 32 48; do"
flashcom[3]="  install -v -Dm644 usr/share/icons/hicolor/\${res}x\${res}/apps/flash-player-properties.png \\"
flashcom[4]="                 /usr/share/icons/hicolor/\${res}x\${res}/apps/flash-player-properties.png"
flashcom[5]="done"
flashcom[6]="install -v -Dm644 usr/share/applications/flash-player-properties.desktop /usr/share/applications/flash-player-properties.desktop"
rtrncommands=(${flashcom[@]})
} # end flashComms
#
glewComms () {
local glewcom=""
glewcom[0]="patch -Np1 -i ../glew-install.patch"
glewcom[1]="make \\"
glewcom[2]="  STRIP= \\"
glewcom[3]="  LIBDIR=/usr/lib"
glewcom[4]="make install.all LIBDIR=/usr/lib"
rtrncommands=(${glewcom[@]})
} # end glewComms
#
gnmusershareComms () {
local gnmusersharecom=""
gnmusersharecom[0]="mkdir -p build"
gnmusersharecom[1]="cd build"
gnmusersharecom[2]="arch-meson \\"
gnmusersharecom[3]="    -Dhttpd=/usr/bin/httpd \\"
gnmusersharecom[4]="    -Dmodules_path=/usr/lib/httpd/modules \\"
gnmusersharecom[5]="    -Dnautilus_extension=true \\"
gnmusersharecom[6]="    .."
gnmusersharecom[7]="ninja"
gnmusersharecom[8]="ninja install"
rtrncommands=(${gnmusersharecom[@]})
} # end gnmusershareComms
#
gnometermComms () {
local gnometermcom=""
gnometermcom[0]='export PYTHONPATH="/usr/share/glib-2.0"'
gnometermcom[1]='LDFLAGS+=" -pthread" ./configure --prefix=/usr \'
gnometermcom[2]="         --sysconfdir=/etc \\"
gnometermcom[3]="         --localstatedir=/var \\"
gnometermcom[4]="         --libexecdir=/usr/lib/gnome-terminal \\"
gnometermcom[5]="         --disable-static \\"
gnometermcom[6]="         --with-nautilus-extension"
gnometermcom[7]="sed -i -e 's/ -shared / -Wl,-O1,--as-needed\\0/g' libtool"
gnometermcom[8]="make"
gnometermcom[9]="make install"
rtrncommands=(${gnometermcom[@]})
} # end gnometermComms
#
grepComms () {
local grepcom=""
grepcom[0]="./configure --prefix=/usr --without-included-regex"
grepcom[1]="make"
grepcom[2]="make install"
rtrncommands=(${grepcom[@]})
} # end grepComms
#
hamcrestComms () {
local hamcrestcom=""
hamcrestcom[0]="install -v -dm755 /usr/share/java/\${_libname}"
hamcrestcom[1]="for hamtype in core library generator integration; do"
hamcrestcom[2]="  cp \${SrcName}\${hamtype}-\${pkgver}.jar /usr/share/java/\${_libname}/\${hamtype}-\${pkgver}.jar"
hamcrestcom[3]="  ln -sv \${hamtype}-\${pkgver}.jar /usr/share/java/\${_libname}/\${hamtype}.jar"
hamcrestcom[4]="  ln -s \${_libname}/\${hamtype}-\${pkgver}.jar /usr/share/java/\${SrcName}\${hamtype}.jar"
hamcrestcom[5]="done"
rtrncommands=(${hamcrestcom[@]})
} # end hamcrestComms
#
hplipComms (){
local hplipcom=""
hplipcom[0]="patch -Np0 -i ../hplip-3.17.11-disable_upgrade.patch"
hplipcom[1]="patch -Np1 -i ../hplip-3.17.11-add-include-cups-ppd.patch"
hplipcom[2]="export AUTOMAKE='automake --foreign'"
hplipcom[3]="autoreconf --force --install"
hplipcom[4]="./configure --prefix=/usr \\"
hplipcom[5]="             --enable-qt5 \\"
hplipcom[6]="             --disable-qt4 \\"
hplipcom[7]="             --enable-hpcups-install \\"
hplipcom[8]="             --enable-cups-drv-install \\"
hplipcom[9]="             --disable-network-build"
hplipcom[10]="make"
hplipcom[11]="make -j1 rulesdir=/usr/lib/udev/rules.d install"
hplipcom[12]="echo hpaio > /etc/sane.d/dll.d/hpaio"
hplipcom[13]="unset AUTOMAKE"
rtrncommands=(${hplipcom[@]})
} # end hplipComms
#
hyphenComms () {
local hyphencom=""
hyphencom[0]="./configure --prefix=/usr --disable-static"
hyphencom[1]="make"
hyphencom[2]="make install-libLTLIBRARIES"
hyphencom[3]="make install-binSCRIPTS"
hyphencom[4]="make install-includeHEADERS"
hyphencom[5]="make install-hyphDATA"
hyphencom[6]="pushd /usr/share/hyphen/"
hyphencom[7]='  en_US_aliases="en_AG en_AU en_BS en_BW en_BZ en_CA en_DK en_GB en_GH en_HK en_IE \'
hyphencom[8]='  en_IN en_JM en_NA en_NZ en_PH en_SG en_TT en_ZA en_ZW"'
hyphencom[9]="  for lang in \$en_US_aliases; do"
hyphencom[10]="    ln -s hyph_en_US.dic hyph_\$lang.dic"
hyphencom[11]="  done"
hyphencom[12]="popd"
hyphencom[13]="install -dm755 /usr/share/myspell/dicts"
hyphencom[14]="pushd /usr/share/myspell/dicts"
hyphencom[15]="  for file in /usr/share/hyphen/*; do"
hyphencom[16]="    ln -sv /usr/share/hyphen/\$(basename \$file) ."
hyphencom[17]="  done"
hyphencom[18]="popd"
rtrncommands=(${hyphencom[@]})
} # end hyphenComms
#
i3Comms () {
local i3com=""
i3com[0]='MAKEFLAGS="-j1" make'
i3com[1]="make install"
i3com[2]="install -Dm644 man/i3.1 \\"
i3com[3]="    /usr/share/man/man1/i3.1"
i3com[4]="install -Dm644 man/i3bar.1 \\"
i3com[5]="    /usr/share/man/man1/i3bar.1"
i3com[6]="install -Dm644 man/i3-config-wizard.1 \\"
i3com[7]="    /usr/share/man/man1/i3-config-wizard.1"
i3com[8]="install -Dm644 man/i3-input.1 \\"
i3com[9]="    /usr/share/man/man1/i3-input.1"
i3com[10]="install -Dm644 man/i3-msg.1 \\"
i3com[11]="    /usr/share/man/man1/i3-msg.1"
i3com[12]="install -Dm644 man/i3-migrate-config-to-v4.1 \\"
i3com[13]="    /usr/share/man/man1/i3-migrate-config-to-v4.1"
i3com[14]="install -Dm644 man/i3-nagbar.1 \\"
i3com[15]="    /usr/share/man/man1/i3-nagbar.1"
i3com[16]="install -Dm644 man/i3-dmenu-desktop.1 \\"
i3com[17]="    /usr/share/man/man1/i3-dmenu-desktop.1"
i3com[18]="install -Dm644 man/i3-dump-log.1 \\"
i3com[19]="    /usr/share/man/man1/i3-dump-log.1"
i3com[20]="install -Dm644 man/i3-sensible-editor.1 \\"
i3com[21]="    /usr/share/man/man1/i3-sensible-editor.1"
i3com[22]="install -Dm644 man/i3-sensible-pager.1 \\"
i3com[23]="    /usr/share/man/man1/i3-sensible-pager.1"
i3com[24]="install -Dm644 man/i3-sensible-terminal.1 \\"
i3com[25]="    /usr/share/man/man1/i3-sensible-terminal.1"
rtrncommands=(${i3com[@]})
} # end i3Comms
#
i3lockComms () {
local i3lockcom=""
i3lockcom[0]="sed -i -e 's:login:system-auth:' i3lock.pam"
i3lockcom[1]="make"
i3lockcom[2]="make install"
i3lockcom[3]="install -Dm644 i3lock.1 /usr/share/man/man1/i3lock.1"
rtrncommands=(${i3lockcom[@]})
} # end i3lockComms
#
icedteawebComms () {
local icedteawebcom=""
icedteawebcom[0]="LANG=en_US.UTF-8 bsdtar -x -f \${SrcName}\${pkgver}.tar.gz"
icedteawebcom[1]="./configure --prefix=/usr/share/\${SrcName} \\"
icedteawebcom[2]="            --datarootdir=/usr/share \\"
icedteawebcom[3]="            --with-jdk-home=/opt/jdk/lib/jvm/default \\"
icedteawebcom[4]="            --with-jre-home=/usr/lib/jvm/default-runtime \\"
icedteawebcom[5]="            --with-java=/usr/bin/java \\"
icedteawebcom[6]="            --with-browser-tests \\:"
icedteawebcom[7]="            --with-firefox=/usr/bin/firefox"
icedteawebcom[8]="make"
icedteawebcom[9]="make install-exec-local install-data-local"
icedteawebcom[10]="install -m 644 javaws.png /usr/share/pixmaps"
icedteawebcom[11]="install -m 644 {javaws,itweb-settings}.desktop /usr/share/applications"
icedteawebcom[12]="pushd /usr/share/icedtea-web/bin"
icedteawebcom[13]="for file in *; do"
icedteawebcom[14]="  ln -sf /usr/share/icedtea-web/bin/\${file} /usr/bin"
icedteawebcom[15]="done"
icedteawebcom[16]="popd"
icedteawebcom[17]="mkdir -pv /usr/lib/mozilla/plugins"
icedteawebcom[18]="ln -sf /usr/share/icedtea-web/lib/IcedTeaPlugin.so /usr/lib/mozilla/plugins"
rtrncommands=(${icedteawebcom[@]})
} # end icedteawebComms
#
icedteasoundComms () {
local icedteasoundcom=""
icedteasoundcom[0]='./configure --with-jdk-home=${JAVA_HOME} --disable-docs'
icedteasoundcom[1]="make"
icedteasoundcom[2]='case $(uname -m) in'
icedteasoundcom[3]='  i?86   ) ARCH=i386 ;;'
icedteasoundcom[4]='  x86_64 ) ARCH=amd64 ;;'
icedteasoundcom[5]="esac"
icedteasoundcom[6]='install icedtea-sound.jar ${JAVA_HOME}/jre/lib/ext'
icedteasoundcom[7]='install build/native/libicedtea-sound.so ${JAVA_HOME}/jre/lib/$ARCH'
icedteasoundcom[8]="unset ARCH"
icedteasoundcom[9]='cat >> ${JAVA_HOME}/jre/lib/sound.properties << "EOF"'
icedteasoundcom[10]="# Begin PulseAudio provider additions:"
icedteasoundcom[11]="javax.sound.sampled.Clip=org.classpath.icedtea.pulseaudio.PulseAudioClip"
icedteasoundcom[12]="javax.sound.sampled.SourceDataLine=org.classpath.icedtea.pulseaudio.PulseAudioSourceDataLine"
icedteasoundcom[13]="javax.sound.sampled.TargetDataLine=org.classpath.icedtea.pulseaudio.PulseAudioTargetDataLine"
icedteasoundcom[14]="# End PulseAudio provider additions"
icedteasoundcom[15]="EOF"
rtrncommands=(${icedteasoundcom[@]})
} # end icedteasoundComms
#
ijsComms () {
local ijscom=""
ijscom[0]="./configure --prefix=/usr \\"
ijscom[1]="            --disable-static \\"
ijscom[2]="            --enable-shared \\"
ijscom[3]="            --mandir=/usr/share/man"
ijscom[4]="make"
ijscom[5]="make install"
rtrncommands=(${ijscom[@]})
} # end ijsComms
#
iproute2Comms () {
local iproute2com=""
iproute2com[0]="patch -Np1 -i ../iproute2-make-fhs-compliant.patch"
iproute2com[1]="sed -i 's/-Werror//' Makefile"
iproute2com[2]="./configure"
iproute2com[3]="make"
iproute2com[4]="make DESTDIR=\"\$CUR_DIR\" SBINDIR=/usr/bin install"
iproute2com[5]="install -Dm0644 include/libnetlink.h /usr/include/libnetlink.h"
iproute2com[6]="install -Dm0644 lib/libnetlink.a /usr/lib/libnetlink.a"
rtrncommands=(${iproute2com[@]})
} # end iproute2Comms
#
iproute2destdirComms () {
local iproute2destdircom=""
iproute2destdircom[0]="patch -Np1 -i ../iproute2-make-fhs-compliant.patch"
iproute2destdircom[1]="sed -i 's/-Werror//' Makefile"
iproute2destdircom[2]="./configure"
iproute2destdircom[3]="make"
iproute2destdircom[4]="make DESTDIR=\"\$CUR_DIR\" SBINDIR=\"/usr/bin\" install"
iproute2destdircom[5]="install -Dm0644 include/libnetlink.h \"\${CUR_DIR}/usr/include/libnetlink.h\""
iproute2destdircom[6]="install -Dm0644 lib/libnetlink.a \"\${CUR_DIR}/usr/lib/libnetlink.a\""
rtrncommands=(${iproute2destdircom[@]})
} # end iproute2destdirComms
#
iwComms () {
local iwcom=""
iwcom[0]="make"
iwcom[1]="make SBINDIR=/usr/bin install"
rtrncommands=(${iwcom[@]})
} # end iwComms
#
j4menudsktpComms () {
local j4menudsktpcom=""
j4menudsktpcom[0]="git describe --long | sed -r 's/^r//;s/([^-]*-g)/r\1/;s/-/./g'"
j4menudsktpcom[1]="cmake -DCMAKE_INSTALL_PREFIX=/usr -DNO_TESTS=1 ."
j4menudsktpcom[2]="make"
j4menudsktpcom[3]="make install"
rtrncommands=(${j4menudsktpcom[@]})
} # end j4menudsktpComms
#
jack2Comms () {
local jack2com=""
jack2com[0]="./waf configure --prefix=/usr \\"
jack2com[1]="                --alsa \\"
jack2com[2]="                --libdir=/usr/lib \\"
jack2com[3]="                --systemd-unit \\"
jack2com[4]="                --classic"
jack2com[5]="./waf"
jack2com[6]="./waf install"
rtrncommands=(${jack2com[@]})
} # end jack2Comms
#
junitComms () {
local junitcom=""
junitcom[0]="install -D -m 644 junit-4.12.jar /usr/share/java/junit-4.12.jar"
junitcom[1]="ln -svf junit-4.12.jar /usr/share/java/junit.jar"
rtrncommands=(${junitcom[@]})
} # end junitComms
#
lapackComms () {
local lapackcom=""
lapackcom[0]="mkdir -pv build"
lapackcom[1]="cd build"
lapackcom[2]="cmake -DCMAKE_BUILD_TYPE=Release \\"
lapackcom[3]="      -DCMAKE_SKIP_RPATH=ON \\"
lapackcom[4]="      -DBUILD_SHARED_LIBS=ON \\"
lapackcom[5]="      -DBUILD_TESTING=OFF \\"
lapackcom[6]="      -DCMAKE_INSTALL_PREFIX=/usr \\"
lapackcom[7]="      -DCMAKE_INSTALL_LIBDIR=lib \\"
lapackcom[8]="      -DCMAKE_Fortran_COMPILER=gfortran \\"
lapackcom[9]="      -DLAPACKE_WITH_TMG=ON \\"
lapackcom[10]="      -DCBLAS=ON \\"
lapackcom[11]="      -DBUILD_DEPRECATED=ON \\"
lapackcom[12]="      .."
lapackcom[13]="make"
lapackcom[14]="make install"
rtrncommands=(${lapackcom[@]})
} # lapackComms
#
lcdprocComms () {
local lcdproccom=""
lcdproccom[0]="./configure --prefix=/usr \\"
lcdproccom[1]="            --sbindir=/usr/bin \\"
lcdproccom[2]="            --sysconfdir=/etc \\"
lcdproccom[3]="            --enable-libusb \\"
lcdproccom[4]="            --enable-lcdproc-menus \\"
lcdproccom[5]="            --enable-stat-smbfs \\"
lcdproccom[6]="            --enable-drivers=all"
lcdproccom[7]="make"
lcdproccom[8]="make install"
lcdproccom[9]="sed -e 's/server\/drivers\//\/usr\/lib\/lcdproc\//g' -i /etc/LCDd.conf"
rtrncommands=(${lcdproccom[@]})
} # end lcdprocComms
#
libcapComms () {
local libcapcom=""
libcapcom[0]="sed -i '/SBINDIR/s#sbin#bin#' Make.Rules"
libcapcom[1]="_makeargs=("
libcapcom[2]="  KERNEL_HEADERS=/usr/include"
libcapcom[3]="  RAISE_SETFCAP=no"
libcapcom[4]="  SBINDIR=/usr/bin"
libcapcom[5]="  lib=lib"
libcapcom[6]="  prefix=/usr"
libcapcom[7]=")"
libcapcom[8]='make "${_makeargs[@]}"'
libcapcom[9]='make "${_makeargs[@]}" install'
libcapcom[10]="install -v -Dm644 pam_cap/capability.conf /etc/security/capability.conf"
rtrncommands=(${libcapcom[@]})
} # end libcapComms
#
libcapdestdirComms () {
local libcapdcom=""
libcapdcom[0]="sed -i '/SBINDIR/s#sbin#bin#' Make.Rules"
libcapdcom[1]="_makeargs=("
libcapdcom[2]="  KERNEL_HEADERS=/usr/include"
libcapdcom[3]="  RAISE_SETFCAP=no"
libcapdcom[4]="  SBINDIR=/usr/bin"
libcapdcom[5]="  lib=lib"
libcapdcom[6]="  prefix=/usr"
libcapdcom[7]=")"
libcapdcom[8]='make "${_makeargs[@]}"'
libcapdcom[9]='make DESTDIR="$CUR_DIR" "${_makeargs[@]}" install'
libcapdcom[10]='install -v -Dm644 pam_cap/capability.conf ${CUR_DIR}/etc/security/capability.conf'
rtrncommands=(${libcapdcom[@]})
} # end libcapdestdirComms
#
libcecComms () {
local libceccom=""
libceccom[0]="mkdir build"
libceccom[1]="cd build"
libceccom[2]="cmake .. \\"
libceccom[3]="      -DCMAKE_BUILD_TYPE=Release \\"
libceccom[4]="      -DBUILD_SHARED_LIBS=1 \\"
libceccom[5]="      -DCMAKE_INSTALL_PREFIX=/usr \\"
libceccom[6]="      -DCMAKE_INSTALL_LIBDIR=/usr/lib \\"
libceccom[7]="      -DCMAKE_INSTALL_LIBDIR_NOARCH=/usr/lib \\"
libceccom[8]="      -DSKIP_PYTHON_WRAPPER=1"
libceccom[9]="make"
libceccom[10]="make install"
rtrncommands=(${libceccom[@]})
} # end libcecComms
#
libdcadecComms () {
local libdcadeccom=""
libdcadeccom[0]="export CONFIG_SHARED='TRUE'"
libdcadeccom[1]="make PREFIX=/usr"
libdcadeccom[2]="make PREFIX=/usr install"
libdcadeccom[3]="mv -v /usr/bin/dcadec{,-hd}"
libdcadeccom[4]="unset CONFIG_SHARED"
rtrncommands=(${libdcadeccom[@]})
} # end libdcadecComms
#
libexiv2Comms () {
local libexiv2com=""
libexiv2com[0]="mkdir -p build"
libexiv2com[1]="cd build"
libexiv2com[2]="arch-meson .."
libexiv2com[3]="ninja"
libexiv2com[4]="ninja install"
rtrncommands=(${libexiv2com[@]})
} # end libexiv2Comms
#
libfmComms () {
local libfmcom=""
libfmcom[0]="./configure --prefix=/usr \\"
libfmcom[1]="            --sysconfdir=/etc \\"
libfmcom[2]="            --disable-static"
libfmcom[3]="make"
libfmcom[4]="make DESTDIR=\$CUR_DIR install"
libfmcom[5]="install -dm755 /etc/xdg/libfm"
libfmcom[6]="install -Dm644 ../etc/xdg/libfm/* /etc/xdg/libfm"
libfmcom[7]="install -m644 ../usr/bin/* /usr/bin"
libfmcom[8]="rm ../usr/include/libfm-1.0/{fm-extra.h,fm-version.h,fm-xml-file.h}"
libfmcom[9]="install -m644 ../usr/include/libfm-1.0/* /usr/include/libfm-1.0"
libfmcom[10]="rm ../usr/lib/{libfm-extra.*,pkgconfig/libfm-extra.pc}"
libfmcom[11]="cp -r ../usr/lib/* /usr/lib/"
libfmcom[12]="install -m644 ../usr/share/applications/* /usr/share/applications"
libfmcom[13]="cp -r ../usr/share/libfm /usr/share/"
libfmcom[14]="cp -r ../usr/share/locale/* /usr/share/locale/"
libfmcom[15]="install -m644 ../usr/share/man/man1/* /usr/share/man/man1"
libfmcom[16]="install -m644 ../usr/share/mime/packages/libfm.xml /usr/share/mime/packages"
rtrncommands=(${libfmcom[@]})
} # end libfmComms
#
libgphoto2Comms () {
local libgphotocom=""
libgphotocom[0]="./configure --prefix=/usr \\"
libgphotocom[1]="            --disable-rpath"
libgphotocom[2]="make"
libgphotocom[3]="make install"
libgphotocom[4]="mkdir -pv /usr/lib/udev/hwdb.d"
libgphotocom[5]="mkdir -pv /usr/lib/udev/rules.d"
libgphotocom[6]="LD_LIBRARY_PATH=/usr/lib\${LD_LIBRARY_PATH:+:}\$LD_LIBRARY_PATH \\"
libgphotocom[7]="CAMLIBS=/usr/lib/libgphoto2/\${pkgVers} \\"
libgphotocom[8]="/usr/lib/libgphoto2/print-camera-list hwdb > \\"
libgphotocom[9]="/usr/lib/udev/hwdb.d/20-gphoto.hwdb"
libgphotocom[10]="LD_LIBRARY_PATH=/usr/lib\${LD_LIBRARY_PATH:+:}\$LD_LIBRARY_PATH \\"
libgphotocom[11]="CAMLIBS=/usr/lib/libgphoto2/\${pkgVers} \\"
libgphotocom[12]="/usr/lib/libgphoto2/print-camera-list udev-rules version 201 > \\"
libgphotocom[13]="/usr/lib/udev/rules.d/40-gphoto.rules"
libgphotocom[14]="rm -fv /usr/include/gphoto2/gphoto2"
rtrncommands=(${libgphotocom[@]})
} #end libgphotoComms
#
libmicrohttpdComms () {
local libmicrocom=""
libmicrocom[0]="./configure --prefix=/usr --disable-examples \\"
libmicrocom[1]="            --disable-dependency-tracking --enable-largefile \\"
libmicrocom[2]="            --enable-curl --enable-messages --enable-https --with-pic"
libmicrocom[3]="make"
libmicrocom[4]="make install"
rtrncommands=(${libmicrocom[@]})
} # end libmicrohttpdComms
#
libplistComms () {
libplistcom=""
libplistcom[0]="./configure --prefix=/usr"
libplistcom[1]="sed -i -e 's/ -shared / -Wl,-O1,--as-needed\0/g' libtool"
libplistcom[2]="make"
libplistcom[3]="make check"
libplistcom[4]="make install"
libplistcom[5]="install -D -m644 cython/plist.pxd /usr/include/plist/cython/plist.pxd"
rtrncommands=(${libplistcom[@]})
} # end libplistComms
#
libproxyComms () {
local libproxycom=""
libproxycom[0]="mkdir -pv build"
libproxycom[1]="cd build"
libproxycom[2]="cmake -DCMAKE_INSTALL_PREFIX=/usr \\"
libproxycom[3]="      -DLIBEXEC_INSTALL_DIR=/usr/lib/libproxy \\"
libproxycom[4]="      -DCMAKE_BUILD_TYPE=Release \\"
libproxycom[5]="      -DCMAKE_SKIP_RPATH=ON \\"
libproxycom[6]="      -DWITH_WEBKIT3=OFF \\"
libproxycom[7]="      -DWITH_MOZJS=OFF \\"
libproxycom[8]="      -DPYTHON_EXECUTABLE:FILEPATH=/usr/bin/python2 \\"
libproxycom[9]="      .."
libproxycom[10]="make"
libproxycom[11]="make install"
rtrncommands=(${libproxycom[@]})
} # end libproxyComms
#
libsassComms () {
local libsasscom=""
libsasscom[0]="export LIBSASS_VERSION=\"$libsass_vers\""
libsasscom[1]="autoreconf -i"
libsasscom[2]="./configure --prefix=/usr"
libsasscom[3]="make"
libsasscom[4]="make install"
rtrncommands=(${libsasscom[@]})
} # end libsassComms
#
libsshComms () {
local libsshcom=""
libsshcom[0]="sed 's/cmocka_unit_test(torture_path_expand_tilde_unix),//' -i tests/unittests/torture_misc.c"
libsshcom[1]="if [ -d build ]; then rm -rf build; fi"
libsshcom[2]="mkdir build"
libsshcom[3]="cd build"
libsshcom[4]="cmake -DCMAKE_INSTALL_PREFIX=/usr \\"
libsshcom[5]="      -DCMAKE_BUILD_TYPE=Release  \\"
libsshcom[6]="      -DWITH_GSSAPI=OFF           \\"
libsshcom[7]="      -DWITH_GCRYPT=ON            \\"
libsshcom[8]="      -DWITH_TESTING=OFF  .."
libsshcom[9]="make"
libsshcom[10]="make install"
rtrncommands=(${libsshcom[@]})
} # end libsshComms
#
libvirtComms () {
local libpvirtcom=""
libvirtcom[0]="./configure --prefix=/usr \\"
libvirtcom[1]="            --libexec=/usr/lib/libvirt \\"
libvirtcom[2]="            --sbindir=/usr/bin \\"
libvirtcom[3]="            --with-storage-lvm \\"
libvirtcom[4]="            --with-udev --disable-static \\"
libvirtcom[5]="            --with-init-script=systemd"
libvirtcom[6]="make"
libvirtcom[7]="make install"
rtrncommands=(${libvirtcom[@]})
} # end libvirtComms
#
lircComms () {
lirccom=""
lirccom[0]="autoreconf -fi"
lirccom[1]="automake -ac"
lirccom[2]="HAVE_UINPUT=1"
lirccom[3]="./configure --prefix=/usr \\"
lirccom[4]="            --sbindir=/usr/bin \\"
lirccom[5]="            --sysconfdir=/etc \\"
lirccom[6]="            --localstatedir=/var"
lirccom[7]="make"
lirccom[8]="make DESTDIR="\$CUR_DIR" -j1 install"
rtrncommands=(${lirccom[@]})
} # end lircComms
#
lldbComms () {
local lldbcom=""
lldbcom[0]="python2 -m compileall /usr/lib/python${py2series}/site-packages/lldb"
lldbcom[1]="python2 -O -m compileall /usr/lib/python${py2series}/site-packages/lldb"
rtrncommands=(${lldbcom[@]})
} # end lldbComms
#
llvmComms () {
local llvmcom=""
llvmcom[0]="tar -Jxf cfe-\${llvmvers}.src.tar.xz"
llvmcom[1]="tar -Jxf clang-tools-extra-\${llvmvers}.src.tar.xz"
llvmcom[2]="tar -Jxf compiler-rt-\${llvmvers}.src.tar.xz"
llvmcom[3]="tar -Jxf lldb-\${llvmvers}.src.tar.xz"
llvmcom[4]="tar -Jxf llvm-\${llvmvers}.src.tar.xz"
llvmcom[5]="cd \$(tar vxf llvm-\${llvmvers}.src.tar.xz | awk -F\\/ 'END{print \$1}')"
llvmcom[6]="mv ../cfe-\${llvmvers}.src tools/clang"
llvmcom[7]="mv ../clang-tools-extra-\${llvmvers}.src tools/clang/tools/extra"
llvmcom[8]="mv ../compiler-rt-\${llvmvers}.src projects/compiler-rt"
llvmcom[9]="mv ../lldb-\${llvmvers}.src tools/lldb"
llvmcom[10]="mkdir build"
llvmcom[11]="cd build"
llvmcom[12]="cmake -DCMAKE_BUILD_TYPE=Release \\"
llvmcom[13]="      -DCMAKE_INSTALL_PREFIX=/usr \\"
llvmcom[14]="      -DLLVM_BUILD_LLVM_DYLIB=ON \\"
llvmcom[15]="      -DLLVM_LINK_LLVM_DYLIB=ON \\"
llvmcom[16]="      -DLLVM_ENABLE_FFI=ON \\"
llvmcom[17]="      -DFFI_INCLUDE_DIR=\$(pkg-config --variable=includedir libffi) \\"
llvmcom[18]="      -DLLVM_BINUTILS_INCDIR=/usr/include \\"
llvmcom[19]="      .."
llvmcom[20]="make"
llvmcom[21]="sed -i '/lldb\\/cmake_install.cmake/d' tools/cmake_install.cmake"
llvmcom[22]="make install"
llvmcom[23]="mkdir -pv /usr/src/programming/llvm/lldb"
llvmcom[24]='make -C tools/lldb DESTDIR="/usr/src/programming/llvm/lldb" install'
llvmcom[25]="ln -s ../LLVMgold.so /usr/lib/bfd-plugins/LLVMgold.so"
llvmcom[26]="mv /usr/libexec/{ccc,c++}-analyzer /usr/lib/clang/"
llvmcom[27]="install -m755 lib/liblldb.so.3.9.0 /usr/lib/liblldb.so.3.9.0"
llvmcom[28]="ln -sv liblldb.so.3.9.0 /usr/lib/liblldb.so"
llvmcom[27]="sed -i 's|libexec|lib/clang| /usr/bin/scan-build"
llvmcom[28]="# use python 2"
llvmcom[29]="sed -i 's|/usr/bin/env python|&2|' \\"
llvmcom[30]="      /usr/bin/scan-view \\"
llvmcom[31]="      /usr/bin/git-clang-format \\"
llvmcom[32]="      /usr/share/clang/clang-format-diff.py"
rtrncommands=(${llvmcom[@]})
} # end llvmComms
#
lockdevComms () {
local lockdevcom=""
lockdevcom[0]="patch -Np1 -i ../lockdev_1.0.3-1.6.patch"
lockdevcom[1]='sed -i "s|CFLAGS	= -g|CFLAGS	= -g -fPIC|" Makefile'
lockdevcom[2]="patch -Np1 -i ../lockdev_build.patch"
lockdevcom[3]="patch -Np1 -i ../lockdev_gcc-4.7.patch"
lockdevcom[4]='export CFLAGS="-march=native -O2 -pipe -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=2"'
lockdevcom[5]='make CFLAGS="${CFLAGS} -D_PATH_LOCK=\\\"/run/lock/lockdev\\\" -fPIC"'
lockdevcom[6]="sed -i '/install -m755 -d/d' Makefile # don't change permissions of dirs"
lockdevcom[7]="make basedir=/usr install"
rtrncommands=(${lockdevcom[@]})
} # end lockdevComms
#
lzoComms () {
local lzocom=""
lzocom[0]="./configure --prefix=/usr --enable-shared"
lzocom[1]="make"
lzocom[2]="CFLAGS='-march=native -O2 -pipe -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=2'"
lzocom[3]="LDFLAGS='-Wl,-O1,--sort-common,--as-needed,-z,relro'"
lzocom[4]="gcc \$CFLAGS -fpic -Iinclude/lzo -o minilzo/minilzo.o -c minilzo/minilzo.c"
lzocom[5]="gcc \$LDFLAGS -shared -o libminilzo.so.0 -Wl,-soname,libminilzo.so.0 minilzo/minilzo.o"
lzocom[6]="make install"
lzocom[7]="install -m 755 libminilzo.so.0 /usr/lib"
lzocom[8]="install -p -m 644 minilzo/minilzo.h /usr/include/lzo"
lzocom[9]="ln -sv libminilzo.so.0 /usr/lib/libminilzo.so"
rtrncommands=(${lzocom[@]})
} # end lzoComms
#
minizipComms () {
local minizipcom=""
minizipcom[0]="./configure --prefix=/usr"
minizipcom[1]="make"
minizipcom[2]="cd contrib/minizip"
minizipcom[3]="cp Makefile Makefile.orig"
minizipcom[4]="cp ../README.contrib readme.txt"
minizipcom[5]="autoreconf --install"
minizipcom[6]="./configure --prefix=/usr --enable-static=no"
minizipcom[7]="make"
minizipcom[8]="make install"
minizipcom[9]="rm -v /usr/include/minizip/crypt.h"
rtrncommands=(${minizipcom[@]})
} # end minizipComms
#
mpiComms () {
local mpicom=""
mpicom[0]="./configure --prefix=/usr \\"
mpicom[1]="            --with-udevdir=/usr/lib/udev"
mpicom[2]='LANG="en_US.UTF-8" make'
mpicom[3]="make install"
rtrncommands=(${mpicom[@]})
} # end mpiComms
#
netctlComms () {
local netctlcom=""
netctlcom[0]="make install"
netctlcom[1]="install -D -m644 contrib/bash-completion /usr/share/bash-completion/completions/netctl"
netctlcom[2]="install -D -m644 contrib/zsh-completion /usr/share/zsh/site-functions/_netctl"
rtrncommands=(${netctlcom[@]})
} # end netctlComms
#
netctldestdirComms () {
local netctldestdircom=""
netctldestdircom[0]="make DESTDIR=\${CUR_DIR} systemdsystemunitdir=/usr/lib/systemd/system install"
netctldestdircom[1]="install -D -m644 contrib/bash-completion /usr/share/bash-completion/completions/netctl"
netctldestdircom[2]="install -D -m644 contrib/zsh-completion /usr/share/zsh/site-functions/_netctl"
rtrncommands=(${netctldestdircom[@]})
} # end netctldestdirComms
#
networkmanagerComms () {
local nmcom=""
nmcom[0]="meson_args=("
nmcom[1]="    -D b_lto=false"
nmcom[2]="    -D dbus_conf_dir=/usr/share/dbus-1/system.d"
nmcom[3]="    -D dist_version=\"${networkmanagervers}\""
nmcom[4]="    -D session_tracking_consolekit=false"
nmcom[5]="    -D suspend_resume=systemd"
nmcom[6]="    -D modify_system=true"
nmcom[7]="    -D polkit_agent=true"
nmcom[8]="    -D selinux=false"
nmcom[9]="    -D iwd=true"
nmcom[10]="    -D ppp=false"
nmcom[11]="    -D libnm_glib=true"
nmcom[12]="    -D bluez5_dun=true"
nmcom[13]="    -D config_plugins_default=keyfile,ibft"
nmcom[14]="    -D ibft=true"
nmcom[15]="    -D docs=false"
nmcom[16]="    -D more_asserts=no"
nmcom[17]="    -D more_logging=false"
nmcom[18]="    -D qt=false"
nmcom[19]="    -D libaudit=no"
nmcom[20]="    -D teamdctl=false"
nmcom[21]="    -D json_validation=false"
nmcom[22]="    -D ovs=false"
nmcom[23]=")"
nmcom[24]="arch-meson NetworkManager build \"\${meson_args[@]}\""
nmcom[25]="ninja -C build"
nmcom[26]="meson install -C build"
nmcom[27]='cat >> /etc/NetworkManager/NetworkManager.conf << "EOF"'
nmcom[28]="[main]"
nmcom[29]="plugins=keyfile"
nmcom[30]="dhcp=dhclient"
nmcom[31]="dns=default"
nmcom[32]="# Set static hostname"
nmcom[33]="[keyfile]"
nmcom[34]="hostname=gt70-dom"
nmcom[35]="EOF"
rtrncommands=(${nmcom[@]})
} # end networkmanagerComms
#
nodejsComms () {
local nodejscom=""
nodejscom[0]="./configure --prefix=/usr          \\"
nodejscom[1]="            --with-intl=system-icu \\"
nodejscom[2]="            --without-npm          \\"
nodejscom[3]="            --shared-openssl       \\"
nodejscom[4]="            --shared-zlib          \\"
nodejscom[5]="            --shared-libuv         \\"
nodejscom[6]="            --shared-nghttp2"
nodejscom[7]="make"
nodejscom[8]="make install"
rtrncommands=(${nodejscom[@]})
} # end nodejsComms
#
nvidiaComms () {
local nvcom=""
nvcom[0]="patch -Np1 -i ../nvidia-fs62142.patch"
nvcom[1]="cd kernel"
nvcom[2]="make SYSSRC=/usr/lib/modules/\${_kernver}/build module"
nvcom[3]="mkdir -pv /usr/lib/modules/\${_extramodules}"
nvcom[4]="install -D -m644 nvidia.ko \\"
nvcom[5]="/usr/lib/modules/\${_extramodules}/nvidia.ko"
nvcom[6]="install -D -m644 nvidia-modeset.ko \\"
nvcom[7]="/usr/lib/modules/\${_extramodules}/nvidia-modeset.ko"
nvcom[8]="install -D -m644 nvidia-drm.ko \\"
nvcom[9]="/usr/lib/modules/\${_extramodules}/nvidia-drm.ko"
nvcom[10]="install -D -m644 nvidia-uvm.ko \\"
nvcom[11]="/usr/lib/modules/\${_extramodules}/nvidia-uvm.ko"
nvcom[12]="gzip /usr/lib/modules/\${_extramodules}/*.ko"
nvcom[13]="install -d -m755 /usr/lib/modprobe.d"
nvcom[14]="if [ ! -e /usr/lib/modprobe.d/nvidia.conf ]; then"
nvcom[15]='  echo "blacklist nouveau" > /usr/lib/modprobe.d/nvidia.conf'
nvcom[16]="fi"
nvcom[17]="if  [ ! -e /usr/lib/modules/\${_extramodules}/version ]; then"
nvcom[18]='  echo $_kernver > /usr/lib/modules/${_extramodules}/version'
nvcom[19]="fi"
nvcom[20]="if [ ! -L /usr/lib/modules/\${_kernver}/extramodules ]; then"
nvcom[21]="  ln -sv ../\${_extramodules} /usr/lib/modules/\${_kernver}/extramodules"
nvcom[22]="fi"
rtrncommands=(${nvcom[@]})
} # end nvidiaComms
#
nvutilsComms () {
local nvutilscom=""
nvutilscom[0]="bsdtar -xf nvidia-persistenced-init.tar.bz2"
nvutilscom[1]="install -D -m755 nvidia_drv.so /usr/lib/xorg/modules/drivers/nvidia_drv.so"
nvutilscom[2]="install -D -m755 libglxserver_nvidia.so.\${pkgver} /usr/lib/nvidia/xorg/libglxserver_nvidia.so.\${pkgver}"
nvutilscom[3]="ln -s libglxserver_nvidia.so.\${pkgver} /usr/lib/nvidia/xorg/libglxserver_nvidia.so.1"
nvutilscom[4]="ln -s libglxserver_nvidia.so.\${pkgver} /usr/lib/nvidia/xorg/libglxserver_nvidia.so"
nvutilscom[5]="install -D -m755 libGLX_nvidia.so.\${pkgver} /usr/lib/libGLX_nvidia.so.\${pkgver}"
nvutilscom[6]="install -D -m755 libEGL.so.1.1.0 /usr/lib/nvidia/libEGL.so.1.1.0"
nvutilscom[7]="install -D -m755 libGL.so.1.7.0 /usr/lib/nvidia/libGL.so.1.7.0"
nvutilscom[8]="install -D -m755 libEGL_nvidia.so.\${pkgver} /usr/lib/libEGL_nvidia.so.\${pkgver}"
nvutilscom[9]="install -D -m755 libGLESv1_CM_nvidia.so.\${pkgver} /usr/lib/libGLESv1_CM_nvidia.so.\${pkgver}"
nvutilscom[10]="install -D -m755 libGLESv2_nvidia.so.\${pkgver} /usr/lib/libGLESv2_nvidia.so.\${pkgver}"
nvutilscom[11]="install -D -m644 10_nvidia.json /usr/share/glvnd/egl_vendor.d/10_nvidia.json"
nvutilscom[12]="install -D -m755 libnvidia-glcore.so.\${pkgver} /usr/lib/libnvidia-glcore.so.\${pkgver}"
nvutilscom[13]="install -D -m755 libnvidia-eglcore.so.\${pkgver} /usr/lib/libnvidia-eglcore.so.\${pkgver}"
nvutilscom[14]="install -D -m755 libnvidia-glsi.so.\${pkgver} /usr/lib/libnvidia-glsi.so.\${pkgver}"
nvutilscom[15]="install -D -m755 libnvidia-ifr.so.\${pkgver} /usr/lib/libnvidia-ifr.so.\${pkgver}"
nvutilscom[16]="install -D -m755 libnvidia-fbc.so.\${pkgver} /usr/lib/libnvidia-fbc.so.\${pkgver}"
nvutilscom[17]="install -D -m755 libnvidia-encode.so.\${pkgver} /usr/lib/libnvidia-encode.so.\${pkgver}"
nvutilscom[18]="install -D -m755 libnvidia-cfg.so.\${pkgver} /usr/lib/libnvidia-cfg.so.\${pkgver}"
nvutilscom[19]="install -D -m755 libnvidia-ml.so.\${pkgver} /usr/lib/libnvidia-ml.so.\${pkgver}"
nvutilscom[20]="install -D -m755 libnvidia-glvkspirv.so.\${pkgver} /usr/lib/libnvidia-glvkspirv.so.\${pkgver}"
nvutilscom[21]="install -D -m644 nvidia_icd.json /usr/share/vulkan/icd.d/nvidia_icd.json"
nvutilscom[22]="install -D -m644 nvidia_layers.json /usr/share/vulkan/implicit_layer.d/nvidia_layers.json"
nvutilscom[23]="install -D -m755 libvdpau_nvidia.so.\${pkgver} /usr/lib/vdpau/libvdpau_nvidia.so.\${pkgver}"
nvutilscom[24]="install -D -m755 libnvidia-tls.so.\${pkgver} /usr/lib/libnvidia-tls.so.\${pkgver}"
nvutilscom[25]="install -D -m755 libcuda.so.\${pkgver} /usr/lib/libcuda.so.\${pkgver}"
nvutilscom[26]="install -D -m755 libnvcuvid.so.\${pkgver} /usr/lib/libnvcuvid.so.\${pkgver}"
nvutilscom[27]="install -D -m755 libnvidia-ptxjitcompiler.so.\${pkgver} /usr/lib/libnvidia-ptxjitcompiler.so.\${pkgver}"
nvutilscom[28]="install -D -m755 libnvidia-fatbinaryloader.so.\${pkgver} /usr/lib/libnvidia-fatbinaryloader.so.\${pkgver}"
nvutilscom[29]="install -D -m755 libnvoptix.so.\${pkgver} /usr/lib/libnvoptix.so.\${pkgver}"
nvutilscom[30]="install -D -m755 libnvidia-rtcore.so.\${pkgver} /usr/lib/libnvidia-rtcore.so.\${pkgver}"
nvutilscom[31]="install -D -m755 libnvidia-cbl.so.\${pkgver} /usr/lib/libnvidia-cbl.so.\${pkgver}"
nvutilscom[32]="install -D -m755 libnvidia-opticalflow.so.\${pkgver} /usr/lib/libnvidia-opticalflow.so.\${pkgver}"
nvutilscom[33]="install -D -m755 nvidia-debugdump /usr/bin/nvidia-debugdump"
nvutilscom[34]="install -D -m755 nvidia-xconfig /usr/bin/nvidia-xconfig"
nvutilscom[35]="install -D -m644 nvidia-xconfig.1.gz /usr/share/man/man1/nvidia-xconfig.1.gz"
nvutilscom[36]="install -D -m755 nvidia-bug-report.sh /usr/bin/nvidia-bug-report.sh"
nvutilscom[37]="install -D -m755 nvidia-smi /usr/bin/nvidia-smi"
nvutilscom[38]="install -D -m644 nvidia-smi.1.gz /usr/share/man/man1/nvidia-smi.1.gz"
nvutilscom[39]="install -D -m755 nvidia-cuda-mps-server /usr/bin/nvidia-cuda-mps-server"
nvutilscom[40]="install -D -m755 nvidia-cuda-mps-control /usr/bin/nvidia-cuda-mps-control"
nvutilscom[41]="install -D -m644 nvidia-cuda-mps-control.1.gz /usr/share/man/man1/nvidia-cuda-mps-control.1.gz"
nvutilscom[42]="install -D -m4755 nvidia-modprobe /usr/bin/nvidia-modprobe"
nvutilscom[43]="install -D -m644 nvidia-modprobe.1.gz /usr/share/man/man1/nvidia-modprobe.1.gz"
nvutilscom[44]="install -D -m755 nvidia-persistenced /usr/bin/nvidia-persistenced"
nvutilscom[45]="install -D -m644 nvidia-persistenced.1.gz /usr/share/man/man1/nvidia-persistenced.1.gz"
nvutilscom[46]="install -D -m644 nvidia-persistenced-init/systemd/nvidia-persistenced.service.template /usr/lib/systemd/system/nvidia-persistenced.service"
nvutilscom[47]="sed -i 's/__USER__/nvidia-persistenced/' /usr/lib/systemd/system/nvidia-persistenced.service"
nvutilscom[48]="install -D -m644 nvidia-application-profiles-\${pkgver}-rc /usr/share/nvidia/nvidia-application-profiles-\${pkgver}-rc"
nvutilscom[49]="install -D -m644 nvidia-application-profiles-\${pkgver}-key-documentation /usr/share/nvidia/nvidia-application-profiles-\${pkgver}-key-documentation"
nvutilscom[50]="install -D -m644 nvidia-suspend.service /usr/lib/systemd/system/nvidia-suspend.service"
nvutilscom[51]="install -D -m644 nvidia-hibernate.service /usr/lib/systemd/system/nvidia-hibernate.service"
nvutilscom[52]="install -D -m644 nvidia-resume.service /usr/lib/systemd/system/nvidia-resume.service"
nvutilscom[53]="install -D -m755 nvidia /usr/lib/systemd/system-sleep/nvidia"
nvutilscom[54]="install -D -m755 nvidia-sleep.sh /usr/bin/nvidia-sleep.sh"
nvutilscom[55]="install -D -m644 nvidia-drm-outputclass.conf /usr/share/X11/xorg.conf.d/nvidia-drm-outputclass.conf"
rtrncommands=(${nvutilscom[@]})
} #end nvutilsComms
#
odeComms () {
local odecom=""
odecom[0]="./configure --prefix=/usr \\"
odecom[1]="            --enable-shared \\"
odecom[2]="            --enable-libccd \\"
odecom[3]="            --enable-double-precision"
odecom[4]="make"
odecom[5]="make install"
rtrncommands=(${odecom[@]})
} # end odeComms
#
openboxComms () {
local openboxcom=""
openboxcom[0]="2to3-3.7 -w data/autostart/openbox-xdg-autostart"
openboxcom[1]="sed 's/python/python3/' -i data/autostart/openbox-xdg-autostart"
openboxcom[2]="./configure --prefix=/usr     \\"
openboxcom[3]="            --sysconfdir=/etc \\"
openboxcom[4]="            --libexecdir=/usr/lib/openbox \\"
openboxcom[5]="            --disable-static  \\"
openboxcom[6]="            --with-x          \\"
openboxcom[7]="            --enable-startup-notification \\"
openboxcom[8]="            --docdir=/usr/share/doc/openbox-3.6.1"
openboxcom[9]="make"
openboxcom[10]="make install"
openboxcom[11]="mkdir -pv /usr/share/xsessions"
openboxcom[12]='cat >> /usr/share/xsessions/openbox.desktop << "EOF"'
openboxcom[13]="[Desktop Entry]"
openboxcom[14]="Name=Openbox"
openboxcom[15]="Comment=Log in using the Openbox window manager (without a session manager)"
openboxcom[16]="Exec=/usr/bin/openbox-session"
openboxcom[17]="TryExec=/usr/bin/openbox-session"
openboxcom[18]="Icon=openbox.png"
openboxcom[19]="Type=Application"
openboxcom[20]="EOF"
rtrncommands=(${openboxcom[@]})
} # end openboxComms
#
openobexComms () {
local openobexcom=""
openobexcom[0]="cmake -DCMAKE_BUILD_TYPE=Release \\"
openobexcom[1]="      -DCMAKE_SKIP_RPATH=ON \\"
openobexcom[2]="      -DCMAKE_INSTALL_PREFIX=/usr \\"
openobexcom[3]="      -DCMAKE_INSTALL_SBINDIR=/usr/bin \\"
openobexcom[4]="      -DCMAKE_INSTALL_LIBDIR=/usr/lib \\"
openobexcom[5]="      -DCMAKE_INSTALL_UDEVRULESDIR=/usr/lib/udev/rules.d \\"
openobexcom[6]="      -DCMAKE_INSTALL_CMAKEBASEDIR=/usr/lib/cmake \\"
openobexcom[7]="      -Wno-dev                         \\"
openobexcom[8]="      ."
openobexcom[9]="make all"
openobexcom[10]="make install"
openobexcom[11]="cp apps/lib/*.h /usr/include/openobex/"
rtrncommands=(${openobexcom[@]})
} # end openobexComms
#
openvpnComms () {
local openvpncom=""
openvpncom[0]="autoreconf --force --install"
openvpncom[1]="CONFIG_SHELL=/bin/bash ./configure \\"
openvpncom[2]="  --prefix=/usr \\"
openvpncom[3]="  --sbindir=/usr/bin \\"
openvpncom[4]="  --enable-iproute2 \\"
openvpncom[5]="  --enable-pkcs11 \\"
openvpncom[6]="  --enable-plugins \\"
openvpncom[7]="  --enable-systemd \\"
openvpncom[8]="  --enable-x509-alt-username"
openvpncom[9]="make"
openvpncom[10]="make install"
openvpncom[11]="install -d -m755 -g openvpn /etc/openvpn/{client,server}"
openvpncom[12]="install -d -m755 /usr/share/openvpn"
openvpncom[13]="cp -r sample/sample-config-files /usr/share/openvpn/examples"
openvpncom[14]='for FILE in $(find contrib -type f); do'
openvpncom[15]='  case "$(file --brief --mime-type --no-sandbox "${FILE}")" in'
openvpncom[16]='    "text/x-shellscript") install -D -m0755 "${FILE}" "/usr/share/openvpn/${FILE}" ;;'
openvpncom[17]='    *) install -D -m0644 "${FILE}" "/usr/share/openvpn/${FILE}" ;;'
openvpncom[18]="  esac"
openvpncom[19]="done"
rtrncommands=(${openvpncom[@]})
} # end openvpnComms
#
perlmodstnrdComms () {
local perlmodstnrdcom=""
perlmodstnrdcom[0]="PERL_USE_UNSAFE_INC=1"
perlmodstnrdcom[1]="perl Makefile.PL"
perlmodstnrdcom[2]="make"
perlmodstnrdcom[3]="make install"
rtrncommands=(${perlmodstnrdcom[@]})
} # end perlmodstnrdComms
#
perlmodbuildComms () {
local perlmodbuildcom=""
perlmodbuildcom[0]="perl Build.PL"
perlmodbuildcom[1]="./Build"
perlmodbuildcom[2]="./Build install"
rtrncommands=(${perlmodbuildcom[@]})
} # perlmodbuildComms
#
pepperflashComms () {
local pepperflashcom=""
pepperflashcom[0]="install -d /usr/lib/PepperFlash"
pepperflashcom[1]="install -m644 opt/google/chrome/PepperFlash/* /usr/lib/PepperFlash"
rtrncommands=(${pepperflashcom[@]})
} # end pepperflashComms
#
pkcs11helperComms () {
local pkcs11helpercom=""
pkcs11helpercom[0]="libtoolize"
pkcs11helpercom[1]="aclocal"
pkcs11helpercom[2]="autoheader"
pkcs11helpercom[3]="automake --add-missing"
pkcs11helpercom[4]="autoreconf -v"
pkcs11helpercom[5]="./configure --prefix=/usr"
pkcs11helpercom[6]="make"
pkcs11helpercom[7]="make install"
rtrncommands=(${pkcs11helpercom[@]})
} # end pkcs11helperComms
#
portsmfComms () {
local portsmfcom=""
portsmfcom[0]="printf \"%s\" \"\$(svnversion | tr -d 'A-z')\""
portsmfcom[1]="patch -p1 -i ../portsmf-shared.patch"
portsmfcom[2]="autoreconf -vfi"
portsmfcom[3]="chmod 755 configure"
portsmfcom[4]="./configure --prefix=/usr --libdir=/usr/lib --includedir=/usr/include/portsmf"
portsmfcom[5]="make"
portsmfcom[6]="make includedir=/usr/include/portsmf install"
portsmfcom[7]="install -D -m644 portSMF.pc -t /usr/lib/pkgconfig/"
rtrncommands=(${portsmfcom[@]})
} # end portsmfComms
#
primusComms () {
local primuscom=""
primuscom[0]="patch -Np1 -i ../primus-register_cleanup.patch"
primuscom[1]="make"
primuscom[2]="sed -e '/^PRIMUS_libGL=/cPRIMUS_libGL=/usr/\\\\\$LIB/primus' \\"
primuscom[3]="    -e '/^exec/iexport __GLVND_DISALLOW_PATCHING=1' \\"
primuscom[4]="    primusrun | install -D /dev/stdin /usr/bin/primusrun"
primuscom[5]="install -D lib/libGL.so.1 /usr/lib/primus/libGL.so.1"
primuscom[6]="install -D primus.bash-completion /usr/share/bash-completion/completions/primusrun"
primuscom[7]="gzip -9 primusrun.1"
primuscom[8]="install -D primusrun.1.gz /usr/share/man/man1/primusrun.1.gz"
rtrncommands=(${primuscom[@]})
} # end primusComms
#
pyComms () {
local pycom=""
case $pkgname in
   py2-lxml)
         pycom[0]="export LC_CTYPE=en_US.UTF-8"
         pycom[1]="python2 setup.py build"
         pycom[2]="python2 setup.py install --skip-build --optimize=1"
   ;;
   py2-contextlib2|py2-cssselect|py2-idna|py2-import-meta|py2-kiwisolver|py2-nltk|py2-ordered-set|py2-prmpt_tlkit|py2-theano)
         pycom[0]="python2 setup.py build"
         pycom[1]="python2 setup.py install --optimize=1"
   ;;
   py2-pycairo)
          pycom[0]="python2 setup.py build"
          pycom[1]="python2 setup.py install --optimize=1"
          pycom[2]="python2 setup.py install_pycairo_header"
          pycom[3]="python2 setup.py install_pkgconfig "
   ;;
   py2-funcsigs|py2-ptyprocess|py2-bckptshutil|py2-pyasn1)
          pycom[0]="python2 setup.py install --prefix=/usr --optimize=0"
   ;;
   py2-future)
          pycom[0]="python2 setup.py install --optimize=1"
	  pycom[1]="mv /usr/bin/futurize{,2}"
	  pycom[2]="mv /usr/bin/pasteurize{,2}"
   ;;
   py2-pexpect)
          pycom[0]="sed -i 's:env python:env python2:' pexpect/FSM.py"
          pycom[1]="python2 setup.py install --prefix=/usr --optimize=0"
   ;;
   py2-bflc|py2-pyparsing)
          pycom[0]="python2 setup.py build"
          pycom[1]="python2 setup.py install --prefix=/usr --optimize=1"
   ;;
   py2-pytz)
          pycom[0]="sed -i 's_#!/usr/bin/env python_#!/usr/bin/env python2_' pytz/tzfile.py"
          pycom[1]="python2 setup.py install"
   ;;
   py2-setuptools_scm|py2-path)
          pycom[0]="export SETUPTOOLS_SCM_PRETEND_VERSION=\$pkgVers"
          pycom[1]="python2 setup.py build"
          pycom[2]="python2 setup.py install --skip-build --optimize=1"
   ;;
   py2-pillow)
          pycom[0]="python2 setup.py build"
          pycom[1]="python2 setup.py install --optimize=1"
          pycom[2]="install -m644 -t \"/usr/include/python2.7/\" src/libImaging/*.h"
   ;;
   py2-xdg|py2-wcwidth|py2-six|py2-dateutil|py2-chardet|py2-backports-os)
          pycom[0]="python2 setup.py install --optimize=1"
   ;;
   py2-docutils)
          pycom[0]="python2 setup.py build --build-lib=build/python2"
          pycom[1]="find build/python2 -type f -exec \\"
          pycom[2]="  sed -i '1s,^#! \?/usr/bin/\(env \|\)python$,#!/usr/bin/python2,' {} \;"
          pycom[3]="python2 setup.py build --build-lib=build/python2 \\"
          pycom[4]="                 install --optimize=1"
          pycom[5]="for _f in /usr/bin/rst2*.py; do"
          pycom[6]='  if [ ! -e "${_f%.py}2.py" ]; then'
          pycom[7]='    mv -v "$_f" "${_f%.py}2.py"'
          pycom[8]="  fi"
          pycom[9]="done"
          pycom[10]="if [ ! -e /usr/bin/rstpep2html2.py ]; then"
          pycom[11]="  mv /usr/bin/rstpep2html.py /usr/bin/rstpep2html2.py"
          pycom[12]="fi"
          pycom[13]="# symlink without .py"
          pycom[14]="for _f in /usr/bin/rst2*.py; do"
          pycom[15]='  if [ ! -L "/usr/bin/$(basename $_f .py)" ]; then'
          pycom[16]='    ln -s "$(basename $_f)" "/usr/bin/$(basename $_f .py)"'
          pycom[17]="  fi"
          pycom[18]="done"
          pycom[19]='if [ ! -L "/usr/bin/rstpep2html2" ]; then'
          pycom[20]="  ln -s rstpep2html2.py /usr/bin/rstpep2html2"
          pycom[21]="fi"
   ;;
   py2-mako|py2-decorator|py2-pygments|py2-pysocks|py2-scandir)
          pycom[0]="python2 setup.py build"
          pycom[1]="python2 setup.py install --prefix=/usr --optimize=1"
   ;;
   py2-matplotlib)
          pycom[0]="sed -i '/Subprocess32/d' setup.py"
          pycom[1]='for file in $(find . -name "*.py" -print); do'
          pycom[2]="  sed -i -e 's|^#!.*/usr/bin/python|#!/usr/bin/python2|' \\"
          pycom[3]="         -e 's|^#!.*/usr/bin/env *python|#!/usr/bin/env python2|' \${file}"
          pycom[4]="done"
          pycom[5]="export XDG_RUNTIME_DIR=/tmp"
          pycom[6]="python2 setup.py build"
          pycom[7]="python2 setup.py install -O1 --skip-build --prefix=/usr"
   ;;
   py2-appdirs|py2-m2crypto|py2-markupsafe|py2-pycryptodome|py2-cython|py2-packaging)
          pycom[0]="python2 setup.py build"
          pycom[1]="python2 setup.py install --optimize=1"
   ;;
   py3-pycairo)
          pycom[0]="python3 setup.py build"
          pycom[1]="python3 setup.py install --optimize=1"
          pycom[2]="python3 setup.py install_pycairo_header"
          pycom[3]="python3 setup.py install_pkgconfig "
   ;;
   py3-docutils)
          pycom[0]="python3 setup.py build --build-lib=build/python3"
          pycom[1]="find build/python3 -type f -exec \\"
          pycom[2]="  sed -i '1s,^#! \?/usr/bin/\(env \|\)python$,#!/usr/bin/python3,' {} \;"
          pycom[3]="python3 setup.py build --build-lib=build/python3 \\"
          pycom[4]="                 install --optimize=1"
          pycom[5]="# symlink without .py"
          pycom[6]="for _f in /usr/bin/rst2*.py; do"
          pycom[7]='  if [ ! -L "/usr/bin/$(basename $_f .py)" ]; then'
          pycom[8]='    ln -s "$(basename $_f)" "/usr/bin/$(basename $_f .py)"'
          pycom[9]="  fi"
          pycom[10]="done"
          pycom[11]='if [ ! -L "/usr/bin/rstpep2html" ]; then'
          pycom[12]="  ln -s rstpep2html.py /usr/bin/rstpep2html"
          pycom[13]="fi"
   ;;
   py3-lxml)
         pycom[0]="export LC_CTYPE=en_US.UTF-8"
         pycom[1]="python3 setup.py build"
         pycom[2]="python3 setup.py install --skip-build --optimize=1"
   ;;
   py3-beautsoup|py3-cssselect|py3-dbusmock|py3-kiwisolver|py3-nltk|py3-prmpt_tlkit|py3-pycryptodomex|py3-simplejson|py3-soupsieve|py3-theano)
         pycom[0]="python3 setup.py build"
         pycom[1]="python3 setup.py install --optimize=1"
   ;;
   py3-setuptools_scm|py3-path|py3-import-meta)
          pycom[0]="export SETUPTOOLS_SCM_PRETEND_VERSION=\$pkgVers"
          pycom[1]="python3 setup.py build"
          pycom[2]="python3 setup.py install --skip-build --optimize=1"
   ;;
   py3-numpy)
          pycom[0]="python3 setup.py build"
          pycom[1]="python3 setup.py install --prefix=/usr --optimize=1"
   ;;
   py3-matplotlib|py3-sip)
          pycom[0]="python3 setup.py build"
          pycom[1]="python3 setup.py install --prefix=/usr --optimize=1 --skip-build"
   ;;
   py3-pexpect|py3-pickleshare|py3-ptyprocess)
          pycom[0]="python3 setup.py install --prefix=/usr --optimize=0"
   ;;
   py3-pytz)
          pycom[0]="export LC_ALL=en_US.UTF-8"
          pycom[1]="python3 setup.py install"
          pycom[2]="unset LC_ALL"
   ;;
   py3-pyqt5)
          pycom[0]="sed -i 's|from PyQt5 import sip|pass|g' configure.py"
          pycom[1]="python3 configure.py \\"
          pycom[2]="      --confirm-license \\"
          pycom[3]="      --qsci-api --no-sip-files \\"
          pycom[4]="      -q /opt/qt5/bin/qmake"
          pycom[5]="make"
	  pycom[6]="make install"
          pycom[7]="install -Dm644 PyQt5.api /usr/share/qt/qsci/api/python/PyQt5.api"
          pycom[8]="install -dm755 /usr/share/sip/PyQt5"
          pycom[9]="cp -a sip/* /usr/share/sip/PyQt5"
          pycom[10]="rm -rf /usr/lib/python${py2series}/site-packages/PyQt5/uic/port_v2"
   ;;
   py2-requests)
          pycom[0]="sed -i '/certifi/d' setup.py"
          pycom[1]="patch -p1 -i ../requests-\${cur_vers}-cacerts-1.patch"
          pycom[2]="find . -name '*.py' -exec sed -r 's|^#!(.*)python$|#!\\1python2|' -i {} +"
          pycom[3]="python2 setup.py build"
          pycom[4]="python2 setup.py install --skip-build -O1"
   ;;
   py2-sklearn)
          pycom[0]='sed -e "s|#![ ]*/usr/bin/python$|#!/usr/bin/python2|" \'
          pycom[1]='    -e "s|#![ ]*/usr/bin/env python$|#!/usr/bin/env python2|" \'
          pycom[2]='    -e "s|#![ ]*/bin/env python$|#!/usr/bin/env python2|" \'
          pycom[3]="    -i \$(find . -name '*.py')"
          pycom[4]="python2 setup.py build"
          pycom[5]="python2 setup.py install --prefix=/usr --optimize=1"
   ;;
   py3-sklearn)
          pycom[0]='sed -e "s|#![ ]*/usr/bin/python$|#!/usr/bin/python3|" \'
          pycom[1]='    -e "s|#![ ]*/usr/bin/env python$|#!/usr/bin/env python3|" \'
          pycom[2]='    -e "s|#![ ]*/bin/env python$|#!/usr/bin/env python3|" \'
          pycom[3]="    -i \$(find . -name '*.py')"
          pycom[4]="python3 setup.py build"
          pycom[5]="python3 setup.py install --prefix=/usr --optimize=1"
   ;;
   py2-scipy)
          pycom[0]='export LDFLAGS="-Wall -shared"'
          pycom[1]="for file in \$(find . -name '*.py' -print); do"
          pycom[2]="       sed -i 's_^#!.*/usr/bin/python_#!/usr/bin/python2_' \$file"
          pycom[3]="       sed -i 's_^#!.*/usr/bin/env.*python_#!/usr/bin/env python2_' \$file"
          pycom[4]="done"
          pycom[5]="python2 setup.py config_fc --fcompiler=gnu95 build"
          pycom[6]="python2 setup.py config_fc --fcompiler=gnu95 install \\"
          pycom[7]="    --prefix=/usr --optimize=1"
   ;;
   py3-scipy)
          pycom[0]='export LDFLAGS="-Wall -shared"'
          pycom[1]="for file in \$(find . -name '*.py' -print); do"
          pycom[2]="       sed -i 's_^#!.*/usr/bin/python_#!/usr/bin/python3_' \$file"
          pycom[3]="       sed -i 's_^#!.*/usr/bin/env.*python_#!/usr/bin/env python3_' \$file"
          pycom[4]="done"
          pycom[5]="python3 setup.py config_fc --fcompiler=gnu95 build"
          pycom[6]="python3 setup.py config_fc --fcompiler=gnu95 install \\"
          pycom[7]="    --prefix=/usr --optimize=1"
   ;;
   py3-urllib3)
          pycom[0]="python3 setup.py build"
          pycom[1]="python3 setup.py install --prefix=/usr --optimize=1"
   ;;
   py3-appdirs|py3-mako|py3-markupsafe|py3-pycryptodome|py3-cython|py3-decorator|py3-packaging|py3-pyparsing|py3-cycler)
          pycom[0]="python3 setup.py build"
          pycom[1]="python3 setup.py install --prefix=/usr --optimize=1"
   ;;
   py3-pygments)
          pycom[0]="python3 setup.py build"
          pycom[1]="python3 setup.py install --optimize=1"
          pycom[2]="install -Dm644 external/pygments.bashcomp /usr/share/bash-completion/completions/pygmentize"
   ;;
   py3-xdg|py3-wcwidth|py3-six|py3-dateutil|py3-future|python-ply)
          pycom[0]="python3 setup.py install --optimize=1"
   ;;
   pybind11)
          pycom[0]="python3 setup.py build"
          pycom[1]="python3 setup.py install --skip-build --optimize=1"
          pycom[2]="ln -s ../lib/python${py3series}/site-packages/pybind11-*py${py3series}.egg/pybind11/include/pybind11 /usr/include/pybind11"
          pycom[3]="ln -s ../../lib/python${py3series}/site-packages/pybind11-*py${py3series}.egg/pybind11/share/cmake/pybind11 /usr/share/cmake/pybind11"
   ;;
   py3-slip)
          pycom[0]="make"
          pycom[1]="python3 setup.py install --optimize=1"
   ;;
esac
rtrncommands=(${pycom[@]})
} #end pyComms
#
py2atspiComms () {
py2atspicom=""
py2atspicom[0]="sed '/AC_PATH_XTRA/d' -i configure.ac"
py2atspicom[1]="autoreconf -fi"
py2atspicom[2]="mkdir ../python2"
py2atspicom[3]="cd ../python2"
py2atspicom[4]="../\${srcdir}/configure --prefix=/usr --with-python=/usr/bin/python2"
py2atspicom[5]="make"
py2atspicom[6]="make install"
rtrncommands=(${py2atspicom[@]})
} # end py2atspiComms
#
py2dbusComms () {
local py2dbuscom=""
py2dbuscom[0]="PYTHON=/usr/bin/python2 ./configure --prefix=/usr \\"
py2dbuscom[1]="                        --docdir=/usr/share/doc/dbus-python-1.2.8"
py2dbuscom[2]="make"
py2dbuscom[3]="make install"
rtrncommands=(${py2dbuscom[@]})
} # end py2dbusComms
#
py3dbusComms () {
local py3dbuscom=""
py3dbuscom[0]="PYTHON=/usr/bin/python3 ./configure --prefix=/usr \\"
py3dbuscom[1]="                        --disable-html-docs --disable-api-docs"
py3dbuscom[2]="make"
py3dbuscom[3]="make install"
rtrncommands=(${py3dbuscom[@]})
} # end py3dbusComms
#
py2beakerComms () {
local py2beakercom=""
py2beakercom[0]="sed -i 's#/usr/bin/python#/usr/bin/python2#' beaker/crypto/pbkdf2.py"
py2beakercom[1]="python2 setup.py build"
py2beakercom[2]="python2 setup.py install --optimize=1"
rtrncommands=(${py2beakercom[@]})
} # end py2beakerComms
#
py3beakerComms () {
local py3beakercom=""
py3beakercom[0]="sed -i 's#/usr/bin/python#/usr/bin/python3#' beaker/crypto/pbkdf2.py"
py3beakercom[1]="python3 setup.py build"
py3beakercom[2]="python3 setup.py install --optimize=1"
rtrncommands=(${py3beakercom[@]})
} # end py3beakerComms
#
py2gobject3Comms () {
local py2gobject3com=""
py2gobject3com[0]="if [ -d python2 ]; then rm -rf python2; fi"
py2gobject3com[1]="mkdir python2"
py2gobject3com[2]="cd python2"
py2gobject3com[3]="meson --prefix=/usr -Dpython=python2 .."
py2gobject3com[4]="ninja"
py2gobject3com[5]="ninja install"
rtrncommands=(${py2gobject3com[@]})
} # end py2gobject3Comms
#
py3gobject3Comms () {
local py3gobject3com=""
py3gobject3com[0]="if [ -d python3 ]; then rm -rf python3; fi"
py3gobject3com[1]="mkdir python3"
py3gobject3com[2]="cd python3"
py3gobject3com[3]="meson --prefix=/usr -Dpython=python3 .."
py3gobject3com[4]="ninja"
py3gobject3com[5]="ninja install"
rtrncommands=(${py3gobject3com[@]})
} # end py3gobject3Comms
#
py3ipythonComms () {
local py3ipythoncom=""
py3ipythoncom[0]="pushd ipython-\${pkgVers}"
py3ipythoncom[1]="export PYTHONHASHSEED=0"
py3ipythoncom[2]="python3 setup.py install --prefix=/usr --optimize=1"
py3ipythoncom[3]="popd"
py3ipythoncom[4]="pushd simplegeneric-\${simplevers}"
py3ipythoncom[5]="python3 setup.py install --prefix=/usr --optimize=1"
py3ipythoncom[6]="popd"
py3ipythoncom[7]="pushd backcall-\${backcallvers}"
py3ipythoncom[8]="python3 setup.py install --prefix=/usr --optimize=1"
py3ipythoncom[9]="popd"
py3ipythoncom[10]="pushd ipython-\${pkgVers}/examples/'IPython Kernel'"
py3ipythoncom[11]="sed -i 's/gnome-netstatus-idle/ipython/' *.desktop"
py3ipythoncom[12]="install -Dm644 ipython.desktop /usr/share/applications/ipython.desktop"
py3ipythoncom[13]="popd"
py3ipythoncom[14]="install -Dm644 icon.png /usr/share/pixmaps/ipython.png"
rtrncommands=(${py3ipythoncom[@]})
} # end py3ipythonComms
#
py2setuptoolsComms () {
local py2setuptoolscom=""
py2setuptoolscom[0]="sed -i '/pip.main(args)/d' bootstrap.py"
py2setuptoolscom[1]="rm -r pkg_resources/_vendor"
py2setuptoolscom[2]="sed -e '/tag_build = .post/d' \\"
py2setuptoolscom[3]="    -e '/tag_date = 1/d' \\"
py2setuptoolscom[4]="    -i setup.cfg"
py2setuptoolscom[5]="sed -i -e 's|^#\!.*/usr/bin/env python|#!/usr/bin/env python2|' easy_install.py"
py2setuptoolscom[6]="sed -i -e \"s|'pip'|'pip2'|\" setuptools/tests/{test_develop.py,test_namespaces.py}"
py2setuptoolscom[7]="python2 bootstrap.py"
py2setuptoolscom[8]="python2 setup.py build"
py2setuptoolscom[9]="python2 setup.py install --prefix=/usr --optimize=1 --skip-build"
rtrncommands=(${py2setuptoolscom[@]})
} # end py2setuptoolsComms
#
py3setuptoolsComms () {
local py3setuptoolscom=""
py3setuptoolscom[0]="sed -i '/pip.main(args)/d' bootstrap.py"
py3setuptoolscom[1]="rm -r pkg_resources/_vendor"
py3setuptoolscom[2]="sed -e '/tag_build = .post/d' \\"
py3setuptoolscom[3]="    -e '/tag_date = 1/d' \\"
py3setuptoolscom[4]="    -i setup.cfg"
py3setuptoolscom[5]="sed -i -e 's|^#\!.*/usr/bin/env python|#!/usr/bin/env python3|' setuptools/command/easy_install.py"
py3setuptoolscom[6]="python3 bootstrap.py"
py3setuptoolscom[7]="python3 setup.py build"
py3setuptoolscom[8]="python3 setup.py install --prefix=/usr --optimize=1 --skip-build"
rtrncommands=(${py3setuptoolscom[@]})
} # end py3setuptoolsComms
#
pysolfcComms () {
local pysolfccom=""
pysolfccom[0]="sed -i 's/pysol.py/pysol/' data/pysol.desktop"
pysolfccom[1]="python3 setup.py install --optimize=1"
pysolfccom[2]="mv /usr/bin/pysol.py /usr/bin/pysol"
rtrncommands=(${pysolfccom[@]})
} # end pysolfcComms
#
qt5svgComms () {
local qtsvgcom=""
qtsvgcom[0]="export QT5PREFIX=/opt/qt5"
qtsvgcom[1]="pkgfqn=\${SrcName}\${pkgVers}"
qtsvgcom[2]="mkdir -p build"
qtsvgcom[3]="cd build"
qtsvgcom[4]="/opt/qt5/bin/qmake ../../\${pkgfqn}"
qtsvgcom[5]="make"
qtsvgcom[6]="make install"
qtsvgcom[7]="sed -i '/^QMAKE_PRL_BUILD_DIR/d' /opt/qt5/lib/libQt5Svg.prl"
rtrncommands=(${qtsvgcom[@]})
} # end qtsvgComms
#
qt5x11extrasComms () {
local qtx11extrascom=""
qtx11extrascom[0]="export QT5PREFIX=/opt/qt5"
qtx11extrascom[1]="pkgfqn=\${SrcName}\${pkgVers}"
qtx11extrascom[2]="mkdir -p build"
qtx11extrascom[3]="cd build"
qtx11extrascom[4]="/opt/qt5/bin/qmake ../../\${pkgfqn}"
qtx11extrascom[5]="make"
qtx11extrascom[6]="make install"
qtx11extrascom[7]="sed -i '/^QMAKE_PRL_BUILD_DIR/d' /opt/qt5/lib/libQt5X11Extras.prl"
rtrncommands=(${qtx11extrascom[@]})
} # end qt5x11extrasComms
#
qtwebengineComms () {
local qtwebenginecom=""
qtwebenginecom[0]="mkdir -pv build"
qtwebenginecom[1]="cd build"
qtwebenginecom[2]='/opt/qt5/bin/qmake CONFIG+="proprietary-codecs" \'
qtwebenginecom[3]=' WEBENGINE_CONFIG+="use_proprietary_codecs use_system_ffmpeg" ..'
qtwebenginecom[4]="make"
qtwebenginecom[5]="make install"
qtwebenginecom[6]="# Drop QMAKE_PRL_BUILD_DIR because of references to the build dir"
qtwebenginecom[7]='find /opt/qt5/lib -type f -name "libQt5WebEngine*.prl" \'
qtwebenginecom[8]="  -exec sed -i -e '/^QMAKE_PRL_BUILD_DIR/d' {} \\;"
rtrncommands=(${qtwebenginecom[@]})
} # end qtwebengineComms
#
quarterComms () {
local quartercom=""
quartercom[0]="cd build"
quartercom[1]="export QTDIR=/opt/qt5"
quartercom[2]='export CONFIG_QTLIBS="-lQt5Core -lQt5Widgets -lQt5OpenGL -lQt5Gui -lQt5Designer -lQt5UiTools -lQt5Xml -licui18n -licuuc -licudata"'
quartercom[3]='export CPPFLAGS="-I$QTDIR/include/QtCore -I$QTDIR/include/QtWidgets -I$QTDIR/include/QtOpenGL -I$QTDIR/include/QtGui -fPIC"'
quartercom[4]="../configure --prefix=/usr \\"
quartercom[5]="             --disable-pkgconfig \\"
quartercom[6]="             --disable-debug \\"
quartercom[7]='             --with-qt=$QTDIR \'
quartercom[8]='             --with-qt-designer-plugin-path=$QTDIR/plugins/designer'
quartercom[9]="make"
quartercom[10]="make install"
rtrncommands=(${quartercom[@]})
} # end quarterComms
#
rapidjsonComms () {
local rapidjsoncom=""
rapidjsoncom[0]="find -name CMakeLists.txt | xargs sed -e 's|-Werror||' -i"
rapidjsoncom[1]="mkdir -pv build"
rapidjsoncom[2]="cd build"
rapidjsoncom[3]="cmake -DCMAKE_INSTALL_PREFIX=/usr \\"
rapidjsoncom[4]="      -DCMAKE_BUILD_TYPE=None \\"
rapidjsoncom[5]="      -DRAPIDJSON_HAS_STDSTRING=ON \\"
rapidjsoncom[6]="      -DRAPIDJSON_ENABLE_INSTRUMENTATION_OPT=OFF \\"
rapidjsoncom[7]="      -DDOC_INSTALL_DIR=/usr/share/doc/rapidjson \\"
rapidjsoncom[8]="      .."
rapidjsoncom[9]="make"
rapidjsoncom[10]="make install"
rtrncommands=(${rapidjsoncom[@]})
} # end rapidjsonComms
#
re2Comms () {
local re2com=""
re2com[0]="make"
re2com[1]="make prefix=/usr install"
rtrncommands=(${re2com[@]})
} # end re2Comms
#
recodeComms () {
local recodecom=""
recodecom[0]="patch -Np1 -i ../recode-3.6-as-if.patch"
recodecom[1]="patch -Np1 -i ../recode-3.6-gettextfix.patch"
recodecom[2]="patch -Np1 -i ../recode-3.6-17.patch"
recodecom[3]="sed -i '1i#include <stdlib.h>' src/argmatch.c"
recodecom[4]="sed -i -e '/^AM_C_PROTOTYPES/d' -e '/^AUTOMAKE_OPTIONS.*ansi2knr/d' \\"
recodecom[5]="          configure.in src/Makefile.am"
recodecom[6]="rm -f acinclude.m4"
recodecom[7]="autoreconf -fi"
recodecom[8]="libtoolize"
recodecom[9]="./configure --prefix=/usr \\"
recodecom[10]="            --mandir=/usr/share/man \\"
recodecom[11]="            --infodir=/usr/share/info --without-included-gettext"
recodecom[12]="make"
recodecom[13]="make install"
rtrncommands=(${recodecom[@]})
} # end recodeComms
#
rpmextractComms () {
local rpmextractcom=""
rpmextractcom[0]="install -v -m755 rpmextract.sh /usr/bin/"
rpmextractcom[1]="install -v -m755 rpm2cpio /usr/bin/"
rtrncommands=(${rpmextractcom[@]})
} # end rpmextractComms
#
rtmpdumpComms () {
local rtmpcom=""
rtmpcom[0]="make"
rtmpcom[1]="make prefix=/usr sbindir=/usr/bin \\"
rtmpcom[2]="     mandir=/usr/share/man install"
rtrncommands=(${rtmpcom[@]})
} # end rtmpdumpComms
#
sddmComms () {
local sddmcom=""
sddmcom[0]="mkdir -p build"
sddmcom[1]="cd build"
sddmcom[2]="cmake -DCMAKE_INSTALL_PREFIX=/usr \\"
sddmcom[3]="      -DCMAKE_BUILD_TYPE=Release \\"
sddmcom[4]="      -DCMAKE_INSTALL_LIBEXECDIR=/usr/lib/sddm \\"
sddmcom[5]="      -DDBUS_CONFIG_FILENAME=sddm_org.freedesktop.DisplayManager.conf \\"
sddmcom[6]="      --DBUILD_MAN_PAGES=ON \\"
sddmcom[7]="      .."
sddmcom[8]="make"
sddmcom[9]="make install"
sddmcom[10]="install -Dm644 ../sddm.sysusers /usr/lib/sysusers.d/sddm.conf"
sddmcom[11]="install -Dm644 ../sddm.tmpfiles /usr/lib/tmpfiles.d/sddm.conf"
sddmcom[12]="mv /etc/sddm.conf /usr/lib/sddm/sddm.conf.d"
sddmcom[13]="sed -r 's|DefaultPath=.*|DefaultPath=/usr/local/sbin:/usr/local/bin:/usr/bin|g' -i /usr/lib/sddm/sddm.conf.d/sddm.conf"
sddmcom[0]="sed -e '/^InputMethod/s/qtvirtualkeyboard//' -i /usr/lib/sddm/sddm.conf.d/sddm.conf"
rtrncommands=(${sddmcom[@]})
} # end sddmComms
#
sdlComms () {
local sdlcom=""
sdlcom[0]="patch -Np1 -i ../SDL-1.2.10-GrabNotViewable.patch"
sdlcom[1]="patch -Np1 -i ../SDL-1.2.15-SDL_EnableUNICODE_drops_keyboard_events.patch"
sdlcom[2]="patch -Np1 -i ../SDL-1.2.15-const_XData32.patch"
sdlcom[3]="patch -Np1 -i ../SDL-1.2.15-ignore_insane_joystick_axis.patch"
sdlcom[4]="patch -Np1 -i ../SDL-1.2.15-no-default-backing-store.patch"
sdlcom[5]="patch -Np1 -i ../SDL-1.2.15-x11-Bypass-SetGammaRamp-when-changing-gamma.patch"
sdlcom[6]="patch -Np1 -i ../SDL-1.2.14-fix-mouse-clicking.patch"
sdlcom[7]="patch -Np1 -i ../SDL-1.2.14-disable-mmx.patch"
sdlcom[8]="patch -Np1 -i ../SDL-1.2.15-libsdl-1.2.15-resizing.patch"
sdlcom[9]="patch -Np1 -i ../SDL-1.2.15-X11_KeyToUnicode.patch"
sdlcom[10]="./configure --prefix=/usr \\"
sdlcom[11]="            --disable-nasm \\"
sdlcom[12]="            --enable-alsa \\"
sdlcom[13]="            --with-x \\"
sdlcom[14]="            --disable-rpath \\"
sdlcom[15]="            --disable-static"
sdlcom[16]="make"
sdlcom[17]="make install"
rtrncommands=(${sdlcom[@]})
} # end sdlComms
#
sdl2Comms () {
local sdl2com=""
sdl2com[0]="./configure --prefix=/usr \\"
sdl2com[1]="            --enable-sdl-dlopen \\"
sdl2com[2]="            --disable-arts --disable-esd --disable-nas \\"
sdl2com[3]="            --enable-alsa --enable-pulseaudio-shared \\"
sdl2com[4]="            --enable-video-wayland \\"
sdl2com[5]="            --disable-rpath"
sdl2com[6]="make"
sdl2com[7]="make install"
rtrncommands=(${sdl2com[@]})
} # end sdl2Comms
#
setconfComms () {
local setconfcom=""
setconfcom[0]="install -Dm755 setconf.py /usr/bin/setconf"
setconfcom[1]="install -Dm644 setconf.1.gz /usr/share/man/man1/setconf.1.gz"
rtrncommands=(${setconfcom[@]})
} # end setconf
#
snappyComms () {
local snappycom=""
snappycom[0]="CXXFLAGS+=\\ -DNDEBUG"
snappycom[1]="cmake \\"
snappycom[2]="    -DCMAKE_INSTALL_PREFIX=/usr \\"
snappycom[3]="    -DCMAKE_INSTALL_LIBDIR=/usr/lib \\"
snappycom[4]="    -DBUILD_SHARED_LIBS=yes \\"
snappycom[5]="    ."
snappycom[6]="make"
snappycom[7]="make install"
snappycom[8]="install -Dm644 ../snappy.pc /usr/lib/pkgconfig/snappy.pc"
rtrncommands=(${snappycom[@]})
} # end snappyComms
#
speechdComms () {
local speechdcom=""
speechdcom[0]="sed -i 's/cicero //g' configure.ac"
speechdcom[1]="sed -i 's/sd_cicero//g' src/modules/Makefile.am"
speechdcom[2]="CFLAGS+=' -fcommon' \\"
speechdcom[3]="./configure --prefix=/usr \\"
speechdcom[4]="            --sysconfdir=/etc \\"
speechdcom[5]="            --enable-shared \\"
speechdcom[6]="            --without-flite"
speechdcom[7]="make"
speechdcom[8]="make install"
rtrncommands=(${speechdcom[@]})
} # end speechdComms
#
squidComms () {
local squidcom=""
squidcom[0]="PKG_CONFIG_PATH=/usr/lib/openssl-1.0/pkgconfig \\"
squidcom[1]="./configure --prefix=/usr \\"
squidcom[2]="            --sbindir=/usr/bin \\"
squidcom[3]="            --datadir=/usr/share/squid \\"
squidcom[4]="            --sysconfdir=/etc/squid \\"
squidcom[5]="            --libexecdir=/usr/lib/squid \\"
squidcom[6]="            --localstatedir=/var \\"
squidcom[7]="            --with-logdir=/var/log/squid \\"
squidcom[8]="            --with-pidfile=/run/squid.pid \\"
squidcom[9]="            --enable-auth \\"
squidcom[10]="            --enable-auth-basic \\"
squidcom[11]="            --enable-auth-ntlm \\"
squidcom[12]="            --enable-auth-digest \\"
squidcom[13]="            --enable-auth-negotiate \\"
squidcom[14]='            --enable-removal-policies="lru,heap" \'
squidcom[15]='            --enable-storeio="aufs,ufs,diskd" \'
squidcom[16]="            --enable-delay-pools \\"
squidcom[17]="            --with-openssl \\"
squidcom[18]="            --enable-snmp \\"
squidcom[19]="            --enable-linux-netfilter \\"
squidcom[20]="            --enable-ident-lookups \\"
squidcom[21]="            --enable-useragent-log \\"
squidcom[22]="            --enable-cache-digests \\"
squidcom[23]="            --enable-referer-log \\"
squidcom[24]="            --enable-arp-acl \\"
squidcom[25]="            --enable-htcp \\"
squidcom[26]="            --enable-carp \\"
squidcom[27]="            --enable-epoll \\"
squidcom[28]="            --with-large-files \\"
squidcom[29]="            --with-default-user=proxy \\"
squidcom[30]="            --enable-async-io \\"
squidcom[31]="            --enable-truncate \\"
squidcom[32]="            --enable-icap-client \\"
squidcom[33]="            --enable-ssl-crtd \\"
squidcom[34]="            --disable-arch-native \\"
squidcom[35]="            --disable-strict-error-checking"
squidcom[36]="make"
squidcom[37]="make install"
squidcom[38]="cp ${blfsBuildFiles}/${blfsfiles}/conf-files/squid.conf /etc/squid"
squidcom[39]='cat > /etc/pam.d/squid << "SQUIDEOF"'
squidcom[40]="auth              required        pam_unix.so"
squidcom[41]="account           required        pam_unix.so"
squidcom[42]="SQUIDEOF"
rtrncommands=(${squidcom[@]})
} # end squidComms
#
telloggerComms () {
local telloggercom=""
telloggercom[0]="sed 's@/apps/@/org/freedesktop/@' \\"
telloggercom[1]="    -i data/org.freedesktop.Telepathy.Logger.gschema.xml.in"
telloggercom[2]="PYTHON=python2 ./configure --prefix=/usr \\"
telloggercom[3]="    --sysconfdir=/etc \\"
telloggercom[4]="    --libexecdir=/usr/lib/telepathy \\"
telloggercom[5]="    --enable-call \\"
telloggercom[6]="    --disable-static \\"
telloggercom[7]="    --disable-scrollkeeper"
telloggercom[8]="make"
telloggercom[9]="make install"
rtrncommands=(${telloggercom[@]})
} # end telloggerComms
#
telmissionComms () {
local telmissioncom=""
telmissioncom[0]="PYTHON=python3 ./configure --prefix=/usr \\"
telmissioncom[1]="    --libexecdir=/usr/lib/telepathy \\"
telmissioncom[2]="    --with-connectivity=nm \\"
telmissioncom[3]="    --disable-upower \\"
telmissioncom[4]="    --disable-static"
telmissioncom[5]="make"
telmissioncom[6]="make install"
rtrncommands=(${telmissioncom[@]})
} # end telmissionComms
#
termcapComms () {
local termcapcom=""
termcapcom[0]='pkgname="termcap"'
termcapcom[1]='pkgver="1.3.1"'
termcapcom[2]='gcc -fPIC -c "${pkgname}.c" \'
termcapcom[3]='    -o "${pkgname}.o" \'
termcapcom[4]="    -DHAVE_STRING_H=1 -DHAVE_UNISTD_H=1 -DSTDC_HEADERS=1 || return 1"
termcapcom[5]='gcc -shared -Wl,-soname,"lib${pkgname}.so" \'
termcapcom[6]='    -o "lib${pkgname}.so.${pkgver}" "${pkgname}.o" || return 1'
termcapcom[7]='install -D -m755 "lib${pkgname}.so.${pkgver}" "/usr/lib/lib${pkgname}.so.${pkgver}"'
termcapcom[8]="for infofile in termcap.info*"
termcapcom[9]='do install -D -m644 "${infofile}" "/usr/share/info/${infofile}"'
termcapcom[10]="done"
rtrncommands=(${termcapcom[@]})
} # end termcapComms
#
tinyxmlComms () {
local tinyxmlcom=""
tinyxmlcom[0]="patch -p0 -i ../tinyxml_entity.patch"
tinyxmlcom[1]="patch -p1 -i ../tinyxml_stl.patch"
tinyxmlcom[2]="/usr/bin/setconf Makefile TINYXML_USE_STL YES"
tinyxmlcom[3]='export CXXFLAGS="-march=x86-64 -mtune=generic -O2 -pipe -fno-plt"'
tinyxmlcom[4]='/usr/bin/setconf Makefile RELEASE_CFLAGS "$CXXFLAGS -fPIC"'
tinyxmlcom[5]="make"
tinyxmlcom[6]='g++ -fPIC "$CXXFLAGS" -shared -o "lib${PkgName}.so.0.${pkgVers}" \'
tinyxmlcom[7]='    -Wl,-soname,"lib${PkgName}.so.0" $(ls *.o | grep -v xmltest)'
tinyxmlcom[8]='install -m 0755 "lib${PkgName}.so.0.${pkgVers}" /usr/lib/'
tinyxmlcom[9]='install -m 0644 "${PkgName}.h" tinystr.h /usr/include'
tinyxmlcom[10]='install -Dm644 ../${PkgName}.pc "/usr/lib/pkgconfig/${PkgName}.pc"'
tinyxmlcom[11]="ln -s lib\${PkgName}.so.0.\${pkgVers} /usr/lib/lib\${PkgName}.so.0"
tinyxmlcom[12]="ln -s lib\${PkgName}.so.0.\${pkgVers} /usr/lib/lib\${PkgName}.so"
rtrncommands=(${tinyxmlcom[@]})
} # tinyxmlComms
#
traitletsComms () {
local traitletscom=""
traitletscom[0]="pushd ipython_genutils-\${genutilsver}"
traitletscom[1]="python3 setup.py install --prefix=/usr --optimize=0"
traitletscom[2]="popd"
traitletscom[3]="pushd traitlets-\${pkgVers}"
traitletscom[4]="python3 setup.py install --prefix=/usr --optimize=0"
traitletscom[5]="popd"
rtrncommands=(${traitletscom[@]})
} # traitletsComms
#
v4lComms () {
local v4lcom=""
v4lcom[0]="./configure --prefix=/usr --sysconfdir=/etc --sbindir=/usr/bin"
v4lcom[1]="make"
v4lcom[2]="MAKEFLAGS="-j1" make install"
v4lcom[3]="rm /usr/bin/ivtv-ctl"
rtrncommands=(${v4lcom[@]})
} # v4lComms
#
wafComms () {
local wafcom=""
wafcom[0]="sed -e \"/test(i/ s|dirname|'python${py3series}/site-packages/waf'|\" -i waf-light"
wafcom[1]="./waf-light configure --prefix=/usr \\"
wafcom[2]="   build --make-waf"
wafcom[3]="sed -i '/^#==>$/,/^#<==$/d' waf"
wafcom[4]="install -vDm 755 waf -t ${theDestdir}/usr/bin"
wafcom[5]="install -vDm 644 wscript -t ${theDestdir}/usr/share/waf"
wafcom[6]="install -vDm 644 waflib/*.py \\"
wafcom[7]="   -t ${theDestdir}/usr/lib/python${py3series}/site-packages/waf/waflib"
wafcom[8]="install -vDm 644 waflib/Tools/*.py \\"
wafcom[9]="   -t ${theDestdir}/usr/lib/python${py3series}/site-packages/waf/waflib/Tools"
wafcom[10]="install -vDm 644 waflib/extras/*.py \\"
wafcom[11]="   -t ${theDestdir}/usr/lib/python${py3series}/site-packages/waf/waflib/extras"
wafcom[12]="python3 -m compileall -d ${theDestdir}/usr/lib/python${py3series}/site-packages/waf/waflib \\"
wafcom[13]="   ${theDestdir}/usr/lib/python${py3series}/site-packages/waf/waflib"
wafcom[14]="python3 -O -m compileall -d ${theDestdir}/usr/lib/python${py3series}/site-packages/waf/waflib \\"
wafcom[15]="   ${theDestdir}/usr/lib/python${py3series}/site-packages/waf/waflib"
rtrncommands=(${wafcom[@]})
} # end wafComms
#
westonComms () {
local westoncom=""
westoncom[0]="if [ -d weston-build ]; then rm -rf weston-build; fi"
westoncom[1]="mkdir weston-build"
westoncom[2]="cd weston-build"
westoncom[3]="meson --prefix=/usr \\"
westoncom[4]="      --libexecdir=/usr/lib/weston \\"
westoncom[5]="      -Dsimple-dmabuf-drm=auto \\"
westoncom[6]="      -Dbackend-rdp=false \\"
westoncom[7]="      -Dremoting=false \\"
westoncom[8]="      -Dpipewire=false \\"
westoncom[9]="      .."
westoncom[10]="ninja"
westoncom[11]="ninja install"
rtrncommands=(${westoncom[@]})
} # end westonComms
#
windscribeComms () {
local windscribecom=""
windscribecom[0]='/bin/rpmextract.sh $srcpkg'
windscribecom[1]="install -D -m644 etc/bash_completion.d/windscribe /etc/bash_completion.d/"
windscribecom[2]="install -D -m755 usr/bin/windscribe /usr/bin/"
windscribecom[3]="install -D -m644 usr/lib/systemd/system/windscribe.service /usr/lib/systemd/system/"
windscribecom[4]="rm -rf etc usr" 
rtrncommands=(${windscribecom[@]})
} # end windscribeComms
#
wregdbComms () {
local wregdbcom=""
wregdbcom[0]="install -D -m644 regulatory.bin /usr/lib/crda/regulatory.bin"
wregdbcom[1]="if /usr/bin/regdbdump /usr/lib/crda/regulatory.bin > /dev/null; then"
wregdbcom[2]='  echo "Regulatory database verification was succesful."'
wregdbcom[3]="else"
wregdbcom[4]='  echo "Regulatory database verification failed."'
wregdbcom[5]="  exit 1"
wregdbcom[6]="fi"
wregdbcom[7]="install -D -m644 sforshee.key.pub.pem /usr/lib/crda/pubkeys/sforshee.key.pub.pem"
wregdbcom[8]="install -D -m644 regulatory.bin.5 /usr/share/man/man5/regulatory.bin.5"
wregdbcom[9]="mkdir -pv /etc/conf.d"
wregdbcom[10]='cat > /etc/conf.d/wireless-regdom << "EOF"'
wregdbcom[11]="# Wireless regulatory domain configuration"
wregdbcom[12]="EOF"
wregdbcom[13]="for dom in \$(grep ^country db.txt | cut -d' ' -f2 | sed 's|:||g'); do"
wregdbcom[14]='  echo "#WIRELESS_REGDOM=\"${dom}\"" >> /etc/conf.d/wireless-regdom.tmp'
wregdbcom[15]="done"
wregdbcom[16]="sort -u /etc/conf.d/wireless-regdom.tmp >> /etc/conf.d/wireless-regdom"
wregdbcom[17]="rm /etc/conf.d/wireless-regdom.tmp"
rtrncommands=(${wregdbcom[@]})
} # end wregdbComms
#
wxgtkComms () {
local wxgtkcom=""
wxgtkcom[0]="patch -Np1 -i ../wxWidgets-make-abicheck-non-fatal.patch"
wxgtkcom[1]="./configure --prefix=/usr --libdir=/usr/lib --with-gtk=3 --with-opengl --enable-unicode \\"
wxgtkcom[2]="            --enable-graphics_ctx --enable-mediactrl --with-regex=builtin \\"
wxgtkcom[3]="            --with-libpng=sys --with-libxpm=sys --with-libjpeg=sys --with-libtiff=sys \\"
wxgtkcom[4]="            --disable-precomp-headers"
wxgtkcom[5]="make"
wxgtkcom[6]="make install"
rtrncommands=(${wxgtkcom[@]})
} # end wxgtkComms
#
kodiComms () {
local kodicom=""
kodicom[0]="# force python 'binary' as python2"
kodicom[1]="[[ -d path ]] && rm -rfv path"
kodicom[2]="mkdir -v path"
kodicom[3]='ln -s /usr/bin/python2 "${curdir}/path/python"'
kodicom[4]='export PATH="${curdir}/path:$PATH"'
kodicom[5]="[[ -d kodi-build ]] && rm -rfv kodi-build"
kodicom[6]="mkdir -pv kodi-build"
kodicom[7]="cd kodi-build"
kodicom[8]="cmake -DCMAKE_INSTALL_PREFIX=/usr \\"
kodicom[9]="      -DCMAKE_INSTALL_LIBDIR=/usr/lib \\"
kodicom[10]="      -DENABLE_EVENTCLIENTS=ON \\"
kodicom[11]="      -DENABLE_INTERNAL_FFMPEG=ON \\"
kodicom[12]="      -DENABLE_INTERNAL_FMT=ON \\"
kodicom[13]="      -DENABLE_INTERNAL_CROSSGUID=ON \\"
kodicom[14]="      -DENABLE_INTERNAL_FSTRCMP=ON \\"
kodicom[15]="      -DENABLE_INTERNAL_FLATBUFFERS=ON \\"
kodicom[16]='      -Dlibdvdcss_URL=${curdir}/../${libdvdcss_outputfile} \'
kodicom[17]='      -Dlibdvdnav_URL=${curdir}/../${libdvdnav_outputfile} \'
kodicom[18]='      -Dlibdvdread_URL=${curdir}/../${libdvdread_outputfile} \'
kodicom[19]='      -DFFMPEG_URL=${curdir}/../${ffmpeg_outputfile} \'
kodicom[20]='      -DFMT_URL=${curdir}/../${fmt_outputfile} \'
kodicom[21]='      -DCROSSGUID_URL=${curdir}/../${crossguid_outputfile} \'
kodicom[22]='      -DFSTRCMP_URL=${curdir}/../${fstrcmp_outputfile} \'
kodicom[23]='      -DFLATBUFFERS_URL=${curdir}/../${flatbuffers_outputfile} \'
kodicom[24]="      -DX11_RENDER_SYSTEM=gl \\"
kodicom[25]="      .."
kodicom[26]="make"
kodicom[27]="make preinstall"
kodicom[28]="_components=("
kodicom[29]="'kodi'"
kodicom[30]="'kodi-bin')"
kodicom[31]="for _cmp in \${_components[@]}; do"
kodicom[32]="  /usr/bin/cmake \\"
kodicom[33]="  -DCMAKE_INSTALL_COMPONENT=\"\$_cmp\" \\"
kodicom[34]="  -P cmake_install.cmake"
kodicom[35]="done"
kodicom[36]="_components=("
kodicom[37]="'kodi-addon-dev'"
kodicom[38]="'kodi-audio-dev'"
kodicom[39]="'kodi-eventclients-dev'"
kodicom[40]="'kodi-game-dev'"
kodicom[41]="'kodi-inputstream-dev'"
kodicom[42]="'kodi-peripheral-dev'"
kodicom[43]="'kodi-pvr-dev'"
kodicom[44]="'kodi-screensaver-dev'"
kodicom[45]="'kodi-visualization-dev')"
kodicom[46]="for _cmp in \${_components[@]}; do"
kodicom[47]="  /usr/bin/cmake \\"
kodicom[48]="  -DCMAKE_INSTALL_COMPONENT=\"\$_cmp\" \\"
kodicom[49]="  -P cmake_install.cmake"
kodicom[50]="done"
rtrncommands=(${kodicom[@]})
} # end kodiComms
#
xinitComms () {
local xinitcom=""
xinitcom[0]="patch -Np1 -i ../xinit-1.3.4-serverauth-1.patch"
xinitcom[1]="patch -Np1 -i ../xinit-1.3.4-fs25361.patch"
xinitcom[2]="patch -Np1 -i ../xinit-1.3.4-fs46369.patch"
xinitcom[3]="sed -i -e 's/XSLASHGLOB.sh/XSLASHGLOB/' xinitrc.cpp"
xinitcom[4]="autoreconf -fi"
xinitcom[5]="./configure --prefix=/usr --with-xinitdir=/etc/X11/app-defaults"
xinitcom[6]="make"
xinitcom[7]="make install"
rtrncommands=(${xinitcom[@]})
} # end xinitComms
#
xorgamdgpuComms () {
local xorgamdgpucom=""
xorgamdgpucom[0]="sed -i 's/^miPointerSpriteFuncRec/extern &/' src/drmmode_display.h"
xorgamdgpucom[1]="CFLAGS+=' -fcommon' \\"
xorgamdgpucom[2]="./configure \$XORG_CONFIG \\"
xorgamdgpucom[3]="            --enable-glamor"
xorgamdgpucom[4]="make"
xorgamdgpucom[5]="make install"
rtrncommands=(${xorgamdgpucom[@]})
} # end xorgamdgpuComms
#
xorgintelComms () {
local xorgintelcom=""
xorgintelcom[0]="NOCONFIGURE=1 ./autogen.sh"
xorgintelcom[1]="./configure --prefix=/usr \\"
xorgintelcom[2]="            --libexecdir=/usr/lib \\"
xorgintelcom[3]="            --with-default-dri=3 \\"
xorgintelcom[4]="            --enable-kms-only \\"
xorgintelcom[5]="            --mandir=/usr/share/man"
xorgintelcom[6]="make"
xorgintelcom[7]="make install"
xorgintelcom[8]="mv -v /usr/share/man/man4/intel-virtual-output.4 \\"
xorgintelcom[9]="      /usr/share/man/man1/intel-virtual-output.1"
xorgintelcom[10]="sed -i '/\.TH/s/4/1/' /usr/share/man/man1/intel-virtual-output.1"
xorgintelcom[11]='cat >> /etc/X11/xorg.conf.d/20-intel.conf << "EOF"'
xorgintelcom[12]='Section "Device"'
xorgintelcom[13]='        Identifier  "Intel Graphics"'
xorgintelcom[14]='        Driver      "intel"'
xorgintelcom[15]='        Option      "DRI" "3"             # DRI3 is now default'
xorgintelcom[16]='        #Option      "AccelMethod"  "sna" # default'
xorgintelcom[17]='        #Option      "AccelMethod"  "uxa" # fallback'
xorgintelcom[18]="EndSection"
xorgintelcom[19]="EOF"
rtrncommands=(${xorgintelcom[@]})
} # end xorgintelComms
#
xorgservComms () {
local xorgservcom=""
xorgservcom[0]="./configure --prefix=/usr                       \\"
xorgservcom[1]="            --enable-ipv6                       \\"
xorgservcom[2]="            --enable-dri                        \\"
xorgservcom[3]="            --enable-dmx                        \\"
xorgservcom[4]="            --enable-xvfb                       \\"
xorgservcom[5]="            --enable-xnest                      \\"
xorgservcom[6]="            --enable-composite                  \\"
xorgservcom[7]="            --enable-xcsecurity                 \\"
xorgservcom[8]="            --enable-xorg                       \\"
xorgservcom[9]="            --enable-glamor                     \\"
xorgservcom[10]="            --enable-xwayland                   \\"
xorgservcom[11]="            --enable-config-udev                \\"
xorgservcom[12]="            --enable-systemd-logind             \\"
xorgservcom[13]="            --enable-suid-wrapper               \\"
xorgservcom[14]="            --enable-record                     \\"
xorgservcom[15]="            --disable-xfbdev                    \\"
xorgservcom[16]="            --disable-xfake                     \\"
xorgservcom[17]="            --disable-static                    \\"
xorgservcom[18]="            --libexecdir=/usr/lib/xorg-server   \\"
xorgservcom[19]="            --sysconfdir=/etc                   \\"
xorgservcom[20]="            --localstatedir=/var                \\"
xorgservcom[21]="            --with-xkb-path=/usr/share/X11/xkb  \\"
xorgservcom[22]="            --with-xkb-output=/var/lib/xkb      \\"
xorgservcom[23]="            --with-fontrootdir=/usr/share/fonts \\"
xorgservcom[24]="            --with-sha1=libgcrypt"
xorgservcom[25]="make"
xorgservcom[26]="make install"
xorgservcom[27]='cat >> /etc/sysconfig/createfiles << "EOF"'
xorgservcom[28]="/tmp/.ICE-unix dir 1777 root root"
xorgservcom[29]="/tmp/.X11-unix dir 1777 root root"
xorgservcom[30]="EOF"
xorgservcom[31]="install -m755 -d /etc/X11/xorg.conf.d"
rtrncommands=(${xorgservcom[@]})
} # end xorgservComms
#
xorgwacomnosysdComms () {
local xwacnosysdcom=""
xwacnosysdcom[0]="./configure \$XORG_CONFIG --with-systemd-unit-dir=no"
xwacnosysdcom[1]="make"


xwacnosysdcom[2]="make install"
rtrncommands=(${xwacnosysdcom[@]})
} # end xorgwacomnosysdComms
#
xorgwacomComms () {
local xorgwacomcom=""
xorgwacomcom[0]="./configure \$XORG_CONFIG                                \\"
xorgwacomcom[1]="            --with-udev-rules-dir=/usr/lib/udev/rules.d     \\"
xorgwacomcom[2]="            --with-systemd-unit-dir=/usr/lib/systemd/system"
xorgwacomcom[3]="make"
xorgwacomcom[4]="make install"
rtrncommands=(${xorgwacomcom[@]})
} # end xorgwacomComms
#
yajlComms () {
local yajlcom=""
yajlcom[0]="cmake -DCMAKE_INSTALL_PREFIX=/usr ."
yajlcom[1]="make"
yajlcom[2]="make install"
rtrncommands=(${yajlcom[@]})
} # end yajlComms
#
GetInternalCommands () {
# $1 is the function name that creates the commands
# S2 is a flag for minizip where the second configure has to be caught
# get access to the build array
rtrnBuild=""
getBuild
return_val=$?
if [ $return_val -eq $RETURN_PARAM ]; then # no build file present
  return $RETURN_PARAM
else
  buildScripts=(${rtrnBuild[@]})
  declare -a rtrncommands=""
  eval $1
  commandScripts=(${rtrncommands[@]})
  numclines=${#commandScripts[@]}
#echo "commandScripts is ${commandScripts[@]}"
  countg=0 # initialize commands counter
  cont=0
  isSed=false
  local isMinizip=${2:-false}
  for line in "${commandScripts[@]}"; do
    case "$line" in
       sed*)
# test if sed has continuation line
         case "$line" in
           *\\)
             isSed=true # this is a sed with cont line(s)
             cacheit[cont++]="$line"
             ((countg++))
           ;;
           *)
             echo "$line"
             ((countg++)) # increment whenever a line is written
           ;;
         esac
       ;;
       "chmod 755 configure"*) # portsmf - don't break for configure
         echo "$line"
         ((countg++))
       ;;
       *patch*".patch"*) # don't break for a patch which may have a configure in it
	 echo "$line"
	 ((countg++))
       ;;
       configure_args*) # don't break when setting up a configure array
         echo "$line"
         ((countg++))
       ;;
       *configure*|*"config --prefix="*|*autogen.sh*|autoconf|cmake*|arch-meson*|"meson --prefix"*)
         if $isSed; then # test if another cont line
           case "$line" in
             *\\) # another cont line found so store it
                cacheit[cont++]="$line"
                ((countg++))
             ;;
             *) # write out the stored lines
                for (( l=0; l<$cont; l++ )); do
                  echo "${cacheit[l]}"
                done
                echo "$line"
                cont=0
                ((countg++))
                isSed=false # finished with this sed command
             ;;
           esac
         elif $isMinizip; then # ignore the first configure
           echo "$line"
           ((countg++))
         else
           if [ $cont -gt 0 ]; then countg=$countg-$cont; fi
           break
         fi
       ;;
       *bootstrap*) # boost
         break
       ;;
       make*) # no configure script or is minizip
         if $isMinizip; then
           echo "$line"
           ((countg++))
           isMinizip=false
         else
           break
         fi
       ;;
       *"CXX='g++ -Wno-narrowing' make"*) # the make for espeak
         break
       ;;
       *"arch-meson"*) # apstream-glib
         break
       ;;
       *"python3 setup.py build"*|*"python3 setup.py install"*) # python3 modules
         break
       ;;
       *"python2 setup.py install"*) # python2 modules with single install command
         break
       ;;
       *"python2 setup.py"*"build"*|*"python3 setup.py"*"build"*) # e.g. py2-numpy, py3-numpy
         break
       ;;
       *"build/linux/unbundle/replace"*) # chromium from the book
         break
       ;;
#       *"build/gyp_chromium"*) # chromium
#         break
#       ;;
       "/opt/qt5/bin/qmake"*) # qt5-webengine qmake
         break
       ;;
       "pushd ipython"*) # beginning of install section for ipython
         break
       ;;
       "install -Dm755 setconf.py"*) # setconf install
         break
       ;;
        "perl Build.PL"*) # perl module using the build commands
          break
        ;;
        "perl Makefile.PL"*) # a perl module with standard commands
          break
        ;;
       *)
         case "$line" in
           *\\) # if a continuation line, store in cache
             cacheit[cont++]="$line"
             ((countg++))
           ;;
           *)
            if [ $cont -gt 0 ]; then # write out continuation line 
              for (( l=0; l<$cont; l++ )); do
                echo "${cacheit[l]}"
              done
              echo "$line"
              cont=0
              isSed=false # finished with any sed command
              ((countg++)) # count # of commands written to output
              [ $countg -eq $numclines ] && return 0
            else
              echo "$line"
              ((countg++)) # count # of commands written to output
              [ $countg -eq $numclines ] && return 0
            fi
           ;;
         esac
       ;;
    esac
  done
#
  rtr=""
  combineScripts commandScripts[@] buildScripts[@]
  scriptOut=(${rtr[@]})
  for t in "${scriptOut[@]}"; do
    echo $t
  done
  if [ $countg -lt $numclines ]; then # output remaining commands
    contin=false
    for (( k=$countg; k<$numclines; k++ )); do
      if [[ "${commandScripts[k]}" == install* ]]; then #don't install docs
        case ${commandScripts[k]} in
            *\\) # continuation line
                contin=true
            ;;
            */usr/share/doc*) # doc so don't write
                continue
            ;;
            *) # not a doc so write it
                echo ${commandScripts[k]}
            ;;
        esac
      else
        if $contin; then
          if [[ "${commandScripts[k]}" == *\\ ]]; then # more continuation
            :
          else
            contin=false
          fi
        else
          echo ${commandScripts[k]}
        fi
      fi
    done
  fi
  return 0
fi
} # end GetInternalCommands
#
CreateBuildDirasroot () {  #1 is the build dir
cat >> $Output << "EOF"
CreateBuildDirasroot () {
BuildDirasroot=$1
if [ ! -e $BuildDirasroot ]; then install -d $BuildDirasroot; fi
cd $BuildDirasroot
}
EOF
} # end CreateBuildDirasroot
#
Header () {
# $1 is the section
local section=$1
echo "writing the script to '$Output'"
cat > $Output << "EOF"
#!/bin/bash
#
if [ $UID -ne 0 ]; then echo Please run this script as root. ; exit 1; fi
#
EOF
#if [[ "$section" = browser && "$BROWSER" = chromium ]]; then # recommend not running in chroot
#  cat > $Output << "EOF"
#if [ "$(stat -c %d:%i /)" != "$(stat -c %d:%i /proc/1/root/.)" ]; then
#  echo "You are running in chroot"
#  echo "This script is likely to fail"
#  echo "Do you wish to continue [y/N]"
#  read reply
#    case $reply in
#       [yY]|[yY][Ee][Ss])
#            echo "okay continuing"
#       ;;
#       [nN]|[nN][Oo])
#            echo "Exiting now"
#            exit 1
#       ;;
#       *)
#            echo "Exiting now"
#            exit 1
#       ;;
#    esac
#fi
#EOF
#fi
if [ "$section" == blfs ]; then
  cat >> $Output << "EOF"
numparams=$#
declare -a bsToInstall=( $@ )
EOF
else
  echo "RETURN_PARAM=$RETURN_PARAM # exit with an error
RETURN_NOTSET=$RETURN_NOTSET # no dependencies set
RETURN_DEPNOTMET=$RETURN_DEPNOTMET # package dependency not met
RETURN_ALLDEPSMET=$RETURN_ALLDEPSMET # all dependencies met
canInstallCount=0 # if use noinstall, counts the packages that can be installed" >> $Output
fi
echo "me=\$0" >> $Output
if [ "$LFS" != "" ];then
  echo "LFS=$LFS" >> $Output
fi
if [ "$BOOK_VERSION" = KBLFS ]; then
  gitinfo=$(echo $GITINFO | awk 'BEGIN{ RS = "|" }; {print $0}')
  echo "GITINFO=\"$gitinfo\"" >> $Output
elif [ "$BOOK_VERSION" != arch ]; then
  echo "SVNINFO=\"$SVNINFO\"" >> $Output
fi
echo "srcrootdir=$srcrootdir
blfsfiles=${blfsBuildFiles}/${blfsfiles}
BuildLog=$BuildLog
build=$build # name of the build file for each package
Section=$section
PKGUSERDIR=$PKGUSERDIR
SYSTEMD=$SYSTEMD
AS_ROOT=$as_root
INSTALLPKG=true # by default install the packages
if [ \"\$1\" = noinstall ]; then INSTALLPKG=false; fi # do not install, look at deps. only
useDESTDIR=$useDESTDIR" >> $Output
if $as_root; then # add these functions just once as everything is root
  CreateBuildDirasroot >> $Output
  mvlafiles >> $Output
fi
if [ "$BOOK_VERSION" = arch ]; then echo "BOOK_VERSION=$BOOK_VERSION" >> $Output; fi
} # end Header
#
cleanPkgDir () {
    cat >> $Output << "EOF"
cleanpkgdir () {
# $1 is the dir to clean
# $2 is the pkg name
local dirtoClean=$1
local pkgtoClean=$2
rm -rf ${dirtoClean}/*.err
rm -rf ${dirtoClean}/*.log
#rm -rf ${dirtoClean}/.${pkgtoClean}
#rm -rf ${dirtoClean}/*.gz
#rm -rf ${dirtoClean}/*.xz
#rm -rf ${dirtoClean}/*.bz2
#rm -rf ${dirtoClean}/*.tgz
#rm -rf ${dirtoClean}/*.zip
#rm -rf ${dirtoClean}/*.patch
if [ -d ${dirtoClean}/.subversion ]; then rm -rf ${dirtoClean}/.subversion; fi
} # end cleanpkgdir
EOF
} # end cleanPkgDir
#
updateSection () {
# can be used to change the section of a package in the install script
# $1 is the new section name which updates bash_profile
cat >> $Output << "EOF"
updateSection () {
sed -e '/PkgUserDir=\/usr\/src/d' \
    -e "/complete/i PkgUserDir=\/usr\/src\/${1}" \
    -i /etc/pkgusr/bash_profile
} # end updateSection
EOF
} # end updateSection
#
pkguser () {
cat >> $Output << "EOF"
pkguser_ () {
# make sure logfile exists and pkgusers can write to it
if [ ! -e $BuildLog ]; then
  mkdir -pv $BuildLog # may have been deleted by a user
fi
chgrp install $BuildLog
chmod 664 $BuildLog
#
cat > /etc/pkgusr/bash_profile << "BashProfile"
export PATH=/usr/lib/pkgusr:/bin:/usr/bin:/opt/jdk/bin:/opt/ant/bin:/opt/qt5/bin
export PROMPT_COMMAND='PS1="package \u:"$(pwd)"> "'
cd
EOF
echo "PkgUserDir=${PKGUSERDIR}/${Section}" >> $Output
cat >> $Output << "EOF"
complete -o default -o nospace -A user su finger pinky
export PkgName=$LOGNAME
EOF
if $useDESTDIR; then
  echo "if [ -e \${PkgUserDir}/\${LOGNAME}/$build -a ! -e ~/.\${LOGNAME}-destdir ]; then
  cd
  bash \${PkgUserDir}/\${LOGNAME}/$build" >> $Output
else
  echo "if [ -e \${PkgUserDir}/\${LOGNAME}/$build -a ! -e ~/.\${LOGNAME} ]; then
  cd
  bash \${PkgUserDir}/\${LOGNAME}/$build" >> $Output
fi
cat >> $Output << "EOF"
  exit
fi
BashProfile
} # end of pkguser_
EOF
} # end of pkguser
#
updatePkgUser () {
# $1 is the section to use to install the pkg
local section=$1
# this function is called immediately before a pkg is installed whose section is different from that which is installing the pkg
# for example, when a core package is reinstalled. These are:
# shadow, eudev with gudev, systemd with gudev, dbus with dbus-launch, iproute2, libcap with pam support, grep with pcre support and python3 with tk support.
# it's also used when installing python module binaries from section pythonmodbin but the section to use is pythonmodules
echo "updatePkgUser_ () {" >>$Output
cat >> $Output << "EOF"
cat > /etc/pkgusr/bash_profile << "BashProfile"
export PATH=/usr/lib/pkgusr:/bin:/usr/bin:/opt/jdk/bin:/opt/ant/bin:/opt/qt5/bin
export PROMPT_COMMAND='PS1="package \u:"$(pwd)"> "'
cd
EOF
echo "PkgUserDir=${PKGUSERDIR}/${section}
useDESTDIR=$useDESTDIR" >> $Output
cat >> $Output << "EOF"
complete -o default -o nospace -A user su finger pinky
PkgName=$LOGNAME
buildit=false
case $PkgName in
  systemd|eudev)
        if [ -e ${PkgUserDir}/${PkgName}/build -a ! -e ~/.${PkgName}_gudev ]; then
          buildit=true
        fi
  ;;
  dbus)
        if [ -e ${PkgUserDir}/${PkgName}/build -a ! -e ~/.${PkgName}_launch ]; then
          buildit=true
        fi
  ;;
  grep)
        if [ -e ${PkgUserDir}/${PkgName}/build -a ! -e ~/.${PkgName}_pcre ]; then
          buildit=true
        fi
  ;;
  iproute2)
        if [ -e ${PkgUserDir}/${PkgName}/build -a ! -e ~/.${PkgName}_blfs ]; then
          buildit=true
        fi
  ;;
  python3)
        if [ -e ${PkgUserDir}/${PkgName}/build -a ! -e ~/.${PkgName}_tk ]; then
          buildit=true
        fi
  ;;
  *)
      if $useDESTDIR; then
        if [ -e ${PkgUserDir}/${PkgName}/build -a ! -e ~/.${PkgName}-destdir ]; then
          buildit=true
        fi
      else
        if [ -e ${PkgUserDir}/${PkgName}/build -a ! -e ~/.${PkgName} ]; then
          buildit=true
        fi
      fi
  ;;
esac
if $buildit; then
  cd
EOF
echo "  bash \${PkgUserDir}/\${PkgName}/$build"  >> $Output
cat >> $Output << "EOF"
  exit
fi
BashProfile
} # end updatePkgUser_
EOF
} # end updatePkgUser
#
delSrcFile () {
# $1 controls the presence of the last rm -rf line - if false, don't include it 
local includeDregs="${1:-true}"
echo "cd \$curdir
cd ..
# only rm the src dir if there is a compressed source file
srcpresent=\"\"
srcpresent=( \$(find . -maxdepth 1 -type f -name '*.tar.*z*' -o -name '*.tgz') )
if [ -z \"\$srcpresent\" ]; then # check for a .tar file
  srcpresent=( \$(find . -maxdepth 1 -type f -name '*.tar') )
fi
if [ -z \"\$srcpresent\" ]; then # might be a zip file
  srcpresent=( \$(find . -maxdepth 1 -type f -name '*.zip') )
fi
if [ ! -z \"\$srcpresent\" ]; then # delete the src dir
  rm -rf \$curdir
fi"
if $includeDregs; then
echo "rm -rf .cache .ccache .wget-hsts"
fi
} # end of delSrcFile
#
mvlafiles () {
echo "mvlafiles () {" >>$Output
cat >> $Output << "EOF"
# $1 is the dir containing the .la files to be moved - either /usr/lib or /opt
# if present $2 is the install DIR used in DESTDIR
local installDIR=${2:-""}
local dirToSearch=${installDIR}${1}
echo "will search $dirToSearch for .la files"
find $dirToSearch -name "*.la" -exec mv -fv {} ${installDIR}${LADIR} \;
} # end mvlafiles
EOF
} # end mvlafiles
#
#sedCups_setup () {
#    cat >> $Output << "EOF"
#sedCups_setup () {
## set up the sed statement for the cups install_commands
#if [ -f ${blfsfiles}/conf-files/sedCupsInstall.conf ]; then
#  . ${blfsfiles}/conf-files/sedCupsInstall.conf # source them
#else
#  echo "sedCupsInstall.conf not found in ${blfsfiles}/conf-files/"
#  echo "Place it there to continue"
#  exit 1
#fi
#} # end sedCups_setup
#EOF
#} # end sedCups_setup
#
php_setup () {
    cat >> $Output << "EOF"
php_setup () {
# setup the configure variables _phpconfig and _phpextensions for php
#
# to use them do:
#./configure ${_phpconfig} ${_phpextensions}
if [ -f ${blfsfiles}/conf-files/php.conf ]; then
  . ${blfsfiles}/conf-files/php.conf
else
  echo "php.conf not found in ${blfsfiles}/conf-files/"
  echo "Place it there to continue"
  exit 1
fi
} # end php_setup
EOF
} # end php_setup
#
createPkgfile () {
cat >> $Output << "EOF"
createPkgfile () {
# get dir names, make the package tar file and delete the build directories
# usage: createPkgfile -v=<version> -d=delete -a=ask
# each argument can be present or not.
# if present, VERSION is the version number to use, bypassing SetPkgVers
# if there is no version (e.g. x264) then VERSION is set to "none"
# if present and DELETE equals delete, the dirs are deleted after the binary file is created
# if present and ASK equals ask, then ask user before deleting dir
# any other arguments are stored in OTHER_ARGS
local listDIRS
local pkgfilename
local trimto=".tar"
local deleteDirs=false
local VERSION=""
local DELETE=""
local ASK=""
local OTHER_ARGS=""
local arg i
# parse any arguments
for arg in "$@"; do
  case $arg in
     -v=*|--version=*)
           VERSION="${arg#*=}"
           shift
     ;;
     -d=*|--delete=*)
           DELETE="${arg#*=}"
           shift
     ;;
     -a=*|--ask=*)
           ASK="${arg#*=}"
           shift
     ;;
     *)
           OTHER_ARGS+=("$1")
           shift
     ;;
  esac
done
if [ ${#OTHER_ARGS[@]} -gt 0 ]; then
  echo "unknown argument(s) present in function createPkgfile ${OTHER_ARGS[@]}"
fi
if [ "$DELETE" = delete ]; then deleteDirs=true; fi
pushd ${PkgUserDir}/${PkgName} # make sure in the right dir
listDIRS=$(ls -l --time-style="long-iso" . | egrep '^d' | awk '{print $8}')
# check the dirs present so as not to delete any needed ones
local chknum=( $listDIRS )
for (( i=0; i<${#chknum[@]}; i++ )); do
  if [[ ${chknum[i]} != etc && ${chknum[i]} != usr && ${chknum[i]} != var && ${chknum[i]} != opt && ${chknum[i]} != run && ${chknum[i]} != srv ]]; then
    echo "Directory ${chknum[i]} will be included in the package file"
    echo "Is this correct? [Y/n]"
    read reply
      case $reply in
         [yY]|[yY][Ee][Ss])
              echo "okay continuing"
         ;;
         [nN]|[nN][Oo])
              echo "Then you need to move it out of ${PkgUserDir}/${PkgName}"
              echo "Exiting now"
              exit 1
         ;;
         *)
              echo "okay continuing"
         ;;
      esac
  fi
done
# add the .INSTALL file if present
if [ -e .INSTALL ]; then
  listDIRS="$listDIRS .INSTALL"
fi
rtrnpkgname=""
case $SrcName in
   apache-ant-)
      trimto="-src"
   ;;
   cdparanoia-III-)
      trimto=".src"
   ;;
   espeak-)
      trimto="-source"
   ;;
   firefox-|thunderbird-)
      trimto=".source"
   ;;
   icu4c-)
      trimto="-src"
   ;;
   jasper-|docbook-xml-)
      trimto=".zip"
   ;;
   LVM2.|openldap-|pa_stable_|sgml-common-|xterm-|zip)
      trimto=".tgz"
   ;;
   openobex-)
      trimto="-Source"
   ;;
esac
if [ ! -z "$VERSION" ]; then
  if [ "$VERSION" = none ]; then
    case $SrcName in
       "jdk15u-jdk-|xf86-video-intel-)
          pkgfilename="${SrcName}x86_64.pkg.tar.xz"
       ;;
       *)
          pkgfilename="${SrcName}-x86_64.pkg.tar.xz"
       ;;
    esac
  else
    pkgfilename="${SrcName}${VERSION}-x86_64.pkg.tar.xz"
  fi
else # get the package version
  SetPkgVers $SrcName $trimto
  pkgfilename="${rtrnpkgname}-x86_64.pkg.tar.xz"
fi
echo "pkgfilename is $pkgfilename"
tar -cJf $pkgfilename $listDIRS
if ! $AS_ROOT; then chown $PkgName:$PkgName $pkgfilename; fi
# 
for dir in $listDIRS; do
  if $deleteDirs; then
    rm -rf $dir
  elif [ "$ASK" = ask ]; then
    if [ -d $dir ]; then
      echo "Delete dir $dir? [Y/n]"
    elif [ -f $dir ]; then
      echo "Delete file $dir? [Y/n]"
    fi
    read reply
      case $reply in
           [yY]|[yY][Ee][Ss])
                echo "okay deleting $dir"
                rm -rf $dir
           ;;
           [nN]|[nN][Oo])
                echo "okay continuing"
           ;;
           *)
                echo "okay deleting $dir"
                rm -rf $dir
           ;;
      esac
  fi
done
popd
} # end createPkgfile
#
EOF
} # end createPkgfile
#
createArchFileList () {
# $1 is the array to contain the list of Arch package files
# $2 is the filename containing the list of files. It must be in ${BLFSBUILDFILES}/ArchLists
local -n ArchFileList="$1"
local ArchSecFiles=$2 # the file containing the list of files
local secfile
if [ -e "${BLFSBUILDFILES}/ArchLists/${ArchSecFiles}" ]; then
  secfile="${BLFSBUILDFILES}/ArchLists/${ArchSecFiles}"
else
  echo "file $ArchSecFiles should be in $BLFSBUILDFILES/ArchLists"
  echo "place it there to continue"
  return $RETURN_PARAM
fi
local IFS='
'
ArchFileList=( $( < $secfile ) )
return 0
} # end createArchFileList
#
getArchPkgVers () {
# takes the output from createArchFileList and finds the latest version of each file
# from the Arch Linux website
# $1 is the asociative array holding the filenames and version numbers
# $2 is the file holding the Arch package filenames
# NOTE - this will also create a <section>.tmp file in /tmp
declare -a sectionFiles # array holding the Arch package filenames for this section
local -n ArchVersMap="$1" # must be Bash 4.3 or > for this to work
local ArchSectionList=$2
createArchFileList sectionFiles $ArchSectionList
return_val=$?
if [ $return_val -eq $RETURN_PARAM ]; then
  echo "return value from createArchFileList was $return_val"
  echo "Does the file $BLFSBUILDFILES/$ArchSectionList exist?"
  echo "Exiting now"
  exit 1
fi
# get the Arch version number for each file in the array sectionFiles
# and store the filename and version number in an associative array as key-value pairs
local n filename archi ArchBinURL fullpkgver portaudioVer
local __dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" # the dir where this script is run
local tmpFile=${SECTION}.tmp
rm -rf /tmp/${tmpFile} # delete it if it exists
for (( n=0; n<${#sectionFiles[@]}; n++ )); do
  filename=${sectionFiles[n]}
  local filenameHtml="${filename}.html"
  case $filename in
     ant|*appdirs|*beaker|*cssselect|*mako|*ply|*pyparsing|*packaging|*setuptools|*six|gnome-common|gsettings-desktop-schemas|yelp-tools|yelp-xsl|gnome-backgrounds|gnome-shell-extensions|gnome-user-docs|gnome-video-effects|cantarell-fonts|gnome-tweaks|media-player-info|bash-completion|*ordered-set|perl-module-build|perl-archive-zip|perl-uri|perl-xml-sax-base|perl-xml-namespacesupport|perl-xml-sax|perl-extutils-depends|perl-extutils-pkgconfig|perl-ipc-system-simple|perl-file-which|perl-file-basedir|perl-alien-build|perl-capture-tiny|perl-alien-libxml2|perl-xml-simple|*urllib3|ttf-dejavu)
       archi="extra/any"
     ;;
     libedit|libmicrohttpd|libnftnl|libsecret|dialog|minizip)
       archi="core/x86_64"
     ;;
     netctl)
       archi="core/any"
     ;;
     *cython|*kiwisolver|*matplotlib|*pillow|*pycryptodome|*pycryptodomex|*simplejson|*scikit-learn|*scipy|libgexiv2|polkit-gnome|notification-daemon|espeak|lilv|lv2|serd|sord|sratom|vamp-plugin-sdk|ccache|cmocka|nodejs|libsass|sassc|cuda|weston|libev|squid|kodi-common|kodi-x11|libaacs|libcec|libnfs|p8-platform|tinyxml|libvdpau-va-gl|gnuchess|xboard|jack2|primus|bbswitch|bumblebee)
       archi="community/x86_64"
     ;;
     *pytz|*wcwidth|*backcall|*beautifulsoup4|*ptyprocess|*docutils|*decorator|*pygments|*prompt_toolkit|*pexpect|*pickleshare|*traitlets|ipython|*cycler|*setuptools-scm|*dateutil|*future|*importlib-metadata|*path|*nltk|perl-test-mockmodule|perl-super|perl-tie-ixhash|perl-xml-sax-expat|perl-parse-yapp|perl-path-tiny|perl-file-chdir|pybind11|pysolfc|python-soupsieve|python-slip|setconf|waf)
       archi="community/any"
     ;;
     *)
       archi="extra/x86_64"
     ;;
  esac
  ArchBinURL="https://www.archlinux.org/packages/${archi}/${filename}"
  if [ -e /usr/bin/wget ]; then # wget installed
    wget -O $filenameHtml $ArchBinURL > /dev/null 2>&1
    fullpkgver=$(more $filenameHtml | grep "Arch Linux - $filename" | awk '{print $5}')
    if [ "$filenameHtml" = "portaudio.html" ]; then # get the portaudio input version
      portaudioVer=$(more $filenameHtml | grep ">lib32-portaudio " | awk '{print $5}' | awk -F\- '{print $1}')
    fi

#
# sometimes there is a colon in the Arch binary pkg version
# if so, change it to a hyphen and the awk line to $2
    case $fullpkgver in
       *:*)
         fullpkgver=${fullpkgver/:/-}
         pkgver=$(echo $fullpkgver | awk -F\- '{print $2}')
       ;;
       *)
         pkgver=$(echo $fullpkgver | awk -F\- '{print $1}')
       ;;
    esac
# sometimes there are + signs in the version, when the source is from git clone
# the version is that part up to the first + sign
# The : case and the + case are kept separate because some version numbers have both :(
    case $pkgver in
       *+*)
	 pkgver=$(echo $pkgver | awk -F\+ '{print $1}')
       ;;
    esac
# add the filename and version number to the ArchVersMap associative array and the tmpFile
    ArchVersMap[$filename]=$pkgver
    echo "$filename=$pkgver" >> /tmp/${tmpFile}
# the html file is written to the dir hosting this script - delete these files
#    echo "will delete ${__dir}/${filenameHtml}"
    rm ${__dir}/${filenameHtml}
  else
    echo "wget is not installed. You need to install it to continue."
    exit 1
  fi
done
#for K in "${!ArchVersMap[@]}"; do echo $K --- ${ArchVersMap[$K]}; done
} # end getArchPkgVers
#
Function () {
# $1 is the section
# if provided, $2 is the associative array of filenames and Arch latest versions
local section=$1
if [ ! -z "$2" ]; then
  local -n fileVersArray="$2"
fi
#
echo "${FuncName}_ () {
PkgName=$pkgname
SrcName=$srcname" >> $Output
case $section in
   lxqt)
     if [ "$pkgname" = openbox ]; then section="windowmanager"; fi
     if [ "$pkgname" = sddm ]; then section="displaymanager"; fi
   ;;
   xfce)
     if [ "$pkgname" = midori ]; then section="browser"; fi
   ;;
   pythonmodbin)
     section="pythonmodules" # install binaries, but in pythonmodules not pythonmodbin
   ;;
esac
echo "section=$section
PkgUserDir=\${PKGUSERDIR}/\${section}" >> $Output
if $as_root; then
  echo "CUR_DIR=\${PkgUserDir}/\${PkgName}
LADIR=/var/local/la-files # .la files are moved here" >> $Output 
  case $pkgname in
    eudev|dbus|gcc|grep|iproute2|libcap|python3|shadow|systemd) # these are installed in core
      echo "sourcedir=\$CUR_DIR" >> $Output
    ;;
    autoconf_2_13) # the source files are in programming
      echo "sourcedir=${srcrootdir}/${cursection}" >> $Output
    ;;
    minizip) # this is installed in sysutils but the source is zlib in core
      echo "sourcedir=/usr/src/core/\${SrcName/-//}" >> $Output
    ;;
    *)
      echo "sourcedir=${srcrootdir}/${section}" >> $Output
    ;;
  esac
fi
#
case $pkgname in
   bbswitch|nvidia)
      echo "EXTRAMODULES=$_extramodules" >> $Output
   ;;
   blfs-btscrpts)
      cat >> $Output << "EOF"
for (( i=0; i<$numparams; i++ )); do
  btscrpt=${bsToInstall[i]}
EOF
   ;;
esac
#
echo "starttime=\$( date +%s )" >> $Output
# if section is pythonmodbin, don't check if installed, just install the Arch binaries.
if [ "$SECTION" != pythonmodbin ]; then
# check whether already installed
# if DESTDIR=yes, then check if the package file is present instead
# TODO test for both destdir install AND not destdir
  case $pkgname in
     blfs-btscrpts)
        cat >> $Output << "EOF"
  if [ -e "${PkgUserDir}/${PkgName}/.${btscrpt}" ]; then
    echo "skipping ${PkgName}/${btscrpt} - installed"
    return
  fi
EOF
     ;;
     dbus) # check for name .dbus_launch or dbus-destdir if DESTDIR=yes
        cat >> $Output << "EOF"
if [ -e "${PkgUserDir}/${PkgName}/.${PkgName}_launch" ]; then
  echo "skipping ${PkgName} - installed"
  return
fi
EOF
     ;;
     eudev) # check for name .eudev_gudev
        cat >> $Output << "EOF"
if [ -e "${PkgUserDir}/${PkgName}/.${PkgName}_gudev" ]; then
  echo "skipping ${PkgName} - installed"
  return
fi
EOF
     ;;
     grep) # check for name grep_pcre
        cat >> $Output << "EOF"
if [ -e "${PkgUserDir}/${PkgName}/.${PkgName}_pcre" ]; then
  echo "skipping ${PkgName} - installed"
  return
fi
EOF
     ;;
     iproute2)
        cat >> $Output << "EOF"
if [ -e "${PkgUserDir}/${PkgName}/.${PkgName}_blfs" ]; then
  echo "skipping ${PkgName} - installed"
  return
fi
EOF
     ;;
     python3) # check for name python3_tk or python3_tk-destdir if DESTDIR=yes
        cat >> $Output << "EOF"
if [ -e "${PkgUserDir}/${PkgName}/.${PkgName}_tk" ]; then
  echo "skipping ${PkgName} - installed"
  return
fi
EOF
     ;;
     py2-pyparsing|py3-pyparsing) # check if it's the binary
        if $useDESTDIR; then
          cat >> $Output << "EOF"
if [ -e "${PkgUserDir}/${PkgName}/.${PkgName}-destdir" ]; then
  echo "skipping DESTDIR install of $PkgName - installed"
  return
fi
EOF
        else
          cat >> $Output << "EOF"
if [ -e "${PkgUserDir}/${PkgName}/.${PkgName}" ]; then
  echo "skipping $PkgName - installed"
  return
fi
EOF
        fi
     ;;
     systemd) # check for name .systemd_gudev
        cat >> $Output << "EOF"
if [ -e "${PkgUserDir}/${PkgName}/.${PkgName}_gudev" ]; then
  echo "skipping ${PkgName} - installed"
  return
fi
EOF
     ;;
     *)
        if $useDESTDIR; then
          cat >> $Output << "EOF"
if [ -e "${PkgUserDir}/${PkgName}/.${PkgName}-destdir" ]; then
  echo "skipping DESTDIR install of $PkgName - installed"
  return
elif [ -e "${PkgUserDir}/${PkgName}/.${PkgName}" ]; then
  echo "skipping $PkgName - installed"
  return
fi
EOF
        else # not using DESTDIR but pacakge may have been installed using DESTDIR previously
          cat >> $Output << "EOF"
if [ -e "${PkgUserDir}/${PkgName}/.${PkgName}" ]; then
  echo "skipping $PkgName - installed"
  return
elif [ -e "${PkgUserDir}/${PkgName}/.${PkgName}-destdir" ]; then
  echo "skipping $PkgName - installed by DESTDIR"
  return
fi
EOF
        fi
# if libgphoto2 then add the GetFileOwner function in order to check owner of /opt/qt5
# if wpa_supplicant then check owner of /usr/src/core/dbus/.dbus_launch
        if [[ "$pkgname" = libgphoto2 || "$pkgname" = wpa_supplicant ]]; then GetFileOwner; fi
     ;;
  esac
fi # test if section not pythonmodbin
#
if [ "$BOOK_VERSION" = arch ]; then
  echo "BuildScript=true" >> $Output # no need to check dependencies
else # check for dependencies
  case $pkgname in
     firewall|blfs-btscrpts) # no need to check dependencies
     echo "BuildScript=true" >> $Output
     ;;
     *)
       cat >> $Output << "EOF"
# check for dependencies
BuildScript=false
FuncName=$( echo $PkgName | sed -e s/-//g -e s/_//g )
DepRtrn=""
PkgDepend
return_val=$?
if [[ $return_val -eq $RETURN_PARAM || $return_val -eq $RETURN_NOTSET ]]; then
  if $INSTALLPKG; then
    if $useDESTDIR; then
      echo "No dependencies - building script for $PkgName using DESTDIR"
    else
      echo "No dependencies - building script for $PkgName"
    fi
  fi
  BuildScript=true
elif [[ $return_val -eq 0 ]]; then # test if dependencies met
EOF
# next case for xfce
      case $pkgname in
        clutter|glib-networking|grilo-plugins|gst-plgns-good0|gtkplus3|libdrm|mesa|webkitgtk)
            if [ "$INSTALLDSKTP" = xfce ]; then
              cat >> $Output << "EOF"
  rtrPlessArray=""
EOF
              case $pkgname in
                clutter) # need to delete 3 elements from the deps array
                  cat >> $Output << "EOF"
  delElementPattern DepRtrn[@] "libraries/libinput"
  unset DepRtrn
  DepRtrn=(${rtrPlessArray[@]})
  rtrPlessArray=""
  delElementPattern DepRtrn[@] "libraries/libxkbcommon"
  unset DepRtrn
  DepRtrn=(${rtrPlessArray[@]})
  rtrPlessArray=""
  delElementPattern DepRtrn[@] "libraries/wayland"
EOF
                ;;
                glib-networking)
                  cat >> $Output << "EOF"
  delElementPattern DepRtrn[@] "gnomeplatform/gset-dsktp-schms"
EOF
                ;;
                grilo-plugins)
                  cat >> $Output << "EOF"
  delElementPattern DepRtrn[@] "gnomeplatform/totem-pl-parser"
EOF
                ;;
                gst-plgns-good0)
                  cat >> $Output << "EOF"
  delElementPattern DepRtrn[@] "gnomeplatform/gconf"
EOF
                ;;
                gtkplus3) # delete 2 array elements
                  cat >> $Output << "EOF"
  delElementPattern DepRtrn[@] "libraries/libxkbcommon"
  unset DepRtrn
  DepRtrn=(${rtrPlessArray[@]})
  rtrPlessArray=""
  delElementPattern DepRtrn[@] "libraries/wayland"
EOF
                ;;
                libdrm) # don't need libpciaccess
                  cat >> $Output << "EOF"
  delElementPattern DepRtrn[@] "libraries/libpciaccess"
EOF
                ;;
                mesa) # don't need wayland
                  cat >> $Output << "EOF"
  delElementPattern DepRtrn[@] "libraries/wayland"
EOF
                ;;
              esac
              cat >> $Output << "EOF"
  unset DepRtrn
  DepRtrn=(${rtrPlessArray[@]})
EOF
            fi
        ;;
      esac
# end case xfce
  cat >> $Output << "EOF"
  rtrnDepNotMet=""
  testDeps DepRtrn[@]
  ret_val=$?
  if [ $ret_val -eq $RETURN_ALLDEPSMET ]; then
    if $INSTALLPKG; then 
      if $useDESTDIR; then
        echo "All dependencies met - building script for $PkgName using DESTDIR"
      else
        echo "All dependencies met - building script for $PkgName"
      fi
    fi
    BuildScript=true
  fi
fi
EOF
     ;;
  esac
fi # end case testing dependencies
echo "if \$BuildScript; then" >> $Output
if [ "$pkgname" = kodi ]; then # check if running in chroot
  cat >> $Output << "EOF"
# test if running in chroot
if [ "$(stat -c %d:%i /)" != "$(stat -c %d:%i /proc/1/root/.)" ]; then
  echo "You are running in chroot"
  echo "Do not install Kodi in chroot. Login to the target machine and install it there."
  INSTALLPKG=false
fi
EOF
fi
echo "if \$INSTALLPKG; then" >> $Output
if ! $as_root; then
  echo 'install -v -d ${PkgUserDir}/${PkgName}' >> $Output
  echo "touch \${PkgUserDir}/\${PkgName}/$build" >> $Output
  cat >> $Output << "EOF"
echo "#!/bin/bash
EOF
  echo 'BuildLog=$BuildLog" > ${PkgUserDir}/${PkgName}/'$build >> $Output
  if [[ "$pkgname" == "blfs-btscrpts" ]]; then
    echo "echo \"btscrpt=\$btscrpt\" >> \${PkgUserDir}/\${PkgName}/$build" >> $Output
  fi
  if [[ "$useDESTDIR" = true && "$installDEST" = false ]]; then
     echo "cleanpkgdir \${PkgUserDir}/\${PkgName} \$PkgName" >> $Output
  fi
  echo "cat >> \${PkgUserDir}/\${PkgName}/$build << \"IPS\"" >>$Output
  if $useDESTDIR; then
    echo "set +h
PkgUserDir="${PKGUSERDIR}/${section}"
PkgName=\$LOGNAME
CUR_DIR=\${PkgUserDir}/\${PkgName}" >> $Output
  else
    cat >> $Output << "EOF"
set +h
PkgName=$LOGNAME
CUR_DIR=$HOME
EOF
  fi
  if [ "$BOOK_VERSION" != arch ]; then
    echo "LADIR=/var/local/la-files # .la files are moved here" >> $Output
    if [[ "$Section" == x || "$pkgname" == libdrm || "$pkgname" == freeglut || "$pkgname" == glu || "$pkgname" == libxkbcommon ]]; then
      echo "source /etc/profile.d/xorg.sh" >> $Output
    elif [[ "$Section" == lxqt ]]; then
      echo "source /etc/profile.d/lxqt.sh" >> $Output
    fi
  fi
# some Arch binaries have a different source name from the source tar file
  if [ "$BOOK_VERSION" = arch ]; then
    case $srcname in
       boost_)
         srcname=boost-
       ;;
       cdparanoia-III-)
         srcname=cdparanoia-
       ;;
       fdk-aac-)
         srcname=fdkaac-
       ;;
       mozjs-) # src file for js60
         srcname=js60-
       ;;
       freetype-)
         srcname=freetype2-
       ;;
       glib-)
         srcname=glib2-
       ;;
       gmime-3.)
         srcname=gmime3-
       ;;
       httpd-)
         srcname=apache-
       ;;
       icu4c-)
         srcname=icu-
       ;;
       libaio_)
         srcname=libaio-
       ;;
       libmusicbrainz-5.)
         srcname=libmusicbrainz5-
       ;;
       libzeitgeist-)
         srcname=zeitgeist-
       ;;
       Linux-PAM-)
         srcname=pam-
       ;;
       newt-)
         srcname=libnewt-
       ;;
       openjpeg-)
         srcname=openjpeg2-
       ;;
       openssl-1.0.)
         srcname=openssl-1.0-
       ;;
       rustc-)
         srcname=rust-
       ;;
       SDL-)
         srcname=sdl-
       ;;
       SDL2-)
         srcname=sdl2-
       ;;
       sqlite-autoconf-)
         srcname=sqlite-
       ;;
       tiff-)
         srcname=libtiff-
       ;;
       x264-snapshot-)
         srcname=x264-
       ;;
       webkitgtk-)
         srcname=webkit2gtk-
       ;;
       x265_)
         srcname=x265-
       ;;
       yaml-)
         srcname=libyaml-
     ;;
    esac
    echo "SrcName=$srcname" >> $Output
  else # BOOK_VERSION not Arch
    case $srcname in
       backports)
         : # no source file
       ;;
       py2-setuptools-) # py2 and py3 setuptools have different versions but same src name
         echo "SrcName=${srcname/py2-/}" >> $Output
       ;;
#       rapidjson-) # remove the - if it's a git directory
#         echo "SrcName=${srcname/-/}" >> $Output
#       ;;
       *)
         echo "SrcName=$srcname" >> $Output
       ;;
    esac
  fi
# define sourcedir in the build file
  case $pkgname in
    avr-binutils)
      echo "sourcedir=${PKGUSERDIR}/core/binutils
blfsfiles=${blfsBuildFiles}/${blfsfiles}" >> $Output
    ;;
    avr-gcc)
      echo "sourcedir=${PKGUSERDIR}/core/gcc" >> $Output
    ;;
    py2-backports)
      :
    ;;
# need to define blfsfiles to apply patches, add conf, install files etc
    bumblebee|busybox|cairo|cblas|chromium|connman|crda|cuda|cups|farstream|glew|gnm-scrnsaver|gnome-session|gucharmap|hplip|iproute2|kodi|libgphoto2|libssh|libva-vdpau-driver|lockdev|nodejs|openjdk|openvpn|php|portsmf|primus|py2-matplotlib|py2-numpy|py3-pyqt5|py2-requests|py3-urllib3|qt5-base|qt5-webengine|recode|rustc|sane|sddm|sdl|sdl2|snappy|squid|thunderbird|tinyxml|udevil|wpa_supplicant|wxgtk|x265|xinit|xml-sax)
      echo "sourcedir=${srcrootdir}/${Section}
blfsfiles=${blfsBuildFiles}/${blfsfiles}" >> $Output
    ;;
    dbus)
      if [ "$SYSTEMD" = yes ]; then # src already present in core dir
        echo "sourcedir=\$CUR_DIR" >> $Output
      else
        echo "sourcedir=${srcrootdir}/${Section}" >> $Output
      fi
    ;;
    eudev|gcc|grep|iproute2|libcap|shadow|systemd) # these are already installed in core
      echo "sourcedir=\$CUR_DIR" >> $Output
    ;;
    firewall) # no source file
      cat >> $Output << "EOF"
starttime=$( date +%s )
EOF
    ;;
    java-hamcrest)
       echo "sourcedir=${srcrootdir}/${Section}
_libname=hamcrest" >> $Output
    ;;
    lxmenu-data|libfm-extra|menu-cache|libfm) # these are lxde packages installed for lxqt
      echo "sourcedir=${srcrootdir}/${section}" >> $Output
    ;;
    midori) # make sure the source is in ${srcrootdir}/browser
      echo "sourcedir=${srcrootdir}/browser" >> $Output
    ;;
    minizip)
       echo "sourcedir=${PKGUSERDIR}/core/zlib" >> $Output # use src from zlib
    ;;
    nvidia) # src should already be in nvidia-utils
       echo "sourcedir=\${CUR_DIR}/../nvidia-utils
blfsfiles=${blfsBuildFiles}/${blfsfiles}" >> $Output
    ;;
    openbox) # make sure the source is in ${srcrootdir}/windowmanager
      echo "sourcedir=${srcrootdir}/windowmanager" >> $Output
    ;;
# copy the src file from the py2 version of the following
    py3-appdirs|py3-cssselect|py3-packaging|py3-setuptools)
       local py2Vers=${pkgname/3/2}
       echo "sourcedir=\"\${CUR_DIR}/../$py2Vers\"" >> $Output
    ;;
    py3-matplotlib) # need to define blfsfiles as well
       echo "sourcedir=\"\${CUR_DIR}/../py2-matplotlib\"
blfsfiles=${blfsBuildFiles}/${blfsfiles}" >> $Output
    ;;
    python3) # include the version and series
       echo "sourcedir=\$CUR_DIR
Python3vers=$Python3vers
py3series=$py3series" >> $Output
    ;;
    sddm)
      echo "sourcedir=${srcrootdir}/displaymanager" >> $Output
    ;;
    *)
      echo "sourcedir=${srcrootdir}/${Section}" >> $Output
    ;;
  esac
# end defining sourcedir
else # building as root
  echo "starttime=\$( date +%s )" >> $Output
  cat >> $Output << "EOF"
CreateBuildDirasroot ${PkgUserDir}/${PkgName}
EOF
  if [[ "$Section" == x || "$pkgname" == libdrm || "$pkgname" == freeglut || "$pkgname" == glu ]]; then
    echo "source /etc/profile.d/xorg.sh" >> $Output
  elif [[ "$pkgname" == python3 ]]; then
    echo "Python3vers=$Python3vers
py3series=$py3series" >> $Output
  elif [[ "$pkgname" == samba ]]; then # make sure /run/lock exists
    echo "mkdir -pv /run/lock" >> $Output
  fi
fi # end as_root
# case to unpack sources
case $pkgname in
  py2-backports) # don't need curdir - don't cleanup when finished
     cat >> $Output << "EOF"
# *** NOTE ***
# There is no source file for this package
#
EOF
  ;;
  firewall) # don't need to unpack sources
     :
  ;;
  *)
     if [[ "$BOOK_VERSION" != arch && "$as_root" = false ]]; then mvlafiles >> $Output; fi
     if $useProxy; then
       setproxy >> $Output
       echo "setproxy" >> $Output
     fi
     unpack fileVersArray ArchPkgSrcName srcNameURLs tstcurVers tstpkgvers >> $Output
     if $installDEST; then
       case $pkgname in # rustc uses DESTDIR in the book
          rustc) # don't need destdirInstall
            :
          ;;
          *)
            destdirInstall
          ;;
       esac
     else
       case $pkgname in # some packages use a DESTDIR install even though useDESTDIR=false
          asciidoc|cups|cups-filters|git|iproute2|lirc|lvm2|pciutils|subversion)
            destdirInstall
          ;;
       esac
     fi
     cat >> $Output << "EOF"
unpack
retval=$?
if [ $retval -eq 1 ]; then # unpack failed so abort
  echo "Failed to unpack source for package $PkgName. Exiting now."
  exit 1
fi
EOF
  if [ "$BOOK_VERSION" != arch ]; then
    case $pkgname in # need to set up some env variables
      cuda) # don't need it here - it's included after cd pkg
        :
      ;;
      cups) # add the sed statement for the install_commmands if not DESTDIR install
        echo "curdir=\$( echo \$PWD )" >> $Output
#        if ! $useDESTDIR; then
#          sedCups_setup >> $Output
#          cat >> $Output << "EOF"
#sedCups_setup
#EOF
#        fi
      ;;
      lldb)
        : # don't need this
      ;;
      nvidia|bbswitch) # add the kernel version details
        echo "curdir=\$( echo \$PWD )
_extramodules=$_extramodules
_kernver=${rtrkernum}" >> $Output
      ;;
      nvidia-utils|blas) # need to add the create_links function for sonames
        create_links >> $Output
        echo "curdir=\$( echo \$PWD )" >> $Output
      ;;
      php) # add the configure variables
        echo "curdir=\$( echo \$PWD )" >> $Output
        php_setup >> $Output
        cat >> $Output << "EOF"
php_setup
EOF
      ;;
      $xlib|$xapp|$xfont)
        cursec=${pkgname//${xVers}/}
        echo "curdir=\$( echo \$PWD )/${cursec}" >> $Output
      ;;
      *)
        echo "curdir=\$( echo \$PWD )" >> $Output
        case $pkgname in
#           avahi|vlc) # add to PKG_CONFIG_PATH
#              echo "export PKG_CONFIG_PATH=\$PKG_CONFIG_PATH:/opt/qt5/lib/pkgconfig" >> $Output
#           ;;
           apache-ant)
              echo "source /etc/profile.d/openjdk.sh" >> $Output
              if $as_root; then
                echo "export PATH=\$PATH:/opt/jdk/bin" >> $Output
              fi
           ;;
#           ca-certificates) # test for a web connection
#	      cat >> $Output << "EOF"
## test for a web connection
#onlineNoWget
#if [ $? -eq 0 ]; then
#  echo "connection present - continue"
#else
#  echo "No web connection present, abort"
#  return 1
#fi
#EOF
#	   ;;   
           icedtea-web|icedtea-sound)
              echo "export JAVA_HOME=/opt/jdk"  >> $Output
           ;;
           py2-atspi|py3-atspi)
              echo "srcdir=\$( echo \$curdir | awk -F\\/ '{print \$NF}')" >> $Output
           ;;
           wget)
              echo "SSLTYPE=openssl
[ -e /usr/bin/gnutls-cli ] && SSLTYPE=gnutls" >> $Output
           ;;
        esac
      ;;
    esac
  fi
  ;;
esac
# end case unpacking sources
if [ "$BOOK_VERSION" != arch ]; then
  WriteScript1
  WriteScript2
else # copy files from the Arch binary file
  destdirInstall
  echo "destdirInstall \"\$CUR_DIR\"" >> $Output
# if installed the python2 module binaries, then want to reinstall from src, so don't touch
  case $pkgname in
     py2-ordered-set|py2-pyparsing|py2-setuptools)
       : # do nothing
     ;;
     *)
       echo "touch ~/.${pkgname}" >> $Output
     ;;
  esac
  cat >> $Output << "EOF"
rm .BUILDINFO .MTREE .PKGINFO
# delete the Arch binary file
rm ${SrcName}*.zst
endtime=$( date +%s )
elapsedtime=$( expr $endtime - $starttime )
echo "${PkgName} $unpacktime $elapsedtime" >> $BuildLog
IPS
EOF
  setuplinks # setup any preprocessing commands - then test doFirst, links and otherPrePro
# doFirst, links and otherPrePro are GLOBAL variables - do not pass them as arguments as
# any carriage returns will be lost
#  if $printit; then echo "doFirst is $doFirst, links is $links, otherPrePro is $otherPrePro"; fi
  if [[ ! -z "$otherPrePro" || ! -z "$doFirst" || ! -z "$links" ]]; then resolvelinks; fi # not null
fi
closefunction
} # end of Function
#
WriteScript2 () {
case $pkgname in
  aspell)  # install a dictionary (english by default)
# if using DESTDIR, need aspell installed to install a dictionary
  if $useDESTDIR; then
    cat >> $Output << "EOF"
cd ..
# need aspell installed to install the dictionary
destdirInstall "$CUR_DIR"
EOF
  else
    cat >> $Output << "EOF"
cd ..
EOF
  fi
  cat >> $Output << "EOF"
language="aspell6-en"
dictionary="${language}-2019.10.06-0.tar.bz2"
EOF
    cat >> $Output << "EOF"
if [ ! -e $dictionary ]; then
  wget $wgetopts ftp://ftp.gnu.org/gnu/aspell/dict/en/${dictionary}
fi
cd $(tar vxf $dictionary | awk -F\/ 'END{print $1}')
dictdir=$( echo $PWD )
./configure
make
make install
#end install dict
EOF
  ;;
  gimp) # install the help file
    cat >> $Output << "EOF"
cd ..
if [ -e $helpfile ]; then # install it
  helpconf () {
  ALL_LINGUAS="en" ./autogen.sh --prefix=/usr
  }
  cd $(tar vxf ${SrcName}help*.tar.*z* | awk -F\/ 'END{print $1}')
  helpdir=$( echo $PWD )
  echo -n HelpConfigure...
  { helpconf 3>&1 1>&2 2>&3 | tee "$CUR_DIR/helpconfigure.err" ;} &>"$CUR_DIR/helpconfigure.log"
  test_pipe
  echo -n HelpCompile...
  { make_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/helpmake.err" ;} &>"$CUR_DIR/helpmake.log"
  test_pipe
  echo -n HelpInstall..
  { install_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/helpinstall.err" ;} &>"$CUR_DIR/helpinstall.log"
  test_pipe
else
  echo "Help file $helpfile not present"
fi
EOF
  ;;
  libva) # add the commands for intel-vaapi-driver-
    cat >> $Output << "EOF"
pkgver=2.4.1
libvaIntelSrc=intel-vaapi-driver-${pkgver}.tar.bz2
cd $CUR_DIR
if [ -e ${CUR_DIR}/${libvaIntelSrc} ]; then
  echo "$libvaIntelSrc already in current dir - will use that one"
elif [ -e ${sourcedir}/${libvaIntelSrc} ]; then
  cp ${sourcedir}/${libvaIntelSrc} .
else
  wget $wgetopts https://github.com/intel/intel-vaapi-driver/releases/download/${pkgver}/${libvaIntelSrc}
fi
cd $(tar vxf $libvaIntelSrc | awk -F\/ 'END{print $1}')
inteldriverDir=$( echo $PWD )
echo -n intel-vaapi-driver-Configure...
{ configure_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/intel-vaapi-driver-configure.err" ;} &>"$CUR_DIR/intel-vaapi-driver-configure.log"
test_pipe
echo -n intel-vaapi-driver-Compile...
{ make_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/intel-vaapi-driver-make.err" ;} &>"$CUR_DIR/intel-vaapi-driver-make.log"
test_pipe
echo -n intel-vaapi-driver-Install...
{ install_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/intel-vaapi-driver-install.err" ;} &>"$CUR_DIR/intel-vaapi-driver-install.log"
test_pipe
EOF
  ;;
esac
cat >> $Output << "EOF"
endtime=$( date +%s )
EOF
# delete unwanted files after installation
case $pkgname in
  apache-maven)
     delSrcFile >> $Output
     echo "rm -rf .m2 .oracle_jre_usage" >> $Output
  ;;     
  aspell) # delete the dictionary dir as well
     delSrcFile >> $Output
     echo "if [ -e \$dictdir ]; then rm -rf \$dictdir; fi" >> $Output
  ;;
  avr-binutils)
     delSrcFile >> $Output
     echo "rm -rf binutils-build" >> $Output
  ;;
  avr-gcc)
     delSrcFile >> $Output
     echo "rm -rf gcc-build" >> $Output
  ;;
  blfs-btscrpts|firewall|java-hamcrest|junit|lldb|rpmextract|windscribe|xterm)
     : # don't delete any files
  ;;
  ccache)
     delSrcFile false >> $Output
     echo "rm -rf .wget-hsts" >> $Output
  ;;
  chromium)
     delSrcFile >> $Output
     echo "rm -rf .subversion" >> $Output
  ;;
  cmake|openobex)
     delSrcFile >> $Output
     echo "rm -rf .oracle_jre_usage" >> $Output
  ;;
  firefox|thunderbird) # delete .distlib and Desktop dir
     delSrcFile >> $Output
     echo "rm -rf .distlib Desktop" >> $Output
  ;;
  flashplugin) # delete the usr dir
     cat >> $Output << "EOF"
chmod 644 readme.txt # readonly file
# clean up
rm -rf libflashplayer.so LGPL readme.txt usr license.pdf
EOF
  ;;
  gimp) # delete the help dir as well
     delSrcFile >> $Output
     echo "if [ -e \$helpdir ]; then rm -rf \$helpdir; fi" >> $Output
  ;;
  icedtea-web)
     delSrcFile >> $Output
     echo "rm -rf .config" >> $Output
  ;;
  krb5) # del the .gnupg dir
     delSrcFile >> $Output
     echo "if [ -d .gnupg ]; then rm -rf .gnupg; fi" >> $Output
  ;;
  libfm)
     delSrcFile >> $Output
     echo "rm -rf etc usr" >> $Output
  ;;
  libva)
     delSrcFile >> $Output
     echo "rm -rf \$inteldriverDir" >> $Output
  ;;
  libvpx)
     delSrcFile >> $Output
     echo "rm -rf libvpx-build" >> $Output
  ;;
  openjdk)
     delSrcFile >> $Output
     echo "rm -rf .oracle_jre_usage" >> $Output
  ;;
  pepperflash)
     echo "rm -rf etc opt usr" >> $Output
  ;;
  php)
     delSrcFile >> $Output
     echo "rm -rf .channels .depdb* .filemap .lock .registry" >> $Output
  ;;
  py2-atspi|py3-atspi)
     delSrcFile >> $Output
     echo "rm -rf python*" >> $Output
  ;;
  py2-backports)
     :
  ;;
  py2-matplotlib|py3-matplotlib)
     delSrcFile >> $Output
     echo "unset XDG_RUNTIME_DIR" >> $Output
  ;;
  py3-ipython)
     cat >> $Output << "EOF"
rm -rf ipython-${pkgVers}
rm -rf simplegeneric-${simplevers}
rm -rf backcall-${backcallvers}
rm -rf .cache .ccache .wget-hsts
EOF
  ;;
  smpeg|portsmf|coin)
     delSrcFile >> $Output
     echo "rm -rf .subversion" >> $Output # from the svn download
  ;;
  speex) # del additional info file
     delSrcFile >> $Output
     echo "rm -rf speexdsp-*/" >> $Output # delete the speexdsp dir
  ;;
  thunderbird)
     delSrcFile >> $Output
     echo "rm -rf .distlib" >> $Output
  ;;
  wget)
     delSrcFile >> $Output
     echo "unset SSLTYPE" >> $Output
  ;;
  $xapp|$xfont|$xlib) # delete the current dir if using DESTDIR
     if $useDESTDIR; then
       delSrcFile >> $Output
       echo "rm -rf .links" >> $Output
     else
       echo "rm -rf .links .cache" >> $Output
     fi
  ;;
  xorg-server) # del .links dir
     delSrcFile >> $Output
     echo "rm -rf .links" >> $Output
  ;;
  *)
     delSrcFile >> $Output
  ;;
esac
installDIR="" 
if $useDESTDIR; then # test if installing
  if $installDEST; then
    case $pkgname in
       rustc) # book uses a DESTDIR method to install
         :
       ;;
       *)
         echo "destdirInstall \"\$CUR_DIR\"" >> $Output
       ;;
    esac
  else # specify the install directory
    installDIR=\"\$CUR_DIR\"
  fi
else # some packages use DESTDIR, even though useDESTDIR is false
  case $pkgname in
     asciidoc|cups|cups-filters|git|iproute2|lirc|lvm2|pciutils|subversion)
       echo "destdirInstall \"\$CUR_DIR\"" >> $Output
     ;;
  esac
fi
# move all .la files
case $pkgname in
   jdkbin|openjdk)
     echo "mvlafiles \"/opt/jdk/lib\" $installDIR" >> $Output
   ;;
   apache-ant|cuda|dotnet|qt5|qt5-webengine|qtwebkit)
     echo "mvlafiles \"/opt\" $installDIR" >> $Output
   ;;
   gtkplus3)
     echo "mvlafiles \"/usr/lib\" $installDIR" >> $Output
   ;;
   py2-backports)
     : # no src file for this package
   ;;
   py3-dbus)
     echo "rm -v /usr/lib/python${py3series}/site-packages/{_dbus_bindings.la,_dbus_glib_bindings.la}" >> $Output
   ;;
   *)
     echo "mvlafiles \"/usr/lib\" $installDIR" >> $Output
   ;;
esac
# Now touch before the timing
if ! $useDESTDIR; then
    case $pkgname in
      blas) # create soname for the /usr/lib file
        cat >> $Output << "EOF"
create_links /usr/lib libblas
EOF
        if $as_root; then
          echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}' >> $Output
        else
          echo "touch ~/.${pkgname}" >> $Output
        fi
      ;;
      blfs-btscrpts)
        if $as_root; then
          echo 'touch ${PkgUserDir}/${PkgName}/.${btscrpt}' >> $Output
        else
          echo 'touch ~/.${btscrpt}' >> $Output
        fi
      ;;
      $xlib|$xapp|$xfont)
        if $as_root; then
          echo 'set +e
touch ${PkgUserDir}/${PkgName}/.${PkgName}' >> $Output
        else
          echo "set +e
touch ~/.${pkgname}" >> $Output
        fi
      ;;
      dbus) # need to know when dbus-launch has been installed
        if $as_root; then
          echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}_launch' >> $Output
        else
          echo "touch ~/.${pkgname}_launch" >> $Output
        fi
      ;;
      eudev) # need to know when eudev with gudev has been installed
        if $as_root; then
          echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}_gudev' >> $Output
        else
          echo "touch ~/.${pkgname}_gudev" >> $Output
        fi
      ;;
      grep) # need to know when grep with pcre support has ben installed
        if $as_root; then
          echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}_pcre' >> $Output
        else
          echo "touch ~/.${pkgname}_pcre" >> $Output
        fi
      ;;
      iproute2) # need to know when iproute2_blfs has been installed
        if $as_root; then
          echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}_blfs' >> $Output
        else
          echo "touch ~/.${pkgname}_blfs" >> $Output
        fi
      ;;
      libva) # run twice so need to count
        cat >> $Output << "EOF"
if [ -e ~/.libvafirst ]; then
  touch ~/.libva
  rm ~/.libvafirst
else
  touch ~/.libvafirst
fi
EOF
      ;;
      nvidia-utils) # create the sonames for library files
        cat >> $Output << "EOF"
create_links /usr/lib libnvidia-wfb
create_links /usr/lib libGLX_nvidia
create_links /usr/lib libEGL_nvidia
create_links /usr/lib libGLESv1_CM_nvidia
create_links /usr/lib libGLESv2_nvidia
create_links /usr/lib libnvidia-glcore
create_links /usr/lib libnvidia-eglcore
create_links /usr/lib libnvidia-glsi
create_links /usr/lib libnvidia-ifr
create_links /usr/lib libnvidia-fbc
create_links /usr/lib libnvidia-encode
create_links /usr/lib libnvidia-cfg
create_links /usr/lib libnvidia-ml
create_links /usr/lib libnvidia-glvkspirv
create_links /usr/lib/vdpau libvdpau_nvidia
create_links /usr/lib libnvidia-tls
create_links /usr/lib libcuda
create_links /usr/lib libnvcuvid
create_links /usr/lib libnvidia-ptxjitcompiler
create_links /usr/lib libnvidia-fatbinaryloader
create_links /usr/lib libnvoptix
create_links /usr/lib libnvidia-rtcore
create_links /usr/lib libnvidia-cbl
create_links /usr/lib/nvidia libEGL
create_links /usr/lib/nvidia libGL
EOF
        if $as_root; then
          echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}' >> $Output
        else
          echo "touch ~/.${pkgname}" >> $Output
        fi
      ;;
      python3) # need to know when python3 has been installed with tk support
        if $as_root; then
          echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}_tk' >> $Output
        else
          echo "touch ~/.${pkgname}_tk" >> $Output
        fi
      ;;
      systemd) # need to know when systemd with gudev has been installed
        if $as_root; then
          echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}_gudev' >> $Output
        else
          echo "touch ~/.${pkgname}_gudev" >> $Output
        fi
      ;;
      *)
        if $as_root; then
          echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}' >> $Output
        else
          echo "touch ~/.${pkgname}" >> $Output
        fi
      ;;
    esac
else # destdir install, so use .$pkgname-destdir unless reinstalling in /usr/src/core
  case $pkgname in
     dbus)
       if $as_root; then
         echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}_launch' >> $Output
       else
         echo "touch ~/.${pkgname}_launch" >> $Output
       fi
    ;;
     grep) # use touch .grep_pcre
       if $as_root; then
         echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}_pcre' >> $Output
       else
         echo "touch ~/.${pkgname}_pcre" >> $Output
       fi
    ;;
    python3) # need to know when python3 has been installed with tk support
      if $as_root; then
        echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}_tk' >> $Output
      else
        echo "touch ~/.${pkgname}_tk" >> $Output
      fi
    ;;    
    systemd)
       if $as_root; then
         echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}_gudev' >> $Output
       else
         echo "touch ~/.${pkgname}_gudev" >> $Output
       fi
    ;;
    *)    
      if $as_root; then
        echo 'touch ${PkgUserDir}/${PkgName}/.${PkgName}-destdir' >> $Output
      else
        echo "touch ~/.${pkgname}-destdir" >> $Output
      fi
    ;;
  esac
fi
case $pkgname in
   py2-backports)
     :
   ;;
   *)
     cat >> $Output << "EOF"
elapsedtime=$( expr $endtime - $starttime )
echo "${PkgName} $unpacktime $elapsedtime" >> $BuildLog
EOF
   ;;
esac
if ! $as_root; then
  echo "IPS" >> $Output
  setuplinks # setup any preprocessing commands - then test doFirst, links and otherPrePro
# doFirst, links and otherPrePro are GLOBAL variables - do not pass them as arguments as
# any carriage returns will be lost
  if [[ ! -z "$doFirst" || ! -z "$links" || ! -z "$otherPrePro" ]]; then resolvelinks; fi # not null
  if [ "$pkgname" = evolution ]; then # write out the functions to get version #
    float_test
    evolutionVersion
  fi
fi
} # end WriteScript2
#
closefunction () {
if ! $as_root; then
cat >> $Output << "EOF"
if [ "$(grep -q ^$PkgName\: /etc/passwd;echo $?)" != 0 ]; then
  for (( kn=4; kn>0; kn-- )); do
    if [ $kn -eq 1 ]; then # there is no install1, it's install
      numcharInstall install
      if [ $numchars -gt 2030 ]; then # limit of 2048. Create a new install group
        echo "install group has nearly reached the limit of 2048 chars"
        echo "create a new install group called install2. To do this, edit"
        echo "/etc/group and insert install2:x:9999:"
        echo "Then change install in /usr/sbin/installpkg to install2"
        echo "You'll find it at the end of the useradd line."
        exit 1
      else
        break
      fi
    else
      if [ "$(grep -q ^install${kn}\: /etc/group;echo $?)" = 0 ]; then # install$kn exists
        numcharInstall install${kn}
        if [ $numchars -gt 2030 ]; then
          count=$((kn+1))
          echo "You'll have to make another install group - install${count}"
          echo "Update /etc/group and /usr/sbin/installpkg as before"
          exit 1
        else
          break
        fi
      fi
    fi
  done
EOF
case $pkgname in
  apache)
     cat >> $Output << "EOF"
  installpkg $PkgName $section 25
EOF
  ;;
  avahi)
     cat >> $Output << "EOF"
  installpkg $PkgName $section 84
EOF
  ;;
  colord)
     cat >> $Output << "EOF"
  installpkg $PkgName $section 71
EOF
  ;;
  dhcpcd) # if pkguser, use installpkg. if root use book values
     if $as_root; then
       cat >> $Output << "EOF"
groupadd -g 52 dhcpcd
useradd  -c 'dhcpcd PrivSep' -d /var/lib/dhcpcd -g dhcpcd -s /bin/false -u 52 dhcpcd
EOF
     else # pkguser
       cat >> $Output << "EOF"
  installpkg $PkgName $section 52
EOF
     fi
  ;;
  gdm)
     cat >> $Output << "EOF"
  installpkg $PkgName $section 21
EOF
  ;;
  sddm)
     cat >> $Output << "EOF"
  installpkg $PkgName $section 64
EOF
  ;;
  *)
     cat >> $Output << "EOF"
  installpkg $PkgName $section
EOF
  ;;
esac
cat >> $Output << "EOF"
fi
EOF
if [[ ! -z "$doFirst" || ! -z "$links" || ! -z "$otherPrePro" ]]; then # preprocessing
cat >> $Output << "EOF"
resolvelinks
EOF
fi
if [ "$pkgname" = cbindgen ]; then # need a web connection to run this
  cat >> $Output << "EOF"
# check if there is a web connection because cbindgen downloads crates
testOnline
if [ $? -ne 0 ]; then
  echo "*** No web connection ***"
  echo "cbindgen needs an internet connection to run"
  echo "Connect to the web before running this script"
  echo "***** WARNING cbindgen function did not run *****"
  return 1
else
  echo "web connection found - continue installation"
fi
EOF
elif [ "$pkgname" = "ca-certificates" ]; then # need a web connection to download the certs
  cat >> $Output << "EOF"
onlineNoWget
if [ $? -ne 0 ]; then
  echo "*** No web connection ***"
  echo "ca-certificates needs an internet connection to run"
  echo "Connect to the web before running this script"
  echo "***** WARNING ca-certificates did not run *****"
 return 1
else
  echo "web connection found - download the certificates"
fi
EOF
elif [ "$pkgname" = rustc ]; then # a different way to test for a web connection
  cat >> $Output << "EOF"
# check if there is a web connection because rustc downloads crates
testOnline
if [ $? -ne 0 ]; then
echo "*** No web connection ***"
 echo "Rustc needs an internet connection to run"
 echo "Connect to the web before running this script"
 echo "***** WARNING rustc function did not run *****"
 return 1
else
 echo "web connection found - continue installation"
fi
EOF
elif [ "$pkgname" = "apache-maven" ]; then
  cat >> $Output << "EOF"
# test for web connection
testOnline
if [ $? -ne 0 ]; then
  echo "Need a web connection to install apache-maven"
  echo "Log on to the target machine to install this package"
  return 1
else
 echo "web connection found - continue installation"
fi
EOF
elif [ "$pkgname" = "junit" ]; then
  cat >> $Output << "EOF"
# test for web connection
testOnline
if [ $? -ne 0 ]; then
  echo "Need a web connection to install junit"
  echo "because it uses mvn from apache-maven"
  echo "Log on to the target machine to install this package"
  return 1
else
 echo "web connection found - continue installation"
fi
EOF
elif [ "$pkgname" = "thunderbird" ]; then # test running in chroot
  cat >> $Output << "EOF"
if [ "$(stat -c %d:%i /)" != "$(stat -c %d:%i /proc/1/root/.)" ]; then
  echo "You are running in chroot"
  echo "Installing thunderbird in chroot will probably fail"
  echo "Log on to the target machine to install this package"
  return 1
fi
EOF
fi
echo "chown \$PkgName:\$PkgName \${PkgUserDir}/\${PkgName}/build
chmod 755 \${PkgUserDir}/\${PkgName}/build
su \$PkgName -c \"source \${PkgUserDir}/\${PkgName}/.bash_profile\"" >> $Output
if [ "$SECTION" != pythonmodbin ]; then # don't want to check that package installed if it's pythonmodbin
  case $pkgname in
     blfs-btscrpts)
       cat >> $Output << "EOF"
if [ ! -e ${PkgUserDir}/${PkgName}/.${btscrpt} ]; then
  echo "$btscrpt failed"
  exit 1
fi
EOF
     ;;
     dbus)
       cat >> $Output << "EOF"
if [ ! -e ${PkgUserDir}/${PkgName}/.${PkgName}_launch ]; then
  echo "$PkgName failed"
  exit 1
fi
EOF
     ;;
     eudev|systemd)
       cat >> $Output << "EOF"
if [ ! -e ${PkgUserDir}/${PkgName}/.${PkgName}_gudev ]; then
  echo "$PkgName failed"
  exit 1
fi
EOF
     ;;
     grep)
       cat >> $Output << "EOF"
if [ ! -e ${PkgUserDir}/${PkgName}/.${PkgName}_pcre ]; then
  echo "$PkgName failed"
  exit 1
fi
EOF
     ;;
     iproute2)
       cat >> $Output << "EOF"
if [ ! -e ${PkgUserDir}/${PkgName}/.${PkgName}_blfs ]; then
  echo "$PkgName failed"
  exit 1
fi
EOF
     ;;
     libva) # first time through should be .libvafirst, second time .PkgName
       cat >> $Output << "EOF"
if [[ ! -e ${PkgUserDir}/${PkgName}/.${PkgName} && ! -e ${PkgUserDir}/${PkgName}/.libvafirst ]]; then
  echo "$PkgName failed"
  exit 1
fi
EOF
     ;;
     python3)
       cat >> $Output << "EOF"
if [ ! -e ${PkgUserDir}/${PkgName}/.${PkgName}_tk ]; then
  echo "$PkgName failed"
  exit 1
fi
EOF
     ;;
     *)
       if $useDESTDIR; then
         cat >> $Output << "EOF"
if [ ! -e ${PkgUserDir}/${PkgName}/.${PkgName}-destdir ]; then
  echo "$PkgName using DESTDIR failed"
  exit 1
fi
EOF
       else
         cat >> $Output << "EOF"
if [ ! -e ${PkgUserDir}/${PkgName}/.${PkgName} ]; then
  echo "$PkgName failed"
  exit 1
fi
EOF
       fi
     ;;
  esac
fi # end test if not pythonmodbin
# if evolution is installed, get the version #
if [ "$pkgname" = evolution ]; then
  cat >> $Output << "EOF"
evolutionVersion
EOF
fi
#
# if [ "$BOOK_VERSION" != arch ]; then # Arch binaries also installed as pkguser
#set required dirs to be install dirs if installing as a package user 
#
case $pkgname in
   adwaita-icn-thm)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/icons/Adwaita/scalable/places
chmod g+w,o+t /usr/share/icons/Adwaita/scalable/places
EOF
      else # creating a package binary file
         cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/Adwaita/scalable/places
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/Adwaita/scalable/places
EOF
      fi
    ;;
    aisleriot)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/icons/HighContrast/scalable
chmod g+w,o+t /usr/share/icons/HighContrast/scalable
chgrp install /usr/share/icons/HighContrast/scalable/apps
chmod g+w,o+t /usr/share/icons/HighContrast/scalable/apps
EOF
      else
         cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/HighContrast/scalable
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/HighContrast/scalable
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/HighContrast/scalable/apps
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/HighContrast/scalable/apps
EOF
      fi
    ;;
    alien-build)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         echo "chgrp install /usr/lib/perl5/${perlseries}/site_perl/auto/Alien
chmod g+w,o+t /usr/lib/perl5/${perlseries}/site_perl/auto/Alien
chgrp install /usr/lib/perl5/${perlseries}/site_perl/Alien
chmod g+w,o+t /usr/lib/perl5/${perlseries}/site_perl/Alien" >> $Output
      else
         echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/auto/Alien
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/auto/Alien" >> $Output
      fi
    ;;
    alsa-lib)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
if [ -d /usr/lib/alsa-lib ]; then
  chgrp install /usr/lib/alsa-lib
  chmod g+w,o+t /usr/lib/alsa-lib
fi
chgrp install /usr/share/alsa
chmod g+w,o+t /usr/share/alsa
EOF
      else
         cat >> $Output << "EOF"
if [ -d ${PkgUserDir}/${PkgName}/usr/lib/alsa-lib ]; then
  chgrp install ${PkgUserDir}/${PkgName}/usr/lib/alsa-lib
  chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/alsa-lib
fi
chgrp install ${PkgUserDir}/${PkgName}/usr/share/alsa
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/alsa
EOF
      fi
    ;;
    alsa-plugins)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
if [ -d /usr/lib/alsa-lib ]; then
  chgrp install /usr/lib/alsa-lib
  chmod g+w,o+t /usr/lib/alsa-lib
fi
if [ -d /usr/share/alsa/alsa.conf.d ]; then
  chgrp install /usr/share/alsa/alsa.conf.d
  chmod g+w,o+t /usr/share/alsa/alsa.conf.d
fi
EOF
      else
         cat >> $Output << "EOF"
if [ -d ${PkgUserDir}/${PkgName}/usr/lib/alsa-lib ]; then
  chgrp install ${PkgUserDir}/${PkgName}/usr/lib/alsa-lib
  chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/alsa-lib
fi
if [ -d ${PkgUserDir}/${PkgName}/usr/share/alsa/alsa.conf.d ]; then
  chgrp install ${PkgUserDir}/${PkgName}/usr/share/alsa/alsa.conf.d
  chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/alsa/alsa.conf.d
fi
EOF
      fi
    ;;
    alsa-utils)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/sounds
chmod g+w,o+t /usr/share/sounds
chgrp install /usr/lib/udev
chmod g+w,o+t /usr/lib/udev
chgrp install /usr/lib/udev/rules.d
chmod g+w,o+t /usr/lib/udev/rules.d
if [ -d /usr/lib/systemd/system/basic.target.wants ]; then
  chgrp install /usr/lib/systemd/system/basic.target.wants
  chmod g+w,o+t /usr/lib/systemd/system/basic.target.wants
fi
if [ ! -d /var/lib/alsa ]; then
  install -v -m0755 -d /var/lib/alsa
  chown alsa-utils:alsa-utils /var/lib/alsa
fi
EOF
      else
         cat >> $Output << "EOF"
mkdir -pv ${PkgUserDir}/${PkgName}/var/lib/alsa
chown alsa-utils:alsa-utils ${PkgUserDir}/${PkgName}/var/lib/alsa
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/udev
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/udev
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/udev/rules.d
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/udev/rules.d
EOF
      fi
    ;;
    apache)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/httpd/modules
chmod g+w,o+t /usr/lib/httpd/modules
if ! $AS_ROOT; then chown root:apache /usr/lib/httpd/suexec && chmod 4754 /usr/lib/httpd/suexec; fi
EOF
      else
         cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/httpd/modules
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/httpd/modules
if ! $AS_ROOT; then
  chown root:apache ${PkgUserDir}/${PkgName}/usr/lib/httpd/suexec
  chmod 4754 ${PkgUserDir}/${PkgName}/usr/lib/httpd/suexec
fi
install -D -m644 ${blfsfiles}/install-files/server/apache.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
      fi
    ;;
    apr)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/include/apr-1 #for apr-util
chmod g+w,o+t /usr/include/apr-1
chgrp install /srv
chmod g+w,o+t /srv
chgrp install /var/log
chmod g+w,o+t /var/log
EOF
      else
         cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/apr-1
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/apr-1
EOF
      fi
    ;;
    archive-zip)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         echo "chgrp install /usr/lib/perl5/${perlseries}/site_perl/auto
chmod g+w,o+t /usr/lib/perl5/${perlseries}/site_perl/auto" >> $Output
      else
         echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/auto
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/auto" >> $Output
      fi
    ;;
    aspell)
	 if [ "$BOOK_VERSION" != arch ]; then
           cat >> $Output << "EOF"
echo "*************************************************************"
echo "*                                                           *"
echo "* English dictionary installed - edit script to change this *"
echo "*                                                           *"
echo "*************************************************************"
EOF
         fi
    ;;
    atk)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/locale/li/LC_MESSAGES
chmod g+w,o+t /usr/share/locale/li/LC_MESSAGES
EOF
      else
         cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/locale/li/LC_MESSAGES
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/locale/li/LC_MESSAGES
EOF
      fi
    ;;
    at-spi2-atk)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/gnome-settings-daemon-3.0
chmod g+w,o+t /usr/lib/gnome-settings-daemon-3.0
chgrp install /usr/lib/gnome-settings-daemon-3.0/gtk-modules
chmod g+w,o+t /usr/lib/gnome-settings-daemon-3.0/gtk-modules
chgrp install /usr/lib/gtk-2.0
chmod g+w,o+t /usr/lib/gtk-2.0
chgrp install /usr/lib/gtk-2.0/modules
chmod g+w,o+t /usr/lib/gtk-2.0/modules
EOF
      else
         cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gnome-settings-daemon-3.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gnome-settings-daemon-3.0
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gnome-settings-daemon-3.0/gtk-modules
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gnome-settings-daemon-3.0/gtk-modules
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0/modules
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0/modules
EOF
      fi
    ;;
    at-spi2-core)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /etc/xdg
chmod g+w,o+t /etc/xdg
chgrp install /etc/xdg/autostart # for polkit-gnome
chmod g+w,o+t /etc/xdg/autostart
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/etc/xdg
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/xdg
chgrp install ${PkgUserDir}/${PkgName}/etc/xdg/autostart
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/xdg/autostart
EOF
      fi
    ;;
    attr)
         cat >> $Output << "EOF"
chgrp install /usr/include/sys # for acl
chmod g+w,o+t /usr/include/sys
EOF
    ;;
    avahi)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/applications
chmod g+w,o+t /usr/share/applications
EOF
      else
	 cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/install-files/networks/avahi.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
      fi
    ;;
    babl)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/gtk-doc
chmod g+w,o+t /usr/share/gtk-doc
chgrp install /usr/share/gtk-doc/html # for gnutls
chmod g+w,o+t /usr/share/gtk-doc/html
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gtk-doc
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gtk-doc
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gtk-doc/html
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gtk-doc/html
EOF
      fi
    ;;
    baobab)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/help/{id,it,ru}
chmod g+w,o+t /usr/share/help/{id,it,ru}
sed -i '/MimeType/d' /usr/share/applications/org.gnome.baobab.desktop
EOF
      fi
    ;;
    bash-completion)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
	 cat >> $Output << "EOF"
if [ -e /usr/share/bash-completion/completions/makepkg ]; then
  rm /usr/share/bash-completion/completions/makepkg # Slackware make package
fi
chgrp install /usr/share/bash-completion/helpers
chmod g+w,o+t /usr/share/bash-completion/helpers
EOF
      else
         cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/bash-completion/helpers
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/bash-completion/helpers
EOF
      fi
    ;;
    bbswitch)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/modules/$EXTRAMODULES
chmod g+w,o+t /usr/lib/modules/$EXTRAMODULES
EOF
      fi
    ;;
    bind)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
mknod /srv/named/dev/null c 1 3
mknod /srv/named/dev/urandom c 1 9
chmod 666 /srv/named/dev/{null,urandom}
chmod 770 /srv/named
rndc-confgen -r /dev/urandom -b 512 > /etc/rndc.conf
sed '/conf/d;/^#/!d;s:^# ::' /etc/rndc.conf > /srv/named/etc/named.conf
EOF
       else
         cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/install-files/server/bind.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
      fi
    ;;
    bluez)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/cups
chmod g+w,o+t /usr/lib/cups
chgrp install /etc/dbus-1/system.d
chmod g+w,o+t /etc/dbus-1/system.d
EOF
      else
         cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/cups
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/cups
chgrp install ${PkgUserDir}/${PkgName}/etc/dbus-1/system.d
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/dbus-1/system.d
EOF
      fi
    ;;
    brasero)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/nautilus/extensions-3.0
chmod g+w,o+t /usr/lib/nautilus/extensions-3.0
chgrp install /usr/share/mime/packages
chmod g+w,o+t /usr/share/mime/packages
chgrp install /usr/share/help/{ro,zh_HK,zh_TW}
chmod g+w,o+t /usr/share/help/{ro,zh_HK,zh_TW}
EOF
      else
         cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/nautilus/extensions-3.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/nautilus/extensions-3.0
chgrp install ${PkgUserDir}/${PkgName}/usr/share/mime/packages
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/mime/packages
chgrp install ${PkgUserDir}/${PkgName}/usr/share/help/{ro,zh_HK,zh_TW}
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/help/{ro,zh_HK,zh_TW}
install -D -m644 ${blfsfiles}/install-files/gnomeapps/brasero.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
      fi
    ;;
    ca-certificates)
      cat >> $Output << "EOF"
if [ -d /etc/pki/tls/java ]; then
  chgrp install /etc/pki/tls/java
  chmod g+w,o+t /etc/pki/tls/java
fi
# remove /usr/libexec as install dir
chgrp 0 /usr/libexec
chmod 755 /usr/libexec
EOF
      if [[ $useDESTDIR = true && $installDEST = true ]]; then
# make-ca installed so run it - will be root
         cat >> $Output << "EOF"
#
# make the certificates
/usr/sbin/make-ca -g
systemctl enable update-pki.timer
if ! $AS_ROOT; then
# make-ca run as root so change owner to ca-certificates
chown ca-certificates:ca-certificates /etc/make-ca.conf.dist
chown -R ca-certificates:ca-certificates /etc/pki
chown -h ca-certificates:ca-certificates /etc/ssl/certs
chown ca-certificates:ca-certificates /usr/bin/make-ca
chown ca-certificates:ca-certificates /usr/lib/systemd/system/update-pki.*
chown ca-certificates:ca-certificates /usr/share/man/man8/make-ca.8
fi
EOF
      fi
    ;;
    cantarell-fonts)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
	 cat >> $Output << "EOF"
if [ -d /usr/share/appdata ]; then
  chgrp install /usr/share/appdata
  chmod g+w,o+t /usr/share/appdata
fi
EOF
      fi
    ;;
    caribou)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/gtk-3.0/modules
chmod g+w,o+t /usr/lib/gtk-3.0/modules
EOF
      fi
    ;;
    clutter)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/include/clutter-1.0
chmod g+w,o+t /usr/include/clutter-1.0
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/clutter-1.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/clutter-1.0
EOF
      fi
    ;;
    codelite)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
# need rsync installed
if [ ! -e /usr/bin/rsync ]; then
  echo "rsync not present."
  echo "Please install it in order to continue."
  exit 1
fi
rsyncopts="-vrlogK"
# install the files
pushd ${PkgUserDir}/codelite # location of usr dir
listDIRS=$(ls -l --time-style="long-iso" . | grep '^d' | awk '{print $8}')
for eachDir in $listDIRS; do # don't install the codelite directory
  if [ "$eachDir" != codelite ]; then
    echo "installing files in $eachDir"
    rsync $rsyncopts $eachDir /
    rm -rf $eachDir
  fi
done
popd
# restore correct UID and GID
chown 0:0 /usr
chown root:install /usr/{bin,lib,share/{,locale,man}}
chown gtkplus3:install /usr/share/applications
chown hcolr-icon-thme:install /usr/share/icons/{,hicolor/{,128x128/apps,256x256/apps,32x32/apps,64x64/apps}}
chown hcolr-icon-thme:hcolr-icon-thme /usr/share/icons/hicolor/{128x128,256x256,32x32,64x64}
chown glibc:install /usr/share/locale/{cs/{,LC_MESSAGES},zh_CN/{,LC_MESSAGES}}
chown man-pages:install /usr/share/man/man1
gtk-update-icon-cache
EOF
      fi
    ;;
    colord)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/include/colord-1 # for colord-gtk
chmod g+w,o+t /usr/include/colord-1
EOF
      fi
    ;;
    consolekit)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/dbus-1/interfaces # for upower
chmod g+w,o+t /usr/share/dbus-1/interfaces
EOF
      fi
    ;;
    cracklib)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/locale/*/LC_MESSAGES
chmod g+w,o+t /usr/share/locale/*/LC_MESSAGES
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/locale/*/LC_MESSAGES
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/locale/*/LC_MESSAGES
EOF
      fi
    ;;
    crda)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/crda
chmod g+w,o+t /usr/lib/crda
chgrp install /etc/conf.d
chmod g+w,o+t /etc/conf.d
EOF
      fi
    ;;
    cups)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
          cat >> $Output << "EOF"
if [ -d /usr/lib/cups/driver ]; then
  chgrp install /usr/lib/cups/driver # for gutenprint
  chmod g+w,o+t /usr/lib/cups/driver
fi 
chgrp install /usr/lib/cups/filter
chmod g+w,o+t /usr/lib/cups/filter
chgrp install /usr/share/cups
chmod g+w,o+t /usr/share/cups
chgrp install /usr/share/cups/banners
chmod g+w,o+t /usr/share/cups/banners
chgrp install /usr/share/cups/model # for ghostscript
chmod g+w,o+t /usr/share/cups/model
chgrp install /usr/share/cups/data # for cups-filters
chmod g+w,o+t /usr/share/cups/data
chgrp install /usr/share/cups/drv
chmod g+w,o+t /usr/share/cups/drv
chgrp install /usr/share/cups/mime # for cups-filters
chmod g+w,o+t /usr/share/cups/mime
chgrp install /usr/share/cups/ppdc
chmod g+w,o+t /usr/share/cups/ppdc
chgrp install /usr/share/cups/usb
chmod g+w,o+t /usr/share/cups/usb
chgrp install /etc/cups
chmod g+w,o+t /etc/cups
chgrp install /usr/lib/cups/backend
chmod g+w,o+t /usr/lib/cups/backend # for samba symlink smb
cat > /etc/cups/printers.conf << "EOFCUPS"
# Printer configuration file for CUPS v2.3.1
# Written by cupsd
# DO NOT EDIT THIS FILE WHEN CUPSD IS RUNNING
NextPrinterId 2
<Printer Samsung_C1810_Serie>
PrinterId 1
UUID urn:uuid:bbce6fe2-4e82-31e2-735e-341ba431733e
Info 
Location 
MakeModel Samsung C1810 Series, driverless, cups-filters 1.28.7
DeviceURI implicitclass://Samsung_C1810_Series/
State Idle
StateTime 1612210813
ConfigTime 1612211078
Type 8425548
Accepting Yes
Shared No
JobSheets none none
QuotaPeriod 0
PageLimit 0
KLimit 0
OpPolicy default
ErrorPolicy retry-job
Option cups-browsed true
Option orientation-requested 3
</Printer>
EOFCUPS
# change ownership of cups files as needed
chown root:lp /etc/cups/printers.conf
chmod 600 /etc/cups/printers.conf
chown root:lp /etc/cups/cupsd.conf
chown root:lp /etc/cups/cupsd.conf.default
if [ -d /etc/cups/interfaces ]; then chown root:lp /etc/cups/interfaces; fi
chown root:lp /etc/cups/ppd
chown root:lp /etc/cups/snmp.conf
chown root:lp /etc/cups/ssl
chown root:lp /var/cache/cups
chown root:lp /var/cache/cups/rss
chown root:lp /var/spool/cups
chown root:lp /var/spool/cups/*
chown root /usr/bin/cupsd
chown root /usr/lib/cups/cgi-bin
chown root /usr/lib/cups/cgi-bin/*.cgi
chown root /usr/lib/cups/filter/{commandtops,pstops}
chown root /usr/lib/cups/notifier
chown root /usr/lib/cups/notifier/dbus
chown root /usr/lib/cups/backend/usb
gtk-update-icon-cache
EOF
         if [ "$SYSTEMD" = yes ]; then
           cat >> $Output << "EOF"
sed -i 's|^Exec=htmlview http://localhost:631/|Exec=xdg-open http://localhost:631/|g' /usr/share/applications/cups.desktop
EOF
         fi
      fi
    ;;
    cups-filters)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chown root:cups /usr/lib/cups/{backend,daemon/{,cups-deviced},driver,filter}
chmod 755  /usr/lib/cups/{backend,daemon/{,cups-deviced},driver,filter}
chown root:lp /etc/cups
EOF
      fi
    ;;
    cvs)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /opt
chmod g+w,o+t /opt
chgrp install /etc/profile.d
chmod g+w,o+t /etc/profile.d
chgrp install /etc/profile.d/extrapaths.sh
chmod 664 /etc/profile.d/extrapaths.sh
chgrp install /etc/ld.so.conf
chmod 664 /etc/ld.so.conf
EOF
      fi
    ;;
    cyrus-sasl)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
        if [ "$SYSTEMD" = yes ]; then
              cat >> $Output << "EOF"
install -Dm644 ${blfsfiles}/conf-files/saslauthd.conf.d /etc/conf.d/saslauthd
install -Dm644 ${blfsfiles}/service/saslauthd.service /usr/lib/systemd/system/saslauthd.service
install -Dm644 ${blfsfiles}/conf-files/sastmpfiles.conf /usr/lib/tmpfiles.d/saslauthd.conf
chown cyrus-sasl:cyrus-sasl /etc/conf.d/saslauthd /usr/lib/{systemd/system/saslauthd.service,tmpfiles.d/saslauthd.conf}
EOF
        fi
      else
	if [ "$SYSTEMD" = yes ]; then
	      cat >> $Output << "EOF"
install -Dm644 ${blfsfiles}/conf-files/saslauthd.conf.d ${PkgUserDir}/${PkgName}/etc/conf.d/saslauthd
install -Dm644 ${blfsfiles}/service/saslauthd.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/saslauthd.service
install -Dm644 ${blfsfiles}/conf-files/sastmpfiles.conf ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/saslauthd.conf
chown cyrus-sasl:cyrus-sasl ${PkgUserDir}/${PkgName}/{etc/conf.d/saslauthd,usr/lib/{systemd/system/saslauthd.service,tmpfiles.d/saslauthd.conf}}
EOF
        fi
      fi
    ;;
    dbus)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/dbus-1.0
chmod g+w,o+t /usr/lib/dbus-1.0
chgrp install /usr/include/dbus-1.0/dbus
chmod g+w,o+t /usr/include/dbus-1.0/dbus
chgrp install /usr/share/xml
chmod g+w,o+t /usr/share/xml
chgrp install /usr/share/dbus-1
chmod g+w,o+t /usr/share/dbus-1
chgrp install /usr/share/dbus-1/services
chmod g+w,o+t /usr/share/dbus-1/services
chgrp install /usr/share/dbus-1/system-services
chmod g+w,o+t /usr/share/dbus-1/system-services
EOF
        if [ "$SYSTEMD" = yes ]; then
           cat >> $Output << "EOF"
chown root:messagebus /usr/lib/dbus-1.0/dbus-daemon-launch-helper
chmod 4750 /usr/lib/dbus-1.0/dbus-daemon-launch-helper  # set uid root binary
EOF
        else
           cat >> $Output << "EOF"
chown root:messagebus /usr/libexec/dbus-daemon-launch-helper
chmod 4750 /usr/libexec/dbus-daemon-launch-helper
EOF
        fi
      else
         cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/dbus-1.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/dbus-1.0
chgrp install ${PkgUserDir}/${PkgName}/usr/include/dbus-1.0/dbus
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/dbus-1.0/dbus
chgrp install ${PkgUserDir}/${PkgName}/usr/share/xml
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/xml
chgrp install ${PkgUserDir}/${PkgName}/usr/share/dbus-1
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/dbus-1
chgrp install ${PkgUserDir}/${PkgName}/usr/share/dbus-1/services
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/dbus-1/services
chgrp install ${PkgUserDir}/${PkgName}/usr/share/dbus-1/system-services
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/dbus-1/system-services
EOF
        if [ "$SYSTEMD" = yes ]; then
           cat >> $Output << "EOF"
chown root:messagebus ${PkgUserDir}/${PkgName}/usr/lib/dbus-1.0/dbus-daemon-launch-helper
chmod 4750 ${PkgUserDir}/${PkgName}/usr/lib/dbus-1.0/dbus-daemon-launch-helper
EOF
        else
           cat >> $Output << "EOF"
chown root:messagebus ${PkgUserDir}/${PkgName}/usr/libexec/dbus-daemon-launch-helper
chmod 4750 ${PkgUserDir}/${PkgName}/usr/libexec/dbus-daemon-launch-helper
EOF
        fi
      fi
    ;;
    dconf)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/{applications,metainfo}
chmod g+w,o+t /usr/share/{applications,metainfo}
chgrp install /usr/lib/gio/modules
chmod g+w,o+t /usr/lib/gio/modules
EOF
      else
         cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/{applications,metainfo}
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/applications,metainfo}
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gio/modules
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gio/modules
EOF
      fi
    ;;
    docbook-xml)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/xml/docbook
chmod g+w,o+t /usr/share/xml/docbook
chgrp install /etc/xml/catalog
chgrp install /etc/xml/docbook
chmod 664 /etc/xml/catalog
chmod 664 /etc/xml/docbook
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/xml/docbook
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/xml/docbook
chgrp install ${PkgUserDir}/${PkgName}/etc/xml/catalog
chgrp install ${PkgUserDir}/${PkgName}/etc/xml/docbook
chmod 664 ${PkgUserDir}/${PkgName}/etc/xml/catalog
chmod 664 ${PkgUserDir}/${PkgName}/etc/xml/docbook
EOF
      fi
    ;;
    dsktp-file-utls)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/applications
chmod g+w,o+t /usr/share/applications
EOF
      fi
    ;;
    eog)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/help/th # for gedit
chmod g+w,o+t /usr/share/help/th
EOF
      fi
    ;;
    epiphany)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/epiphany
chmod g+w,o+t /usr/share/epiphany
EOF
      fi
    ;;
    evince)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/nautilus/extensions-3.0 # in case brasero not installed
chmod g+w,o+t /usr/lib/nautilus/extensions-3.0
EOF
      fi
    ;;
    evol-data-server)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
            cat >> $Output << "EOF"
chown root /usr/lib/evolution-data-server/camel-lock-helper-1.2
chmod 4755 /usr/lib/evolution-data-server/camel-lock-helper-1.2
EOF
      else
	 cat >> $Output << "EOF"
chown root ${PkgUserDir}/${PkgName}/usr/lib/evolution-data-server/camel-lock-helper-1.2
chmod 4755 ${PkgUserDir}/${PkgName}/usr/lib/evolution-data-server/camel-lock-helper-1.2
EOF
      fi
    ;;
    evolution)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/evolution/$evolVers/plugins
chmod g+w,o+t /usr/lib/evolution/$evolVers/plugins
chgrp install /usr/share/help/mk
chmod g+w,o+t /usr/share/help/mk
EOF
      fi
    ;;
    exo)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/xfce4
chmod g+w,o+t /usr/share/xfce4
EOF
      fi
    ;;
    extutls-dpnds)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         echo "chgrp install /usr/lib/perl5/${perlseries}/site_perl/auto/ExtUtils
chmod g+w,o+t /usr/lib/perl5/${perlseries}/site_perl/auto/ExtUtils
chgrp install /usr/lib/perl5/${perlseries}/site_perl/ExtUtils
chmod g+w,o+t /usr/lib/perl5/${perlseries}/site_perl/ExtUtils" >> $Output
      else
         echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/ExtUtils
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/ExtUtils
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/ExtUtils
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/ExtUtils" >> $Output
      fi
    ;;
    file-roller)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/nautilus/extensions-3.0
chmod g+w,o+t /usr/lib/nautilus/extensions-3.0
EOF
      fi
    ;;
    file-which)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         echo "chgrp install /usr/lib/perl5/${perlseries}/site_perl/auto/File
chmod g+w,o+t /usr/lib/perl5/${perlseries}/site_perl/auto/File
chgrp install /usr/lib/perl5/${perlseries}/site_perl/File
chmod g+w,o+t /usr/lib/perl5/${perlseries}/site_perl/File" >> $Output
      else
         echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/auto/File
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/auto/File
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/File
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/File" >> $Output
      fi
    ;;
    firefox)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/mozilla/plugins
chmod g+w,o+t /usr/lib/mozilla/plugins
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/mozilla/plugins
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/mozilla/plugins
EOF
      fi
    ;;
    flashplugin)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/mozilla/plugins
chmod g+w,o+t /usr/lib/mozilla/plugins
chgrp install /usr/share/icons/hicolor
chmod g+w,o+t /usr/share/icons/hicolor
chgrp install /usr/share/icons/hicolor/*/apps
chmod g+w,o+t /usr/share/icons/hicolor/*/apps
chgrp install /usr/share/applications
chmod g+w,o+t /usr/share/applications
EOF
      fi
    ;;
    fontconfig)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         if [ "$BOOK_VERSION" = arch ]; then
            cat >> $Output << "EOF"
chgrp install /usr/share/xml # for iso-codes
chmod g+w,o+t /usr/share/xml
chgrp install /usr/share/libalpm/hooks
chmod g+w,o+t /usr/share/libalpm/hooks
chgrp install /usr/share/gettext/its
chmod g+w,o+t /usr/share/gettext/its
chgrp install /etc/fonts/conf.avail
chmod g+w,o+t /etc/fonts/conf.avail
chgrp install /etc/fonts
chmod g+w,o+t /etc/fonts
chgrp install /etc/fonts/conf.d # for xfont
chmod g+w,o+t /etc/fonts/conf.d
EOF
         else
            cat >> $Output << "EOF"
chgrp install /usr/share/xml # for iso-codes
chmod g+w,o+t /usr/share/xml
chgrp install /usr/share/fontconfig/conf.avail
chmod g+w,o+t /usr/share/fontconfig/conf.avail
chgrp install /usr/share/gettext/its
chmod g+w,o+t /usr/share/gettext/its
chgrp install /etc/fonts
chmod g+w,o+t /etc/fonts
chgrp install /etc/fonts/conf.d # for xfont
chmod g+w,o+t /etc/fonts/conf.d
EOF
         fi
      else
	  cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/xml
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/xml
chgrp install ${PkgUserDir}/${PkgName}/usr/share/fontconfig/conf.avail
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/fontconfig/conf.avail
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gettext/its
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gettext/its
chgrp install ${PkgUserDir}/${PkgName}/etc/fonts
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/fonts
chgrp install ${PkgUserDir}/${PkgName}/etc/fonts/conf.d
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/fonts/conf.d
EOF
      fi
    ;;
    freetype) #/var/cache
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /var/cache
chmod g+w,o+t /var/cache
if [ -e /usr/lib/udev ]; then
  chgrp install /usr/lib/udev
  chmod g+w,o+t /usr/lib/udev
else
  chgrp install /lib/udev
  chmod g+w,o+t /lib/udev
fi
EOF
      fi
    ;;
    garcon)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /etc/xdg
chmod g+w,o+t /etc/xdg
chgrp install /etc/xdg/menus
chmod g+w,o+t /etc/xdg/menus
EOF
      fi
    ;;
    gconf)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /etc/gconf
chmod g+w,o+t /etc/gconf
chgrp install /etc/gconf/gconf.xml.defaults
chmod g+w,o+t /etc/gconf/gconf.xml.defaults
chgrp install /usr/share/GConf
chmod g+w,o+t /usr/share/GConf
EOF
      else
         cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/etc/gconf
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/gconf
chgrp install ${PkgUserDir}/${PkgName}/etc/gconf/gconf.xml.defaults
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/gconf/gconf.xml.defaults
chgrp install ${PkgUserDir}/${PkgName}/usr/share/GConf
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/GConf
EOF
      fi
    ;;
    gcr)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/mime/packages
chmod g+w,o+t /usr/share/mime/packages
chgrp install /usr/share/GConf/gsettings
chmod g+w,o+t /usr/share/GConf/gsettings
EOF
      else
         cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/mime/packages
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/mime/packages
chgrp install ${PkgUserDir}/${PkgName}/usr/share/GConf/gsettings
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/GConf/gsettings
install -D -m644 ${blfsfiles}/install-files/gnomeplatform/gcr.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
      fi
    ;;
    gdk-pixbuf)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/gdk-pixbuf-2.0/2.10.0/loaders # for librsvg
chmod g+w,o+t /usr/lib/gdk-pixbuf-2.0/2.10.0/loaders
chgrp install /usr/share/thumbnailers
chmod g+w,o+t /usr/share/thumbnailers
chgrp install /usr/share/locale/{ang/LC_MESSAGES,uz@cyrillic/LC_MESSAGES}
chmod g+w,o+t /usr/share/locale/{ang/LC_MESSAGES,uz@cyrillic/LC_MESSAGES}
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gdk-pixbuf-2.0/2.10.0/loaders
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gdk-pixbuf-2.0/2.10.0/loaders
chgrp install ${PkgUserDir}/${PkgName}/usr/share/locale/{ang/LC_MESSAGES,uz@cyrillic/LC_MESSAGES}
EOF
      fi
    ;;
    gdm)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
if [ "$SYSTEMD" = no ]; then
  usermod -a -G audio gdm
  usermod -a -G video gdm
fi
if [ -e /etc/inittab ]; then
  sed -i 's/id:3:initdefault:/id:5:initdefault:/' \
    /etc/inittab
fi
chgrp install /usr/share/help/{id,it,ja,ro,te,te}
chmod g+w,o+t /usr/share/help/{id,it,ja,ro,te,tr}
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/help/{id,it,ja,ro,te,tr}
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/help/{id,it,ja,ro,te,tr}
EOF
      fi
    ;;
    gedit)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/help/{bg,da,ja,lv,th,zh_HK,zh_TW}
chmod g+w,o+t /usr/share/help/{bg,da,ja,lv,th,zh_HK,zh_TW}
EOF
      else
         cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/help/{bg,da,ja,lv,th,zh_HK,zh_TW}
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/help/{bg,da,ja,lv,th,zh_HK,zh_TW}
EOF
      fi
    ;;
    geocode-glib)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/icons/gnome
chmod g+w,o+t /usr/share/icons/gnome
chgrp install /usr/share/icons/gnome/scalable
chmod g+w,o+t /usr/share/icons/gnome/scalable
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/gnome
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/gnome
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/gnome/scalable
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/gnome/scalable
EOF
      fi
    ;;
    gimp)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
            cat >> $Output << "EOF"
gtk-update-icon-cache -qtf /usr/share/icons/hicolor
update-desktop-database -q
chgrp install /usr/lib/gimp/2.0/plug-ins
chmod g+w,o+t /usr/lib/gimp/2.0/plug-ins
chgrp install /usr/share/applications
chmod g+w,o+t /usr/share/applications
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gimp/2.0/plug-ins
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gimp/2.0/plug-ins
chgrp install ${PkgUserDir}/${PkgName}/usr/share/applications
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/applications
install -D -m644 ${blfsfiles}/install-files/xsoftware/gimp.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
      fi
    ;;
    git)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
cat > /root/.gitconfig << "GITEOF"
[user]
        name = John Burrell
        email = John_burrell@hotmail.com
[core]
        autocrlf = false
        filemode = false
GITEOF
/usr/bin/git config --global http.sslCAPath /etc/ssl/certs
chgrp install /usr/share/locale/*/LC_MESSAGES
chmod g+w,o+t /usr/share/locale/*/LC_MESSAGES
#
install -D -m 644 ${blfsfiles}/service/git-daemon@.service /usr/lib/systemd/system/git-daemon@.service
install -D -m 644 ${blfsfiles}/service/git-daemon.socket /usr/lib/systemd/system/git-daemon.socket
chown git:git /usr/lib/systemd/system/git-daemon*
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/locale/*/LC_MESSAGES
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/locale/*/LC_MESSAGES
install -D -m 644 ${blfsfiles}/service/git-daemon@.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/git-daemon@.service
install -D -m 644 ${blfsfiles}/service/git-daemon.socket ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/git-daemon.socket
chown git:git ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/git-daemon*
EOF
      fi
    ;;
    glib)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/glib-2.0/schemas
chmod g+w,o+t /usr/share/glib-2.0/schemas
chgrp install /usr/share/glib-2.0/gdb
chmod g+w,o+t /usr/share/glib-2.0/gdb
chgrp install /usr/share/bash-completion/completions
chmod g+w,o+t /usr/share/bash-completion/completions
chgrp install /usr/share/gettext/its
chmod g+w,o+t /usr/share/gettext/its
chgrp install /usr/share/gtk-doc/html
chmod g+w,o+t /usr/share/gtk-doc/html
chgrp install /usr/share/locale/*/LC_MESSAGES
chmod g+w,o+t /usr/share/locale/*/LC_MESSAGES
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/glib-2.0/schemas
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/glib-2.0/schemas
chgrp install ${PkgUserDir}/${PkgName}/usr/share/glib-2.0/gdb
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/glib-2.0/gdb
chgrp install ${PkgUserDir}/${PkgName}/usr/share/bash-completion/completions
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/bash-completion/completions
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gettext/its
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gettext/its
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gtk-doc/html
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gtk-doc/html
chgrp install ${PkgUserDir}/${PkgName}/usr/share/locale/*/LC_MESSAGES
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/locale/*/LC_MESSAGES
EOF
      fi
    ;;
    glibmm)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
if [ -d "/usr/share/devhelp/books" ]; then
  chgrp install /usr/share/devhelp/books
  chmod g+w,o+t /usr/share/devhelp/books
fi
EOF
      else
        cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/devhelp/books
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/devhelp/books
EOF
      fi
    ;;
    glib-networking)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/gio/modules
chmod g+w,o+t /usr/lib/gio/modules
EOF
      else
        cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gio/modules
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gio/modules
EOF
      fi
    ;;
    gmime3)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
        if [ "$BOOK_VERSION" = arch ]; then
          cat >> $Output << "EOF"
chgrp install /usr/lib/girepository-1.0
chmod g+w,o+t /usr/lib/girepository-1.0
EOF
        fi
      fi
    ;;
    gnm-icn-thme-sym)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/icons/gnome/scalable/places
chmod g+w,o+t /usr/share/icons/gnome/scalable/places
EOF
      else
         cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/gnome/scalable/places
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/gnome/scalable/places
EOF
      fi
    ;;
    gnm-thems-stndrd)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
for res in 16 22 24 32 48 256; do
  chgrp install /usr/share/icons/HighContrast/${res}x${res}/apps
  chmod g+w,o+t /usr/share/icons/HighContrast/${res}x${res}/apps
done
chgrp install /usr/share/icons/HighContrast/scalable/apps
chmod g+w,o+t /usr/share/icons/HighContrast/scalable/apps
EOF
      fi
    ;;
    gnm-user-share)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/nautilus/extensions-3.0
chmod g+w,o+t /usr/lib/nautilus/extensions-3.0
EOF
      fi
    ;;
    gnome-bckgrnds)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/gnome-background-properties
chmod g+w,o+t /usr/share/gnome-background-properties
EOF
      fi
    ;;
    gnome-bluetooth)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/help/ro
chmod g+w,o+t /usr/share/help/ro
/usr/bin/update-desktop-database /usr/share/applications
install -m644 -D ${blfsfiles}/conf-files/61-gnome-bluetooth-rfkill.rules \
                 /usr/lib/udev/rules.d/61-gnome-bluetooth-rfkill.rules
chown gnome-bluetooth:gnome-bluetooth /usr/lib/udev/rules.d/61-gnome-bluetooth-rfkill.rules
EOF
      fi
    ;;
    gnome-calculator)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/gnome-shell/search-providers
chmod g+w,o+t /usr/share/gnome-shell/search-providers
chgrp install /usr/share/help/{ro,zh_HK,zh_TW}
chmod g+w,o+t /usr/share/help/{ro,zh_HK,zh_TW}
EOF
      fi
    ;;
    gnome-colr-mngr)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/help/ml
chmod g+w,o+t /usr/share/help/ml
chgrp install /usr/share/metainfo
chmod g+w,o+t /usr/share/metainfo
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/help/ml
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/help/ml
chgrp install ${PkgUserDir}/${PkgName}/usr/share/metainfo
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/metainfo
EOF
      fi
    ;;
    gnome-desktop)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/help
chmod g+w,o+t /usr/share/help
chgrp install /usr/share/help/* # for gnome-user-docs
chmod g+w,o+t /usr/share/help/*
chgrp install /usr/share/gnome
chmod g+w,o+t /usr/share/gnome
if [ -e "/usr/share/help/rarian.document" ]; then
  chgrp rarian /usr/share/help/rarian.document
  chmod 644 /usr/share/help/rarian.document
fi
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/help/*
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/help/*
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gnome
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gnome
EOF
      fi
    ;;
    gnome-dictionary)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/appdata
chmod g+w,o+t /usr/share/appdata
EOF
      fi
    ;;
    gnome-doc-utils)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/gnome/help
chmod g+w,o+t /usr/share/gnome/help
EOF
      fi
    ;;
    gnome-icon-thme)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/icons/gnome
chmod g+w,o+t /usr/share/icons/gnome
chgrp install /usr/share/icons/gnome/{256x256,48x48,8x8}
chmod g+w,o+t /usr/share/icons/gnome/{256x256,48x48,8x8}
chgrp install /usr/share/icons/gnome/*/*
chmod g+w,o+t /usr/share/icons/gnome/*/*
EOF
      fi
    ;;
    gnome-keyring)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/xdg-desktop-portal/portals
chmod g+w,o+t /usr/share/xdg-desktop-portal/portals
EOF
      else
         cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/xdg-desktop-portal/portals
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/xdg-desktop-portal/portals
EOF
      fi
    ;;
    gnome-menus)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/desktop-directories
chmod g+w,o+t /usr/share/desktop-directories
chgrp install /etc/xdg/menus
chmod g+w,o+t /etc/xdg/menus
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/desktop-directories
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/desktop-directories
chgrp install ${PkgUserDir}/${PkgName}/etc/xdg/menus
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/xdg/menus
EOF
      fi
    ;;
    gnome-session)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/gnome-session/sessions
chmod g+w,o+t /usr/share/gnome-session/sessions
chgrp install /usr/share/xsessions
chmod g+w,o+t /usr/share/xsessions
EOF
      fi
    ;;
    gnome-shell)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/gnome-shell # if gnome-shell installed first
chmod g+w,o+t /usr/share/gnome-shell
EOF
      fi
    ;;
    gnome-user-docs)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/help/{as,he,hi,hr,kn,lv,mr,nl,pl,pt}
chmod g+w,o+t /usr/share/help/{as,he,hi,hr,kn,lv,mr,nl,pl,pt}
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/help/{as,he,hi,hr,kn,lv,mr,nl,pl,pt}
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/help/{as,he,hi,hr,kn,lv,mr,nl,pl,pt}
EOF
      fi
    ;;
    gobject-intro)
      if [ "$BOOK_VERSION" != arch ]; then
        if [[ $useDESTDIR = false || $installDEST = true ]]; then
           cat >> $Output << "EOF"
chgrp install /usr/share/gir-1.0 # for json-glib
chmod g+w,o+t /usr/share/gir-1.0
chgrp install /usr/lib/girepository-1.0
chmod g+w,o+t /usr/lib/girepository-1.0
EOF
        else
	   cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gir-1.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gir-1.0
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/girepository-1.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/girepository-1.0
EOF
        fi
      else # Arch binary
         cat >> $Output << "EOF"
chgrp install /usr/share/gir-1.0
chmod g+w,o+t /usr/share/gir-1.0
EOF
      fi
    ;;
    gobject-intro-rt) # only Arch binary
         cat >> $Output << "EOF"
chgrp install /usr/lib/girepository-1.0
chmod g+w,o+t /usr/lib/girepository-1.0
EOF
    ;;
    grep)
         cat >> $Output << "EOF"
chgrp install /usr/share/locale/*/LC_MESSAGES
chmod g+w,o+t /usr/share/locale/*/LC_MESSAGES
EOF
    ;;
    grilo-plugins)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/help/pl
chmod g+w,o+t /usr/share/help/pl
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/help/pl
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/help/pl
EOF
      fi
    ;;
    gset-dsktp-schms)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/GConf
chmod g+w,o+t /usr/share/GConf
chgrp install /usr/share/GConf/gsettings
chmod g+w,o+t /usr/share/GConf/gsettings
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/GConf
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/GConf
chgrp install ${PkgUserDir}/${PkgName}/usr/share/GConf/gsettings
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/GConf/gsettings
EOF
      fi
    ;;
    gstreamer)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
        cat >> $Output << "EOF"
chgrp install /usr/include/gstreamer-1.0/{,gst/{,base}} # for plugins
chmod g+w,o+t /usr/include/gstreamer-1.0/{,gst/{,base}}
chgrp install /usr/lib/gstreamer-1.0
chmod g+w,o+t /usr/lib/gstreamer-1.0
chgrp install /usr/share/bash-completion/helpers
chmod g+w,o+t /usr/share/bash-completion/helpers
chgrp install /usr/share/gstreamer-1.0
chmod g+w,o+t /usr/share/gstreamer-1.0
setcap cap_net_bind_service,cap_net_admin+ep /usr/lib/gstreamer-1.0/gst-ptp-helper
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/gstreamer-1.0/{,gst/{,base}}
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/gstreamer-1.0/{,gst/{,base}}
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gstreamer-1.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gstreamer-1.0
chgrp install ${PkgUserDir}/${PkgName}/usr/share/bash-completion/helpers
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/bash-completion/helpers
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gstreamer-1.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gstreamer-1.0
install -D -m644 ${blfsfiles}/install-files/multimedia/gstreamer.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
      fi
    ;;
    gst-plgns-base)
      if [ "$BOOK_VERSION" != arch ]; then
        if [[ $useDESTDIR = false || $installDEST = true ]]; then
           cat >> $Output << "EOF"
chgrp install /usr/include/gstreamer-1.0/gst/{video,audio,allocators}
chmod g+w,o+t /usr/include/gstreamer-1.0/gst/{video,audio,allocators}
chgrp install /usr/share/gst-plugins-base
chmod g+w,o+t /usr/share/gst-plugins-base
EOF
        else
	   cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/gstreamer-1.0/gst/{video,audio,allocators}
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/gstreamer-1.0/gst/{video,audio,allocators}
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gst-plugins-base
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gst-plugins-base
EOF
        fi
      fi
    ;;
    gst-plgns-base-libs) # installed as an Arch binary
      cat >> $Output << "EOF"
chgrp install /usr/include/gstreamer-1.0/gst/{video,audio,allocators}
chmod g+w,o+t /usr/include/gstreamer-1.0/gst/{video,audio,allocators}
chgrp install /usr/share/gst-plugins-base
chmod g+w,o+t /usr/share/gst-plugins-base
EOF
    ;;
    gst-plgns-bad)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/include/gstreamer-1.0/gst/interfaces
chmod g+w,o+t /usr/include/gstreamer-1.0/gst/interfaces
chgrp install /usr/share/gstreamer-1.0/presets
chmod g+w,o+t /usr/share/gstreamer-1.0/presets
chgrp install /usr/share/locale/mt/LC_MESSAGES
chmod g+w,o+t /usr/share/locale/mt/LC_MESSAGES
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/gstreamer-1.0/gst/interfaces
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/gstreamer-1.0/gst/interfaces
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gstreamer-1.0/presets
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gstreamer-1.0/presets
chgrp install ${PkgUserDir}/${PkgName}/usr/share/locale/mt/LC_MESSAGES
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/locale/mt/LC_MESSAGES
EOF
      fi
      if [ "$BOOK_VERSION" != arch ]; then
        if [[ $useDESTDIR = false || $installDEST = true ]]; then
           cat >> $Output << "EOF"
chgrp install /usr/share/glib-2.0/schemas/gschemas.compiled
chmod g+w,o+t /usr/share/glib-2.0/schemas/gschemas.compiled
EOF
        else
	   cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/glib-2.0/schemas/gschemas.compiled
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/glib-2.0/schemas/gschemas.compiled
EOF
        fi
      fi
    ;;
    gst-plgns-ugly)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/gstreamer-1.0/presets
chmod g+w,o+t /usr/share/gstreamer-1.0/presets
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gstreamer-1.0/presets
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gstreamer-1.0/presets
EOF
      fi
    ;;
    gtk-doc)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/help/*
chmod g+w,o+t /usr/share/help/*
if ! $AS_ROOT; then
  if [ -e /usr/share/help/rarian.document ]; then
    chown rarian:rarian /usr/share/help/rarian.document
    chmod 644 /usr/share/help/rarian.document
  fi
fi
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/help/*
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/help/*
if [ -e ${PkgUserDir}/${PkgName}/usr/share/help/rarian.document ]; then
  chown rarian:rarian ${PkgUserDir}/${PkgName}/usr/share/help/rarian.document
  chmod 644 ${PkgUserDir}/${PkgName}/usr/share/help/rarian.document
fi
EOF
      fi
    ;;
    gtk-engines)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/themes/Crux
chmod g+w,o+t /usr/share/themes/Crux
chgrp install /usr/share/themes/Clearlooks
chmod g+w,o+t /usr/share/themes/Clearlooks
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/themes/Crux
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/themes/Crux
chgrp install ${PkgUserDir}/${PkgName}/usr/share/themes/Clearlooks
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/themes/Clearlooks
EOF
      fi
    ;;
    gtkplus3)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/gtk-3.0
chmod g+w,o+t /usr/lib/gtk-3.0
chgrp install /usr/lib/gtk-3.0/3.0.0 # for gnome-themes-standard
chmod g+w,o+t /usr/lib/gtk-3.0/3.0.0
chgrp install /usr/lib/gtk-3.0/3.0.0/immodules # for ibus
chmod g+w,o+t /usr/lib/gtk-3.0/3.0.0/immodules
chgrp install /usr/share/applications
chmod g+w,o+t /usr/share/applications
chgrp install /usr/share/locale/kg/LC_MESSAGES
chmod g+w,o+t /usr/share/locale/kg/LC_MESSAGES
chgrp install /usr/share/themes
chmod g+w,o+t /usr/share/themes
chgrp install /usr/share/themes/Default
chmod g+w,o+t /usr/share/themes/Default
chgrp install /usr/share/themes/Emacs
chmod g+w,o+t /usr/share/themes/Emacs
install -D -m644 ${blfsfiles}/conf-files/settings.ini /usr/share/gtk-3.0/
if ! $AS_ROOT; then chown $PkgName:$PkgName /usr/share/gtk-3.0/settings.ini; fi
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gtk-3.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gtk-3.0
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gtk-3.0/3.0.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gtk-3.0/3.0.0
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gtk-3.0/3.0.0/immodules
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gtk-3.0/3.0.0/immodules
chgrp install ${PkgUserDir}/${PkgName}/usr/share/applications
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/applications
chgrp install ${PkgUserDir}/${PkgName}/usr/share/themes
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/themes
chgrp install ${PkgUserDir}/${PkgName}/usr/share/themes/Default
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/themes/Default
chgrp install ${PkgUserDir}/${PkgName}/usr/share/themes/Emacs
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/themes/Emacs
install -D -m644 ${blfsfiles}/install-files/xlibs/gtkplus3.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
      fi
    ;;
    gtkplus2)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/themes
chmod g+w,o+t /usr/share/themes
chgrp install /usr/share/themes/Default
chmod g+w,o+t /usr/share/themes/Default
chgrp install /usr/share/themes/Emacs
chmod g+w,o+t /usr/share/themes/Emacs
chgrp install /usr/lib/gtk-2.0/2.10.0
chmod g+w,o+t /usr/lib/gtk-2.0/2.10.0
chgrp install /usr/lib/gtk-2.0/2.10.0/engines
chmod g+w,o+t /usr/lib/gtk-2.0/2.10.0/engines
chgrp install /usr/lib/gtk-2.0/modules
chmod g+w,o+t /usr/lib/gtk-2.0/modules
chgrp install /usr/lib/gtk-2.0/2.10.0/immodules # for ibus
chmod g+w,o+t /usr/lib/gtk-2.0/2.10.0/immodules
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/themes
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/themes
chgrp install ${PkgUserDir}/${PkgName}/usr/share/themes/Default
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/themes/Default
chgrp install ${PkgUserDir}/${PkgName}/usr/share/themes/Emacs
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/themes/Emacs
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0/2.10.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0/2.10.0
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0/2.10.0/engines
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0/2.10.0/engines
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0/modules
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0/modules
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0/2.10.0/immodules
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gtk-2.0/2.10.0/immodules
install -D -m644 ${blfsfiles}/install-files/xlibs/gtkplus2.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
      fi
    ;;
    gucharmap)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/metainfo
chmod g+w,o+t /usr/share/metainfo
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/metainfo
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/metainfo
EOF
      fi
    ;;
    guile)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
        cat >> $Output << "EOF"
chgrp install /usr/share/guile  # for gnutls
chmod g+w,o+t /usr/share/guile
chgrp install /usr/lib/guile/3.0
chmod g+w,o+t /usr/lib/guile/3.0
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/guile
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/guile
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/guile/3.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/guile/3.0
EOF
      fi
    ;;
    gutenprint)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chown root:cups /usr/lib/cups/{driver,filter,backend}
chmod 755  /usr/lib/cups/{driver,filter,backend}
chown root:lp /etc/cups && chmod 755 /etc/cups
EOF
      fi
    ;;
    gvfs)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/GConf/gsettings
chmod g+w,o+t /usr/share/GConf/gsettings
EOF
      fi
    ;;
    hcolr-icon-thme)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/icons
chmod g+w,o+t /usr/share/icons
chgrp install /usr/share/icons/hicolor
chmod g+w,o+t /usr/share/icons/hicolor
chgrp install /usr/share/icons/hicolor/*/apps
chmod g+w,o+t /usr/share/icons/hicolor/*/apps
chgrp install /usr/share/icons/hicolor/*/actions
chmod g+w,o+t /usr/share/icons/hicolor/*/actions
chgrp install /usr/share/icons/hicolor/*/mimetypes # for color-manager
chmod g+w,o+t /usr/share/icons/hicolor/*/mimetypes
chgrp install /usr/share/icons/hicolor/*/devices
chmod g+w,o+t /usr/share/icons/hicolor/*/devices
chgrp install /usr/share/icons/hicolor/*/status
chmod g+w,o+t /usr/share/icons/hicolor/*/status
chgrp install /usr/share/icons/hicolor/*/emblems
chmod g+w,o+t /usr/share/icons/hicolor/*/emblems
chgrp install /usr/share/icons/hicolor/*/categories
chmod g+w,o+t /usr/share/icons/hicolor/*/categories
chgrp install /usr/share/icons/hicolor/*/stock/navigation
chmod g+w,o+t /usr/share/icons/hicolor/*/stock/navigation
chgrp install /usr/share/icons/hicolor/*/stock/media
chmod g+w,o+t /usr/share/icons/hicolor/*/stock/media
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/apps
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/apps
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/actions
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/actions
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/mimetypes
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/mimetypes
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/devices
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/devices
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/status
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/status
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/emblems
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/emblems
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/categories
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/categories
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/stock/navigation
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/stock/navigation
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/stock/media
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor/*/stock/media
EOF
      fi
    ;;
    hplip)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chown root:cups-filters /usr/lib/cups/filter
chown root:cups /usr/lib/cups/backend
chmod 755 /usr/lib/cups/{filter,backend}
EOF
      fi
    ;;
    ibus)
      if [ "$INSTALLDSKTP" = gnome ]; then
        if [[ $useDESTDIR = false || $installDEST = true ]]; then
           cat >> $Output << "EOF"
chgrp install /etc/dconf/profile
chmod g+w,o+t /etc/dconf/profile
chgrp install /etc/dconf/db
chmod g+w,o+t /etc/dconf/db
EOF
        else
	   cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/etc/dconf/profile
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/dconf/profile
chgrp install ${PkgUserDir}/${PkgName}/etc/dconf/db
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/dconf/db
EOF
        fi
      fi
    ;;
    icon-nam-utls)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/pkgconfig
chmod g+w,o+t /usr/share/pkgconfig
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/pkgconfig
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/pkgconfig
EOF
      fi
    ;;
    ilmbase)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/include/OpenEXR
chmod g+w,o+t /usr/include/OpenEXR
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/OpenEXR
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/OpenEXR
EOF
      fi
    ;;
    inkscape)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
gtk-update-icon-cache
update-desktop-database
EOF
      fi
    ;;
    iso-codes)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/pkgconfig # for usbutils
chmod g+w,o+t /usr/share/pkgconfig
chmod g+w,o+t /usr/share/locale/*/LC_MESSAGES
chgrp install /usr/share/xml # for docbook-xml
chmod g+w,o+t /usr/share/xml
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/pkgconfig
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/pkgconfig
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/locale/*/LC_MESSAGES
chgrp install ${PkgUserDir}/${PkgName}/usr/share/xml
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/xml
EOF
      fi
    ;;
    java-hamcrest)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/java
chmod g+w,o+t /usr/share/java
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/java
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/java
EOF
      fi
    ;;
    json-glib)
      if [ "$BOOK_VERSION" != arch ]; then
        if [[ $useDESTDIR = false || $installDEST = true ]]; then
           cat >> $Output << "EOF"
chgrp install /usr/share/installed-tests
chmod g+w,o+t /usr/share/installed-tests
chgrp install /usr/lib/installed-tests
chmod g+w,o+t /usr/lib/installed-tests
EOF
        fi
      fi
    ;;
    kodi)
         cat >> $Output << "EOF"
chgrp install /usr/share/xsessions
chmod g+w,o+t /usr/share/xsessions
EOF
    ;;
    kodi-common)
         cat >> $Output << "EOF"
chgrp install /usr/lib/kodi
chmod g+w,o+t /usr/lib/kodi
EOF
    ;;
    libatasmart)   #/usr/share/vala/vapi
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/vala # for vala
chmod g+w,o+t /usr/share/vala
chgrp install /usr/share/vala/vapi # for libgee
chmod g+w,o+t /usr/share/vala/vapi
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/vala
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/vala
chgrp install ${PkgUserDir}/${PkgName}/usr/share/vala/vapi
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/vala/vapi
EOF
      fi
    ;;
    libblockdev)
      if [ "$BOOK_VERSION" != arch ]; then
        if [[ $useDESTDIR = false || $installDEST = true ]]; then
           echo "chgrp install /usr/lib/python${py2series}/site-packages/gi
chmod g+w,o+t /usr/lib/python${py2series}/site-packages/gi
chgrp install /usr/lib/python${py2series}/site-packages/gi/overrides
chmod g+w,o+t /usr/lib/python${py2series}/site-packages/gi/overrides
chgrp install /usr/lib/python${py3series}/site-packages/gi
chmod g+w,o+t /usr/lib/python${py3series}/site-packages/gi
chgrp install /usr/lib/python${py3series}/site-packages/gi/overrides
chmod g+w,o+t /usr/lib/python${py3series}/site-packages/gi/overrides" >> $Output
        else
           echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/python${py2series}/site-packages/gi
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/python${py2series}/site-packages/gi
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/python${py2series}/site-packages/gi/overrides
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/python${py2series}/site-packages/gi/overrides
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/python${py3series}/site-packages/gi
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/python${py3series}/site-packages/gi
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/python${py3series}/site-packages/gi/overrides
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/python${py3series}/site-packages/gi/overrides" >> $Output
        fi
      else # Arch
         echo "chgrp install /usr/lib/python${py3series}/site-packages/gi
chmod g+w,o+t /usr/lib/python${py3series}/site-packages/gi
chgrp install /usr/lib/python${py3series}/site-packages/gi/overrides
chmod g+w,o+t /usr/lib/python${py3series}/site-packages/gi/overrides
chmod g+w,o+t /usr/lib/python${py3series}/site-packages/gi/overrides" >> $Output
      fi
    ;;
    libcanberra)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/gtk-3.0/modules
chmod g+w,o+t /usr/lib/gtk-3.0/modules
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/gtk-3.0/modules
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/gtk-3.0/modules
EOF
      fi
      if [ "$BOOK_VERSION" != arch ]; then
        if [[ $useDESTDIR = false || $installDEST = true ]]; then
           cat >> $Output << "EOF"
chgrp install /usr/share/gdm # for gdm
chmod g+w,o+t /usr/share/gdm
chgrp install /usr/share/gnome
chmod g+w,o+t /usr/share/gnome
EOF
        else
	   cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gdm
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gdm
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gnome
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gnome
EOF
        fi
      fi
    ;;
    libcap)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/security
chmod g+w,o+t /usr/lib/security
EOF
      fi
    ;;
    libcdio)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/include/cdio
chmod g+w,o+t /usr/include/cdio
sed -i '/define CDIO_LIBCDIO_SOURCE_PATH/s|.*|/* #undef CDIO_LIBCDIO_SOURCE_PATH */|' \
    /usr/include/cdio/cdio_config.h
EOF
      else
	 cat >> $Output << "EOF"
sed -i '/define CDIO_LIBCDIO_SOURCE_PATH/s|.*|/* #undef CDIO_LIBCDIO_SOURCE_PATH */|' \
    ${PkgUserDir}/${PkgName}/usr/include/cdio/cdio_config.h
EOF
      fi
    ;;
    libev) # delete this version of /usr/include/event.h
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
rm /usr/include/event.h
mv /usr/include/event.h-old /usr/include/event.h # put back the libevent version
EOF
      else
	 cat >> $Output << "EOF"
rm ${PkgUserDir}/${PkgName}/usr/include/event.h
EOF
      fi
    ;;
    libexif)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/locale/{en_AU/{,LC_MESSAGES},en_CA/{,LC_MESSAGES}}
chmod 1775 /usr/share/locale/{en_AU/{,LC_MESSAGES},en_CA/{,LC_MESSAGES}}
EOF
      fi
    ;;
    libffi)
      if [[ $useDESTDIR = true && $installDEST = false ]]; then
         cat >> $Output << "EOF"
mv ${PkgUserDir}/${PkgName}/usr/lib64/* ${PkgUserDir}/${PkgName}/usr/lib
rm -rf ${PkgUserDir}/${PkgName}/usr/lib64
EOF
      fi
    ;;
    libfm)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/locale/tt_RU/LC_MESSAGES
chmod g+w,o+t /usr/share/locale/tt_RU/LC_MESSAGES
chgrp install /usr/share/locale/ur_PK/LC_MESSAGES
chmod g+w,o+t /usr/share/locale/ur_PK/LC_MESSAGES
EOF
      fi
    ;;
    libfm-extra)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/include/libfm-1.0
chmod g+w,o+t /usr/include/libfm-1.0
EOF
      fi
    ;;
    libfm-qt)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /opt/lxqt/share/libfm-qt
chmod g+w,o+t /opt/lxqt/share/libfm-qt
EOF
      fi
    ;;
    libgpg-error)   #/usr/share/common-lisp/source
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
if [ -e "/usr/share/common-lisp/source" ]; then
  chgrp install /usr/share/common-lisp/source # for gpgme
  chmod g+w,o+t /usr/share/common-lisp/source
fi
EOF
	 cat >> $Output << "EOF"
if [ -e "${PkgUserDir}/${PkgName}/usr/share/common-lisp/source" ]; then
  chgrp install ${PkgUserDir}/${PkgName}/usr/share/common-lisp/source
  chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/common-lisp/source
fi
EOF
      fi
    ;;
    libgsf)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/thumbnailers
chmod g+w,o+t /usr/share/thumbnailers
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/thumbnailers
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/thumbnailers
EOF
      fi
    ;;
    libidn) 
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/emacs/site-lisp
chmod g+w,o+t /usr/share/emacs/site-lisp
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/emacs/site-lisp
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/emacs/site-lisp
EOF
      fi
    ;;
    libidn2)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/gtk-doc
chmod g+w,o+t /usr/share/gtk-doc
chgrp install /usr/share/gtk-doc/html
chmod g+w,o+t /usr/share/gtk-doc/html
EOF
      else
         cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gtk-doc
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gtk-doc
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gtk-doc/html
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gtk-doc/html
EOF
      fi
    ;;
#    libnghttp2)
#      if [[ $useDESTDIR = false || $installDEST = true ]]; then
#         cat >> $Output << "EOF"
#chgrp install /usr/include/nghttp2
#chmod g+w,o+t /usr/include/nghttp2
#chgrp install /usr/share/nghttp2
#chmod g+w,o+t /usr/share/nghttp2
#EOF
#      fi
#    ;;
    libproxy)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
	 cat >> $Output << "EOF"
chgrp install /usr/share/cmake
chmod g+w,o+t /usr/share/cmake
EOF
      fi
    ;;
    libpwquality)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
if [ -e /etc/pam.d/system-password ]; then
  sysPassOwner=$(stat -c '%U' /etc/pam.d/system-password)
  echo "system-password owner is $sysPassOwner"
  if [ "$sysPassOwner" = "linux-pam" ]; then
    mv /etc/pam.d/system-password{,.orig}
  fi
fi
cat > /etc/pam.d/system-password << "LIBPWEOF"
# Begin /etc/pam.d/system-password

# check new passwords for strength (man pam_pwquality)
password  required    pam_pwquality.so   authtok_type=UNIX retry=1 difok=1 \
                                         minlen=8 dcredit=0 ucredit=0 \
                                         lcredit=0 ocredit=0 minclass=1 \
                                         maxrepeat=0 maxsequence=0 \
                                         maxclassrepeat=0 geoscheck=0 \
                                         dictcheck=1 usercheck=1 \
                                         enforcing=1 badwords="" \
                                         dictpath=/lib/cracklib/pw_dict
# use sha512 hash for encryption, use shadow, and use the
# authentication token (chosen password) set by pam_pwquality
# above (or any previous modules)
password  required    pam_unix.so        sha512 shadow use_authtok

# End /etc/pam.d/system-password
LIBPWEOF
if ! $AS_ROOT; then chown libpwquality:libpwquality /etc/pam.d/system-password; fi
EOF
      fi
    ;;
    libqtxdg)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /opt/lxqt/share/cmake
chmod g+w,o+t /opt/lxqt/share/cmake
chgrp install /opt/lxqt/lib/pkgconfig
chmod g+w,o+t /opt/lxqt/lib/pkgconfig
EOF
      fi
    ;;
    libsigcpp)   #/usr/share/devhelp/books
      if [ "$BOOK_VERSION" != arch ]; then
        if [[ $useDESTDIR = false || $installDEST = true ]]; then
           cat >> $Output << "EOF"
if [ -d /usr/share/devhelp ]; then # if documentation
  chgrp install /usr/share/devhelp
  chmod g+w,o+t /usr/share/devhelp
  chgrp install /usr/share/devhelp/books # for glibmm
  chmod g+w,o+t /usr/share/devhelp/books
fi
EOF
      else
	   cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/devhelp
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/devhelp
chgrp install ${PkgUserDir}/${PkgName}/usr/share/devhelp/books
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/devhelp/books
EOF
        fi
      fi
    ;;
    libva)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/dri
chmod g+w,o+t /usr/lib/dri
EOF
      fi
    ;;
    libvdpau)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/vdpau
chmod g+w,o+t /usr/lib/vdpau
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/vdpau
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/vdpau
EOF
      fi
    ;;
    libxcb) # /usr/include/xcb
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/include/xcb
chmod g+w,o+t /usr/include/xcb
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/xcb
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/xcb
EOF
      fi
    ;;
    libxfce4ui)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /etc/xdg/xfce4
chmod g+w,o+t /etc/xdg/xfce4
chgrp install /etc/xdg/xfce4/xfconf/xfce-perchannel-xml
chmod g+w,o+t /etc/xdg/xfce4/xfconf/xfce-perchannel-xml
EOF
      fi
    ;;
    libxfce4util)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/include/xfce4
chmod g+w,o+t /usr/include/xfce4
EOF
      fi
    ;;
    libxklavier)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/vala/vapi
chmod g+w,o+t /usr/share/vala/vapi
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/vala/vapi
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/vala/vapi
EOF
      fi
    ;;
    libxml2)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/cmake
chmod g+w,o+t /usr/lib/cmake
EOF
      else
         cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/cmake
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/cmake
EOF
      fi
    ;;
    libzeitgeist)
      if [ "$BOOK_VERSION" = arch ]; then
         cat >> $Output << "EOF"
chgrp install /etc/xdg/autostart
chmod g+w,o+t /etc/xdg/autostart
EOF
      fi
    ;;
    linux-pam)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/security
chmod g+w,o+t /usr/lib/security
chgrp install /etc/security # for libpwquality
chmod g+w,o+t /etc/security
EOF
         if [ "$BOOK_VERSION" != arch ]; then
            cat >> $Output << "EOF"
chown linux-pam:install /etc/pam.d
chmod g+w,o+t /etc/pam.d
EOF
         fi
      else
	 cat >> $Output << "EOF"
chown linux-pam:install ${PkgUserDir}/${PkgName}/etc/pam.d
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/pam.d
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/security
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/security
chgrp install ${PkgUserDir}/${PkgName}/etc/security
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/security
EOF
      fi  
    ;;
    llvm) # reset dir /usr/libexec and install lldb files using the package user lldb
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp root /usr/libexec
chmod 755 /usr/libexec
#chown -R lldb:lldb ${PkgUserDir}/llvm/lldb
## need rsync installed
#if [ ! -e /usr/bin/rsync ]; then
#  echo "rsync not present."
#  echo "Please install it in order to continue."
#  exit 1
#fi
#rsyncopts="-vrlogK"
#rsync $rsyncopts ${PkgUserDir}/llvm/lldb ${PkgUserDir}/lldb/
## install the files
#pushd ${PkgUserDir}/llvm/lldb
#listDIRS=$(ls -l --time-style="long-iso" . | grep '^d' | awk '{print $8}')
#for eachDir in $listDIRS; do
#  echo "installing files in $eachDir"
#  rsync $rsyncopts $eachDir /
#  rm -rf $eachDir
#done
#popd
#rm -rf ${PkgUserDir}/llvm/lldb
## restore correct UID and GID
#chown 0:0 /usr
#chown root:install /usr/{bin,include,lib}
#rm /usr/lib/python2.7/site-packages/six.py
## compile the .py files to create .pyc and .pyo
#python2 -m compileall /usr/lib/python2.7/site-packages/lldb
#python2 -O -m compileall /usr/lib/python2.7/site-packages/lldb
#chown -R lldb:lldb /usr/lib/python2.7/site-packages/lldb
#chown lldb:lldb /usr/lib/python2.7/site-packages/readline.so
EOF
      fi
    ;;
    lua)
      if [[ $useDESTDIR = true && $installDEST = false ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/lua/5.4
chmod g+w,o+t /usr/lib/lua/5.4
EOF
      fi
    ;;
    lvm2)
      if [[ $useDESTDIR = true && $installDEST = false ]]; then
         cat >> $Output << "EOF"
if ! $AS_ROOT; then chown -R lvm2:lvm2 ${PkgUserDir}/${PkgName}/usr/lib/systemd/system-generators; fi
EOF
      fi
    ;;
    lxqt-l10n)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /opt/lxqt/share/lxqt
chmod g+w,o+t /opt/lxqt/share/lxqt
EOF
      fi
    ;;
    lxqt-setup)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /opt/lxqt/{bin,include,lib,share/{,man}}
chmod g+w,o+t /opt/lxqt/{bin,include,lib,share/{,man}}
EOF
      fi
    ;;
    lxqt-themes)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chown hcolr-icon-thme:install /usr/share/icons/hicolor
chmod 1775 /usr/share/icons/hicolor
chown hcolr-icon-thme:hcolr-icon-thme /usr/share/icons/hicolor/scalable/{,places}
chmod 755 /usr/share/icons/hicolor/scalable/{,places}
chown hcolr-icon-thme:install /usr/share/icons/hicolor/scalable/apps
chmod 1775 /usr/share/icons/hicolor/scalable/apps
EOF
      fi
    ;;
    mesa)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/vulkan/icd.d
chmod g+w,o+t /usr/share/vulkan/icd.d
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/vulkan/icd.d
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/vulkan/icd.d
EOF
      fi
    ;;
# meson now installed in LFS
#    meson)
#      if [[ $useDESTDIR = false || $installDEST = true ]]; then
#         echo "chgrp install /usr/lib/python${py3series}/site-packages/easy-install.pth
#chmod 664 /usr/lib/python${py3series}/site-packages/easy-install.pth" >> $Output
#      else
#         echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/python${py3series}/site-packages/easy-install.pth
#chmod 664 \${PkgUserDir}/\${PkgName}/usr/lib/python${py3series}/site-packages/easy-install.pth" >> $Output
#      fi
#    ;;
    modem-manager)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/icons/hicolor
chmod g+w,o+t /usr/share/icons/hicolor
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons/hicolor
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/udev/rules.d
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/udev/rules.d
chgrp install ${PkgUserDir}/${PkgName}/usr/share/dbus-1/interfaces
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/dbus-1/interfaces
install -m755 -d ${PkgUserDir}/${PkgName}/usr/share/gtk-doc/html
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gtk-doc/html
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gtk-doc/html
EOF
      fi
    ;;
    mutter)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/gnome-control-center
chmod g+w,o+t /usr/share/gnome-control-center
chgrp install /usr/share/gnome-control-center/keybindings
chmod g+w,o+t /usr/share/gnome-control-center/keybindings
glib-compile-schemas /usr/share/glib-2.0/schemas
update-desktop-database -q /usr/share/applications
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gnome-control-center
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gnome-control-center
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gnome-control-center/keybindings
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gnome-control-center/keybindings
EOF
      fi
    ;;
    nautilus)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/nautilus
chmod g+w,o+t /usr/lib/nautilus
chgrp install /usr/lib/nautilus/extensions-3.0
chmod g+w,o+t /usr/lib/nautilus/extensions-3.0
chgrp install /usr/share/gnome-shell
chmod g+w,o+t /usr/share/gnome-shell
chgrp install /usr/share/gnome-shell/search-providers
chmod g+w,o+t /usr/share/gnome-shell/search-providers
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/nautilus
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/nautilus
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/nautilus/extensions-3.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/nautilus/extensions-3.0
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gnome-shell
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gnome-shell
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gnome-shell/search-providers
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gnome-shell/search-providers
install -D -m644 ${blfsfiles}/install-files/gnomedesktop/nautilus.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
      fi
    ;;
    nautilus-sendto)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
if [ -e /usr/lib/nautilus-sendto/plugins ]; then
  chgrp install /usr/lib/nautilus-sendto/plugins
  chmod g+w,o+t /usr/lib/nautilus-sendto/plugins
fi
if [ -e /usr/lib/nautilus/extensions-3.0 ]; then
  chgrp install /usr/lib/nautilus/extensions-3.0
  chmod g+w,o+t /usr/lib/nautilus/extensions-3.0
fi
EOF
      fi
    ;;
    networkmanager)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         echo "chown root /usr/lib/NetworkManager/${networkmanagervers}/*.so" >> $Output
         cat >> $Output << "EOF"
chgrp install /usr/lib/firewalld
chmod g+w,o+t /usr/lib/firewalld
EOF
      else
         echo "chown root \${PkgUserDir}/\${PkgName}/usr/lib/NetworkManager/${networkmanagervers}/*.so" >> $Output
      fi
    ;;
    newt)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/locale/*/LC_MESSAGES
chmod g+w,o+t /usr/share/locale/*/LC_MESSAGES
EOF
      fi
    ;;
    nmap)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/man/de
chmod g+w,o+t /usr/share/man/de
chgrp install /usr/share/man/fr/man1
chmod g+w,o+t /usr/share/man/fr/man1
chgrp install /usr/share/man/ja/man1
chmod g+w,o+t /usr/share/man/ja/man1
chgrp install /usr/share/man/sk/man1
chmod g+w,o+t /usr/share/man/sk/man1
if [ -e /usr/share/applications ]; then
  chgrp install /usr/share/applications
  chmod g+w,o+t /usr/share/applications
fi
EOF
      fi
    ;;
    nvidia-utils)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/nvidia
chmod g+w,o+t /usr/lib/nvidia
EOF
      fi
    ;;
    openbox)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/gnome
chmod g+w,o+t /usr/share/gnome
chgrp install /usr/share/gnome-session
chmod g+w,o+t /usr/share/gnome-session
chgrp install /usr/share/gnome-session/sessions
chmod g+w,o+t /usr/share/gnome-session/sessions
chgrp install /usr/share/xsessions
chmod g+w,o+t /usr/share/xsessions
EOF
      fi
    ;;
    openjdk)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
#rm -rf /opt/jdk
chgrp install /opt/jdk/man
chmod g+w,o+t /opt/jdk/man
chgrp install /opt/jdk/man/man1
chmod g+w,o+t /opt/jdk/man/man1
if [ -d /etc/ssl/java ]; then
  chgrp install /etc/ssl/java
  chmod 1775 /etc/ssl/java
else
  mkdir -pv /etc/ssl/java
fi
# force an update of the ca-certificates
ipaddr=$( /sbin/ip addr | grep "192.168" | awk '{print $2}' | awk -F\/ '{print $1}' )
/usr/sbin/make-ca -C /etc/ssl/certdata.txt --force -p ${ipaddr}:3128
if ! $AS_ROOT; then
  chown -R openjdk:openjdk /etc/{profile.d/openjdk.sh,ssl/java}
  chown -h openjdk:openjdk /opt/jdk
  chown -R -h ca-certificates:ca-certificates /etc/pki/tls/certs
  chown ca-certificates:ca-certificates /etc/ssl/certdata.txt
fi
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/opt/jdk/man
chmod g+w,o+t ${PkgUserDir}/${PkgName}/opt/jdk/man
chgrp install ${PkgUserDir}/${PkgName}/opt/jdk/man/man1
chmod g+w,o+t ${PkgUserDir}/${PkgName}/opt/jdk/man/man1
chgrp install ${PkgUserDir}/${PkgName}/opt/jdk/man/ja_JP.UTF-8
chmod g+w,o+t ${PkgUserDir}/${PkgName}/opt/jdk/man/ja_JP.UTF-8
install -D -m644 ${blfsfiles}/install-files/java/openjdk.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
      fi
    ;;
    openjpeg2) # these symlinks are for poppler
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
        echo "ln -svf openjpeg-${openjpegseries}/openjpeg.h /usr/include/openjpeg.h
ln -svf openjpeg-${openjpegseries}/opj_config.h /usr/include/opj_config.h
ln -svf openjpeg-${openjpegseries}/opj_stdint.h /usr/include/opj_stdint.h" >> $Output
      cat >> $Output << "EOF"
if ! $AS_ROOT; then
  chown -h openjpeg2:openjpeg2 /usr/include/{openjpeg.h,opj_config.h,opj_stdint.h}
fi
EOF
      else
        echo "ln -svf openjpeg-${openjpegseries}/openjpeg.h \${PkgUserDir}/\${PkgName}/usr/include/openjpeg.h
ln -svf openjpeg-${openjpegseries}/opj_config.h \${PkgUserDir}/\${PkgName}/usr/include/opj_config.h 
ln -svf openjpeg-${openjpegseries}/opj_stdint.h \${PkgUserDir}/\${PkgName}/usr/include/opj_stdint.h" >> $Output
      fi
    ;;
    openldap)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /etc/openldap
chmod g+w,o+t /etc/openldap
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/etc/openldap
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/openldap
EOF
      fi
    ;;
    openobex)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/cmake
chmod g+w,o+t /usr/lib/cmake
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/cmake
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/cmake
install -D -m644 ${blfsfiles}/install-files/libraries/openobex.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
      fi
    ;;
    openssh)
      if [ "$SYSTEMD" = yes ]; then
        if [[ $useDESTDIR = false || $installDEST = true ]]; then
           cat >> $Output << "EOF"
sed 's@d/login@d/sshd@g' /etc/pam.d/login > /etc/pam.d/sshd
chmod 644 /etc/pam.d/sshd
echo "UsePAM yes" >> /etc/ssh/sshd_config
install -Dm644 ${blfsfiles}/service/sshdgenkeys.service /usr/lib/systemd/system/sshdgenkeys.service
install -Dm644 ${blfsfiles}/service/sshd.service /usr/lib/systemd/system/sshd.service
install -Dm644 ${blfsfiles}/service/sshd.socket /usr/lib/systemd/system/sshd.socket
install -Dm644 ${blfsfiles}/service/sshd@.service /usr/lib/systemd/system/sshd@.service
install -Dm644 ${blfsfiles}/conf-files/sshd.conf /usr/lib/tmpfiles.d
if ! $AS_ROOT; then
  chown openssh:openssh /etc/pam.d/sshd
  chown openssh:openssh /usr/lib/systemd/system/sshd*
  chown openssh:openssh /usr/lib/tmpfiles.d/sshd.conf
fi
EOF
        else
	   cat >> $Output << "EOF"
install -Dm644 ${blfsfiles}/service/sshdgenkeys.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/sshdgenkeys.service
install -Dm644 ${blfsfiles}/service/sshd.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/sshd.service
install -Dm644 ${blfsfiles}/service/sshd.socket ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/sshd.socket
install -Dm644 ${blfsfiles}/service/sshd@.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/sshd@.service
mkdir -pv ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d
install -Dm644 ${blfsfiles}/conf-files/sshd.conf ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d
install -Dm644 ${blfsfiles}/conf-files/pam-sshd ${PkgUserDir}/${PkgName}/etc/pam.d/sshd
chmod 644 ${PkgUserDir}/${PkgName}/etc/pam.d/sshd
if ! $AS_ROOT; then
  chown -R openssh:openssh ${PkgUserDir}/${PkgName}/usr/lib/systemd
  chown -R openssh:openssh ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d
  chown -R openssh:openssh ${PkgUserDir}/${PkgName}/etc/pam.d
fi
EOF
        fi
      fi
# for both systemd and sysv versions
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chown root /usr/lib/ssh/ssh-keysign
chmod 4711 /usr/lib/ssh/ssh-keysign
EOF
      else
	 cat >> $Output << "EOF"
chown root ${PkgUserDir}/${PkgName}/usr/lib/ssh/ssh-keysign
chmod 4711 ${PkgUserDir}/${PkgName}/usr/lib/ssh/ssh-keysign
EOF
      fi
    ;;
    p11-kit)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/gtk-doc/html # for gegl
chmod g+w,o+t /usr/share/gtk-doc/html
chgrp install /usr/share/p11-kit/modules # for gnome-keyring
chmod g+w,o+t /usr/share/p11-kit/modules
chgrp install /usr/lib/pkcs11
chmod g+w,o+t /usr/lib/pkcs11
chgrp install /etc/pkcs11
chmod g+w,o+t /etc/pkcs11
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/gtk-doc/html
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/gtk-doc/html
chgrp install ${PkgUserDir}/${PkgName}/usr/share/p11-kit/modules
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/p11-kit/modules
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/pkcs11
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/pkcs11
chgrp install ${PkgUserDir}/${PkgName}/etc/pkcs11
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/pkcs11
EOF
      fi
    ;;
    pango)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/include/pango-1.0/pango
chmod g+w,o+t /usr/include/pango-1.0/pango
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/pango-1.0/pango
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/pango-1.0/pango
install -D -m644 ${blfsfiles}/install-files/xlibs/pango.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
      fi
    ;;
    parole)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/applications
chmod g+w,o+t /usr/share/applications
EOF
      fi
    ;;
    pciutils)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/hwdata
chmod 1775 /usr/share/hwdata
EOF
      fi
    ;;
    pcre)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /run
chmod 1775 /run
EOF
      fi
      if [ "$BOOK_VERSION" = arch ]; then
         cat >> $Output << "EOF"
rm -rf /usr/share/licenses
EOF
      fi
    ;;
    php)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chown apache:apache /etc/httpd/httpd.conf
chgrp install /usr/lib/php/extensions/no-debug-non-zts-*
chmod g+w,o+t /usr/lib/php/extensions/no-debug-non-zts-*
chgrp install /usr/share/php
chmod g+w,o+t /usr/share/php
EOF
      else
	 cat >> $Output << "EOF"
chown apache:apache ${PkgUserDir}/${PkgName}/etc/httpd/httpd.conf
EOF
      fi
    ;;
    pidgin)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
gtk-update-icon-cache
update-desktop-database
EOF
        if [ "$INSTALLDSKTP" = gnome ]; then
           cat >> $Output << "EOF"
chgrp install /etc/gconf/schemas
chmod g+w,o+t /etc/gconf/schemas
EOF
        fi
      fi
    ;;
    polkit)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
groupadd -fg 27 polkitd # dedicated user to take control of polkitd
useradd -c "PolicyKit Daemon Owner" -d /etc/polkit-1 -u 27 \
        -g polkitd -s /bin/false polkitd
chgrp install /usr/share/polkit-1/actions # for colord
chmod g+w,o+t /usr/share/polkit-1/actions
chown root /usr/lib/polkit-1/polkit-agent-helper-1
chmod 4755 /usr/lib/polkit-1/polkit-agent-helper-1
chown root /usr/bin/pkexec
chmod 4755 /usr/bin/pkexec
chown polkitd /etc/polkit-1/rules.d
chmod 700 /etc/polkit-1/rules.d
chown polkitd:install /usr/share/polkit-1/rules.d
chmod 1775 /usr/share/polkit-1/rules.d
chgrp install /etc/dbus-1 # for dbus
chmod g+w,o+t /etc/dbus-1
chgrp install /etc/dbus-1/system.d
chmod g+w,o+t /etc/dbus-1/system.d
chgrp install /usr/share/dbus-1 # for dbus
chmod g+w,o+t /usr/share/dbus-1
chgrp install /usr/share/dbus-1/system-services
chmod g+w,o+t /usr/share/dbus-1/system-services
EOF
      else
	 cat >> $Output << "EOF"
chown root ${PkgUserDir}/${PkgName}/usr/lib/polkit-1/polkit-agent-helper-1
chmod 4755 ${PkgUserDir}/${PkgName}/usr/lib/polkit-1/polkit-agent-helper-1
chown root ${PkgUserDir}/${PkgName}/usr/bin/pkexec
chmod 4755 ${PkgUserDir}/${PkgName}/usr/bin/pkexec
chown polkitd ${PkgUserDir}/${PkgName}/etc/polkit-1/rules.d
chmod 700 ${PkgUserDir}/${PkgName}/etc/polkit-1/rules.d
chown polkitd:install ${PkgUserDir}/${PkgName}/usr/share/polkit-1/rules.d
chmod 1775 ${PkgUserDir}/${PkgName}/usr/share/polkit-1/rules.d
chgrp install ${PkgUserDir}/${PkgName}/etc/dbus-1
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/dbus-1
chgrp install ${PkgUserDir}/${PkgName}/etc/dbus-1/system.d
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/dbus-1/system.d
chgrp install ${PkgUserDir}/${PkgName}/usr/share/dbus-1
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/dbus-1
chgrp install ${PkgUserDir}/${PkgName}/usr/share/dbus-1/system-services
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/dbus-1/system-services
chgrp install ${PkgUserDir}/${PkgName}/usr/share/polkit-1/actions
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/polkit-1/actions
install -D -m644 ${blfsfiles}/install-files/security/polkit.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
      fi
    ;;
    popt)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/locale/{is/{,LC_MESSAGES},wa/{,LC_MESSAGES}}
chmod 1775 /usr/share/locale/{is/{,LC_MESSAGES},wa/{,LC_MESSAGES}}
EOF
      fi
    ;;
    pulseaudio)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/vala/{,vapi}
chmod g+w,o+t /usr/share/vala/{,vapi}
chgrp install /usr/share/GConf/gsettings
chmod g+w,o+t /usr/share/GConf/gsettings
EOF
      fi
    ;;
    pygobject2)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         echo "chgrp install /usr/lib/python${py2series}/site-packages/gi
chmod g+w,o+t /usr/lib/python${py2series}/site-packages/gi
chgrp install /usr/lib/python${py2series}/site-packages/gi/repository
chmod g+w,o+t /usr/lib/python${py2series}/site-packages/gi/repository
chgrp install /usr/lib/python${py2series}/site-packages/gi/overrides
chmod g+w,o+t /usr/lib/python${py2series}/site-packages/gi/overrides
chgrp install /usr/lib/python${py2series}/site-packages/gtk-2.0
chmod g+w,o+t /usr/lib/python${py2series}/site-packages/gtk-2.0
chgrp install /usr/include/pygtk-2.0
chmod g+w,o+t /usr/include/pygtk-2.0" >> $Output
      else
         echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/include/pygtk-2.0
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/include/pygtk-2.0" >> $Output
      fi
    ;;
    py2-appdirs)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
echo "chown  python2:install /usr/lib/python${py2series}/site-packages/easy-install.pth
chmod 664 /usr/lib/python${py2series}/site-packages/easy-install.pth
chown python3:install /usr/lib/python${py3series}/site-packages/setuptools.pth
chmod 664 /usr/lib/python${py3series}/site-packages/setuptools.pth" >> $Output
      fi
    ;;
    py3-cssselect)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         echo "chgrp install /usr/lib/python${py3series}/site-packages/easy-install.pth
chmod 664 /usr/lib/python${py3series}/site-packages/easy-install.pth" >> $Output
      fi
    ;;
    py2-gobject3)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         echo "chgrp install /usr/lib/python${py2series}/site-packages/gi
chmod g+w,o+t /usr/lib/python${py2series}/site-packages/gi
chgrp install /usr/lib/python${py2series}/site-packages/gi/overrides
chmod g+w,o+t /usr/lib/python${py2series}/site-packages/gi/overrides
chgrp install /usr/include/pygobject-3.0
chmod g+w,o+t /usr/include/pygobject-3.0" >> $Output
      else
         echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/python${py2series}/site-packages/gi
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/python${py2series}/site-packages/gi
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/python${py2series}/site-packages/gi/overrides
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/python${py2series}/site-packages/gi/overrides
chgrp install \${PkgUserDir}/\${PkgName}/usr/include/pygobject-3.0
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/include/pygobject-3.0" >> $Output
      fi
    ;;
    py3-gobject3)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         echo "chgrp install /usr/lib/python${py3series}/site-packages/gi
chmod g+w,o+t /usr/lib/python${py3series}/site-packages/gi
chgrp install /usr/lib/python${py3series}/site-packages/gi/overrides
chmod g+w,o+t /usr/lib/python${py3series}/site-packages/gi/overrides" >> $Output
      else
         echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/python${py3series}/site-packages/gi
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/python${py3series}/site-packages/gi
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/python${py3series}/site-packages/gi/overrides
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/python${py3series}/site-packages/gi/overrides" >> $Output
      fi
    ;;
    py2-kiwisolver) # put the original /usr/bin/easy_install back in place
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
rm -v /usr/bin/easy_install
mv -v /usr/bin/easy_install-old /usr/bin/easy_install
EOF
         echo "rm -v /usr/bin/easy_install-${py2series}
mv -v /usr/bin/easy_install-${py2series}-old /usr/bin/easy_install-${py2series}
if ! \$AS_ROOT; then
  chown py3-setuptools:py3-setuptools /usr/bin/easy_install
  chown py2-setuptools:py2-setuptools /usr/bin/easy_install-${py2series}
fi" >> $Output
      fi
    ;;
    py3-kiwisolver)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
rm -v /usr/bin/easy_install
mv -v /usr/bin/easy_install-old /usr/bin/easy_install
EOF
         echo "rm -v /usr/bin/easy_install-${py3series}
mv -v /usr/bin/easy_install-${py3series}-old /usr/bin/easy_install-${py3series}
if ! \$AS_ROOT; then
  chown py3-setuptools:py3-setuptools /usr/bin/easy_install
  chown py3-setuptools:py3-setuptools /usr/bin/easy_install-${py3series}
fi" >> $Output
      fi
    ;;
    py2-matplotlib) # put the original /usr/bin/easy_install back in place
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
rm -v /usr/bin/easy_install
mv -v /usr/bin/easy_install-old /usr/bin/easy_install
EOF
         echo "rm -v /usr/bin/easy_install-${py2series}
mv -v /usr/bin/easy_install-${py2series}-old /usr/bin/easy_install-${py2series}
if ! \$AS_ROOT; then
  chown py3-setuptools:py3-setuptools /usr/bin/easy_install
  chown py2-setuptools:py2-setuptools /usr/bin/easy_install-${py2series}
fi" >> $Output
      fi
    ;;
    py3-matplotlib)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
       cat >> $Output << "EOF"
rm -v /usr/bin/easy_install
mv -v /usr/bin/easy_install-old /usr/bin/easy_install
EOF
       echo "rm -v /usr/bin/easy_install-${py3series}
mv -v /usr/bin/easy_install-${py3series}-old /usr/bin/easy_install-${py3series}
if ! \$AS_ROOT; then
  chown py3-setuptools:py3-setuptools /usr/bin/easy_install
  chown py3-setuptools:py3-setuptools /usr/bin/easy_install-${py3series}
fi" >> $Output
      fi
    ;;
    py2-pycairo)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/include/pycairo
chmod g+w,o+t /usr/include/pycairo
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/pycairo
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/pycairo
EOF
      fi
    ;;
    py2-setuptools) # need to write to easy-install.pth
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
        if [ "$SECTION" != pythonmodbin ]; then
          echo "chgrp install /usr/lib/python${py2series}/site-packages/easy-install.pth
chmod 664 /usr/lib/python${py2series}/site-packages/easy-install.pth
chgrp install /usr/lib/python${py2series}/site-packages/setuptools.pth
chmod 664 /usr/lib/python${py2series}/site-packages/setuptools.pth" >> $Output
        fi
      fi
    ;;
    pygtk)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/pygtk/2.0/defs
chmod g+w,o+t /usr/share/pygtk/2.0/defs
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/pygtk/2.0/defs
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/pygtk/2.0/defs
EOF
      fi
    ;;
    pysolfc)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/applications
chmod g+w,o+t /usr/share/applications
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/applications
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/applications
EOF
      fi
    ;;
    python2) 
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         echo "chgrp install /usr/share/man
chmod g+w,o+t /usr/share/man
chgrp install /usr/include/python${py2series}
chmod g+w,o+t /usr/include/python${py2series}
chgrp install /usr/lib/python${py2series}/site-packages #for python modules
chmod g+w,o+t /usr/lib/python${py2series}/site-packages" >> $Output
      else
 	 echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/share/man
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/share/man
chgrp install \${PkgUserDir}/\${PkgName}/usr/include/python${py2series}
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/include/python${py2series}
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/python${py2series}/site-packages
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/python${py2series}/site-packages" >> $Output
      fi
    ;;
    python3)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         echo "chgrp install /usr/lib/python${py3series}/site-packages #for python modules
chmod g+w,o+t /usr/lib/python${py3series}/site-packages
chgrp install /usr/lib/python${py3series}/site-packages/__pycache__
chmod g+w,o+t /usr/lib/python${py3series}/site-packages/__pycache__" >> $Output
      else
     	 echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/python${py3series}/site-packages
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/python${py3series}/site-packages" >> $Output
      fi
    ;;
# *** REMEMBER ***
# the owner of the file under /usr/lib/python3.8/site-packages, e.g. easy-install.pth
# has to be the same as the owner of /usr/lib/python3.8/site-packages
# which is why we have chown below and not chgrp install
    py3-setuptools) # need to write to easy-install.pth
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
echo "chown  python3:install /usr/lib/python${py3series}/site-packages/easy-install.pth
chmod 664 /usr/lib/python${py3series}/site-packages/easy-install.pth
chown python2:install /usr/lib/python${py3series}/site-packages/setuptools.pth
chmod 664 /usr/lib/python${py3series}/site-packages/setuptools.pth" >> $Output
      fi
    ;;
    qt5-base)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /opt/qt5/lib/{,pkgconfig,cmake/{,Qt5Gui}}
chmod g+w,o+t /opt/qt5/lib/{,pkgconfig,cmake/{,Qt5Gui}}
chgrp install /opt/qt5/include
chmod g+w,o+t /opt/qt5/include
chgrp install /opt/qt5/mkspecs/modules
chmod g+w,o+t /opt/qt5/mkspecs/modules
# this for qt5-webengine
chgrp install /opt/qt5/plugins/{,imageformats,platformthemes}
chmod g+w,o+t /opt/qt5/plugins/{,imageformats,platformthemes}
EOF
      fi
    ;;
    qtwebkit) # these files owned by qt5-base so need to do this as root
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
export QT5DIR=/opt/qt5 # make sure QT5DIR is set
find $QT5DIR/lib/pkgconfig -name "*.pc" -exec perl -pi -e "s, -L$PWD/?\S+,,g" {} \;
find $QT5DIR/ -name qt_lib_bootstrap_private.pri \
   -exec sed -i -e "s:$PWD/qtbase:/$QT5DIR/lib/:g" {} \;
find $QT5DIR/ -name \*.prl \
   -exec sed -i -e '/^QMAKE_PRL_BUILD_DIR/d' {} \;
unset QT5DIR
chgrp install /opt/qt5/libexec
chmod g+w,o+t /opt/qt5/libexec
EOF
      fi
    ;;
    rarian)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/help
chmod g+w,o+t /usr/share/help
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/help
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/help
EOF
      fi
    ;;
    rsync)
      if [[ $useDESTDIR = true && $installDEST = false ]]; then
         cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/install-files/networks/rsync.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
      fi
    ;;
    ruby)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         echo "chgrp install /usr/lib/ruby/site_ruby/${rubySeriesZero}
chmod g+w,o+t /usr/lib/ruby/site_ruby/${rubySeriesZero}
chgrp install /usr/lib/ruby/site_ruby/${rubySeriesZero}/x86_64-linux
chmod g+w,o+t /usr/lib/ruby/site_ruby/${rubySeriesZero}/x86_64-linux
chgrp install /usr/lib/ruby/vendor_ruby/${rubySeriesZero}
chmod g+w,o+t /usr/lib/ruby/vendor_ruby/${rubySeriesZero}
chgrp install /usr/lib/ruby/vendor_ruby/${rubySeriesZero}/x86_64-linux
chmod g+w,o+t /usr/lib/ruby/vendor_ruby/${rubySeriesZero}/x86_64-linux" >> $Output
      else
         echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/ruby/site_ruby/${rubySeriesZero}
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/ruby/site_ruby/${rubySeriesZero}
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/ruby/site_ruby/${rubySeriesZero}/x86_64-linux
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/ruby/site_ruby/${rubySeriesZero}/x86_64-linux
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/ruby/vendor_ruby/${rubySeriesZero}
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/ruby/vendor_ruby/${rubySeriesZero}
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/ruby/vendor_ruby/${rubySeriesZero}/x86_64-linux
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/ruby/vendor_ruby/${rubySeriesZero}/x86_64-linux" >> $Output
      fi
    ;;
    rustc)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/rustlib
chmod g+w,o+t /usr/lib/rustlib
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/rustlib
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/rustlib
EOF
      fi
    ;;
    samba)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chown root:cups /usr/lib/cups/backend
chmod 755 /usr/lib/cups/backend
EOF
      fi
    ;;
    sane)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/sane
chmod g+w,o+t /usr/lib/sane
chgrp install /usr/share/sane
chmod g+w,o+t /usr/share/sane
chgrp install /etc/sane.d/dll.d
chmod g+w,o+t /etc/sane.d/dll.d
EOF
      fi
    ;;
    sddm)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
groupadd -g 64 sddm
useradd  -c "SDDM Daemon" -d /var/lib/sddm -u 64 -g sddm -s /bin/false sddm
EOF
      fi
    ;;
    sdl)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/include/SDL
chmod g+w,o+t /usr/include/SDL
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/SDL
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/SDL
EOF
      fi
    ;;
    sgml-common)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/sgml
chmod g+w,o+t /usr/share/sgml # for opensp
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/sgml
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/sgml
EOF
      fi
    ;;
    shadow)  #/bin/su, etc setuid root
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chown root /usr/bin/{chage,chfn,chsh,expiry,gpasswd,newgidmap,newgrp,newuidmap,su,passwd}
chmod 4755 /usr/bin/{chage,chfn,chsh,expiry,gpasswd,newgidmap,newgrp,newuidmap,su,passwd}
chgrp install /usr/share/locale/*/LC_MESSAGES
chmod 1775 /usr/share/locale/*/LC_MESSAGES
#cp -v ${blfsfiles}/conf-files/login.defs /etc/
EOF
      else
	 cat >> $Output << "EOF"
chown root ${PkgUserDir}/${PkgName}/usr/bin/{chage,chfn,chsh,expiry,gpasswd,newgidmap,newgrp,newuidmap,passwd,su}
chmod 4755 ${PkgUserDir}/${PkgName}/usr/bin/{chage,chfn,chsh,expiry,gpasswd,newgidmap,newgrp,newuidmap,passwd,su}
chgrp install ${PkgUserDir}/${PkgName}/usr/share/locale/*/LC_MESSAGES
chmod 1775 ${PkgUserDir}/${PkgName}/usr/share/locale/*/LC_MESSAGES
#cp -v ${blfsfiles}/conf-files/login.defs ${PkgUserDir}/${PkgName}/etc/
# move all the files out of /usr/sbin to /usr/bin
mv ${PkgUserDir}/${PkgName}/usr/sbin/* ${PkgUserDir}/${PkgName}/usr/bin
rm -rf ${PkgUserDir}/${PkgName}/usr/sbin
EOF
      fi
    ;;
    shrd-mime-info)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/mime
chmod g+w,o+t /usr/share/mime
chgrp install /usr/share/mime/packages
chmod g+w,o+t /usr/share/mime/packages
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/mime
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/mime
chgrp install ${PkgUserDir}/${PkgName}/usr/share/mime/packages
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/mime/packages
EOF
      fi
    ;;
    speex) # for installation of speexdsp as a separate binary in Arch
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/include/speex
chmod g+w,o+t /usr/include/speex
EOF
      fi
    ;;
    subversion)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
if [ "$SYSTEMD" = yes ]; then
  install -D -m 644 ${blfsfiles}/service/svnserve.service /usr/lib/systemd/system/svnserve.service
  install -D -m 644 ${blfsfiles}/conf-files/svnserve.tmpfiles /usr/lib/tmpfiles.d/svnserve.conf
  install -D -m 644 ${blfsfiles}/conf-files/svnserve.conf /etc/conf.d/svnserve
  chown subversion:subversion /usr/lib/systemd/system/svnserve.service
  chown subversion:subversion /usr/lib/tmpfiles.d/svnserve.conf
  chown subversion:subversion /etc/conf.d/svnserve
fi
EOF
      else
	 cat >> $Output << "EOF"
if [ "$SYSTEMD" = yes ]; then
  install -D -m 644 ${blfsfiles}/service/svnserve.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/svnserve.service
  install -D -m 644 ${blfsfiles}/conf-files/svnserve.tmpfiles ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/svnserve.conf
  install -D -m 644 ${blfsfiles}/conf-files/svnserve.conf ${PkgUserDir}/${PkgName}/etc/conf.d/svnserve
  chown subversion:subversion ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/svnserve.service
  chown subversion:subversion ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/svnserve.conf
  chown subversion:subversion ${PkgUserDir}/${PkgName}/etc/conf.d/svnserve
fi
EOF
      fi
    ;;
    sudo)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chown root /usr/bin/sudo
chmod 4755 /usr/bin/sudo
chown root /usr/lib/sudo/sudoers.so
chown root:sudo /etc/{sudoers,sudoers.dist,sudo.conf,sudoers.d/{,sudo}}
chmod 0750 /etc/sudoers.d
chmod 0440 /etc/{sudoers,sudoers.dist}
chown root /var/lib/sudo/lectured
chmod 0700 /var/lib/sudo/lectured
# add your username to /etc/sudoers so you can sudo
if [ $(grep -q ^"john ALL" /etc/sudoers;echo $?) -eq 0 ]; then
  echo "john already added to sudoers"
else
  sed -i 's/root ALL=(ALL) ALL/root ALL=(ALL) ALL\njohn ALL=(ALL) ALL/' /etc/sudoers
fi
EOF
      else
	 cat >> $Output << "EOF"
cat > ${PkgUserDir}/${PkgName}/etc/sudoers.d/sudo << "SUDOEOF"
Defaults secure_path="/usr/bin:/bin:/usr/sbin:/sbin"
%wheel ALL=(ALL) ALL
SUDOEOF
chown root ${PkgUserDir}/${PkgName}/usr/bin/sudo
chmod 4755 ${PkgUserDir}/${PkgName}/usr/bin/sudo
chown root ${PkgUserDir}/${PkgName}/usr/lib/sudo/sudoers.so
chown root ${PkgUserDir}/${PkgName}/etc/{sudoers,sudoers.dist,sudoers.d/{,sudo}}
chmod 0755 ${PkgUserDir}/${PkgName}/etc/sudoers.d
chmod 0440 ${PkgUserDir}/${PkgName}/etc/{sudoers,sudoers.dist}
chown root ${PkgUserDir}/${PkgName}/var/lib/sudo
chown root ${PkgUserDir}/${PkgName}/var/lib/sudo/lectured
chmod 0700 ${PkgUserDir}/${PkgName}/var/lib/sudo/lectured
# add your username to /etc/sudoers so you can sudo
sed -i 's/root ALL=(ALL) ALL/root ALL=(ALL) ALL\njohn ALL=(ALL) ALL/' ${PkgUserDir}/${PkgName}/etc/sudoers
EOF
      fi
      if [ "$BOOK_VERSION" = arch ]; then
         cat >> $Output << "EOF"
chown root /var/db/sudo
chown root /var/db/sudo/lectured
EOF
      fi
    ;;
    sysprof)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/metainfo
chmod g+w,o+t /usr/share/metainfo
chgrp install /usr/share/help/{C,cs,da,de,el,es,pl,pt_BR,sv,uk}
chmod g+w,o+t /usr/share/help/{C,cs,da,de,el,es,pl,pt_BR,sv,uk}
# these are from build-aux/meson/post_install.sh
update-mime-database "/usr/share/mime"
gtk-update-icon-cache -qtf "/usr/share/icons/hicolor"
update-desktop-database -q "/usr/share/applications"
EOF
      fi
    ;;
    systemd)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/systemd/system-sleep
chmod g+w,o+t /usr/lib/systemd/system-sleep
chgrp install /usr/lib/systemd/user
chmod g+w,o+t /usr/lib/systemd/user
chgrp install /usr/lib/udev/hwdb.d
chmod g+w,o+t /usr/lib/udev/hwdb.d
chgrp install /usr/share/polkit-1
chmod g+w,o+t /usr/share/polkit-1
chgrp install /usr/share/polkit-1/actions
chmod g+w,o+t /usr/share/polkit-1/actions
chgrp install /usr/share/zsh/site-functions
chmod g+w,o+t /usr/share/zsh/site-functions
chown root:systemd-journal /var/log/journal
chmod 2755 /var/log/journal
chown 0:0 /usr
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/systemd/system-sleep
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/systemd/system-sleep
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/systemd/user
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/systemd/user
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/udev/hwdb.d
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/udev/hwdb.d
chgrp install ${PkgUserDir}/${PkgName}/usr/share/polkit-1
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/polkit-1
chgrp install ${PkgUserDir}/${PkgName}/usr/share/polkit-1/actions
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/polkit-1/actions
chgrp install ${PkgUserDir}/${PkgName}/usr/share/zsh/site-functions
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/zsh/site-functions
chown root:systemd-journal ${PkgUserDir}/${PkgName}/var/log/journal
chmod 2755 ${PkgUserDir}/${PkgName}/var/log/journal
EOF
      fi
    ;;
    talloc)
      if [ "$BOOK_VERSION" = arch ]; then
         echo "chgrp install /usr/lib/python${py2series}/site-packages
chmod g+w,o+t /usr/lib/python${py2series}/site-packages" >> $Output
      fi
    ;;
    tcl)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/man/mann
chmod g+w,o+t /usr/share/man/mann
chgrp install /usr/share/gdb/auto-load #for glib
chmod g+w,o+t /usr/share/gdb/auto-load
chgrp install /etc/bash_completion.d #for glib
chmod g+w,o+t /etc/bash_completion.d
EOF
      fi
    ;;
    telepathy-glib)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/include/telepathy-1.0
chmod g+w,o+t /usr/include/telepathy-1.0
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/telepathy-1.0
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/telepathy-1.0
EOF
      fi
    ;;
    telepathy-idle)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/telepathy/managers
chmod g+w,o+t /usr/share/telepathy/managers
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/telepathy/managers
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/telepathy/managers
EOF
      fi
    ;;
    telepathy-logr)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/telepathy # for telepathy-mission-control
chmod g+w,o+t /usr/lib/telepathy
chgrp install /usr/share/telepathy
chmod g+w,o+t /usr/share/telepathy
chgrp install /usr/share/telepathy/clients
chmod g+w,o+t /usr/share/telepathy/clients
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/telepathy
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/telepathy
chgrp install ${PkgUserDir}/${PkgName}/usr/share/telepathy
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/telepathy
chgrp install ${PkgUserDir}/${PkgName}/usr/share/telepathy/clients
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/telepathy/clients
EOF
       fi
    ;;
    termcap)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chown -h termcap:termcap /usr/lib/libtermcap.so
EOF
      fi
    ;;
    test-mockmodule)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         echo "chgrp install /usr/lib/perl5/${perlseries}/site_perl/Test
chmod g+w,o+t /usr/lib/perl5/${perlseries}/site_perl/Test" >> $Output
      else
         echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/Test
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/Test" >> $Output
      fi
    ;;
    thunar)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/Thunar/sendto
chmod g+w,o+t /usr/share/Thunar/sendto
EOF
      fi
    ;;
    traceroute) # set suid root binary
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chown root /bin/traceroute
chmod 4755 /bin/traceroute
rm -fv /usr/share/man/man1/traceroute.1
EOF
      else
	 cat >> $Output << "EOF"
chown root ${PkgUserDir}/${PkgName}/usr/bin/traceroute
chmod 4755 ${PkgUserDir}/${PkgName}/usr/bin/traceroute
rm -fv ${PkgUserDir}/${PkgName}/usr/share/man/man1/traceroute.1
EOF
      fi
    ;;
    tracker)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/tracker
chmod g+w,o+t /usr/share/tracker
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/tracker
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/tracker
EOF
      fi
    ;;
    tracker3)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/tracker3
chmod g+w,o+t /usr/share/tracker3
EOF
      else
         cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/tracker3
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/tracker3
EOF
      fi
    ;;
    twm)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /etc/X11/app-defaults
chmod g+w,o+t /etc/X11/app-defaults
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/etc/X11/app-defaults
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/X11/app-defaults
EOF
      fi
    ;;
#  ** TODO ** need to fix eudev for a DESTDIR install
    eudev)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /etc/udev
chmod g+w,o+t /etc/udev
chgrp install /lib/udev
chmod g+w,o+t /lib/udev
EOF
      fi
    ;;
    upower)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/dbus-1/interfaces
chmod g+w,o+t /usr/share/dbus-1/interfaces
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/dbus-1/interfaces
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/dbus-1/interfaces
EOF
      fi
    ;;
    usbutils)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/pkgconfig
chmod g+w,o+t /usr/share/pkgconfig
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/pkgconfig
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/pkgconfig
EOF
      fi
    ;;
    vala)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         echo "chgrp install /usr/share/vala
chmod g+w,o+t /usr/share/vala
chgrp install /usr/share/vala-${valaseries}/vapi
chmod g+w,o+t /usr/share/vala-${valaseries}/vapi" >> $Output
         cat >> $Output << "EOF"
chgrp install /usr/share/devhelp/books
chmod g+w,o+t /usr/share/devhelp/books
EOF
      else
	 echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/share/vala
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/share/vala
chgrp install \${PkgUserDir}/\${PkgName}/usr/share/vala-${valaseries}/vapi
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/share/vala-${valaseries}/vapi" >> $Output
         cat >> $Output << "EOF"
chgrp install \${PkgUserDir}/\${PkgName}/usr/share/devhelp/books
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/share/devhelp/books
EOF
      fi
    ;;
    valgrind)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         echo "chgrp install /usr/lib/valgrind
chmod g+w,o+t /usr/lib/valgrind" >> $Output
      else
         echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/valgrind
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/valgrind" >> $Output
      fi
    ;;
    vlc)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
if hash gtk-update-icon-cache &> /dev/null; then
  gtk-update-icon-cache
fi
if hash update-desktop-database &> /dev/null; then
  update-desktop-database
fi
chgrp install /usr/share/applications
chmod g+w,o+t /usr/share/applications
chgrp install /usr/share/locale/*/LC_MESSAGES
chmod g+w,o+t /usr/share/locale/*/LC_MESSAGES
EOF
      fi
    ;;
    weston)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chown root /usr/bin/weston-launch
chmod u+s /usr/bin/weston-launch
chgrp install /usr/share/wayland-sessions
chmod g+w,o+t /usr/share/wayland-sessions
EOF
      else
	 cat >> $Output << "EOF"
chown root ${PkgUserDir}/${PkgName}/usr/bin/weston-launch
chmod u+s ${PkgUserDir}/${PkgName}/usr/bin/weston-launch
chgrp install ${PkgUserDir}/${PkgName}/usr/share/wayland-sessions
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/wayland-sessions
EOF
      fi
    ;;
    wireless-regdb)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /etc/conf.d
chmod g+w,o+t /etc/conf.d
EOF
      fi
    ;;
    wpa_supplicant)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
if [ -e /usr/bin/update-desktop-database ]; then
  update-desktop-database
fi
if [ "$SYSTEMD" = yes ]; then
  systemctl enable wpa_supplicant.service
fi
if [ ! -d /etc/wpa_supplicant ]; then
  install -dm755 /etc/wpa_supplicant
  if ! $AS_ROOT; then chown wpa_supplicant:wpa_supplicant /etc/wpa_supplicant; fi
fi
EOF
      fi
    ;;
    $xapp)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/terminfo/x #for xterm
chmod g+w,o+t /usr/share/terminfo/x
EOF
      fi
    ;;
    xbitmaps)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/include/X11
chmod g+w,o+t /usr/include/X11
EOF
      fi
    ;;
    xboard)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/games
chmod g+w,o+t /usr/share/games
gtk-update-icon-cache
update-desktop-database
EOF
      fi
    ;;
    xclock)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /etc/sysconfig
chmod g+w,o+t /etc/sysconfig
chgrp install /etc/X11
chmod g+w,o+t /etc/X11
chgrp install /usr/share/X11/app-defaults
chmod g+w,o+t /usr/share/X11/app-defaults
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/etc/X11
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/X11
chgrp install ${PkgUserDir}/${PkgName}/usr/share/X11/app-defaults
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/X11/app-defaults
EOF
      fi
    ;;
    xcursor-themes)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/icons
chmod g+w,o+t /usr/share/icons
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/icons
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/icons
EOF
      fi
    ;;
    xfburn)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/Thunar/sendto
chmod g+w,o+t /usr/share/Thunar/sendto
EOF
      fi
    ;;
    xfce4-xkb-plugin)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/xfce4/panel-plugins
chmod g+w,o+t /usr/share/xfce4/panel-plugins
EOF
      fi
    ;;
    xfce4-panel)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/xfce4/panel/plugins
chmod g+w,o+t /usr/lib/xfce4/panel/plugins
chgrp install /usr/share/xfce4/panel/plugins
chmod g+w,o+t /usr/share/xfce4/panel/plugins
EOF
      fi
    ;;
    xfce4-terminal)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/man/el/man1
chmod g+w,o+t /usr/share/man/el/man1
EOF
      fi
    ;;
    xfconf)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/xfce4
chmod g+w,o+t /usr/lib/xfce4
EOF
      fi
    ;;
    xfce4pwrmngr)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /etc/xdg/autostart
chmod g+w,o+t /etc/xdg/autostart
EOF
      fi
    ;;
    $xfont)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /etc/fonts/conf.avail
chmod g+w,o+t /etc/fonts/conf.avail
chgrp install /usr/share/fonts
chmod g+w,o+t /usr/share/fonts
chgrp install /usr/share/fonts/X11/TTF
chmod g+w,o+t /usr/share/fonts/X11/TTF
chgrp install /usr/share/fonts/X11/encodings
chmod g+w,o+t /usr/share/fonts/X11/encodings
chgrp install /usr/share/fonts/X11/encodings/large
chmod g+w,o+t /usr/share/fonts/X11/encodings/large
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/etc/fonts/conf.avail
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/fonts/conf.avail
chgrp install ${PkgUserDir}/${PkgName}/usr/share/fonts
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/fonts
chgrp install ${PkgUserDir}/${PkgName}/usr/share/fonts/X11/TTF
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/fonts/X11/TTF
chgrp install ${PkgUserDir}/${PkgName}/usr/share/fonts/X11/encodings
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/fonts/X11/encodings
chgrp install ${PkgUserDir}/${PkgName}/usr/share/fonts/X11/encodings/large
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/fonts/X11/encodings/large
EOF
      fi
    ;;
    xkeyboard-config)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/X11/xkb
chmod g+w,o+t /usr/share/X11/xkb
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/X11/xkb
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/X11/xkb
EOF
      fi
    ;;
    $xlib)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/X11
chmod g+w,o+t /usr/share/X11
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/X11
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/X11
EOF
      fi
    ;;
    xml-parser)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
        echo "chgrp install /usr/lib/perl5/${perlseries}/core_perl/perllocal.pod
chmod 664 /usr/lib/perl5/${perlseries}/core_perl/perllocal.pod" >> $Output
      else
        echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/core_perl/perllocal.pod
chmod 664 \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/core_perl/perllocal.pod" >> $Output
      fi
    ;;
    xml-sax)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
        echo "chown xml-sax-base:install /usr/lib/perl5/${perlseries}/site_perl/XML/SAX/ParserDetails.ini
chmod 664 /usr/lib/perl5/${perlseries}/site_perl/XML/SAX/ParserDetails.ini" >> $Output
      else
        echo "chown xml-sax-base:install \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/XML/SAX/ParserDetails.ini
chmod 664 \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/XML/SAX/ParserDetails.ini" >> $Output
      fi
    ;;
    xml-sax-base)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         echo "chgrp install /usr/lib/perl5/${perlseries}/site_perl/auto/XML
chmod g+w,o+t /usr/lib/perl5/${perlseries}/site_perl/auto/XML
chgrp install /usr/lib/perl5/${perlseries}/site_perl/auto/XML/SAX
chmod g+w,o+t /usr/lib/perl5/${perlseries}/site_perl/auto/XML/SAX
chgrp install /usr/lib/perl5/${perlseries}/site_perl/auto/XML/SAX/Base
chmod g+w,o+t /usr/lib/perl5/${perlseries}/site_perl/auto/XML/SAX/Base
chgrp install /usr/lib/perl5/${perlseries}/site_perl/XML/SAX
chmod g+w,o+t /usr/lib/perl5/${perlseries}/site_perl/XML/SAX" >> $Output
      else
	 echo "chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/auto/XML
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/auto/XML
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/auto/XML/SAX
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/auto/XML/SAX
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/auto/XML/SAX/Base
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/auto/XML/SAX/Base
chgrp install \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/XML/SAX
chmod g+w,o+t \${PkgUserDir}/\${PkgName}/usr/lib/perl5/${perlseries}/site_perl/XML/SAX" >> $Output
      fi
    ;;
    xorg-evdev)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/xorg/modules/input
chmod g+w,o+t /usr/lib/xorg/modules/input
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/xorg/modules/input
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/xorg/modules/input
EOF
      fi
    ;;
    xorg-intel)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/xorg/modules/drivers
chmod g+w,o+t /usr/lib/xorg/modules/drivers
chgrp install /usr/share/polkit-1
chmod g+w,o+t /usr/share/polkit-1
chgrp install /usr/share/polkit-1/actions
chmod g+w,o+t /usr/share/polkit-1/actions
chown root /usr/lib/xf86-video-intel-backlight-helper
chmod u+s /usr/lib/xf86-video-intel-backlight-helper
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/xorg/modules/drivers
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/xorg/modules/drivers
chgrp install ${PkgUserDir}/${PkgName}/usr/share/polkit-1
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/polkit-1
chgrp install ${PkgUserDir}/${PkgName}/usr/share/polkit-1/actions
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/polkit-1/actions
chown root ${PkgUserDir}/${PkgName}/usr/lib/xf86-video-intel-backlight-helper
chmod u+s ${PkgUserDir}/${PkgName}/usr/lib/xf86-video-intel-backlight-helper
EOF
      fi
    ;;
    xorg-libinput)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/xorg/modules/input
chmod g+w,o+t /usr/lib/xorg/modules/input
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/xorg/modules/input
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/xorg/modules/input
EOF
      fi
    ;;
    xorg-vmmouse)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
rm -rfv /usr/{lib,share}/hal
EOF
      else
	 cat >> $Output << "EOF"
rm -rfv ${PkgUserDir}/${PkgName}/usr/{lib,share}/hal
EOF
      fi
    ;;
    xorg-nouveau)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/lib/xorg/modules/drivers
chmod g+w,o+t /usr/lib/xorg/modules/drivers
EOF
      fi
    ;;
    xorg-server)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/include/xorg
chmod g+w,o+t /usr/include/xorg
chgrp install /usr/share/X11/xorg.conf.d
chmod g+w,o+t /usr/share/X11/xorg.conf.d
chgrp install /usr/lib/xorg
chmod g+w,o+t /usr/lib/xorg
chgrp install /usr/lib/xorg/modules
chmod g+w,o+t /usr/lib/xorg/modules
chgrp install /usr/lib/xorg/modules/drivers
chmod g+w,o+t /usr/lib/xorg/modules/drivers
chgrp install /usr/lib/xorg/modules/extensions
chmod g+w,o+t /usr/lib/xorg/modules/extensions
chgrp install /etc/X11/xorg.conf.d
chmod g+w,o+t /etc/X11/xorg.conf.d
if [ -e /usr/lib/xorg-server/Xorg.wrap ]; then
  chown root /usr/lib/xorg-server/Xorg.wrap # setuid root binary
  chmod u+s /usr/lib/xorg-server/Xorg.wrap
fi
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/xorg
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/xorg
chgrp install ${PkgUserDir}/${PkgName}/usr/share/X11/xorg.conf.d
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/X11/xorg.conf.d
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/xorg
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/xorg
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/xorg/modules
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/xorg/modules
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/xorg/modules/drivers
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/xorg/modules/drivers
chgrp install ${PkgUserDir}/${PkgName}/usr/lib/xorg/modules/extensions
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/lib/xorg/modules/extensions
chgrp install ${PkgUserDir}/${PkgName}/etc/X11/xorg.conf.d
chmod g+w,o+t ${PkgUserDir}/${PkgName}/etc/X11/xorg.conf.d
if [ -e ${PkgUserDir}/${PkgName}/usr/lib/xorg-server/Xorg.wrap ]; then
  chown root ${PkgUserDir}/${PkgName}/usr/lib/xorg-server/Xorg.wrap
  chmod u+s ${PkgUserDir}/${PkgName}/usr/lib/xorg-server/Xorg.wrap
fi
EOF
      fi
    ;;
    xorg-proto) # /usr/include/X11
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/include/X11
chmod g+w,o+t /usr/include/X11
chgrp install /usr/include/X11/extensions
chmod g+w,o+t /usr/include/X11/extensions
chgrp install /usr/include/X11/fonts
chmod g+w,o+t /usr/include/X11/fonts
chgrp install /usr/include/GL # for MesaLib
chmod g+w,o+t /usr/include/GL
chgrp install /usr/include/GL/internal
chmod g+w,o+t /usr/include/GL/internal
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/include/X11
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/X11
chgrp install ${PkgUserDir}/${PkgName}/usr/include/X11/extensions
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/X11/extensions
chgrp install ${PkgUserDir}/${PkgName}/usr/include/X11/fonts
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/X11/fonts
chgrp install ${PkgUserDir}/${PkgName}/usr/include/GL
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/GL
chgrp install ${PkgUserDir}/${PkgName}/usr/include/GL/internal
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/include/GL/internal
EOF
      fi
    ;;
    xterm)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         echo "cd \${PkgUserDir}/\${PkgName}/\${PkgName}-$xtermvers" >> $Output
         cat >> $Output << "EOF"
make install-ti # have to do this as root
cd ..
EOF
         echo "rm -rf \${PkgName}-$xtermvers" >> $Output
         cat >> $Output << "EOF"
chown xterm:xterm /usr/share/terminfo/x/xterm-65
chown xterm:xterm /usr/share/terminfo/x/xterm+app+pc
chown xterm:xterm /usr/share/terminfo/x/xterm-boldso
chown xterm:xterm /usr/share/terminfo/x/xterm+decedit
chown xterm:xterm /usr/share/terminfo/x/xterm-ic
chown xterm:xterm /usr/share/terminfo/x/xterm+kbs
chown xterm:xterm /usr/share/terminfo/x/xterm-mono
chown xterm:xterm /usr/share/terminfo/x/xterm+noapp+pc
chown xterm:xterm /usr/share/terminfo/x/xterm-nrc
chown xterm:xterm /usr/share/terminfo/x/xterm+pce0
chown xterm:xterm /usr/share/terminfo/x/xterm+pce1
chown xterm:xterm /usr/share/terminfo/x/xterm+pce3
chown xterm:xterm /usr/share/terminfo/x/xterm+pcf1
chown xterm:xterm /usr/share/terminfo/x/xterm+pcf3
chown xterm:xterm /usr/share/terminfo/x/xterm+pcfn
chown xterm:xterm /usr/share/terminfo/x/xterm+pcfN
chown xterm:xterm /usr/share/terminfo/x/xterm-rep
chown xterm:xterm /usr/share/terminfo/x/xterm+tmux
chown xterm:xterm /usr/share/terminfo/x/xterm-vi
chown xterm:xterm /usr/share/terminfo/x/xterm-xmc
chgrp install /usr/share/pixmaps
chmod g+w,o+t /usr/share/pixmaps
cat >> /etc/X11/app-defaults/XTerm << "XTERMEOF"
*VT100*locale: true
*VT100*faceName: Monospace
*VT100*faceSize: 10
*backarrowKeyIsErase: true
*ptyInitialErase: true
XTERMEOF
chgrp install /etc/X11/app-defaults
chmod g+w,o+t /etc/X11/app-defaults
cp $blfsfiles/xterm/xterm-color_48x48.xpm /usr/share/pixmaps/xterm-color_48x48.xpm
EOF
      else
         echo "cd \${PkgUserDir}/\${PkgName}/\${PkgName}-$xtermvers" >> $Output
         cat >> $Output << "EOF"
make DESTDIR="$CUR_DIR" install-ti # have to do this as root
cd ..
EOF
         echo "rm -rf \${PkgName}-$xtermvers" >> $Output
         cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/{terminfo,pixmaps}
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/{terminfo,pixmaps}
if ! $AS_ROOT; then chown -R xterm:xterm ${PkgUserDir}/${PkgName}/usr/share/terminfo/{v,x}; fi
cat >> ${PkgUserDir}/${PkgName}/etc/X11/app-defaults/XTerm << "XTERMEOF"
*VT100*locale: true
*VT100*faceName: Monospace
*VT100*faceSize: 10
*backarrowKeyIsErase: true
*ptyInitialErase: true
XTERMEOF
cp $blfsfiles/xterm/xterm-color_48x48.xpm ${PkgUserDir}/${PkgName}/usr/share/pixmaps/xterm-color_48x48.xpm
EOF
      fi
    ;;
    yelp)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
update-desktop-database
EOF
      fi
    ;;
    yelp-xsl)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/yelp-xsl/xslt/common/domains
chmod g+w,o+t /usr/share/yelp-xsl/xslt/common/domains
EOF
      else
	 cat >> $Output << "EOF"
chgrp install ${PkgUserDir}/${PkgName}/usr/share/yelp-xsl/xslt/common/domains
chmod g+w,o+t ${PkgUserDir}/${PkgName}/usr/share/yelp-xsl/xslt/common/domains
EOF
      fi
    ;;
    zenity)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chgrp install /usr/share/help/{bg,da,en_GB,ja,pl,ru} # for gnome-terminal
chmod g+w,o+t /usr/share/help/{bg,da,en_GB,ja,pl,ru}
EOF
      fi
    ;;
esac # case $pkgname
# fi # end BOOK_VERSION != arch
fi # end ! as_root
#
# the following are needed whether root or package user
case $pkgname in
    accountsservice)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
cat > /etc/polkit-1/rules.d/40-adm.rules << "ACCEOF"
polkit.addAdminRule(function(action, subject) {
   return ["unix-group:adm"];
   });
ACCEOF
if ! $AS_ROOT; then
  chown accountsservice:accountsservice /etc/polkit-1/rules.d/40-adm.rules
fi
EOF
      else
         cat >> $Output << "EOF"
cat > ${PkgUserDir}/${PkgName}/etc/polkit-1/rules.d/40-adm.rules << "ACCEOF"
polkit.addAdminRule(function(action, subject) {
   return ["unix-group:adm"];
   });
ACCEOF
if ! $AS_ROOT; then
  chown accountsservice:accountsservice ${PkgUserDir}/${PkgName}/etc/polkit-1/rules.d/40-adm.rules
fi
EOF
      fi
    ;;
    acpid)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         if [ "$SYSTEMD" = yes ]; then
            cat >> $Output << "EOF"
install -Dm644 ${blfsfiles}/conf-files/anything /etc/acpi/events/anything
install -Dm755 ${blfsfiles}/conf-files/handler.sh /etc/acpi/handler.sh
install -Dm644 ${blfsfiles}/service/acpid.socket /usr/lib/systemd/system/acpid.socket
install -Dm644 ${blfsfiles}/service/acpid.service /usr/lib/systemd/system/acpid.service
if ! $AS_ROOT; then
  chown acpid:acpid /etc/acpi/{handler.sh,events/anything}
  chown acpid:acpid /usr/lib/systemd/system/{acpid.socket,acpid.service}
fi
EOF
         fi
      else
         if [ "$SYSTEMD" = yes ]; then
            cat >> $Output << "EOF"
install -Dm644 ${blfsfiles}/conf-files/anything ${PkgUserDir}/${PkgName}/etc/acpi/events/anything
install -Dm755 ${blfsfiles}/conf-files/handler.sh ${PkgUserDir}/${PkgName}/etc/acpi/handler.sh
install -Dm644 ${blfsfiles}/service/acpid.socket ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/acpid.socket
install -Dm644 ${blfsfiles}/service/acpid.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/acpid.service
if ! $AS_ROOT; then
  chown acpid:acpid ${PkgUserDir}/${PkgName}/etc/acpi/{handler.sh,events/anything}
  chown acpid:acpid ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/{acpid.socket,acpid.service}
fi
EOF
         fi
      fi
    ;;
    alsa-utils)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
if [ ! -e /var/lib/alsa/asound.state ]; then touch /var/lib/alsa/asound.state; fi
usermod -a -G audio john # replace john with your username
/usr/sbin/alsactl -L store
EOF
      fi
    ;;
    avr-libc)
      cat >> $Output << "EOF"
chgrp root /usr
chmod 755 /usr
EOF
    ;;
    apache)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
	 if [ "$SYSTEMD" = yes ]; then
            cat >> $Output << "EOF"
install -m644 ${blfsfiles}/service/httpd.service /usr/lib/systemd/system/httpd.service
install -Dm644 ${blfsfiles}/conf-files/apache.tmpfiles.conf /usr/lib/tmpfiles.d/apache.conf
chown apache:apache /usr/lib/systemd/system/httpd.service
chown apache:apache /usr/lib/tmpfiles.d/apache.conf
EOF
         fi
      else
         if [ "$SYSTEMD" = yes ]; then
            cat >> $Output << "EOF"
install -m755 -d ${PkgUserDir}/${PkgName}/usr/lib/systemd/system
install -m644 ${blfsfiles}/service/httpd.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/httpd.service
install -Dm644 ${blfsfiles}/conf-files/apache.tmpfiles.conf ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/apache.conf
chown apache:apache ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/httpd.service
chown apache:apache ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/apache.conf
EOF
         fi
      fi
    ;;
    bbswitch)
      cat >> $Output << "EOF"
depmod $(cat /usr/lib/modules/$EXTRAMODULES/version)
EOF
    ;;
    bind)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
chown -R named:named /srv/named
echo "*********************************************"
echo "Edit /etc/resolv.conf to add your domain name"
echo "*********************************************"
EOF
         if [ "$SYSTEMD" = yes ]; then
            cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/conf-files/tmpfiles.d /usr/lib/tmpfiles.d/named.conf
install -D -m644 ${blfsfiles}/service/named.service /usr/lib/systemd/system
if ! $AS_ROOT; then
  chown named:named /usr/lib/tmpfiles.d/named.conf
  chown named:named /usr/lib/systemd/system/named.service
fi
EOF
         fi
      else
	 cat >> $Output << "EOF"
chown -R named:named ${PkgUserDir}/${PkgName}/srv/named
chmod 770 ${PkgUserDir}/${PkgName}/srv/named
EOF
         if [ "$SYSTEMD" = yes ]; then
            cat >> $Output << "EOF"
install -m755 -d ${PkgUserDir}/${PkgName}/usr/lib/systemd/system
install -D -m644 ${blfsfiles}/conf-files/tmpfiles.d ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/named.conf
install -D -m644 ${blfsfiles}/service/named.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/named.service
if ! $AS_ROOT; then
  chown named:named ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/named.conf
  chown named:named ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/named.service
fi
curl -o root.hint http://www.internic.net/zones/named.root
mv root.hint ${PkgUserDir}/${PkgName}/srv/named/etc/namedb/
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/srv/named/etc/namedb/root.hint; fi
EOF
         fi
      fi
    ;;
    bluez)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
install -Dm644 ${blfsfiles}/bluetooth.modprobe /usr/lib/modprobe.d/bluetooth-usb.conf
if ! $AS_ROOT; then chown $PkgName:$PkgName /usr/lib/modprobe.d/bluetooth-usb.conf; fi
EOF
      else
	 cat >> $Output << "EOF"
install -dm755 ${PkgUserDir}/${PkgName}/usr/lib/modprobe.d
install -Dm644 ${blfsfiles}/bluetooth.modprobe ${PkgUserDir}/${PkgName}/usr/lib/modprobe.d/bluetooth-usb.conf
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/usr/lib/modprobe.d/bluetooth-usb.conf; fi
EOF
      fi
    ;;
    brasero)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
update-mime-database /usr/share/mime &> /dev/null
if ! $AS_ROOT; then # chown to shrd-mime-info
  setMime shrd-mime-info
fi
EOF
      fi
    ;;
    bumblebee)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
getent group "bumblebee" &>/dev/null || groupadd -g 56 bumblebee
usermod -a -G bumblebee john
EOF
      fi
    ;;
    chromium)
      cat >> $Output << "EOF"
chown root /usr/lib/chromium/chrome-sandbox
chmod 4755 /usr/lib/chromium/chrome-sandbox
EOF
    ;;
    colord)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
mkdir -pv /var/lib/colord/icc
chown -R colord:colord /var/lib/colord
EOF
      else
	 cat >> $Output << "EOF"
mkdir -pv ${PkgUserDir}/${PkgName}/var/lib/colord/icc
chown -R colord:colord ${PkgUserDir}/${PkgName}/var/lib/colord
install -D -m644 ${blfsfiles}/install-files/sysutils/colord.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
      fi
    ;;
    cracklib)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
if [ -e "${blfsfiles}/allwords" ]; then
  install -m644 ${blfsfiles}/allwords /usr/share/dict
  /usr/bin/create-cracklib-dict /usr/share/dict/allwords
  if ! $AS_ROOT; then 
    chown cracklib:cracklib /usr/share/dict/allwords
    chown -R cracklib:cracklib /usr/lib/cracklib
  fi
else
  echo "** NOTE ** file allwords not in $blfsfiles"
fi
EOF
      else
	 cat >> $Output << "EOF"
if [ -e "${blfsfiles}/allwords" ]; then
  install -m644 ${blfsfiles}/allwords ${PkgUserDir}/${PkgName}/usr/share/dict
  create-cracklib-dict ${PkgUserDir}/${PkgName}/usr/share/dict/allwords
  if ! $AS_ROOT; then chown cracklib:cracklib ${PkgUserDir}/${PkgName}/usr/share/dict/allwords; fi
else
  echo "** NOTE ** file allwords not in $blfsfiles"
fi
EOF
      fi
    ;;
    crda)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
rm -v /usr/lib/crda/regulatory.bin # installed by wireless-regdb
EOF
      else
	 cat >> $Output << "EOF"
rm -v ${PkgUserDir}/${PkgName}/usr/lib/crda/regulatory.bin # installed by wireless-regdb
EOF
      fi
    ;;
    cups)
      if $as_root; then # already done this if a package-user
         cat >> $Output << "EOF"
cat > /etc/cups/printers.conf << "EOFCUPS"
# Printer configuration file for CUPS v1.6.1
# Written by cupsd
# DO NOT EDIT THIS FILE WHEN CUPSD IS RUNNING
<Printer Dell_3130cn_Color_Laser>
UUID urn:uuid:051a0c0e-3e62-3936-7af9-0e901f7d8cfd
Info Dell 3130cn Color Laser
Location main
MakeModel Dell 3130cn Color Laser v3017.104 PS
DeviceURI usb://Dell/3130cn%20Color%20Laser?serial=0932091440
State Idle
StateTime 1355080729
Type 8388612
Accepting Yes
Shared Yes
JobSheets none none
QuotaPeriod 0
PageLimit 0
KLimit 0
OpPolicy default
ErrorPolicy retry-job
</Printer>
EOFCUPS
chown root:lp /etc/cups/printers.conf
chmod 600 /etc/cups/printers.conf
gtk-update-icon-cache
EOF
      fi
# add the ppd file for the current printer
      cat >> $Output << "EOF"
cp -v ${blfsfiles}/ppd/Samsung_C1810_Series.ppd /etc/cups/ppd/
chown root:lp /etc/cups/ppd/Samsung_C1810_Series.ppd
chmod 644 /etc/cups/ppd/Samsung_C1810_Series.ppd
EOF
    ;;
    dhcpcd)
      if [ "$SYSTEMD" = yes ]; then
         cat >> $Output << "EOF"
install -Dm644 ${blfsfiles}/service/dhcpcd.service /usr/lib/systemd/system/dhcpcd.service
install -Dm644 ${blfsfiles}/service/dhcpcd_.service /usr/lib/systemd/system/dhcpcd@.service
if ! $AS_ROOT; then chown dhcpcd:dhcpcd /usr/lib/systemd/system/dhcpcd*.service; fi
EOF
      fi
    ;;	  
    firewall) # add more rules for the squid proxy server
      cat >> $Output << "EOF"
sed -i '/^# End/d' /etc/rc.d/rc.iptables
cat >> /etc/rc.d/rc.iptables << "ADDRULES"
# permit Squid box out to the Internet
iptables -t mangle -A PREROUTING -p tcp --dport 80 -s  192.168.1.120 -j ACCEPT
# mark everything else on port 80 to be routed to the Squid box
iptables -t mangle -A PREROUTING -i wlp4s0 -p tcp --dport 80 -j MARK --set-mark 2
iptables -t mangle -A PREROUTING -m mark --mark 2 -j ACCEPT
# Ensure that traffic from inside the network is allowed to loop back inside
iptables -t filter -A FORWARD -i wlp4s0 -o wlp4s0 -p tcp --dport 80 -j ACCEPT

# End /etc/rc.d/rc.iptables
ADDRULES
EOF
    ;;
    firefox)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
gtk-update-icon-cache -q -t -f /usr/share/icons/hicolor
EOF
      else
	 cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/install-files/browser/firefox.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
      fi
    ;;
    flashplugin)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
if hash gtk-update-icon-cache &> /dev/null; then
  gtk-update-icon-cache -q -t -f /usr/share/icons/hicolor
fi
EOF
      fi
    ;;
    fluxbox)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
mkdir -pv /usr/share/xsessions
cat > /usr/share/xsessions/fluxbox.desktop << "FLUXEOF"
[Desktop Entry]
Encoding=UTF-8
Name=Fluxbox
Comment=This session logs you into Fluxbox
Exec=startfluxbox
Type=Application
FLUXEOF
mkdir -pv /home/john/.fluxbox/styles
mkdir -pv /home/john/.fluxbox/theme
mkdir -pv /home/john/.fluxbox/backgrounds
mkdir -pv /home/john/.fehbg
chmod 770 /home/john/.fehbg
cp -v /usr/share/fluxbox/init /home/john/.fluxbox/
cp -v /usr/share/fluxbox/keys /home/john/.fluxbox/
cp -v /usr/share/fluxbox/menu /home/john/.fluxbox/
# install the fluxbox-light-themes
if [ -e ${PkgUserDir}/${PkgName}/fluxbox-light-themes_14.04.orig.tar.gz ]; then
  cd $(tar vxf ${PkgUserDir}/${PkgName}/fluxbox-light-themes_14.04.orig.tar.gz | awk -F\/ 'END{print $1}')
  cp -r Ambiance  /home/john/.fluxbox/styles/
  cp -r Radiance /home/john/.fluxbox/styles
else
  echo "No theme tarfile ${PkgUserDir}/${PkgName}/fluxbox-light-themes_14.04.orig.tar.gz found"
  echo "Get it from here: https://launchpad.net/~l3on/+archive/ubuntu/themes/+sourcefiles/fluxbox-light-themes/14.04-0ubuntu1/fluxbox-light-themes_14.04.orig.tar.gz"
fi
chown -R john:john /home/john/{.fluxbox,.fehbg}
echo "First do: mmaker -f FluxBox"
echo "to create a better menu in /home/john/.fluxbox/"
echo "Add this:"
echo "[submenu] (Backgrounds)"
echo "        [wallpapers] (~/.fluxbox/backgrounds) {feh --bg-scale}"
echo "        [wallpapers] (/usr/share/fluxbox/backgrounds) {feh --bg-scale}"
echo "[end]"
echo "to /home/john/.fluxbox/menu in the [submenu] (FluxBox) section"
echo "Add this:"
echo "session.*.titlebar.left:    Close Minimize Maximize"
echo "session.*.titlebar.right:"
echo "to /home/john/.fluxbox/init"
#echo "Finally, put this:"
#echo "fbsetbg /home/john/.fluxbox/styles/ubuntu/ubuntu.jpg"
#echo "before exec startfluxbox in the .xinitrc file"
EOF
      fi
    ;;
    gcr)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
update-mime-database /usr/share/mime &> /dev/null
if ! $AS_ROOT; then # chown to shrd-mime-info
  setMime shrd-mime-info
fi
EOF
      fi
    ;;
    glib) # delete installed-tests and revert owner of /usr/libexec to root
      cat >> $Output << "EOF"
rm -rf /usr/libexec/installed-tests
chown 0:0 /usr/libexec
EOF
    ;;
    gnome-colr-mngr)
      cat >> $Output << "EOF"
gtk-update-icon-cache -qtf /usr/share/icons/hicolor
update-desktop-database -q /usr/share/applications
EOF
    ;;
    gnome-dictionary)
      cat >> $Output << "EOF"
glib-compile-schemas /usr/share/glib-2.0/schemas
update-desktop-database -q /usr/share/applications
EOF
    ;;
    gnome-pwr-mngr)
      cat >> $Output << "EOF"
glib-compile-schemas /usr/share/glib-2.0/schemas
gtk-update-icon-cache /usr/share/icons/hicolor
update-desktop-database -q /usr/share/applications
EOF
    ;;
    gnome-session)
      cat >> $Output << "EOF"
cat > ~/.xinitrc << "EOL"
#!/bin/sh
#
# ~/.xinitrc
#
# Executed by startx (run your window manager from here)

#xrandr --setprovideroutputsource modesetting NVIDIA-0
#xrandr --auto

if [ -d /etc/X11/xinit/xinitrc.d ]; then
  for f in /etc/X11/xinit/xinitrc.d/*; do
    [ -x "$f" ] && . "$f"
  done
  unset f
fi

# Here gnome is the default
session=${1:-gnome}

dbus="dbus-launch --exit-with-session"
ck="ck-launch-session dbus-launch --exit-with-session"

case $session in
    fluxbox           ) exec startfluxbox;;
    gnome             ) $dbus gnome-session;;
    i3|i3wm           ) exec i3;;
    icewm             ) exec icewm-session;;
    jwm               ) exec jwm;;
    sawfish           ) exec sawfish;;
    kde5|plasma       ) exec $ck /opt/kf5/bin/startkde;;
    monster|monsterwm ) exec monsterwm;;
    openbox           ) exec openbox-session;;
    unity             ) exec unity;;
    xfce|xfce4        ) exec startxfce4 --with-ck-launch;;
    lxde              ) exec ck-launch-session startlxde;;
    lxqt2             ) exec /opt/lxqt/bin/startlxqt;;
    twm               ) xterm  -g 80x40+0+0   &
                        xclock -g 100x100-0+0 &
                        twm;;

    # No known session
    *) echo "Cannot run $1";;
esac
EOL
cat > /etc/profile.d/gnome.sh << "EOW"
export XDG_DATA_DIRS=/usr/share
export XDG_CONFIG_DIRS=/etc/xdg
export XDG_MENU_PREFIX=""
EOW
cp /root/.xinitrc /home/john/
chown john:john /home/john/.xinitrc
EOF
    ;;
    gnome-shell)
      cat >> $Output << "EOF"
mkdir -pv /usr/share/gnome-shell/modes
update-desktop-database -q /usr/share/applications
EOF
if ! $as_root; then
      cat >> $Output << "EOF"
chown gnome-shell:gnome-shell /usr/share/gnome-shell/modes
EOF
fi
    ;;
    gnutls) # need to reinstall wget to use gnutls
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
if [[ -e ${PKGUSERDIR}/networks/wget/.wget || -e ${PKGUSERDIR}/networks/wget/.wget-destdir ]]; then
  rm -rf ${PKGUSERDIR}/networks/wget/{.wget,.wget-destdir,build}
  echo 'Will reinstall wget when next executing networks.sh'
fi
EOF
      else
         cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/install-files/security/gnutls.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
      fi
    ;;
    gpm)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         if [ "$SYSTEMD" = yes ]; then
            cat >> $Output << "EOF"
install -m644 ${blfsfiles}/service/gpm.service /usr/lib/systemd/system/gpm.service
if ! $AS_ROOT; then chown gpm:gpm /usr/lib/systemd/system/gpm.service; fi
EOF
         fi
         cat >> $Output << "EOF"
cat > /etc/profile.d/gpm.sh << "GPMEOF"
case $( /usr/bin/tty ) in
    /dev/tty[0-9]*) [ -n "$(pgrep gpm)" ] && /usr/bin/disable-paste ;;
esac
GPMEOF
EOF
      else
         if [ "$SYSTEMD" = yes ]; then
   	    cat >> $Output << "EOF"
install -m 755 -d ${PkgUserDir}/${PkgName}/usr/lib/systemd/system
install -m644 ${blfsfiles}/service/gpm.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/gpm.service
if ! $AS_ROOT; then chown gpm:gpm ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/gpm.service; fi
EOF
         fi
         cat >> $Output << "EOF"
install -m 755 -d ${PkgUserDir}/${PkgName}/etc/profile.d
cat > ${PkgUserDir}/${PkgName}/etc/profile.d/gpm.sh << "GPMEOF"
case $( /usr/bin/tty ) in
    /dev/tty[0-9]*) [ -n "$(pgrep gpm)" ] && /usr/bin/disable-paste ;;
esac
GPMEOF
EOF
      fi
    ;;
    harfbuzz) # for the BLFS book need to reinstall freetype after harfbuzz
      if [ "$BOOK_VERSION" != arch ]; then
         if [[ $useDESTDIR = false || $installDEST = true ]]; then
            cat >> $Output << "EOF"
if [ -e ${PkgUserDir}/freetype/.freetype ]; then
  rm -rf ${PkgUserDir}/freetype/{.freetype,build}
fi
echo 'Will reinstall freetype when next executing libraries.sh'
EOF
         fi
      fi
    ;;
    hplip)
      cat >> $Output << "EOF"
rm -vrf /usr/share/hal
rm -vrf /etc/init.d
EOF
    ;;
    i3status)
      cat >> $Output << "EOF"
setcap 'CAP_NET_ADMIN=ep' /usr/bin/i3status
EOF
    ;;
    icedtea-web)
      cat >> $Output << "EOF"
# create the man pages as root
mandb -c /opt/jdk/man
EOF
    ;;
    imagemagick)
      cat >> $Output << "EOF"
rm -rf /usr/lib/ImageMagick-7.0.10/modules-*/coders/*.la
EOF
    ;;
    iptables)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         if [ "$BOOK_VERSION" != arch ]; then
            if [ "$SYSTEMD" = yes ]; then
               cat >> $Output << "EOF"
install -v -d /etc/iptables
install -v -d /etc/conf.d
install -D -m644 ${blfsfiles}/conf-files/iptables.conf.d /etc/conf.d/iptables
install -D -m644 ${blfsfiles}/iptables.rules /etc/iptables/iptables.rules
install -Dm644 ${blfsfiles}/service/{iptables.service,ip6tables.service} /usr/lib/systemd/system
if ! $AS_ROOT; then
  chown iptables:iptables /etc/{conf.d/iptables,iptables/iptables.rules}
  chown iptables:iptables /usr/lib/systemd/system/{iptables.service,ip6tables.service}
fi
EOF
           fi
         else # Arch binary
            cat >> $Output << "EOF"
install -v -d /etc/iptables
install -v -d /etc/conf.d
install -D -m644 ${blfsfiles}/conf-files/iptables.conf.d /etc/conf.d/iptables
install -D -m644 ${blfsfiles}/iptables.rules /etc/iptables/iptables.rules
if ! $AS_ROOT; then
  chown iptables:iptables /etc/{conf.d/iptables,iptables/iptables.rules}
fi
EOF
         fi
      else # useDESTDIR
         if [ "$SYSTEMD" = yes ]; then
            cat >> $Output << "EOF"
mkdir -pv ${PkgUserDir}/${PkgName}/etc/iptables
mkdir -pv ${PkgUserDir}/${PkgName}/etc/conf.d
mkdir -pv ${PkgUserDir}/${PkgName}/usr/lib/systemd/system
install -D -m644 ${blfsfiles}/conf-files/iptables.conf.d ${PkgUserDir}/${PkgName}/etc/conf.d/iptables
install -D -m644 ${blfsfiles}/iptables.rules ${PkgUserDir}/${PkgName}/etc/iptables/iptables.rules
install -Dm644 ${blfsfiles}/service/{iptables.service,ip6tables.service} ${PkgUserDir}/${PkgName}/usr/lib/systemd/system
if ! $AS_ROOT; then
  chown iptables:iptables ${PkgUserDir}/${PkgName}/etc/{,conf.d/{,iptables},iptables/{,iptables.rules}}
  chown iptables:iptables ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/{iptables.service,ip6tables.service}
fi
EOF
         fi
      fi
    ;;
    jdkbin)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
cat > /etc/profile.d/openjdk.sh << "JDKEOF"
EOF
      else
	 cat >> $Output << "EOF"
install -m755 -d ${PkgUserDir}/${PkgName}/etc/profile.d
cat > ${PkgUserDir}/${PkgName}/etc/profile.d/openjdk.sh << "JDKEOF"
EOF
      fi
      cat >> $Output << "EOF"
# Begin /etc/profile.d/openjdk.sh

# Set JAVA_HOME directory
JAVA_HOME=/opt/jdk

# Adjust PATH
pathappend $JAVA_HOME/bin

# Add to MANPATH
pathappend $JAVA_HOME/man MANPATH

# Auto Java CLASSPATH: Copy jar files to, or create symlinks in, the
# /usr/share/java directory. Note that having gcj jars with OpenJDK 8
# may lead to errors.

AUTO_CLASSPATH_DIR=/usr/share/java

pathprepend . CLASSPATH

for dir in `find ${AUTO_CLASSPATH_DIR} -type d 2>/dev/null`; do
    pathappend $dir CLASSPATH
done

for jar in `find ${AUTO_CLASSPATH_DIR} -name "*.jar" 2>/dev/null`; do
    pathappend $jar CLASSPATH
done

export JAVA_HOME
unset AUTO_CLASSPATH_DIR dir jar

# End /etc/profile.d/openjdk.sh
JDKEOF
EOF
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
cat >> /etc/sudoers.d/java << "EXTRAEOF"
EOF
      else
	 cat >> $Output << "EOF"
cat >> ${PkgUserDir}/${PkgName}/etc/sudoers.d/java << "EXTRAEOF"
EOF
      fi
      cat >> $Output << "EOF"
Defaults env_keep += JAVA_HOME
Defaults env_keep += CLASSPATH
EXTRAEOF
EOF
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
cat >> /etc/man_db.conf << "MANDBEOF"
EOF
      else
	 cat >> $Output << "EOF"
cat >> ${PkgUserDir}/${PkgName}/etc/man_db.conf << "MANDBEOF"
EOF
      fi
      cat >> $Output << "EOF"
MANDATORY_MANPATH     /opt/jdk/man
MANPATH_MAP           /opt/jdk/bin     /opt/jdk/man
MANDB_MAP             /opt/jdk/man     /var/cache/man/jdk
MANDBEOF
EOF
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
mkdir -pv /var/cache/man
mandb -c /opt/jdk/man
if [ $AS_ROOT = false -a -d /opt/jdk/man/man1 ]; then
  chgrp install /opt/jdk/man/man1
  chmod 1775 /opt/jdk/man/man1
fi
EOF
      else
	 cat >> $Output << "EOF"
mkdir -p ${PkgUserDir}/${PkgName}/var/cache/man
mandb -c ${PkgUserDir}/${PkgName}/opt/jdk/man
if ! $AS_ROOT; then
  chgrp install ${PkgUserDir}/${PkgName}/opt/jdk/man/man1
  chmod 1775 ${PkgUserDir}/${PkgName}/opt/jdk/man/man1
  chown -R jdkbin:jdkbin ${PkgUserDir}/${PkgName}/{etc,var}
fi
EOF
      fi
#      if [[ $useDESTDIR = true && $installDEST = false ]]; then
#         if $as_root; then
#           echo "chown -h -R root:root \${PkgUserDir}/\${PkgName}/opt/\${SrcName}bin" >> $Output
#         else
#           echo "chown -h -R jdkbin:jdkbin \${PkgUserDir}/\${PkgName}/opt/\${SrcName}bin" >> $Output
#         fi
#      else
#         if $as_root; then
#           echo "chown -h -R root:root /opt/\${SrcName}bin" >> $Output
#         else
#           echo "chown -h -R jdkbin:jdkbin /opt/\${SrcName}bin" >> $Output
#         fi
#      fi
    ;;
    js60)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         echo "rm -v /usr/lib/libjs_static.ajs" >> $Output
      else
         echo "rm -v \${PkgUserDir}/\${PkgName}/usr/lib/libjs_static.ajs" >> $Output
      fi
    ;;
    krb5)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         if [ "$SYSTEMD" = yes ]; then
            cat >> $Output << "EOF"
install -m 644 ${blfsfiles}/service/krb5-{kadmind.service,kdc.service,kpropd.service,kpropd@.service,kpropd.socket} /usr/lib/systemd/system
if ! $AS_ROOT; then chown krb5:krb5 /usr/lib/systemd/system/krb5-*; fi
EOF
         fi
      else
        if [ "$SYSTEMD" = yes ]; then
            cat >> $Output << "EOF"
mkdir -pv ${PkgUserDir}/${PkgName}/usr/lib/systemd/system
install -m 644 ${blfsfiles}/service/krb5-{kadmind.service,kdc.service,kpropd.service,kpropd@.service,kpropd.socket} ${PkgUserDir}/${PkgName}/usr/lib/systemd/system
if ! $AS_ROOT; then chown krb5:krb5 ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/krb5-*; fi
if [ -d ${PkgUserDir}/${PkgName}/var/lib/run ]; then rm -rf ${PkgUserDir}/${PkgName}/var/lib/run; fi
EOF
         fi
      fi
    ;;
    libedit)
      cat >> $Output << "EOF"
if [ -e /usr/share/man/man3/history.3-old ]; then
  mv /usr/share/man/man3/history.3-old /usr/share/man/man3/history.3 # restore readline version
fi
EOF
    ;;
    libgphoto2)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
if [ -d /opt/qt5 ]; then # check the owner
  fileOwner=$(GetFileOwner /opt/qt5)
  echo "owner of dir /opt/qt5 is $fileOwner"
  if [ "$fileOwner" = libgphoto2 ]; then
    echo "Will delete /opt/qt5 so qt5 can create it as a symlink"
    rm -rf /opt/qt5
  fi
else
  echo "In libgphoto2 - dir /opt/qt5 doesn't exist"
fi
EOF
      else
	 cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/install-files/multimedia/libgphoto2.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
rm -rf ${PkgUserDir}/${PkgName}/opt/cuda
EOF
      fi
    ;;
    librsvg)
      cat >> $Output << "EOF"
gdk-pixbuf-query-loaders --update-cache
EOF
    ;;
    libvirt)
      cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/conf-files/libvirtd.conf.d /etc/conf.d/libvirtd
install -D -m644 ${blfsfiles}/conf-files/libvirtd-guests.conf.d /etc/conf.d/libvirt-guests
if [ "$SYSTEMD" = yes ]; then
  install -D -m644 ${blfsfiles}/conf-files/libvirt.tmpfiles.d /usr/lib/tmpfiles.d/libvirt.conf
fi
EOF
      if ! $as_root; then
         cat >> $Output << "EOF"
chown libvirt:libvirt /etc/conf.d/{libvirtd,libvirt-guests}
EOF
         if [ "$SYSTEMD" = yes ]; then
            cat >> $Output << "EOF"
chown libvirt:libvirt /usr/lib/tmpfiles.d/libvirt.conf
EOF
         fi
      fi
    ;;
    linux-pam)
      if [ "$BOOK_VERSION" != arch ]; then
         if [[ $useDESTDIR = false || $installDEST = true ]]; then
            cat >> $Output << "EOF"
chown root /sbin/unix_chkpwd
chmod -v 4755 /sbin/unix_chkpwd
cat >> /etc/security/limits.conf << "_EOT"
# append to /etc/security/limits.conf

*               -       rtprio          0
*               -       nice            0
@audio          -       rtprio          65
@audio          -       nice           -10
@audio          -       memlock         40000

# End /etc/security/limits.conf
_EOT
if ! $AS_ROOT; then chown linux-pam:linux-pam /etc/security/limits.conf; fi
EOF
         else
	    cat >> $Output << "EOF"
chown root ${PkgUserDir}/${PkgName}/usr/bin/unix_chkpwd
chmod -v 4755 ${PkgUserDir}/${PkgName}/usr/bin/unix_chkpwd
cat >> ${PkgUserDir}/${PkgName}/etc/security/limits.conf << "_EOT"
# append to /etc/security/limits.conf

*               -       rtprio          0
*               -       nice            0
@audio          -       rtprio          65
@audio          -       nice           -10
@audio          -       memlock         40000

# End /etc/security/limits.conf
_EOT
if ! $AS_ROOT; then chown linux-pam:linux-pam ${PkgUserDir}/${PkgName}/etc/security/limits.conf; fi
EOF
         fi
      fi
    ;;
    lockdev)
      cat >> $Output << "EOF"
# Setup lock directory
mkdir -pv /usr/lib/{sysusers,tmpfiles}.d
echo 'g lock - - -' > /usr/lib/sysusers.d/lockdev.conf
echo 'd /run/lock/lockdev 0775 root lockdev -' > /usr/lib/tmpfiles.d/lockdev.conf
if ! $AS_ROOT; then
  chown lockdev:lockdev /usr/lib/sysusers.d/lockdev.conf /usr/lib/tmpfiles.d/lockdev.conf
fi
EOF
    ;;
    mariadb)
      if [ "$BOOK_VERSION" != arch ]; then
         if [[ $useDESTDIR = false || $installDEST = true ]]; then
            if [ "$SYSTEMD" = yes ]; then
               cat >> $Output << "EOF"
install -Dm755 ${blfsfiles}/service/mariadb-post.sh /usr/bin/mysqld-post
install -m644 ${blfsfiles}/service/mariadb.service /usr/lib/systemd/system/mysqld.service
install -m644 ${blfsfiles}/conf-files/mariadb-tmpfile.conf /usr/lib/tmpfiles.d/mysql.conf
chmod 755 /usr/lib/mysql/plugin/auth_pam_tool_dir # change from 700
if ! $AS_ROOT; then
  chown mariadb:mariadb /usr/lib/systemd/system/mysqld.service
  chown mariadb:mariadb /usr/bin/mysqld-post
  chown mariadb:mariadb /usr/lib/tmpfiles.d/mysql.conf
fi
echo "*****************************************************************"
echo "*                                                               *"
echo "* The mysql root password is currently blank.                   *"
echo "* The first time you start the mysql daemon, do                 *"
echo "* /usr/bin/mysql_secure_installation to set up the password     *"
echo "*                                                               *"
echo "*****************************************************************"
EOF
            else
               cat >> $Output << "EOF"
echo "*****************************************************************"
echo "*                                                               *"
echo "* The mysql root password is currently blank.                   *"
echo "* After this do: mysqld_safe --user=mysql 2>&1 >/dev/null &     *"
echo "* to start the mysql server                                     *" 
echo "* and /usr/bin/mysql_secure_installation to set up the password *"
echo "*                                                               *"
echo "*****************************************************************"
EOF
            fi
         else
     	    if [ "$SYSTEMD" = yes ]; then
               cat >> $Output << "EOF"
install -m755 -d ${PkgUserDir}/${PkgName}/usr/lib/systemd/system
install -m755 -d ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d
install -Dm755 ${blfsfiles}/service/mariadb-post.sh ${PkgUserDir}/${PkgName}/usr/bin/mysqld-post
install -m644 ${blfsfiles}/service/mariadb.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/mysqld.service
install -m644 ${blfsfiles}/conf-files/mariadb-tmpfile.conf ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/mysql.conf
install -D -m644 ${blfsfiles}/install-files/server/bind.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then
  chown -R mariadb:mariadb ${PkgUserDir}/${PkgName}/usr/lib/systemd/system
  chown mariadb:mariadb ${PkgUserDir}/${PkgName}/usr/bin/mysqld-post
  chown -R mariadb:mariadb ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d
  chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL
fi
rm -rf ${PkgUserDir}/${PkgName}/usr/share/mysql/test
EOF
            fi
	 fi
         cat >> $Output << "EOF"
groupadd -g 40 mysql
useradd -c "MySQL Server" -d /srv/mysql -g mysql -s /bin/false -u 40 mysql
mysql_install_db --basedir=/usr --datadir=/srv/mysql --user=mysql
chgrp -v mysql /srv/mysql{,/test,/mysql}
install -v -m755 -o mysql -g mysql -d /run/mysqld
rm -rf /usr/share/mysql/test
EOF
      else # Arch binary
         cat >> $Output << "EOF"
groupadd -g 40 mysql
useradd -c "MySQL Server" -d /var/lib/mysql -g mysql -s /bin/false -u 40 mysql
mysql_install_db --basedir=/usr --datadir=/var/lib/mysql --user=mysql
chgrp -v mysql /var/lib/mysql{,/test,/mysql}
install -v -m755 -o mysql -g mysql -d /run/mysqld
rm -rf /usr/share/mysql/test
EOF
      fi
    ;;
    mediaplayrinfo)
      if [[ $useDESTDIR = true && $installDEST = false ]]; then
         cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/install-files/multimedia/media-player-info.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
      fi
    ;;
    menumaker)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
/usr/bin/mmaker -f --no-legacy --no-debian FluxBox # create menu in ~/.fluxbox
cp /root/.fluxbox/menu /home/john/.fluxbox/menu
EOF
      fi
    ;;
    mesa) # need to reinstall libva after mesa
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
if [ -e ${PkgUserDir}/libva/.libva ]; then
  rm -rf ${PkgUserDir}/libva/{.libva,build}
  echo 'Will reinstall libva with mesa support'
fi
EOF
      fi
    ;;
    networkmanager)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
# change the resolv.conf symlink
rm -rf /etc/resolv.conf
mkdir -pv /var/run/NetworkManager
cat > /var/run/NetworkManager/resolv.conf << "RESEOF"
# Generated by NetworkManager
search mynet
nameserver 192.168.1.1
nameserver fe80::1%wlp4s0
RESEOF
ln -sv /var/run/NetworkManager/resolv.conf /etc/resolv.conf
groupadd -fg 86 netdev
/usr/sbin/usermod -a -G netdev john
cat > /usr/share/polkit-1/rules.d/org.freedesktop.NetworkManager.rules << "NETEOF"
polkit.addRule(function(action, subject) {
    if (action.id.indexOf("org.freedesktop.NetworkManager.") == 0 && subject.isInGroup("netdev")) {
        return polkit.Result.YES;
    }
});
NETEOF
if ! $AS_ROOT; then chown $PkgName:$PkgName /usr/share/polkit-1/rules.d/org.freedesktop.NetworkManager.rules; fi
EOF
      fi
    ;;
    nftables)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         if [ "$SYSTEMD" = yes ]; then
            cat >> $Output << "EOF"
install -Dm644 ${blfsfiles}/service/nftables.service /usr/lib/systemd/system/nftables.service
install -Dm644 ${blfsfiles}/conf-files/nftables.conf /etc/nftables.conf
if ! $AS_ROOT; then chown nftables:nftables /usr/lib/systemd/system/nftables.service /etc/nftables.conf; fi
EOF
         fi
      fi
    ;;
    nvidia)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
depmod $(cat /usr/lib/modules/$EXTRAMODULES/version)
EOF
         if ! $as_root; then echo "chown -h nvidia:nvidia /usr/lib/modules/${rtrkernum}/extramodules" >> $Output; fi
      fi
    ;;
    nvidia-utils)
      cat >> $Output << "EOF"
chown root /usr/bin/nvidia-modprobe
chmod 4755 /usr/bin/nvidia-modprobe
getent group nvidia-persistenced &>/dev/null || groupadd -g 143 nvidia-persistenced
getent passwd nvidia-persistenced &>/dev/null || useradd -c 'NVIDIA Persistence Daemon' -u 143 -g nvidia-persistenced -d '/' -s /sbin/nologin nvidia-persistenced
EOF
    ;;
    openbox)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
mkdir -pv /home/john/.config
cp -rf /etc/xdg/openbox /home/john/.config
echo "Available themes are:"
ls -d /usr/share/themes/*/openbox-3 | sed 's#.*es/##;s#/o.*##'
chown -R john:john /home/john/.config
EOF
      fi
    ;;
    openvpn) # create the tun node if it doesn't exist
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
pushd /dev
mkdir -pv net
cd net
if [ ! -e tun ]; then
  mknod tun c 10 200
  chmod 666 tun
fi
popd
EOF
      fi
    ;;
    pciutils) # enable update timer
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
systemctl enable update-pciids.timer
EOF
      fi
    ;;
    pulseaudio)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
groupadd -g 58 pulse
groupadd -g 59 pulse-access
useradd -c "Pulseaudio User" -d /var/run/pulse -g pulse \
        -s /bin/false -u 58 pulse
usermod -a -G audio pulse
sed -e '/exit-idle-time/iexit-idle-time=0' \
    -i  /etc/pulse/daemon.conf
EOF
      else
	 cat >> $Output << "EOF"
sed -e '/exit-idle-time/iexit-idle-time=0' \
    -i  ${PkgUserDir}/${PkgName}/etc/pulse/daemon.conf
EOF
      fi
    ;;
    py2-chardet)
      cat >> $Output << "EOF"
mv /usr/bin/chardetect /usr/bin/chardetect-py2 # avoid conflict with py3 version
if ! $AS_ROOT; then
  chown py2-chardet:py2-chardet /usr/bin/chardetect-py2
fi
EOF
    ;;
    py2-pygments)
      cat >> $Output << "EOF"
rm /usr/bin/pygmentize
EOF
    ;;
    py3-pygments)
      cat >> $Output << "EOF"
sed -i "s/Pygments==2.1.3/Pygments/g" /usr/bin/pygmentize
EOF
    ;;
    python2)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
if [ -e /usr/bin/2to3 ]; then
  mv /usr/bin/2to3{,-2.7}
fi
if [ ! -e /python2.conf ]; then
  cp ${blfsfiles}/conf-files/python2.conf /
fi
EOF
      else
	 cat >> $Output << "EOF"
if [ -e ${PkgUserDir}/${PkgName}/usr/bin/2to3 ]; then
  mv ${PkgUserDir}/${PkgName}/usr/bin/2to3{,-2.7}
fi
EOF
      fi
    ;;
    python3)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
cat > /etc/profile.d/python3.sh << "PYEOF"
EOF
         echo "export PYTHONDOCS=/usr/share/doc/python-${Python3vers}/html" >> $Output
         cat >> $Output << "EOF"
PYEOF
if ! $AS_ROOT; then chown python3:python3 /etc/profile.d/python3.sh; fi
EOF
      else
	 cat >> $Output << "EOF"
install -m755 -d ${PkgUserDir}/${PkgName}/etc/profile.d
cat > ${PkgUserDir}/${PkgName}/etc/profile.d/python3.sh << "PYEOF"
EOF
         echo "export PYTHONDOCS=/usr/share/doc/python-${Python3vers}/html" >> $Output
         cat >> $Output << "EOF"
PYEOF
if ! $AS_ROOT; then chown python3:python3 ${PkgUserDir}/${PkgName}/etc/profile.d/python3.sh; fi
EOF
      fi
    ;;
    qemu)
      cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/conf-files/65-kvm.rules /usr/lib/udev/rules.d/
chmod u+s /usr/lib/qemu/qemu-bridge-helper
echo "allow br0" > /etc/qemu/bridge.conf.sample
EOF
      if ! $as_root; then
         cat >> $Output << "EOF"
chown qemu:qemu /usr/lib/udev/rules.d/65-kvm.rules
chown qemu:qemu /etc/qemu/bridge.conf.sample
EOF
      fi
    ;;
    rsync)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
        cat >> $Output << "EOF"
groupadd -g 48 rsyncd
useradd -c "rsyncd Daemon" -d /home/rsync -g rsyncd \
        -s /bin/false -u 48 rsyncd
EOF
      fi
    ;;
    rustc)
      cat >> $Output << "EOF"
rm -v /usr/lib/rustlib/{components,manifest-rustc,rust-installer-version}
pushd /usr/lib
ln -svf rustlib/x86_64-unknown-linux-gnu/lib/*.so .
popd
EOF
      if ! $as_root; then
         cat >> $Output << "EOF"
LIBFILES=$(find /usr/lib/rustlib/x86_64-unknown-linux-gnu/lib -name "*.so" | awk -F\/ '{print $NF}')
for rustclib in $LIBFILES; do
  chown -h rustc:rustc /usr/lib/${rustclib}
done
EOF
      fi
    ;;
    samba) # install systemd files
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         if [ "$SYSTEMD" = yes ]; then
            cat >> $Output << "EOF"
install -m644 ${blfsfiles}/service/{samba.service,nmbd.service,smbd.service,smbd@.service,swat@.service,winbindd.service} /usr/lib/systemd/system
install -m644 ${blfsfiles}/service/{smbd.socket,swat.socket} /usr/lib/systemd/system/
install -m644 ${blfsfiles}/conf-files/samba.conf.d /etc/conf.d/samba
install -D -m644 ${blfsfiles}/conf-files/samba.conf /usr/lib/tmpfiles.d/samba.conf
if ! $AS_ROOT; then
  chown samba:samba /usr/lib/systemd/system/{samba.service,nmbd.service,smbd.service,smbd@.service,swat@.service,winbindd.service,smbd.socket,swat.socket}
  chown samba:samba /etc/conf.d/samba
  chown samba:samba /usr/lib/tmpfiles.d/samba.conf
fi
EOF
         fi
         cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/conf-files/samba.pam /etc/pam.d/samba
install -d -m1777 /var/spool/samba
if ! $AS_ROOT; then
  chown samba:samba /etc/pam.d/samba
  chown samba:samba /var/spool/samba
fi
EOF
      else
         if [ "$SYSTEMD" = yes ]; then
            cat >> $Output << "EOF"
mkdir -pv ${PkgUserDir}/${PkgName}/usr/lib/systemd/system
install -m644 ${blfsfiles}/service/{samba.service,nmbd.service,smbd.service,smbd@.service,swat@.service,winbindd.service} ${PkgUserDir}/${PkgName}/usr/lib/systemd/system
install -m644 ${blfsfiles}/service/{smbd.socket,swat.socket} ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/
mkdir -pv ${PkgUserDir}/${PkgName}/etc/conf.d
install -m644 ${blfsfiles}/conf-files/samba.conf.d ${PkgUserDir}/${PkgName}/etc/conf.d/samba
install -D -m644 ${blfsfiles}/conf-files/samba.conf ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/samba.conf
if ! $AS_ROOT; then
  chown samba:samba ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/{samba.service,nmbd.service,smbd.service,smbd@.service,swat@.service,winbindd.service,smbd.socket,swat.socket}
  chown samba:samba ${PkgUserDir}/${PkgName}/etc/conf.d/samba
  chown samba:samba ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/samba.conf
fi
EOF
         fi
         cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/conf-files/samba.pam ${PkgUserDir}/${PkgName}/etc/pam.d/samba
install -d -m1777 ${PkgUserDir}/${PkgName}/var/spool/samba
if ! $AS_ROOT; then
  chown samba:samba ${PkgUserDir}/${PkgName}/etc/pam.d/samba
  chown samba:samba ${PkgUserDir}/${PkgName}/var/spool/samba
fi
install -D -m644 ${blfsfiles}/install-files/networks/samba.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
      fi
    ;;
    sane)
      cat >> $Output << "EOF"
if [ "$SYSTEMD" = yes ]; then
  install -D -m644 ${blfsfiles}/service/saned.socket /usr/lib/systemd/system/saned.socket
  install -D -m644 ${blfsfiles}/service/saned.service /usr/lib/systemd/system/saned@.service
  if ! $AS_ROOT; then chown sane:sane /usr/lib/systemd/system/saned*; fi
fi
EOF
    ;;
    speechd)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
if [ "$SYSTEMD" = yes ]; then
  install -Dm644 ${blfsfiles}/service/speech-dispatcherd.service /usr/lib/systemd/system/speech-dispatcherd.service
  if ! $AS_ROOT; then chown speechd:speechd /usr/lib/systemd/system/speech-dispatcherd.service; fi
fi
mkdir -pv /var/log/speech-dispatcher
if ! $AS_ROOT; then chown speechd:speechd /var/log/speech-dispatcher; fi
sed -i 's|includedir=.*|includedir=/usr/include/speech-dispatcher|g' /usr/lib/pkgconfig/speech-dispatcher.pc
EOF
      else
	 cat >> $Output << "EOF"
if [ "$SYSTEMD" = yes ]; then
  install -Dm644 ${blfsfiles}/service/speech-dispatcherd.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/speech-dispatcherd.service
  if ! $AS_ROOT; then chown speechd:speechd ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/speech-dispatcherd.service; fi
fi
mkdir -pv ${PkgUserDir}/${PkgName}/var/log/speech-dispatcher
if ! $AS_ROOT; then chown speechd:speechd ${PkgUserDir}/${PkgName}/var/log/speech-dispatcher; fi
sed -i 's|includedir=.*|includedir=/usr/include/speech-dispatcher|g' ${PkgUserDir}/${PkgName}/usr/lib/pkgconfig/speech-dispatcher.pc
EOF
      fi
    ;;
    squid)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
touch /var/cache/squid/cache.log
if $AS_ROOT; then # create the proxy user
  groupadd -g 38 proxy && useradd -c "Squid Cache User" -d /var/cache/squid -u 38 -g proxy -s /bin/false proxy
fi
chown -R proxy:proxy /var/cache/squid
install -v -d /var/log/squid
touch /var/log/squid/access.log
chown -R proxy:proxy /var/log/squid
if [ "$SYSTEMD" = yes ]; then
  install -Dm644 ${blfsfiles}/service/squid.service /usr/lib/systemd/system/squid.service
  install -Dm644 ${blfsfiles}/service/squid-rotate.service /usr/lib/systemd/system/squid-rotate.service
  install -Dm644 ${blfsfiles}/service/squid-rotate.timer /usr/lib/systemd/system/squid-rotate.timer
  install -Dm644 ${blfsfiles}/conf-files/squid.tmpfiles /usr/lib/tmpfiles.d/squid.conf
  if [ ! -d /usr/lib/systemd/system/timers.target.wants ]; then
    install -dm755 /usr/lib/systemd/system/timers.target.wants
  fi
  if [ ! -L /usr/lib/systemd/system/timers.target.wants/squid-rotate.timer ]; then
    ln -sv ../squid-rotate.timer /usr/lib/systemd/system/timers.target.wants/squid-rotate.timer
  fi
  if ! $AS_ROOT; then
    chown squid:squid /usr/lib/systemd/system/squid.service
    chown squid:squid /usr/lib/systemd/system/squid-rotate.service
    chown squid:squid /usr/lib/systemd/system/squid-rotate.timer
    chown -h squid:squid /usr/lib/systemd/system/timers.target.wants/squid-rotate.timer
    chown squid:squid /usr/lib/tmpfiles.d/squid.conf
  fi
  systemctl enable squid.service
else
  cp ${blfsfiles}/squid /etc/rc.d/init.d
  chmod 755 /etc/rc.d/init.d/squid
  for rcnum in 0 1 2 6; do
    ln -svf ../init.d/squid /etc/rc.d/rc${rcnum}.d/K29squid
  done
  for rcnum in 3 4 5; do
    ln -svf ../init.d/squid /etc/rc.d/rc${rcnum}.d/S35squid
  done
  if ! $AS_ROOT; then 
    chown squid:squid /etc/rc.d/init.d/squid
    chown -h squid:squid /etc/rc.d/*/K29squid
    chown -h squid:squid /etc/rc.d/*/S35squid
  fi
fi
echo "You'll need to set up the cache dirs (squid -z)"
echo "squid.service needs to be enabled to do this"
echo "*** NOTE ***"
echo "You can now connect to the web on the target machine"
echo "Do you wish to stop installing in chroot? [y/N]"
read reply
  case $reply in
     [yY]|[yY][Ee][Ss])
          echo "okay exitiing"
          exit 1
     ;;
     [nN]|[nN][Oo])
          echo "Continuing"
     ;;
     *)
          echo "Continuing"
     ;;
  esac
EOF
      else
         cat >> $Output << "EOF"
touch ${PkgUserDir}/${PkgName}/var/cache/squid/cache.log
install -v -d ${PkgUserDir}/${PkgName}/var/log/squid
touch ${PkgUserDir}/${PkgName}/var/log/squid/access.log
rm -rf ${PkgUserDir}/${PkgName}/run # this is empty
if [ "$SYSTEMD" = yes ]; then
  install -Dm644 ${blfsfiles}/service/squid.service ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/squid.service
  install -Dm644 ${blfsfiles}/conf-files/squid.tmpfiles ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/squid.conf
  if ! $AS_ROOT; then
    chown squid:squid ${PkgUserDir}/${PkgName}/usr/lib/systemd/system/squid.service
    chown squid:squid ${PkgUserDir}/${PkgName}/usr/lib/tmpfiles.d/squid.conf
  fi
fi
install -D -m644 ${blfsfiles}/install-files/networks/squid.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
      fi
    ;;
    sudo) # add john to the wheel group
      cat >> $Output << "EOF"
usermod -G wheel -a john
EOF
    ;;
    systemd) # make sure the hardware clock is set to UTC
      cat >> $Output << "EOF"
echo " Don't forget to do:
timedatectl set-local-rtc 0 # hardware clock set to UTC or 1 for local time"
EOF
    ;;
    tk) # delete .python2 so can be reinstalled with tk support
      cat >> $Output << "EOF"
rm -v ${PkgUserDir}/python2/.python2* # reinstall python2 with tk support
EOF
    ;;
    tor)
      cat >> $Output << "EOF"
install -dm0700 -o tor -g tor /var/lib/tor
mv /etc/tor/torrc.sample /etc/tor/torrc-dist
install -Dm0644 ${blfsfiles}/conf-files/torrc /etc/tor/torrc
install -Dm0644 ${blfsfiles}/service/tor.service /usr/lib/systemd/system/tor.service
if ! $AS_ROOT; then
  chown tor:tor /etc/tor/torrc /usr/lib/systemd/system/tor.service
fi
EOF
    ;;
    upower) # make sure /var/lib/upower exists
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
if [ ! -d /var/lib/upower ]; then
    install -v -m0755 -d /var/lib/upower
    if ! $AS_ROOT; then chgrp upower /var/lib/upower; fi
fi
EOF
      else
	 cat >> $Output << "EOF"
if [ ! -d ${PkgUserDir}/${PkgName}/var/lib/upower ]; then
    install -v -m0755 -d ${PkgUserDir}/${PkgName}/var/lib/upower
    if ! $AS_ROOT; then chgrp upower ${PkgUserDir}/${PkgName}/var/lib/upower; fi
fi
EOF
      fi
    ;;
    usbutils)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then
         cat >> $Output << "EOF"
wget http://www.linux-usb.org/usb.ids -O /usr/share/hwdata/usb.ids
if ! $AS_ROOT; then chown usbutils:usbutils /usr/share/hwdata/usb.ids; fi
systemctl enable update-usbids.timer
EOF
      fi
    ;;
    vlc)
      if [[ $useDESTDIR = true && $installDEST = false ]]; then
         cat >> $Output << "EOF"
install -D -m644 ${blfsfiles}/install-files/multimedia/vlc.install ${PkgUserDir}/${PkgName}/.INSTALL
if ! $AS_ROOT; then chown $PkgName:$PkgName ${PkgUserDir}/${PkgName}/.INSTALL; fi
EOF
      fi
    ;;
    wpa_supplicant)
      if [[ $useDESTDIR = false || $installDEST = true ]]; then # check installing as pkguser
	if ! $as_root; then
          cat >> $Output << "EOF"
if [ -e /usr/src/core/dbus/.dbus_launch ]; then # check the owner
  fileOwner=$(GetFileOwner /usr/src/core/dbus/.dbus_launch)
#  echo "owner of file /usr/src/core/dbus/.dbus_launch is $fileOwner"
  if [ "$fileOwner" = root ]; then # delete it
    echo "Will delete /usr/src/core/dbus/.dbus_launch"
    rm -v /usr/src/core/dbus/.dbus_launch
    rm /usr/src/networks/wpa_supplicant/.wpa_supplicant
    if [ -e /usr/src/networks/wpa_supplicant/build ]; then
      rm /usr/src/networks/wpa_supplicant/build # reinstall it with dbus_launch support
    fi
  else
    echo "/usr/src/core/dbus/.dbus_launch owned by $fileOwner"
  fi
else
  echo "In wpa_supplicant - file /usr/src/core/dbus/.dbus_launch doesn't exist"
fi
EOF
        fi
      fi
    ;;
    xfce4-session)
      cat >> $Output << "EOF"
echo "exec dbus-launch --exit-with-session xfce4-session" > ~/.xinitrc
echo john ${HOSTNAME} = NOPASSWD: /usr/lib/xfce4/session/xfsm-shutdown-helper \
  >> /etc/sudoers
echo "********************************************************************"
echo "Change last line in /etc/sudoers file to your username and hostname"
echo "********************************************************************"
EOF
    ;;
    $xfont)
      cat >> $Output << "EOF"
ln -sv X11/100dpi /usr/share/fonts/100dpi
ln -sv X11/75dpi /usr/share/fonts/75dpi
ln -sv X11/misc /usr/share/fonts/misc
ln -sv X11/Type1 /usr/share/fonts/Type1
ln -sv X11/OTF /usr/share/fonts/OTF
ln -sv X11/TTF /usr/share/fonts/TTF
if ! $AS_ROOT; then
  chown -h $PkgName:$PkgName /usr/share/fonts/{100dpi,75dpi,misc,OTF,TTF,Type1}
fi
EOF
    ;;
    $xlib)
      if [ "$XORG_PREFIX" != "/usr" ]; then # set up symlinks
         cat >> $Output << "EOF"
ln -sv $XORG_PREFIX/lib/X11 /usr/lib/X11
ln -sv $XORG_PREFIX/include/X11 /usr/include/X11
ln -sv $XORG_PREFIX /usr/X11R6
EOF
      fi
    ;;
esac
if [ "$Section" = blfs ]; then
  cat >> $Output << "EOF"
    fi
  fi
done
EOF
else
  if [[ $useDESTDIR = true && $installDEST = false ]]; then # make the binary package tarfile
    case $pkgname in
       dialog)
          echo "createPkgfile -v=none" >> $Output # file is dialog.tar.gz
       ;;
       firewall)
         : # firewall doesn't work with DESTDIR - haven't tried to fix it
       ;;
       java-hamcrest)
          echo "createPkgfile -v=1.3" >> $Output
       ;;
       jdkbin)
          echo "createPkgfile -v=none" >> $Output
       ;;
       junit)
          echo "createPkgfile -v=4.12 -d=delete" >> $Output
       ;;
       linux-pam)
          echo "createPkgfile -v=$linuxpamvers" >> $Output
       ;;
       smpeg)
          echo "createPkgfile -v=0.4.5" >> $Output
       ;;
       x264|ca-certificates)
          echo "createPkgfile -v=none" >> $Output
       ;;
       x265)
          echo "createPkgfile -v=1.9" >> $Output # tar file is 1.9.tar.bz2
       ;;
       $xapp|$xfont|$xlib|xorg-intel) # xorg-intel if using git repository
          echo "createPkgfile -v=none" >> $Output
       ;;
       yajl)
          echo "createPkgfile -v=2.1.1 -d=delete" >> $Output
       ;;
       *)
          echo "createPkgfile -d=delete" >> $Output
       ;;
    esac
  else
    cat >> $Output << "EOF"
if [ -e "/etc/ld.so.cache~" ]; then # make sure owner is root
  chown 0 /etc/ld.so.cache~
fi
ldconfig
EOF
  fi
  cat >> $Output << "EOF"
else # BuildScript is true but INSTALLPKG is false, may be because using noinstall
  ((canInstallCount++))
  canInstall[canInstallCount]=${Section}/${PkgName} # store the packages that can be installed
  echo "${GREEN}Can install ${Section}/${PkgName}${NC}"
fi
else # BuildScript is false because all dependencies not met
# do the packages that can be installed satisfy the unmet deps?
  if [ $canInstallCount -gt 0 ]; then # compare canInstall with unmet deps
    for i in "${!rtrnDepNotMet[@]}"; do
      for eachCanInstall in ${canInstall[@]}; do
        if [[ ${rtrnDepNotMet[i]} = $eachCanInstall ]]; then # remove the dependency
          unset 'rtrnDepNotMet[i]'
        fi
      done
    done
    if [ ${#rtrnDepNotMet[@]} -gt 0 ]; then # still unmet deps so list them
      echo "${RED}${WB}Can't install $PkgName${NC}"
      echo "${YELLOW}unmet dependencies are:${NC}"
      echo "${BLUE}${BOLD}${rtrnDepNotMet[@]}${NC}"
    else # zero so can install
      ((canInstallCount++))
      canInstall[canInstallCount]=${Section}/${PkgName} # store the packages that can be installed
      echo "${GREEN}Can install ${Section}/${PkgName}${NC}"
    fi
  else
    echo "${RED}${WB}Can't install $PkgName${NC}"
    echo "${YELLOW}unmet dependencies are:${NC}"
    echo "${BLUE}${BOLD}${rtrnDepNotMet[@]}${NC}"
  fi
fi
EOF
fi
echo "} # end $FuncName" >> $Output
} #end closefunction
#
setuplinks () { # setup preprocessing
# links sets the owner of the file to the pkguser
# doFirst sets the given dir(s) to group install and sticky
# otherPrePro is anything else to do before install package
#
if [[ $useDESTDIR = false || $installDEST = true ]]; then
  links=""
  doFirst=""
  otherPrePro=""
case $pkgname in
    accountsservice)
        doFirst="/usr/share/dbus-1/system.d"
    ;;
    alsa-utils)
        doFirst="/usr/share/man/* /usr/lib/systemd/system"
    ;;
    apache)
        links="/usr/lib/httpd/usexec"
        doFirst="/srv /run"
    ;;
    apache-ant|apache-maven)
        doFirst="/etc/profile.d"
    ;;
    appstream-glib)
        doFirst="/usr/share/gettext"
    ;;
    aspell)
        doFirst="/usr/share/locale/fur/LC_MESSAGES"
    ;;
    at-spi2-core)
        doFirst="/etc/xdg"
    ;;
    atk)
        doFirst="/usr/share/locale/be@latin/LC_MESSAGES"
    ;;
    avahi)
        otherPrePro="groupadd -fg 86 netdev"
    ;;
    bash-completion)
        doFirst="/usr/share/bash-completion"
        links="/etc/profile.d/bash_completion.sh"
    ;;
    bbswitch)
        doFirst="/usr/lib/modules/{,$rtrkernum}"
    ;;
    bind)
        otherPrePro='groupadd -g 20 named
useradd -c "BIND Owner" -g named -s /bin/false -u 20 named
install -d -m777 -o named -g named /srv/named'
    ;;
    bluez)
        doFirst="/etc/dbus-1"
    ;;
    ca-certificates) # ca-certificates creates dir /usr/libexec/make-ca
        doFirst="/usr/libexec"
    ;;
    c-ares)
        doFirst="/usr/lib/cmake"
    ;;
    cmake)
	doFirst="/usr/share/vim"
    ;;
    coin) # installs /usr/share/man/man3/threads.3 which may already be in place by perl
        otherPrePro='if [ -e /usr/share/man/man3/threads.3 ]; then
  mv /usr/share/man/man3/threads.3 /usr/share/man/man3/perl-threads.3
fi'
    ;;
    colord)
        doFirst="/usr/share/color /usr/share/dbus-1/{system.d,interfaces} /usr/share/locale/pt_PT/LC_MESSAGES"
        links="/usr/share/glib-2.0/schemas/gschemas.compiled"
    ;;
    cracklib)
        doFirst="/usr/share/dict /usr/lib/python${py3series}/site-packages/__pycache__"
    ;;
    cuda)
        doFirst="/etc/ld.so.conf.d"
    ;;
    curl)
        doFirst="/usr/share/zsh/site-functions"
    ;;
    cups)
        otherPrePro='useradd -c "Print Service User" -d /var/spool/cups -g lp -s /bin/false -u 9 lp
groupadd -g 19 lpadmin && usermod -a -G lpadmin john'
        doFirst="/var/spool /usr/share/locale/*/"
        links="/etc/cups/{cupsd.conf,cupsd.conf.default,interfaces,ppd,snmp.conf,ssl} /run/cups/certs /var/{cache/cups,cache/cups/rss,spool/cups,spool/cups/*} /usr/sbin/cupsd /usr/lib/cups/{cgi-bin,cgi-bin/*.cgi} /usr/lib/cups/filter/{commandtops,pstops} /usr/lib/cups/{backend,notifier,notifier/dbus}"
    ;;
    cups-filters)
        doFirst="/etc/cups /usr/share/cups/{,banners,ppdc,charsets,data,drv,mime} /usr/lib/cups/{backend,driver,filter}"
    ;;
    dconf|sysprof)
        links="/usr/share/icons/hicolor/icon-theme.cache /usr/share/glib-2.0/schemas/gschemas.compiled /usr/lib/gio/modules/giomodule.cache"
    ;;
    dbus)
        otherPrePro='groupadd -g 18 messagebus && useradd -c "D-Bus Message Daemon User" -d /var/run/dbus -u 18 -g messagebus -s /bin/false messagebus'
    ;;
    docbook-xml)
        doFirst="/usr/share/xml"
    ;;
    eog)
        doFirst="/usr/share/locale/*/LC_MESSAGES"
    ;;
    evol-data-server)
        links="/usr/lib/camel-lock-helper-1.2 /usr/share/glib-2.0/schemas/gschemas.compiled"
    ;;
    faad2)
        doFirst="/usr/share/man"
    ;;
    farstream)
        links="/usr/lib/gstreamer-1.0/{libfsrawconference.*,libfsrtpconference.*,libfsmsnconference.*,libfsfunnel.*,libfsrtcpfilter.*,libfsvideoanyrate.*}"
    ;;
    firewall)
        doFirst="/etc/rc.d"
    ;;
    fontconfig)
        doFirst="/usr/share/gettext"
    ;;
    freeglut)
        doFirst="/usr/lib/cmake"
    ;;
    freetype)
        doFirst="/etc/profile.d"
    ;;
    gconf|gvfs|gnome-autoar)
        links="/usr/share/glib-2.0/schemas/gschemas.compiled /usr/lib/gio/modules/giomodule.cache"
    ;;
    gdb)
        doFirst="/usr/share/gdb"
    ;;
    gdk-pixbuf)
	links="/usr/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache"
    ;;
    gdm)
        doFirst="/etc/pam.d"
        links="/usr/share/glib-2.0/schemas/gschemas.compiled"
    ;;
    geocode-glib)
        doFirst="/usr/share/icons"
    ;;
    glib)
        doFirst="/usr/share/gettext /usr/share/gdb/auto-load/usr/lib /usr/share/locale/be@latin/LC_MESSAGES"
        links="/usr/share/aclocal/{glib-2.0.m4,glib-gettext.m4,gsettings.m4} /usr/libexec"
    ;;
    glib-networking)
        links="/usr/lib/gio/modules/giomodule.cache"
    ;;
    gnome-clocks)
        links="/usr/share/glib-2.0/schemas/gschemas.compiled /usr/share/icons/hicolor/icon-theme.cache /usr/share/icons/HighContrast/icon-theme.cache"
    ;;
    gnm-scrnshot|gjs)
        links="/usr/share/icons/hicolor/icon-theme.cache /usr/share/glib-2.0/schemas/gschemas.compiled"
    ;;
    gnome-desktop)
        doFirst="/usr/share/locale/*/LC_MESSAGES"
    ;;
    gnome-session)
        doFirst="/usr/share/xsessions"
        links="/usr/share/icons/hicolor/icon-theme.cache /usr/share/glib-2.0/schemas/gschemas.compiled"
    ;;
    gnm-thems-stndrd)
        links="/usr/share/icons/HighContrast/icon-theme.cache"
    ;;
    gnuchess)
        doFirst="/usr/share/games"
    ;;
    gpm)
        doFirst="/etc/sysconfig"
    ;;
    graphviz)
        doFirst="/usr/lib/tcl8.6 /usr/lib/perl5/$perlseries"
    ;;
    gstreamer)
        doFirst="/usr/share/bash-completion"
    ;;
    gtk-doc)
        doFirst="/usr/share/cmake"
    ;;
    gtkplus2)
        links="/usr/bin/gtk-update-icon-cache /usr/share/man/man1/gtk-update-icon-cache.1"
    ;;
    gtkplus3) # has to own /usr/bin/gtk-update-icon-cache
        doFirst="/usr/share/applications"
        links="/usr/share/glib-2.0/schemas/gschemas.compiled /usr/share/icons/hicolor/icon-theme.cache /usr/bin/gtk-update-icon-cache /usr/share/man/man1/gtk-update-icon-cache.1"
    ;;
    guile)
        doFirst="/usr/share/gdb/auto-load/usr/lib"
    ;;	
    gutenprint)
        doFirst="/etc/cups /usr/lib/cups/{backend,driver,filter} /usr/share/cups/usb"
    ;;
    hplip)
        doFirst="/usr/lib/cups/{filter,backend}"
    ;;
    hunspell)
        doFirst="/usr/share/man/hu/man1"
    ;;
    ibus)
        doFirst="/usr/lib/python${py3series}/site-packages/gi/overrides/__pycache__"
        links="/usr/share/glib-2.0/schemas/gschemas.compiled"        
    ;;
    icedtea-sound)
        doFirst="/opt/jdk/jre/lib/sound.properties"
    ;;
    icedtea-web) # has to access /var/cache/man/jdk and create /opt/jdk/jre
        doFirst="/opt/jdk /var/cache/man/jdk"
    ;;
    json-glib)
        doFirst="/usr/lib/installed-tests"
    ;;
    jdkbin) # has to create dir under /opt and write to /etc/man_db.conf
        doFirst="/opt"
	otherPrePro="chown 0 /etc/man_db.conf"
    ;;
    krb5)
        doFirst="/usr/share/locale/*/LC_MESSAGES"
    ;;
    kwindowsystem) # enable create /opt/lxqt/mkspecs
        doFirst="/opt/lxqt"
    ;;
    libcanberra)
        links="/etc/gconf/gconf.xml.defaults/*.xml"
	doFirst="/etc/X11/xinit/xinitrc.d"
    ;;
    libcap)
        otherPrePro="if [ \"\$BOOK_VERSION\" = arch ]; then
  rm -rf -v libcap*.tar.*z* # remove the existing source tar file
fi"
    ;;
    libedit) # /usr/share/man/man3/history.3 conflicts with readline
        otherPrePro="if [ -e /usr/share/man/man3/history.3 ]; then
  mv /usr/share/man/man3/history.3 /usr/share/man/man3/history.3-old
fi"
    ;;
    libev) # tries to install /usr/include/event.h which already exists from libevent
        otherPrePro="if [ -e /usr/include/event.h ]; then
  mv /usr/include/event.h /usr/include/event.h-old
fi"
    ;;
    libexif)
        doFirst="/usr/share/locale/*/LC_MESSAGES"
    ;;
    libgphoto2)
        doFirst="/usr/lib/udev/hwdb.d"
    ;;
    libinput)
        doFirst="/usr/lib/udev/{,hwdb.d}"
    ;;
    libmypaint)
        doFirst="/usr/share/locale/*/LC_MESSAGES"
    ;;
    libogg)
        doFirst="/usr/lib/cmake"
    ;;
    libproxy)
      	doFirst="/usr/share/cmake"
    ;;
    librsvg)
        links="/usr/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache"
    ;;
    libtasn1)
        doFirst="/usr/share/gtk-doc/html"
    ;;
    libvdpau)
        doFirst="/usr/lib/vdpau"
        otherPrePro="if [ -e /usr/lib/libvdpau.so ]; then
  chown -h libvdpau:libvdpau /usr/lib/{libvdpau.so,libvdpau.so.1}
fi"
    ;;
    libvdpau-va-gl) # needs to write to /etc/profile.d/xorg.sh
        otherPrePro="chgrp install /etc/profile.d/xorg.sh && chmod 664 /etc/profile.d/xorg.sh"
    ;;
    libwacom)
        doFirst="/usr/lib/udev/rules.d"
    ;;
    libxml2)
        doFirst="/usr/lib/cmake"
    ;;
    libzeitgeist)
        doFirst="/usr/lib/systemd/user"
    ;;
    linux-pam)
        doFirst="/etc/pam.d"
        links="/sbin/unix_chkpwd"
    ;;
    llvm) # needs to write to /usr/libexec
        doFirst="/usr/libexec"
    ;;
    lvm2)
        doFirst="/usr/lib/systemd/system-generators /usr/lib/systemd/system/sysinit.target.wants"
    ;;
    lxqt-qtplugin)
        otherPrePro="chgrp install /etc/profile.d/lxqt.sh && chmod 664 /etc/profile.d/lxqt.sh"
    ;;
    lxqt-setup)
        doFirst="/etc/profile.d"
    ;;
    lxqt-themes)
        links="/usr/share/icons/hicolor/{,scalable/{,{places,apps}}}"
    ;;
    mediaplayrinfo)
        doFirst="/usr/lib/udev/rules.d"
    ;;
    mesa)
        links="/usr/lib/libwayland-egl.so* /usr/lib/pkgconfig/wayland-egl.pc"
    ;;          
    mutter)
        links="/usr/share/GConf/gsettings/mutter-schemas.convert /usr/share/gnome-control-center/keybindings/50-mutter-{navigation.xml,system.xml,windows.xml} /usr/share/man/man1/mutter.1 /usr/share/gtk-doc/html/meta/* /usr/share/glib-2.0/schemas/gschemas.compiled"
    ;;
    mypaint-brushes)
       doFirst="/usr/share/pkgconfig"
    ;;
    nautilus)
        doFirst="/usr/share/locale/*/LC_MESSAGES"
        links="/usr/share/glib-2.0/schemas/gschemas.compiled /usr/share/icons/hicolor/icon-theme.cache"
    ;;
    nautilus-sendto)
        links="/usr/share/glib-2.0/schemas/gschemas.compiled /usr/lib/nautilus-sendto/plugins/{libnstburn.la,libnstburn.so,libnstgajim.la,libnstgajim.so,libnstpidgin.la,libnstpidgin.so,libnstremovable_devices.la,libnstremovable_devices.so} /usr/bin/nautilus-sendto"
    ;;
    net-tools) # overwrites these installed by inetutils
	links="/bin/{hostname,dnsdomainname} /sbin/ifconfig"
    ;;
    newt)
        doFirst="/usr/share/locale/tg/LC_MESSAGES"
    ;;
    nghttp2)
        links="/usr/include/nghttp2/{nghttp2.h,nghttp2ver.h} /usr/lib/{libnghttp2.so*,pkgconfig/libnghttp2.pc} /usr/share/man/man1/{nghttp*,h2load.1} /usr/share/nghttp2/fetch-ocsp-response"
        otherPrePro="rm -rf /usr/share/doc/nghttp2-*"
    ;;
    ninja)
        doFirst="/usr/share/zsh/site-functions"
    ;;
    nmap) # delete foreign man pages
        otherPrePro="rm -rf /usr/share/man/{de,es,fr,hr,hu,it,ja,pl,pt_BR,pt_PT,ro,ru,sk,zh}"
    ;;
    nvidia)
        doFirst="/usr/lib/{modprobe.d,modules/{,${rtrkernum}}}"
    ;;
    nvidia-utils)
        doFirst="/usr/share/nvidia"
        links="/usr/bin/nvidia-modprobe"
    ;;
    openbox)
        doFirst="/usr/share/xsessions"
    ;;
    openjdk)
        links="/opt/jdk"
    ;;
    openldap)
        doFirst="/usr/lib/sysusers.d"
    ;;
    openobex)
        otherPrePro="groupadd -g 90 plugdev"
    ;;
    openssh)
        otherPrePro="install -v -m700 -d /var/lib/sshd
chown -v root:sys /var/lib/sshd
groupadd -g 50 sshd
useradd -c 'sshd PrivSep' -d /var/lib/sshd -g sshd -s /bin/false -u 50 sshd"
    ;;
    openvdb)
        doFirst="/usr/lib/python${py3series}"
    ;;
    p11-kit) # need to own /usr/lib/libnssckbi.so in order to mv it
        doFirst="/usr/lib/systemd/user"
        links="/usr/lib/libnssckbi.so"
    ;;
    php) # needs to write to /etc/httpd/httpd.conf
        doFirst="/etc/httpd"
        links="/etc/httpd/httpd.conf"
    ;;
    polkit)
        links="/usr/lib/polkit-1/polkit-agent-helper-1 /usr/bin/pkexec /etc/polkit-1/rules.d /usr/share/polkit-1/rules.d"
    ;;
    py2-backports-os)
        links="/usr/bin/pasteurize /usr/bin/futurize"
    ;;
    py3-beaker) # needs to write to /usr/lib/$py3series/site-packages/easy-install.pth
        otherPrePro="chgrp install /usr/lib/python${py3series}/site-packages/easy-install.pth
chmod 664 /usr/lib/python${py3series}/site-packages/easy-install.pth"
    ;;
    py3-cssselect)
        otherPrePro="if [ -e /usr/lib/python${py3series}/site-packages/easy-install.pth ]; then
  chown python3:install /usr/lib/python${py3series}/site-packages/easy-install.pth && chmod 664 /usr/lib/python${py3series}/site-packages/easy-install.pth
fi"
    ;;
    py3-cython)
        otherPrePro="if [ -e /usr/bin/cythonize ]; then mv /usr/bin/cythonize{,2}; fi
if [ -e /usr/bin/cython ]; then mv /usr/bin/cython{,2}; fi
if [ -e /usr/bin/cygdb ]; then mv /usr/bin/cygdb{,2}; fi"
    ;;
    py3-dbus) # give access to /usr/include/dbus-1.0/dbus/dbus-python.h
        links="/usr/include/dbus-1.0/dbus/dbus-python.h /usr/share/doc/{dbus-python-1.2.0,dbus-python-1.2.0/*} /usr/lib/pkgconfig/dbus-python.pc"
    ;;
    py2-gobject3)
        links="/usr/lib/python${py2series}/site-packages/gi/{repository/*,overrides/*,_gi*,*.p*}"
    ;;
    py3-gobject3)
        links="/usr/include/pygobject-3.0/pygobject.h /usr/lib/pkgconfig/pygobject-3.0.pc"
    ;;
    py2-kiwisolver)
        otherPrePro="if [ -e /usr/bin/easy_install ]; then
  mv /usr/bin/easy_install /usr/bin/easy_install-old
  mv /usr/bin/easy_install-${py2series} /usr/bin/easy_install-${py2series}-old
fi"
    ;;
    py3-kiwisolver)
        otherPrePro="if [ -e /usr/bin/easy_install ]; then
  mv /usr/bin/easy_install /usr/bin/easy_install-old
  mv /usr/bin/easy_install-${py3series} /usr/bin/easy_install-${py3series}-old
fi"
    ;;
    py3-lxml)
        otherPrePro="chown python3:install /usr/lib/python${py3series}/site-packages/easy-install.pth
chmod 664 /usr/lib/python${py3series}/site-packages/easy-install.pth"
    ;;
    py3-mako)
        otherPrePro="if [ -e /usr/bin/mako-render ]; then
  mv /usr/bin/mako-render{,2}
fi
chgrp install /usr/lib/python${py3series}/site-packages/easy-install.pth
chmod 664 /usr/lib/python${py3series}/site-packages/easy-install.pth"
    ;;
    py2-markupsafe)
        otherPrePro="rm -rf /usr/lib/python${py2series}/site-packages/MarkupSafe-0.23-py${py2series}-linux-x86_64.egg/markupsafe/*
rm -rf /usr/lib/python${py2series}/site-packages/MarkupSafe-0.23-py${py2series}-linux-x86_64.egg/EGG-INFO/*"
    ;;
    py3-markupsafe)
        otherPrePro="rm -rf /usr/lib/python${py3series}/site-packages/MarkupSafe-0.23-py${py3series}-linux-x86_64.egg/markupsafe/*
rm -rf /usr/lib/python${py3series}/site-packages/MarkupSafe-0.23-py${py3series}-linux-x86_64.egg/EGG-INFO/*"
    ;;
    py2-matplotlib)
	links="/usr/bin/f2py2"
        otherPrePro="if [ -e /usr/bin/easy_install ]; then
  mv /usr/bin/easy_install /usr/bin/easy_install-old
  mv /usr/bin/easy_install-${py2series} /usr/bin/easy_install-${py2series}-old
fi"
    ;;
    py3-matplotlib)
	links="/usr/bin/{f2py,f2py3,f2py${py3series}}"
        otherPrePro="if [ -e /usr/bin/easy_install ]; then
  mv /usr/bin/easy_install /usr/bin/easy_install-old
  mv /usr/bin/easy_install-${py3series} /usr/bin/easy_install-${py3series}-old
fi"
    ;;
    py3-numpy)
        links="/usr/bin/f2py3"
        doFirst="/usr/include/python${py3series}"
    ;;
    py2-path)
        links="/usr/bin/pasteurize /usr/bin/futurize"
    ;;
    py2-pyparsing)
        links="/usr/lib/python${py2series}/site-packages/pyparsing-2.4.7-py${py2series}.egg"
    ;;
    py3-pyparsing)
        doFirst="/usr/lib/python${py3series}/site-packages/__pycache__"
        links="/usr/lib/python${py3series}/site-packages/pyparsing-2.4.0-py${py3series}.egg"
    ;;
    py3-scipy)
        links="/usr/bin/{f2py,f2py3,f2py${py3series}}"
    ;;
    py2-setuptools) # make sure can mv /usr/bin/easy_install
        doFirst="/usr/lib/python${py2series}/site-packages/{pkg_resources,setuptools/{,command,extern,_vendor}}"
        links="/usr/bin/{easy_install,easy_install-${py2series}}"
    ;;
    py3-setuptools)
        otherPrePro="chown python3:install /usr/lib/python${py3series}/site-packages/setuptools.pth
chmod 664 /usr/lib/python${py3series}/site-packages/setuptools.pth"
        links="/usr/bin/{easy_install,easy_install-${py3series}}"
    ;;
    py3-setuptools_scm)
        otherPrePro="chown python3:install /usr/lib/python${py3series}/site-packages/setuptools.pth
chmod 664 /usr/lib/python${py3series}/site-packages/setuptools.pth"
	links="/usr/bin/{easy_install,easy_install-${py3series}}"
    ;;
    py2-six)
        doFirst="/usr/lib/python${py2series}/site-packages/six-1.12-py${py2series}.egg"
        otherPrePro="rm -rf /usr/lib/python${py2series}/site-packages/six-1.15.0-py${py2series}.egg-info"
    ;;
    py3-six)
        doFirst="/usr/lib/python${py3series}/site-packages/six-1.12-py${py3series}.egg"
        otherPrePro="rm -rf /usr/lib/python${py3series}/site-packages/six-1.12-py${py3series}.egg/*
chgrp install /usr/lib/python${py3series}/site-packages/easy-install.pth
chmod 664 /usr/lib/python${py3series}/site-packages/easy-install.pth"
    ;;
    py2-theano)
	links="/usr/bin/f2py2"
    ;;
    py3-theano)
        otherPrePro="if [ -d /usr/src/pythonmodules/py2-theano -a ! -e /usr/bin/theano-cache2 ]; then
  mv /usr/bin/theano-cache{,2}
fi
if [ -d /usr/src/pythonmodules/py2-theano -a ! -e /usr/bin/theano-nose2 ]; then
  mv /usr/bin/theano-nose{,2}
fi"
        links="/usr/bin/{f2py3,f2py,f2py3.7}"
    ;;
    python2) # on reinstall, needs to own /usr/bin/2to3
        links="/usr/bin/2to3"
    ;;
    qt5-base)
        doFirst="/etc/profile.d"
	otherPrePro="chgrp install /etc/ld.so.conf && chmod 664 /etc/ld.so.conf"
    ;;
    samba)
        doFirst="/usr/lib/perl5 /etc/ld.so.conf /usr/lib/cups/backend"
	otherPrePro="mkdir -pv /run/lock"
    ;;
    sane) 
        otherPrePro="if [ \"\$(grep -q ^scanner\: /etc/group;echo \$?)\" != 0 ]; then
  groupadd -g 70 scanner && usermod -a -G scanner john
fi"
        doFirst="/etc/udev/rules.d"
    ;;
#    scrapy) # need to own /usr/lib/python2.7/site-packages/setuptools.pth, /usr/bin/easy_install-2.7
#        doFirst="rm -rf /usr/bin/easy_install"
#        links="/usr/lib/python${py2series}/site-packages/setuptools.pth /usr/bin/easy_install-${py2series}"
#    ;;
    scons) # installs /usr/bin/easy_install owned by python2
	links="/usr/bin/easy_install /usr/bin/easy_install-${py3series}"
    ;;
    shadow)
        links="/usr/bin/{chage,chfn,chsh,expiry,gpasswd,newgidmap,newgrp,newuidmap,su,passwd,vigr,vipw,nologin} /usr/share/man/man8/{vigr.8,vipw.8,nologin.8}"
    ;;
    shrd-mime-info)
        doFirst="/usr/share/mime/packages"
        links="/usr/share/mime/packages/freedesktop.org.xml"
    ;;
    squid)
        otherPrePro='groupadd -g 38 proxy && useradd -c "Squid Cache User" -d /var/cache/squid -u 38 -g proxy -s /bin/false proxy'
    ;;
    subversion)
        doFirst="/usr/share/pkgconfig"
    ;;
    sudo)
        otherPrePro="if [ -d /etc/pam.d ]; then chgrp install /etc/pam.d && chmod 1775 /etc/pam.d; fi
if [ -e /usr/bin/sudo ]; then chmod 755 /usr/bin/sudo; fi
if [ -d /etc/sudoers.d ]; then chmod 755 /etc/sudoers.d; fi
if [ -e /etc/sudoers ]; then chmod 755 /etc/sudoers; fi
if [ -e /etc/sudoers.dist ]; then chmod 755 /etc/sudoers.dist; fi
if [ -e /var/lib/sudo/lectured ]; then chmod 755 /var/lib/sudo/lectured; fi"
        links="/var/lib/sudo/lectured /etc/{sudoers,sudoers.dist,sudo.conf,sudoers.d/{,sudo}} /usr/bin/sudo /usr/lib/sudo/sudoers.so" # for upgrade
    ;;
    systemd)
        doFirst="/usr/lib/systemd/system-generators /etc/dbus-1"
        otherPrePro="chown systemd:systemd /usr"
        links="/etc/pam.d/systemd-user /etc/pam.d/system-session /var/log/journal /var/log/journal/*"
    ;;
    tdb) # these files were installed by samba
        links="/usr/bin/{tdbbackup,tdbdump,tdbrestore,tdbtool} /usr/lib/python${py2series}/site-packages/tdb.so /usr/share/man/man8/{tdbbackup.8,tdbdump.8,tdbrestore.8,tdbtool.8}"
    ;;
    traceroute)
        otherPrePro="if [ -e /bin/traceroute ]; then rm /bin/traceroute; fi"
    ;;
    tracker|tracker3|tracker-miners|tracker3-miners)
        doFirst="/usr/lib/tracker3"
        links="/usr/share/glib-2.0/schemas/gschemas.compiled /etc/gconf/gconf.xml.defaults/* /usr/share/icons/hicolor/icon-theme.cache"
    ;;
    udisks)
        doFirst="/usr/share/dbus-1/system.d"
    ;;
    upower)
        doFirst="/usr/share/dbus-1/interfaces"
    ;;
    usbutils)
        doFirst="/usr/share/hwdata"
    ;;
    volume_key)
        doFirst="/usr/lib/python${py3series}/site-packages/__pycache__"
    ;;
    vte)
        doFirst="/etc/profile.d /usr/share/locale/*/LC_MESSAGES"
    ;;
    weston)
        doFirst="/usr/share/wayland-sessions"
        links="/usr/bin/weston-launch"
    ;;
    wpa_supplicant)
        otherPrePro="mkdir -pv /etc/dbus-1/system.d"
        doFirst="/etc/dbus-1/system.d"
    ;;
    x7lib)
        links="/usr/include/X11/extensions/XKBgeom.h"
    ;;
    xboard)
        links="/usr/share/mime/packages/xboard.xml"
    ;;
    xclock)
        links="/etc/X11"
    ;;
    xorg-evdev)
        links="/usr/share/X11/xorg.conf.d/10-evdev.conf"
    ;;
    xorg-fonts-encodings)
        otherPrePro="rm -rf /usr/share/fonts/X11/encodings/large/{encodings.dir,*.gz}
rm -rf /usr/share/fonts/X11/encodings/{encodings.dir,*.gz}"
    ;;
    xorg-intel)
        links="/usr/lib/xf86-video-intel-backlight-helper"
    ;;
    xorg-server)
        otherPrePro="if [ -e /etc/sysconfig/createfiles ]; then
  chown root:install /etc/sysconfig/createfiles
  chmod 664 /etc/sysconfig/createfiles
fi"
        links="/usr/lib/xorg-server/Xorg.wrap"
    ;;
    at-spi2-atk|caribou|gnome-chess|gnome-keyring|gnome-shell|gnome-shell-ext|gset-dsktp-schms|gst-plgns-bad|gst-plgns-bad0|libgnomekbd|telepathy-glib|telepathy-logr|yelp)
        links="/usr/share/glib-2.0/schemas/gschemas.compiled"
    ;;
    epiphany|folks|gnome-calculator|gnome-contacts|gnome-dictionary|gnome-set-daemon|metacity|tpthymisscntrl)
        links="/usr/share/glib-2.0/schemas/gschemas.compiled"
    ;;
    gnm-power-mngr|gnome-sys-monitr|gnome-scrnshot|gucharmap|mousetweaks|vino|gedit|epiphany-ext)
        links="/usr/share/glib-2.0/schemas/gschemas.compiled"
    ;;
    gst-plgns-good|aisleriot|file-roller|evince|gnome-applets|evolution|ntwrk-mngr-applt|empathy|gnome-nettool|gnm-tweak-tool|libpeas|totem|libgweather|gcr|goa|gnome-session|gnome-terminal|seahorse)
        links="/usr/share/glib-2.0/schemas/gschemas.compiled /etc/gconf/gconf.xml.defaults/* /usr/share/icons/hicolor/icon-theme.cache"
    ;;
    dconf|gnome-bluetooth|gnm-user-share|gnome-cntrl-cntr|baobab|alacarte|brasero|cheese|eog|gnome-disk-util|gnome-serch-tool|gnome-system-mon|gnome-pwr-mngr|netwrk-mngr-app|rhythmbox)
        links="/usr/share/glib-2.0/schemas/gschemas.compiled /usr/share/icons/hicolor/icon-theme.cache"
    ;;
    gnome-icon-thme|gnm-icn-thme-ext|gnm-icn-thme-sym)
        links="/usr/share/icons/gnome/icon-theme.cache"
    ;;
    accerciser|gnome-colr-mngr|gnome-tweak-tool|kodi|xfce4-session)
        links="/usr/share/icons/hicolor/icon-theme.cache"
    ;;
esac
fi
} # end setuplinks
#
resolvelinks () {
echo "resolvelinks () {" >> $Output
if [ ! -z "$otherPrePro" ];then echo "$otherPrePro" >> $Output; fi
if [ ! -z "$doFirst" ]; then
echo "for doDir in $doFirst; do
 if [ -d "\$doDir" ]; then
   chgrp install \$doDir # set to install group
   chmod 1775 \$doDir # set sticky bit
 fi
done" >> $Output
fi
if [ ! -z "$links" ]; then
echo "for link in $links; do
  if [ -e "\$link" ]; then
    chown -h \$PkgName:\$PkgName \$link # change owner to package user so can overwrite
  fi
done" >> $Output
fi
echo "return 0
} # end resolvelinks" >> $Output
} #end resolvelinks
#
perlmodwrite () {
# $1 is the package name, $2 is the src version.tar.gz name, $3 is the cpan URL, $4 is the awk print number, usually 1
echo "$1=\${SrcName}$2
if [ -e \${sourcedir}/\${${1}} ]; then
  cp \${sourcedir}/\${${1}} .
else
  if [ ! -e \$$1 ]; then
    wget \$wgetopts ${3}/\${${1}}
  fi
fi
cd \$(tar vxf \$$1 | awk -F\/ 'END{print \$$4}')" >> $Output
} # end perlmodwrite
#
wgetWrite () {
# writes out how to get the src file into the pkg home dir
# $1 is the file to download
# $2 is the URL
# $3 is the output filename
# $4 - if true, then don't write the cd line (e.g. for a zip file)
# $5 - if true then add --no-check-certificate to the wget line
# $6 - false if SrcName is to be used, true if outputFile is to be used in the cp
# $7 - true if want to write the copy patches line
# $8 - true if using Arch binaries so don't try and wget the source file
# *** Note ncc=--no-check-certificate and is a global variable ***
local fToDownload=$1
local fURL=$2
local outputFile=${3:-${1}}
local skipcd="${4:-false}"
local addncc="${5:-false}"
local switch="${6:-false}"
local copyPatches="${7:-false}"
local usingArch="${8:-false}"
local nmToUse='${SrcName}*.tar.*z*'
if $usingArch; then nmToUse='${SrcName}*-x86_64.pkg.tar.*z*'; fi
if [[ "$switch" = true && "$usingArch" = false ]]; then nmToUse='${outputFile}'; fi
if ! $usingArch; then
  echo "srcpkg=\"$fToDownload\"" >> $Output
  echo "outputFile=\"$outputFile\"" >> $Output
fi
if $switch; then
  echo "if [ -e \${CUR_DIR}/${nmToUse} ]; then # src exists in current dir - use that
# check that the file is not empty
  if [ ! -s \${CUR_DIR}/${nmToUse} ]; then # empty
    echo "file \${CUR_DIR}/${nmToUse} is empty - aborting"
    exit 1
  else
    echo \"${nmToUse} already in current dir - will use that one\"
  fi
elif [ -e \${sourcedir}/${nmToUse} ]; then # src exists so copy it to current dir
  cp -v \${sourcedir}/${nmToUse} . # if patches and not a binary, then need to add them here" >> $Output
  if [[ "$usingArch" = false && "$copyPatches" = true ]]; then # write out cp any patches
    echo "  if [ -e \${sourcedir}/\${SrcName}*.patch ]; then # cp the patch
    cp -v \${sourcedir}/\${SrcName}*.patch . 
  fi " >> $Output
  fi
else # switch is false
  echo "if [ -e \${CUR_DIR}/${nmToUse} ]; then # src exists in current dir - use that
# check that the file is not empty
  if [ ! -s \${CUR_DIR}/${nmToUse} ]; then # empty
    echo "file \${CUR_DIR}/${nmToUse} is empty - aborting"
    exit 1
  else
    echo \"${nmToUse} already in current dir - will use that one\"
  fi
elif [ -e \${sourcedir}/${nmToUse} ]; then # src exists so copy it to current dir
  cp -v \${sourcedir}/${nmToUse} . # if not a binary then need to copy any patches as well" >> $Output
  if [[ "$usingArch" = false && "$copyPatches" = true ]]; then # write out cp any patches
    echo "  if [ -e \${sourcedir}/\${SrcName}*.patch ]; then # cp the patch
    cp -v \${sourcedir}/\${SrcName}*.patch .
  fi " >> $Output
  fi
fi
echo "else" >> $Output
if $usingArch; then
  cat >> $Output << "EOF"
  echo "You are using an Arch binary and this should be in"
  echo "the directory $sourcedir with source name beginning $SrcName"
  echo "It appeares to be missing. Download this binary to continue."
  echo "Aborting"
  exit 1
fi
EOF
else # not using Arch
  if $addncc; then
    echo "  if [ -e /usr/bin/wget ]; then # wget installed so try and get the source
    wget \$wgetopts $ncc -O \$outputFile ${fURL}\${srcpkg}" >> $Output
  else
    echo "  if [ -e /usr/bin/wget ]; then # wget installed so try and get the source
    wget \$wgetopts -O \$outputFile ${fURL}\${srcpkg}" >> $Output
  fi
  echo "    if [ \$? -ne 0 ]; then
      echo \"Failed to download \$srcpkg\"
      echo \"Aborting\"
      exit 1
    fi
  else
    echo "wget not installed"
    echo "Cannot get source file for \$SrcName - exit now"
    exit 1
  fi
fi" >> $Output
fi
case $fToDownload in
   linux64bit) # nvidia src
     cat >> $Output << "EOF"
sh ${_pkg}.run --extract-only
cd ${_pkg}
# add any patches here
EOF
   ;;
   *)
     if ! $skipcd; then
       echo "cd \$(tar vxf \$outputFile | awk -F\/ 'END{print \$1}')" >> $Output
     fi
   ;;
esac
} # end wgetWrite
#
tryWgetSrc () {
# called when source file not found. Uses wget (if installed) to get the src code.
cat >> $Output << "EOF"
  if [ -e /usr/bin/wget ]; then # wget installed so try and get the source
    echo "Can't find $SrcName src file in $sourcedir"
    echo "Enter the url (including the filename) and wget will download it:"
    read URLFileName
    wget $wgetopts $URLFileName
  else
    echo "wget not installed"
    echo "Cannot get source file for $SrcName - exit now"
    exit 1
  fi
EOF
} # end tryWgetSrc
#
getSrcLocal () {
# $1 is the extension to model the format of the version number
# usually * is sufficient but for e.g. use [0-9] to force a digit
# $2 is the format to get all files with SrcName-something. Usually *.*
# $3 - true to output the cd line, false to omit it
# This allows more commands to be placed between the fi and the cd command
# $4 - true to write a separate line to get patches
local ext1=$1
local ext2=$2
local switch=$3
local patchLine="${4:-false}"
case $pkgname in
   wireless_tools) # the patch has a different name from SrcName
echo "if [ -e \${CUR_DIR}/\${SrcName}${ext1}.tar.*z* ]; then
  echo \"\$SrcName already in current dir - will use that one\"
elif [ -e \${sourcedir}/\${SrcName}${ext1}.tar.*z* ]; then
  cp -v \${sourcedir}/\${SrcName%?}${ext2} .
else" >> $Output
   ;;
   *)
echo "if [ -e \${CUR_DIR}/\${SrcName}${ext1}.tar.*z* ]; then # src exists in current dir - use that
  echo \"\$SrcName already in current dir - will use that one\"
elif [ -e \${sourcedir}/\${SrcName}${ext1}.tar.*z* ]; then # src exists so copy it to current dir
  cp -v \${sourcedir}/\${SrcName}${ext2} ." >> $Output
if $patchLine; then echo "  cp \${sourcedir}/\${SrcName}${ext2}*.patch" >> $Output; fi
echo "else" >> $Output
   ;;
esac
tryWgetSrc
if $switch; then
  echo "fi
cd \$(tar vxf \${SrcName}${ext1}.tar.*z* | awk -F\/ 'END{print \$1}')" >> $Output
else
  echo "fi" >> $Output
fi
} # end getSrcLocal
#
gnmPkgVers () {
# $1 is the source name
# $2 is the compressed source package name
# $3 is the extension name to trim to, usually tar
local srcnm=$1
local spkg=$2
local trm=$3
local fext="${spkg#*${srcnm}}" # this is vers # plus .tar.xz or similar
local vnum="${fext%.${trm}*}" # this is the full vers # e.g 0.16.2
gnmvers=${vnum%.*} # this is the series number in the gnome URL
#gnmvers=$(echo $vnum | awk -F\. '{print $1"."$2}') # this is the required version in gnome
revsrcnm=${srcnm%?} # src name without the trailing -
} # end gnmPkgVers
#
setHostProxy () {
ipaddr=$( /sbin/ip addr | grep "192.168" | awk '{print $2}' | awk -F\/ '{print $1}' )
proxyset=http://${ipaddr}:3128/
http_proxy=$proxyset
ftp_proxy=$proxyset
all_proxy=socks://${ipaddr}:3128/
https_proxy=$proxyset
hostwgetopts="-e http_proxy=$http_proxy -e ftp_proxy=$ftp_proxy -e https_proxy=$https_proxy"
} # end setHostProxy
#
setproxy () {
# need a function to setup the proxy settings in the build script
    cat >> $Output << "EOF"
setproxy () {
ipaddr=$( /sbin/ip addr | grep "192.168" | awk '{print $2}' | awk -F\/ '{print $1}' )
proxyset=http://${ipaddr}:3128/
http_proxy=$proxyset
ftp_proxy=$proxyset
https_proxy=$proxyset
wgetopts="-e http_proxy=$http_proxy -e ftp_proxy=$ftp_proxy -e https_proxy=$https_proxy"
} # end setproxy
EOF
} # end setproxy
#
gnmComsWrite () {
local srcnm=$1
local pkgVersion=$2
local skipcd="${3:-false}" # if true, don't write the cd line
local addncc="${4:-false}" # if true, add -ncc in wget opts
local switch="${5:-false}" # if true, use outputFile instead of SrcName
local addPatch="${6:-false}" # if true, add another line to cp a patch
revsrcnm=""
gnmvers=""
gnmPkgVers $srcnm $pkgVersion tar
local pkgurl=${gnomeBaseURL}/${revsrcnm}/${gnmvers}/
wgetWrite $pkgVersion $pkgurl $pkgVersion $skipcd $addncc $switch $addPatch
} # end gnmComsWrite
#
create_links () {
    cat >> $Output << "EOF"
create_links () {
# note - make sure grep supports -P option
# $1 is the lib dir
# $2 is the lib file. Links are created to this file.
#
for _lib in $(find "$1" -name "${2}.so*" | grep -v 'xorg/'); do
  _soname=$(dirname "${_lib}")/$(readelf -d "${_lib}" | grep -Po 'SONAME.*: \[\K[^]]*' || true)
  _base=$(echo ${_soname} | sed -r 's/(.*).so.*/\1.so/')
  [[ -e "${_soname}" ]] || ln -s $(basename "${_lib}") "${_soname}"
  [[ -e "${_base}" ]] || ln -s $(basename "${_soname}") "${_base}"
done
} # end create_links
EOF
} # end create_links
#
gitClone () {
# $1 is the pkg name
# $2 is the pkg url (no / at end)
# $3 is the name to be output - default is $pkgname
# $4 is false if the cd is to be output, otherwise true
# $5 is true if cd $SrcName is to be used - default false
# $6 - if the src is a directory, use d. Default is e (exists)
local pkgname=$1
local pkgUrl=$2
local outName=$pkgname
if [ ! -z "$3" ]; then outName=$3; fi
local switch="${4:-false}"
local cdSrcName="${5:-false}"
local isDir="${6:-e}"
echo "if [ -$isDir \${CUR_DIR}/${pkgname} ]; then # src exists in current dir - use that
  echo \"$pkgname already in current dir - will use that one\"
elif [ -$isDir \${sourcedir}/${pkgname} ]; then # src exists so copy it to current dir
  cp -r \${sourcedir}/${pkgname} .
else
  if [ ! -d $pkgname ]; then
    git clone ${pkgUrl}/${pkgname}.git $outName
  fi
fi" >> $Output
if ! $switch; then
  if $cdSrcName; then
    echo "cd \$SrcName" >> $Output
  else
    echo "cd $pkgname" >> $Output
  fi
fi
} # end gitClone
#
testOnline () {
    cat >> $Output << "EOF"
testOnline () {
# tests if there is a connection to the web
if [ -e /usr/bin/wget ]; then
  wget -q --spider http://google.com
  if [ $? -eq 0 ]; then
    return 0 # success
  else
    return 1 # no connection found
  fi
else
  echo "wget not found in /usr/bin"
  echo "can't test for a web connection"
  echo "Assume there isn't one"
  return 1
fi
} # end testOnline
EOF
} # end testOnline
#
onlineNoWget () { # network wrapper through /dev/{udp,tcp}/host/port
    cat >> $Output << "EOF"
onlineNoWget () {
if : >/dev/tcp/8.8.8.8/53; then
  return 0 # connection found
else
  return 1 # no connection found
fi
} # end onlineNoWget
EOF
} # end onlineNoWget
#
copyPatches () {
# $1 is the section
# $2 is the source name
local section=$1
local sourceName=$2
echo "cp -v \${blfsfiles}/patches/${section}/${sourceName}*.patch ." >> $Output
} # end copyPatches
#
getURLandPkgvers () {
# $1 is the source name
# $2 is the associative array of package URLs
# $3 is the associative array of output filenames
# $4 is the associative array of input filenames
# the package URL, the input filename and the output filename are returned
# in a global array RtrnVals
local SourceName=$1
local -n packageURLs="$2"
local -n outputFilename="$3"
local -n inputFilename="$4"
local pkgURL pkgvers curVers II fileFnd
fileFnd=false
RtrnVals=""
# returns the pkgUrl, the output filename and the input filename
for II in "${!packageURLs[@]}"; do
  if [ "$II" = "$SourceName" ]; then # found the srcfile
    fileFnd=true
    pkgURL=${packageURLs[$II]}
    pkgvers=${outputFilename[$II]}
    curVers=${inputFilename[$II]}
    break
  fi
done
if ! $fileFnd; then return $RETURN_FNF; fi
RtrnVals[0]="$pkgURL"
RtrnVals[1]="$pkgvers"
RtrnVals[2]="$curVers"
return 0
} # end getURLandPkgvers
#
unpack () {
# $1 is the array holding the versions of packages, not in the book, for current section
# $2 is the associative array holding the Arch names and the source file stem names
# $3 is the associative array holding the src names and the URL for each source file
# $4 is the associative array holding the src names and the value is the output filename
# $5 is the associative array holding the src names and the value is the input filename
local -n notBookPkgVers="$1"
local -n srcFileStem="$2"
local -n srcURLs="$3"
local -n opFilename="$4"
local -n ipFilename="$5"
local cur_vers curVers pkgvers pkgURL
#
#echo " srcname URL"
#for II in "${!srcURLs[@]}"; do
#  echo "$II --- ${srcURLs[$II]}"
#done
    cat >> $Output << "EOF"
unpack () {
starttime=$( date +%s )
EOF
# *** there is a (sort of) standard nomenclature here ***
# cur_vers is the version number
# curVers is the filename of the source to download, when it's different from pkgvers
# pkgvers is the output file name that is used in the commands
# pkgURL is the location of the file to download
#
case $srcname in
   apache-ant-)
     cur_vers=${notBookPkgVers[ant]}
     echo "pkgver=\"$cur_vers\"" >> $Output
     cat >> $Output << "EOF"
# get the apache-ant src
if [ -e ${CUR_DIR}/${SrcName}*-src.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that one"
elif [ -e ${sourcedir}/${SrcName}*-src.tar.*z* ]; then # src exists so copy it to current dir
  cp -v ${sourcedir}/${SrcName}*.* . # cp any patches as well
else
  wget $wgetopts https://archive.apache.org/dist/ant/source/apache-ant-${pkgver}-src.tar.xz
fi
cd $(tar vxf ${SrcName}*-src.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   apache-maven-)
     cat >> $Output << "EOF"
pkgvers=3.6.3
pkgURL="https://www-eu.apache.org/dist/maven/maven-3/${pkgvers}/source/
if [ -e ${CUR_DIR}/${SrcName}*-src.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that one"
elif [ -e ${sourcedir}/${SrcName}*-src.tar.*z* ]; then # src exists so copy it to current dir
  cp -v ${sourcedir}/${SrcName}*.* . # copy the binary as well
else
  if hash wget &> /dev/null; then # wget installed so try and get the source
    wget $wgetopts ${pkgURL}/${SrcName}-${pkgvers}-src.tar.gz
  else
    echo "wget not installed"
    echo "Cannot get source file for $SrcName - exit now"
    exit 1
  fi
fi
cd $(tar vxf ${SrcName}*-src.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   audioencoder.flac|audioencoder.lame|audioencoder.vorbis|audioencoder.wav)
     gitClone $srcname "https://github.com/xbmc"
   ;;
   avr-binutils-) # usr the core/binutils source file
    cat >> $Output << "EOF"
cp -v ${blfsfiles}/patches/avr/binutils*.patch .
cd $(tar vxf ${sourcedir}/binutils-*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   avr-gcc-) # use the core/gcc source file
    cat >> $Output << "EOF"
cd $(tar vxf ${sourcedir}/gcc-*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   bbswitch-) # src not in the book - in the nvidia section
     cur_vers=${notBookPkgVers[bbswitch]}
     curVers=v${cur_vers}.tar.gz
     pkgvers="${srcname}${cur_vers}.tar.gz"
     pkgURL=https://github.com/Bumblebee-Project/bbswitch/archive/
     wgetWrite $curVers $pkgURL $pkgvers false false true
     if [ $? -eq $RETURN_PARAM ]; then
       echo 'echo "***FATAL ERROR***"'
       echo 'echo "$3 not specified in wgetWrite call for bbswitch"'
       echo 'echo "provide this parameter in the script to continue"'
       echo "exit 1"
     fi
   ;;
   boost_)
      getSrcLocal "*" "*.*" true
   ;;
   chromium-) # no longer in the book (07/19) so install a binary instead
# need to get the google-chrome-stable deb file and the flash_player file
     if [ "$BOOK_VERSION" != arch ]; then
       cat >> $Output << "EOF"
pkgver="76.0.3809.100"
flash_vers="32.0.0.223"
chr_launch_vers="5"
if [ -e ${CUR_DIR}/${GoogleDebFile}${pkgver}*.deb ]; then
  echo "${GoogleDebFile}${pkgver} deb file already in current dir - will use that one"
elif [ -e ${sourcedir}/${GoogleDebFile}${pkgver}*.deb ]; then
  cp -v ${sourcedir}/${GoogleDebFile}${pkgver}*.deb .
else # download it
  if [ -e /usr/bin/wget ]; then
    wget $wgetopts http://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/${GoogleDebFile}${pkgver}-1_amd64.deb
  else
    echo "No $GoogleDebFile deb file found"
    echo "Place it in $sourcedir to continue"
    exit 1
  fi
fi
if [ -e ${CUR_DIR}/${FlashPlayer}*tar.*z* ]; then
  echo "$FlashPlayer file already in current dir - will use that one"
elif [ -e ${sourcedir}/${FlashPlayer}*tar.*z* ]; then
  cp -v ${sourcedir}/${FlashPlayer}*.* .
else # download it
  if [ -e /usr/bin/wget ]; then
    wget $wgetopts https://fpdownload.adobe.com/pub/flashplayer/pdc/${flash_vers}/${FlashPlayer}.x86_64.tar.gz
  else
    echo "*** File $FlashPlayer not found ***"
    echo "You need to download it"
    exit 1
  fi
fi
if [ -e ${CUR_DIR}/${ChrLauncher}*.tar.*z* ]; then
  echo "$ChrLauncher file already in current dir - will use that one"
elif [ -e ${sourcedir}/${ChrLauncher}*.tar.*z* ]; then
  cp -v ${sourcedir}/${ChrLauncher}*.tar.*z* .
else # download it
  if [ -e /usr/bin/wget ]; then
    wget https://github.com/foutrelis/chromium-launcher/archive/v${chr_launch_vers}.tar.gz \
     -O ${ChrLauncher}${chr_launch_vers}.tar.gz
  else
    echo "*** File $ChrLauncher not found ***"
    echo "You need to download it"
    exit 1
  fi
fi
if [ -e ${CUR_DIR}/chromium-${pkgver}.txt ]; then
  echo "chromium-${pkgver}.txt file already in current dir - will use that one"
else # download it
  if [ -e /usr/bin/wget ]; then
    wget -O chromium-${pkgver}.txt https://chromium.googlesource.com/chromium/src.git/+/${pkgver}?format=TEXT
  else
    echo "*** File chromium-${pkgver}.txt not found ***"
    echo "You need to download it"
    exit 1
  fi
fi
# copy any patches and the build-hash
cp -v ${blfsfiles}/patches/browser/chromium*.patch .
if [ -e ${CUR_DIR}/${SrcName}${pkgver}.tar.*z* ]; then
  echo "${SrcName}${pkgver} already in current dir - will use that one"
elif [ -e ${sourcedir}/${SrcName}${pkgver}.tar.*z* ]; then
  cp -v ${sourcedir}/${SrcName}${pkgver}.tar.*z* .
else
  if [ -e /usr/bin/wget ]; then
    wget $wgetopts https://commondatastorage.googleapis.com/chromium-browser-official/${SrcName}${pkgver}.tar.xz
  else
    echo "wget not installed"
    echo "Cannot get source file for $SrcName - exit now"
    exit 1
  fi
fi
cd $(tar vxf ${SrcName}${pkgver}.tar.*z* | awk -F\/ 'END{print $1}')
EOF
     else # Arch binary
       getSrcLocal "*" "*.*" false
       echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
     fi
   ;;
   codelite)
     gitClone $srcname "https://github.com/eranif"
   ;;
   coin)
     cat >> $Output << "EOF"
if [ ! -d coin ]; then
  svn co --username anonymous --password emergent https://grey.colorado.edu/svn/coin3d/coin/trunk coin
fi
cd coin
EOF
   ;;
   cracklib-|libnl-) #  not cracklib-words or libnl-docs
     if [ "$BOOK_VERSION" = arch ]; then
       getSrcLocal "[0-9]*" "[0-9]*" false
       echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
     else
       getSrcLocal "[0-9]*" "*.*" true
     fi
   ;;
   cuda_) # src not in the book
     cur_vers=${notBookPkgVers[cuda]}
     for I in "${!srcURLs[@]}"; do
       if [ "$I" = "$srcname" ]; then # found the srcfile
         pkgURL=${srcURLs[$I]}
         pkgvers=${opFilename[$I]}
         break
       fi
     done
     echo "pkgVers=$cur_vers
_driverver=455.32.00" >> $Output
     wgetWrite $pkgvers $pkgURL "" true false true
     echo "cp \${blfsfiles}/conf-files/{cuda.conf,cuda.sh} .
cp -v \${blfsfiles}/patches/programming/cuda-*.diff .
if [ ! -d pkg ]; then
  sh \$outputFile -extract=\$CUR_DIR
  ./cuda-*.run --noexec --keep
  ./cuda-samples*.run --noexec --keep
fi" >> $Output
   ;;
   cups-2.) # need  patches from patches/pst
     cat >> $Output << "EOF"
# cp -v ${blfsfiles}/patches/pst/cups-*.patch . # applied as seds in the commands
EOF
    getSrcLocal "*" "*.*" true
   ;;
# sources (mostly python-modules) not in any BLFS book that need --no-check-certificate on wget
   appdirs-|backports.functools_lru_cache-|backports.os-|Beaker-|beautifulsoup4-|ccache-|contextlib2-|cssselect-|cycler-|cython-|python-dateutil-|decorator-|future-|idna-|importlib_metadata-|kiwisolver-|libnftnl-|matplotlib-|numpy-|ordered-set-|packaging-|path-|pexpect-|pickleshare-|Pillow-|prompt_toolkit-|ptyprocess-|pybind11-|pycryptodome-|pycryptodomex-|Pygments-|python2-backports.shutil_|pyparsing_|python-soupsieve-|pytz-|scandir-|py2-setuptools-|python-slip-|scipy-|setuptools-|setuptools_scm-|simplejson-|sip-|tdb-|wcwidth-)
     case $srcname in
        appdirs-) # src not in the book.
            cur_vers=${notBookPkgVers[python-appdirs]}
            getURLandPkgvers $srcname srcURLs opFilename ipFilename
            pkgURL=${RtrnVals[0]}
            pkgvers=${RtrnVals[1]}
        ;;
        backports.functools_lru_cache-) # src not in the book
            cur_vers=1.6.1
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=https://pypi.io/packages/source/b/backports.functools_lru_cache/
        ;;
        backports.os-)
            cur_vers=0.1.1
	    pkgvers=${srcname}${cur_vers}.tar.gz
	    pkgURL=https://pypi.io/packages/source/b/backports.os/
	;;
        Beaker-)
	    cur_vers=${notBookPkgVers[python-beaker]}
            getURLandPkgvers $srcname srcURLs opFilename ipFilename
            if [ $? -eq $RETURN_FNF ]; then
              echo "Return value from getURLandPkgvers is $RETURN_FNF"
	      echo "Aborting"
              exit 1
            fi
            pkgURL=${RtrnVals[0]}
            pkgvers=${RtrnVals[1]}
	    curVers=${RtrnVals[2]}
	;;
        beautifulsoup4-) # src not in the book
            cur_vers=${notBookPkgVers[python-beautifulsoup4]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        ccache-) # src not in the book
            cur_vers=${notBookPkgVers[ccache]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        contextlib2-)
            cur_vers=0.6.0.post1
	    pkgvers=${srcname}${cur_vers}.tar.gz
	    pkgURL=https://files.pythonhosted.org/packages/02/54/669207eb72e3d8ae8b38aa1f0703ee87a0e9f88f30d3c0a47bebdb6de242/
        ;;
        cssselect-) # src not in the book
            cur_vers=${notBookPkgVers[python-cssselect]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                curVers=${ipFilename[$I]}
                break
              fi
            done
        ;;
        cycler-)
            cur_vers=${notBookPkgVers[python-cycler]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                curVers=${ipFilename[$I]}
                break
              fi
            done
	;;
        cython-) # src not in the book
            cur_vers=${notBookPkgVers[cython]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                curVers=${ipFilename[$I]}
                break
              fi
            done
        ;;
        python-dateutil-) # src not in the book
            cur_vers=${notBookPkgVers[python-dateutil]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        decorator-) # src not in the book
            cur_vers=${notBookPkgVers[python-decorator]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        future-)
            cur_vers=${notBookPkgVers[python-future]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
	;;
        idna-) # src not in the book
            cur_vers=2.10
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=https://pypi.io/packages/source/i/idna/
        ;;
        importlib_metadata-)
            cur_vers=${notBookPkgVers[python-importlib-metadata]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
	;;
        kiwisolver-)
            cur_vers=${notBookPkgVers[python-kiwisolver]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                curVers=${ipFilename[$I]}
                break
              fi
            done
        ;;
        libnftnl-)
            cur_vers=${notBookPkgVers[libnftnl]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        Mako-)
	    cur_vers=${notBookPkgVers[python-mako]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
	;;
        matplotlib-)
            cur_vers=${notBookPkgVers[python-matplotlib]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                curVers=${ipFilename[$I]}
                break
              fi
            done
            echo "cp \${blfsfiles}/matplotlib/setup.cfg ." >> $Output
        ;;
        numpy-) # src not in the book
            cur_vers=${notBookPkgVers[python-numpy]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                curVers=${ipFilename[$I]}
                break
              fi
            done
        ;;
        ordered-set-)
            cur_vers=${notBookPkgVers[python2-ordered-set]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        packaging-) # src not in the book
            cur_vers=${notBookPkgVers[python-packaging]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        path-) # src not in the book
            cur_vers=${notBookPkgVers[python-path]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                curVers=${ipFilename[$I]}
                break
              fi
            done
        ;;
        pexpect-) # src not in the book
            cur_vers=${notBookPkgVers[python-pexpect]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        pickleshare-) # src not in the book
            cur_vers=${notBookPkgVers[python-pickleshare]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        Pillow-)
            cur_vers=${notBookPkgVers[python2-pillow]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        prompt_toolkit-) # src not in the book
            cur_vers=${notBookPkgVers[python-prompt_toolkit]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        ptyprocess-) # src not in the book
            cur_vers=${notBookPkgVers[python-ptyprocess]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        pybind11-)
            cur_vers=${notBookPkgVers[pybind11]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        pycryptodome-)
	    cur_vers=${notBookPkgVers[python-pycryptodome]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                curVers=${ipFilename[$I]}
                break
              fi
            done
	;;
        pycryptodomex-)
            cur_vers=${notBookPkgVers[python-pycryptodomex]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                curVers=${ipFilename[$I]}
                break
              fi
            done
        ;;
        Pygments-) # src not in the book
            cur_vers=${notBookPkgVers[python-pygments]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        python2-backports.shutil_) # src not in the book
            cur_vers=1.0.0
            curVers="v${cur_vers}.tar.gz"
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=https://github.com/chrippa/backports.shutil_get_terminal_size/archive/
        ;;
        pyparsing_)
            cur_vers=${notBookPkgVers[python-pyparsing]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        python-soupsieve-) # src not in the book
            cur_vers=${notBookPkgVers[python-soupsieve]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        pytz-) # src not in the book
            cur_vers=${notBookPkgVers[python-pytz]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        scandir-) # src not in the book
            cur_vers=1.10.0
            curVers="v${cur_vers}.tar.gz"
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=https://github.com/benhoyt/scandir/archive/
        ;;
        py2-setuptools-) # the py2 source is now (05/2020) different from the py3 source
            cur_vers=${notBookPkgVers[python2-setuptools]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                curVers=${ipFilename[$I]}
                break
              fi
            done
        ;;
        python-slip-)
            cur_vers=${notBookPkgVers[python-slip]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        scipy-)
            cur_vers=${notBookPkgVers[python-scipy]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        setuptools-) # src not in the book
            cur_vers=${notBookPkgVers[python-setuptools]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                curVers=${ipFilename[$I]}
                break
              fi
            done
        ;;
        setuptools_scm-) # src not in the book
            cur_vers=${notBookPkgVers[python-setuptools-scm]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        simplejson-)
            cur_vers=${notBookPkgVers[python-simplejson]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                curVers=${ipFilename[$I]}
                break
              fi
            done
        ;;
        sip-) # src not in the book
            cur_vers=${notBookPkgVers[sip]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        tdb-) # src not in the book
            cur_vers=${notBookPkgVers[tdb]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        wcwidth-) # src not in the book
            cur_vers=${notBookPkgVers[python-wcwidth]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
     esac
     echo "pkgVers=$cur_vers" >> $Output
     case $srcname in
        cython-|"python2-backports.shutil_")
          wgetWrite $curVers $pkgURL $pkgvers false true true
        ;;
        Beaker-|cssselect-|cycler-|kiwisolver-|matplotlib-|numpy-|path-|pycryptodome-|py2-setuptools-|scandir-|setuptools-)
          wgetWrite $curVers $pkgURL $pkgvers false false true
        ;;
        *)
          wgetWrite $pkgvers $pkgURL $pkgvers false true true
        ;;
     esac
   ;;
# sources not in any BLFS book
   appstream-glib-|Audacity-|avr-libc-|bash-completion-|celt-|chardet-|confuse-|dialog|dmenu2-|dotconf-|espeak-|farstream-|feh-|fmt-|gcab-|hplip-|hyphen-|i3-|i3lock-|i3status-|ijs-|jack2-|requests-|lapack-|libdazzle-|libedit-|libev-|libgnome-keyring-|libgphoto2-|libnice-|libproxy-|libsass-|libssh-|libunwind-|libvirt-|lilv-|lv2-|media-player-info-|menumaker-|netctl-|nftables-|nltk-|nodejs-|nss-mdns-|ode-|openvpn-|pa_stable_|pkcs11-helper-|ply-|pyasn1-|PyQt5_gpl-|PySocks-|PySolFC-|qtbase-everywhere-src-|qtsvg-everywhere-src-|qtx11extras-everywhere-src-|ragel-|re2-|sassc-|scikit-learn-|Scrapy-|sddm-|serd-|snappy-|sord-|speech-dispatcher-|squid-|sratom-|termcap-|Theano-|tor-|urllib3-|vamp-plugin-sdk-|waf-|wavpack-|weston-|windscribe-|wxWidgets-|yajl-|yaml-|x264-snapshot-)
     local switch=true
     case $srcname in
	appstream-glib-)
	    cur_vers=${notBookPkgVers[appstream-glib]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
	;;
	Audacity-)
	    cur_vers=2.4.1
	    pkgvers=${srcname}${cur_vers}.tar.gz
	    pkgURL=https://github.com/audacity/audacity/archive/
	;;
        avr-libc-) # src not in the book
            cur_vers=2.0.0
            pkgvers=${srcname}${cur_vers}.tar.bz2
            pkgURL=http://download.savannah.gnu.org/releases/avr-libc/
        ;;
        bash-completion-)
            cur_vers=${notBookPkgVers[bash-completion]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
	;;
        celt-)
	    cur_vers=${notBookPkgVers[celt]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
	;;
        chardet-) # src not in the book
            cur_vers=3.0.4
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=https://pypi.python.org/packages/fc/bb/a5768c230f9ddb03acc9ef3f0d4a3cf93462473795d18e9535498c8f929d/
        ;;
        confuse-) # src not in the book
            cur_vers=3.2.2
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=http://savannah.nongnu.org/download/confuse/
        ;;
        dialog)
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        dmenu-) # src not in the book
            cur_vers=4.9
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=https://dl.suckless.org/tools/
        ;;
        dotconf-) # src not in the book
            cur_vers=${notBookPkgVers[dotconf]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                curVers=${ipFilename[$I]}
                break
              fi
            done
        ;;
        espeak-) # src not in the book
            cur_vers=${notBookPkgVers[espeak]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                curVers=${ipFilename[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        farstream-) # src not in the book
            copyPatches $Section $srcname 
            cur_vers=${notBookPkgVers[farstream]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        feh-) # src not in the book
            cur_vers=3.1.3
            pkgvers=${srcname}${cur_vers}.tar.bz2
            pkgURL=http://feh.finalrewind.org/
        ;;
        fmt-) # src not in the book
            cur_vers=5.3.0
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=https://github.com/fmtlib/fmt/archive/
        ;;
        gcab-)
	    cur_vers=${notBookPkgVers[gcab]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
	;;
        hplip-) # src not in the book
            copyPatches $Section $srcname
            cur_vers=3.17.11
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=https://downloads.sourceforge.net/hplip/
        ;;
        hyphen-)
	    cur_vers=${notBookPkgVers[hyphen]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
	;;
        i3-) # src not in the book
            cur_vers=4.16.1
            pkgvers=${srcname}${cur_vers}.tar.bz2
            pkgURL=http://i3wm.org/downloads/
        ;;
        i3lock-) # src not in the book
            cur_vers=2.11.1
            pkgvers=${srcname}${cur_vers}.tar.bz2
            pkgURL=http://i3wm.org/i3lock/
        ;;
        i3status-) # src not in the book
            cur_vers=2.12
            pkgvers=${srcname}${cur_vers}.tar.bz2
            pkgURL=http://i3.zekjur.net/i3status/
        ;;
        ijs-)
	    cur_vers=${notBookPkgVers[ijs]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
	;;
        jack2-)
	    cur_vers=${notBookPkgVers[jack2]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                curVers=${ipFilename[$I]}
                break
              fi
            done
	;;
        lapack-) # src not in the book
            cur_vers=${notBookPkgVers[lapack]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                curVers=${ipFilename[$I]}
                break
              fi
            done
        ;;
        libdazzle-)
            cur_vers=${notBookPkgVers[libdazzle]}
            pkgvers=${srcname}${cur_vers}.tar.xz
	;;
        libedit-) # src not in the book
            cur_vers=${notBookPkgVers[libedit]}
            cur_vers=${cur_vers/_/-} # Arch changed it to _ so change it back to -
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        libev-) # src not in the book
            cur_vers=${notBookPkgVers[libev]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        libgnome-keyring-) # src not in the book
            cur_vers=3.12.0
            pkgvers=${srcname}${cur_vers}.tar.xz
            pkgURL=${gnomeBaseURL}/libgnome-keyring/3.12/
        ;;
        libgphoto2-) # src not in the book
            cur_vers=${notBookPkgVers[libgphoto2]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        libnice-) # src not in the book
            cur_vers=${notBookPkgVers[libnice]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        libproxy-)
#            copyPatches $Section $srcname
            cur_vers=${notBookPkgVers[libproxy]}
           for I in "${!srcURLs[@]}"; do
             if [ "$I" = "$srcname" ]; then # found the srcfile
               pkgURL=${srcURLs[$I]}
               pkgvers=${opFilename[$I]}
               break
             fi
           done
        ;;
        libsass-)
            cur_vers=${notBookPkgVers[libsass]}
            libsass_vers=$cur_vers # used in the configure so store it
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                curVers=${ipFilename[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        libssh-) # src not in the book
            cur_vers=${notBookPkgVers[libssh]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        libunwind-) # src not in the book
            cur_vers=${notBookPkgVers[libunwind]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        libvirt-) # src not in the book
            cur_vers=5.5.0
            pkgvers=${srcname}${cur_vers}.tar.xz
            pkgURL=http://libvirt.org/sources/
        ;;
        lilv-) # src not in the book
            cur_vers=${notBookPkgVers[lilv]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        lv2-) # src not in the book
            cur_vers=${notBookPkgVers[lv2]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        media-player-info-) # src not in the book
            cur_vers=${notBookPkgVers[media-player-info]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        menumaker-) # src not in the book
            cur_vers=0.99.12
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=http://downloads.sourceforge.net/menumaker/
        ;;
        netctl-) # src not in the book
            cur_vers=${notBookPkgVers[netctl]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        nftables-)
            cur_vers=${notBookPkgVers[nftables]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        nltk-) # src not in the book
            cur_vers=${notBookPkgVers[python-nltk]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                curVers=${ipFilename[$I]}
                break
              fi
            done
        ;;
        nodejs-) # src not in the book
            cur_vers=${notBookPkgVers[nodejs]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                curVers=${ipFilename[$I]}
                break
              fi
            done
        ;;
        nss-mdns-) # src not in the book
            cur_vers=${notBookPkgVers[nss-mdns]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        ode-) # src not in the book
            cur_vers=0.16.1
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=https://bitbucket.org/odedevs/ode/downloads/
        ;;
        openvpn-) # src not in the book
            cur_vers=${notBookPkgVers[openvpn]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        pa_stable_)  # src not in the book
            cur_vers=${notBookPkgVers[portaudio]}
            _version="190600_20161030" # the version of the input file
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                curVers=${ipFilename[$I]}
                break
              fi
            done
            echo "_version=$_version" >> $Output
        ;;
        pkcs11-helper-) # src not in the book
            cur_vers=${notBookPkgVers[pkcs11-helper]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        ply-)
            cur_vers=${notBookPkgVers[python-ply]}
	    pkgvers=${srcname}${cur_vers}.tar.gz
	    pkgURL=http://www.dabeaz.com/ply/
	;;
        pyasn1-) # src not in the book
            cur_vers=0.4.5
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=https://pypi.io/packages/source/p/pyasn1/
        ;;
        PyQt5_gpl-) # src not in the book
            cur_vers=${notBookPkgVers[python-pyqt5]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        PySocks-) # src not in the book
            cur_vers=1.6.8
            curVers="${cur_vers}.tar.gz"
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=https://github.com/Anorov/PySocks/archive/
        ;;
        PySolFC-) # src not in the book
            cur_vers=${notBookPkgVers[pysolfc]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        qtbase-everywhere-src-)
            cur_vers=${notBookPkgVers[qt5-base]}
            qt5basevers=$cur_vers # need to store this value
# get any patches
            cat >> $Output << "EOF"
# look for patches differently named from the src file
if [ -e ${sourcedir}/qt-*.patch ]; then
  cp -v ${sourcedir}/qt-*.patch .
fi
if [ -e ${blfsfiles}/patches/xlibs/qtbase*.patch ]; then
  cp -v ${blfsfiles}/patches/xlibs/qtbase*.patch .
fi
EOF
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        qtsvg-everywhere-src-)
            cur_vers=${notBookPkgVers[qt5-svg]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        qtx11extras-everywhere-src-)
            cur_vers=${notBookPkgVers[qt5-x11extras]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        ragel-) # src not in the book
            cur_vers=6.10
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=http://fossies.org/linux/misc/
        ;;
        re2-)
            cur_vers=${notBookPkgVers[re2]} # the file to get is of the form 2019-10-26 so add the hyphens
            cur_vers="${cur_vers:0:4}-${cur_vers:4:2}-${cur_vers:6:2}"
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                curVers=${ipFilename[$I]}
                break
              fi
            done
        ;;
        requests-) # src not in the book
            cur_vers=2.22.0
	    echo cur_vers=$cur_vers >> $Output
            echo "cp \${blfsfiles}/patches/pythonmodules/requests-\${cur_vers}-cacerts-1.patch ." >> $Output
            curVers="v${cur_vers}.tar.gz"
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=https://github.com/kennethreitz/requests/archive/
        ;;	
        sassc-)
            cur_vers=${notBookPkgVers[sassc]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;    
        scikit-learn-) # src not in the book
            cur_vers=${notBookPkgVers[python-scikit-learn]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                curVers=${ipFilename[$I]}
                break
              fi
            done
        ;;
        Scrapy-) # src not in the book
            cur_vers=1.6.0
	    curVers="${cur_vers}.tar.gz"
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=https://github.com/scrapy/scrapy/archive/
        ;;
        sddm-) # src not in the book
            echo "cp \${blfsfiles}/conf-files/sddm* ." >> $Output
            cur_vers=0.19.0
            curVers="v${cur_vers}.tar.gz"
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=https://github.com/${pkgname}/${pkgname}/archive/
        ;;
        serd-) # src not in the book
            cur_vers=${notBookPkgVers[serd]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        snappy-) # src not in the book
            echo "cp \${blfsfiles}/snappy/snappy.pc ." >> $Output
            cur_vers=${notBookPkgVers[snappy]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                curVers=${ipFilename[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        sord-) # src not in the book
            cur_vers=${notBookPkgVers[sord]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        speech-dispatcher-) # src not in the book
            cur_vers=${notBookPkgVers[libspeechd]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        squid-) # src not in the book
#            copyPatches $Section $srcname // don't need the patch with current version
            cur_vers=${notBookPkgVers[squid]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        sratom-) # src not in the book
            cur_vers=${notBookPkgVers[sratom]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        termcap-) # src not in the book
            cur_vers=1.3.1
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=http://ftp.gnu.org/gnu/termcap/
        ;;
        Theano-) # src not in the book
            cur_vers=1.0.4
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=https://files.pythonhosted.org/packages/7d/c4/6341148ad458b6cd8361b774d7ee6895c38eab88f05331f22304c484ed5d/
        ;;
        tor-) # src not in the book
            cur_vers=0.3.4.9
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=https://www.torproject.org/dist/
        ;;
        urllib3-) # src not in the book
            cur_vers=${notBookPkgVers[python-urllib3]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                curVers=${ipFilename[$I]}
                break
              fi
            done
        ;;
        vamp-plugin-sdk-) # src not in the book
            cur_vers=${notBookPkgVers[vamp-plugin-sdk]}
	    local _vampdir=2691
            echo "_vampdir=$_vampdir" >> $Output
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        waf-)
            cur_vers=${notBookPkgVers[waf]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        wavpack-) # src not in the book
            cur_vers=${notBookPkgVers[wavpack]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        weston-) # src not in the book
            cur_vers=${notBookPkgVers[weston]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        windscribe-) # src not in the book
            cur_vers=1.1-1
            pkgvers="${srcname}cli-${cur_vers}.x64.rpm"
            pkgURL=https://windscribe.com/install/desktop/linux_rpm/
        ;;
        wxWidgets-) # src not in the book
            copyPatches $Section $srcname
	    cur_vers=${notBookPkgVers[wxgtk3]}
            pkgvers=${srcname}${cur_vers}.tar.bz2
	    pkgURL=https://github.com/wxWidgets/wxWidgets/releases/download/v${cur_vers}/
        ;;
        yajl-) # get the source from github
            cur_vers=${notBookPkgVers[yajl]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                curVers=${ipFilename[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
	;;
        yaml-)
	    cur_vers=${notBookPkgVers[libyaml]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
	;;
        x264-snapshot-)
            pkgvers=${srcname}20191013-2245-stable.tar.bz2
            pkgURL=ftp://ftp.videolan.org/pub/x264/snapshots/
        ;;
     esac
     echo "pkgVers=$cur_vers" >> $Output
     case $srcname in
        dotconf-|jack2-|lapack-|nltk-|nodejs-|pa_stable_|PySocks-|re2-|requests-|scikit-learn-|sddm-|snappy-|urllib3-|yajl-)
	  if [ "$BOOK_VERSION" = arch ]; then # don't write the cd line
            wgetWrite $curVers $pkgURL $pkgvers true true false false true
	    echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
	  else
            wgetWrite $curVers $pkgURL $pkgvers false true true
	  fi
        ;;
        espeak-)
          if [ "$BOOK_VERSION" = arch ]; then # don't write the cd line
	    wgetWrite $pkgvers $pkgURL "" true false false false true
	    echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
	  else
            wgetWrite $pkgvers $pkgURL "" true false true
            cat >> $Output << "EOF"
espeakDir="${outputFile%.zip}"
unzip $outputFile
cd $espeakDir
EOF
          fi
        ;;
        libsass-)
          if [ "$BOOK_VERSION" = arch ]; then # don't write the cd line and use SrcName not outputFile name
            wgetWrite $pkgvers $pkgURL "" true false false false true
            echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
          else
            wgetWrite $curVers $pkgURL $pkgvers false true $switch # need ncc
          fi
	;;
        windscribe-)
          wgetWrite $pkgvers $pkgURL "" true false true
        ;;
        libdazzle-) # from the gnome sources website
          gnmComsWrite $srcname $pkgvers
        ;;
        nftables-|vamp-plugin-sdk-|waf-) # need -ncc
          if [ "$BOOK_VERSION" = arch ]; then # don't write the cd line and use SrcName not outputFile name
            wgetWrite $pkgvers $pkgURL "" true false false false true
            echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
          else
            wgetWrite $pkgvers $pkgURL "" false true $switch
          fi
        ;;
        *)
	  if [ "$BOOK_VERSION" = arch ]; then # don't write the cd line and use SrcName not outputFile name
	    wgetWrite $pkgvers $pkgURL "" true false false false true
	    echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
	  else
            wgetWrite $pkgvers $pkgURL "" false false $switch
	  fi
        ;;
     esac
     switch=true
   ;;
# openelec sources
   busybox-|cmocka-|crda-|dav1d-|enca-|ethtool-|glew-|lcdproc-|libaacs-|libbluray-|libcddb-|libcec-|libftdi-|libmicrohttpd-|libmodplug-|libnfs-|libplist-|lirc-|lockdev_|M2Crypto-|p8-platform-|SDL_image-|setconf-|sysfsutils-|tinyxml_|vdpauinfo-|wireless-regdb-)
     case $srcname in
        busybox-)
            cur_vers=1.30.1
            pkgvers=${srcname}${cur_vers}.tar.bz2
            pkgURL=http://www.busybox.net/downloads/
        ;;
        cmocka-)
            cur_vers=${notBookPkgVers[cmocka]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        crda-)
            copyPatches $Section $srcname
            echo "if [ ! -e regulatory.bin ]; then
  cp \${blfsfiles}/conf-files/regulatory.bin .
fi" >> $Output
            cur_vers=4.14
            pkgvers=${srcname}${cur_vers}.tar.xz
            pkgURL=https://kernel.org/pub/software/network/crda/
        ;;
        dav1d-)
            cur_vers=${notBookPkgVers[dav1d]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
	    ;;
        enca-)
            cur_vers=1.19
            pkgvers=${srcname}${cur_vers}.tar.xz
            pkgURL=http://dl.cihar.com/enca/
        ;;
        ethtool-)
            cur_vers=5.1
            pkgvers=${srcname}${cur_vers}.tar.xz
            pkgURL=https://www.kernel.org/pub/software/network/ethtool/
        ;;
        glew-)
            copyPatches $Section $srcname
            cur_vers=${notBookPkgVers[glew]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        lcdproc-)
            cur_vers=0.5.9
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=http://downloads.sourceforge.net/lcdproc/
        ;;
        libaacs-)
            cur_vers=${notBookPkgVers[libaacs]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        libbluray-)
            cur_vers=1.2.1
            pkgvers=${srcname}${cur_vers}.tar.bz2
            pkgURL=ftp://ftp.videolan.org/pub/videolan/libbluray/${cur_vers}/
        ;;
        libcddb-)
            cur_vers=1.3.2
            pkgvers=${srcname}${cur_vers}.tar.bz2
            pkgURL=http://downloads.sourceforge.net/sourceforge/libcddb/
        ;;
        libcec-)
            cur_vers=${notBookPkgVers[libcec]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        libftdi-)
            cur_vers=1.4
            pkgvers="libftdi1-${cur_vers}.tar.bz2"
            pkgURL=http://www.intra2net.com/en/developer/libftdi/download/
        ;;
        libmicrohttpd-)
            cur_vers=${notBookPkgVers[libmicrohttpd]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        libmodplug-)
            cur_vers=${notBookPkgVers[libmodplug]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        libnfs-)
            cur_vers=${notBookPkgVers[libnfs]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        libplist-)
            cur_vers=${notBookPkgVers[libplist]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                curVers=${ipFilename[$I]}
                break
              fi
            done
        ;;
        lirc-)
            cur_vers=${notBookPkgVers[lirc]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        lockdev_)
            copyPatches $Section $srcname
            cur_vers=${notBookPkgVers[lockdev]}
	    cur_vers=$(echo $cur_vers | awk -F\_ '{print $1}') # remove the bit after the _
            pkgvers=${srcname}${cur_vers}.orig.tar.gz
            pkgURL=http://ftp.debian.org/debian/pool/main/l/lockdev/
        ;;
        M2Crypto-)
            cur_vers=0.34.0
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=https://pypi.python.org/packages/source/M/M2Crypto/
        ;;
        p8-platform-)
            cur_vers=${notBookPkgVers[p8-platform]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        SDL_image-)
            cur_vers=1.2.12
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=http://www.libsdl.org/projects/SDL_image/release/
        ;;
        setconf-)
            cur_vers=${notBookPkgVers[setconf]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        sysfsutils-)
            cur_vers=2.1.0
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=http://downloads.sourceforge.net/sourceforge/linux-diag/
        ;;
        tinyxml_)
            copyPatches $Section $srcname
            echo "cp \${blfsfiles}/tinyxml/tinyxml.pc ." >> $Output
            cur_vers=${notBookPkgVers[tinyxml]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        vdpauinfo-)
            cur_vers=1.4
            pkgvers=${srcname}${cur_vers}.tar.gz
            pkgURL=http://people.freedesktop.org/~aplattner/vdpau/
        ;;
        wireless-regdb-)
            cur_vers=2020.04.29
            pkgvers=${srcname}${cur_vers}.tar.xz
            pkgURL=https://www.kernel.org/pub/software/network/wireless-regdb/
        ;;
     esac
     echo "pkgVers=$cur_vers" >> $Output
     case $srcname in
        libplist-)
          if [ "$BOOK_VERSION" = arch ]; then # don't write the cd line
            wgetWrite $curVers $pkgURL $pkgvers true true false false true
            echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
          else
            wgetWrite $curVers $pkgURL $pkgvers false true true
          fi
        ;;
        *)
          if [ "$BOOK_VERSION" = arch ]; then
            wgetWrite $pkgvers $pkgURL "" true false false false true
            echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
          else
            wgetWrite $pkgvers $pkgURL $pkgvers false false true
          fi
        ;;
     esac
   ;;
   bumblebee-)
     echo "cp \${blfsfiles}/patches/${section}/000*-bb_*.patch ." >> $Output
     echo "cp \${blfsfiles}/conf-files/bumblebee.conf ." >> $Output
     cur_vers=${notBookPkgVers[bumblebee]}
     pkgvers=${srcname}${cur_vers}.tar.gz
     pkgURL=http://www.bumblebee-project.org/
     wgetWrite $pkgvers $pkgURL "" true false true
     cat >> $Output << "EOF"
gunzip $outputFile
fileNogz=${outputFile/.gz/}
cd $(tar vxf $fileNogz | awk -F\/ 'END{print $1}')
EOF
   ;;
   crossguid-) # openelec src not in the book
     gitClone ${srcname/-/} "https://github.com/graeme-hill" $srcname "" true
   ;;
   dbus-1.) # don't need to copy the src if using systemd
     local testNumber='^[0-9]+$' # test if a variable is a number
     if [ "$SYSTEMD" = yes ]; then
       if ! [[ $numdigit1 =~ $testNumber ]] ; then
	 echo "no version number found for dbus-
check if the src file is in ${LFS}${PKGUSERDIR}/core/dbus
*** WARNING - there is no cd line for dbus in $Output ***
*** Aborting ***" > /dev/tty # make sure this comes to the screen, not the script
         exit 1
       else # check number of digits in the version number
         if [ $numdigit1 -gt 9 ]; then # create the proper cd line because SrcName is dbus-1.
# TODO this doesn't work if the number after 1 is > 99
# it also doesn't work if the 1 becomes > 9
           if [ $numdigit2 -lt 10 ]; then
             cdline="cd \$(tar vxf \${SrcName}??.?.tar.*z* | awk -F\/ 'END{print \$1}')"
           else
             cdline="cd \$(tar vxf \${SrcName}??.??.tar.*z* | awk -F\/ 'END{print \$1}')"
           fi
         fi
       fi
       echo "$cdline" >> $Output
     else
       getSrcLocal "*" "*.*" true
     fi
   ;;
   dcadec-)
     cur_vers=0.2.0
     curVers="${cur_vers}.tar.gz"
     pkgvers=${srcname}${curVers}
     pkgURL=https://github.com/foo86/dcadec/archive/
     wgetWrite v$curVers $pkgURL $pkgvers false false true
   ;;
   docbook-xml-) # src is a zip file
    cat >> $Output << "EOF"
if [ -e ${CUR_DIR}/${SrcName}*.zip ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that one"
elif [ -e ${sourcedir}/${SrcName}*.zip ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
else
EOF
tryWgetSrc
    cat >> $Output << "EOF"
fi
for f in *.zip; do
docbookDir="${f%.zip}"
done
mkdir -pv $docbookDir
cd $docbookDir
unzip ../${SrcName}*.zip
EOF
   ;;
   dejavu-fonts-ttf-)
     cur_vers=${notBookPkgVers[ttf-dejavu]}
     pkgvers=${srcname}${cur_vers}.tar.bz2
     pkgURL=https://sourceforge.net/projects/dejavu/files/dejavu/${cur_vers}/
     wgetWrite $pkgvers $pkgURL $pkgvers false false true
   ;;
   docbook-xsl-)
     getSrcLocal "[0-9]*" "[0-9]*" true # get any patches but don't want the docs file
   ;;
   emergent)     
    cat >> $Output << "EOF"
if [ ! -d emergent ]; then
  svn co --username anonymous --password emergent https://grey.colorado.edu/svn/emergent/emergent/trunk emergent
fi
cd emergent
EOF
   ;;
   eudev-) # reinstalling so src already in place
    cat >> $Output << "EOF"
cd $(tar vxf ${SrcName}[0-9].[0-9].[0-9].tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   firefox-)
     if [ "$BOOK_VERSION" = arch ]; then
       getSrcLocal "*" "*.*" false
       echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
     else
       getSrcLocal "*" "*.*" true
     fi
   ;;
   flash_player_npapi_linux) # download the source and untar it
     if [ "$BOOK_VERSION" != arch ]; then
       cur_vers=${notBookPkgVers[flashplugin]}
       echo "pkgVers=$cur_vers" >> $Output
       for I in "${!srcURLs[@]}"; do
         if [ "$I" = "$srcname" ]; then # found the srcfile
           pkgURL=${srcURLs[$I]}
           pkgvers=${opFilename[$I]}
           break
         fi
       done
       wgetWrite $pkgvers $pkgURL "" true false true # don't write the cd line
       echo "tar zxf \$srcpkg" >> $Output
     else
       getSrcLocal "*" "*.*" false
       echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
     fi
   ;;
   fluxbox-) # cp the chosen theme tar file first
     cat >> $Output << "EOF"
if [ -e ${CUR_DIR}/fluxbox-light-themes*.tar.*z* ]; then
  echo "fluxbox-light-themes tar file already in current dir"
elif [ -f ${sourcedir}/fluxbox-light-themes*.tar.*z* ]; then
  cp -v ${sourcedir}/fluxbox-light-themes*.tar.*z* .
else
  echo "No fluxbox-light-themes found in $sourcedir"
  echo "Will download it now"
  wget $wgetopts https://launchpad.net/~l3on/+archive/ubuntu/themes/+sourcefiles/fluxbox-light-themes/14.04-0ubuntu1/fluxbox-light-themes_14.04.orig.tar.gz
fi
EOF
     getSrcLocal "[0-9]*" "[0-9]*" true
   ;;
   gexiv2)
     gitClone $srcname "https://git.gnome.org/browse"
   ;;  
   ghostscript-) # get the fonts too
     getSrcLocal "[0-9]*" "*.*" false
     cat >> $Output << "EOF"
fontloc=http://downloads.sourceforge.net/gs-fonts
standardfonts=ghostscript-fonts-std-8.11.tar.gz
extraFont=gnu-gs-fonts-other-6.0.tar.gz
if [ ! -e $standardfonts ]; then
  wget $wgetopts ${fontloc}/gs-fonts/${standardfonts}
fi
if [ ! -e $extraFont ]; then
  wget $wgetopts ${fontloc}/gs-fonts/${extraFont}
fi
count=0
for fl in *fonts*; do
  fontfile[$count]=$fl
  ((count++))
done
cd $(tar vxf ${SrcName}[0-9]*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   gimp-) # make sure the help file is present. If not download it
     getSrcLocal "[0-9]*" "*.*" false
     cat >> $Output << "EOF"
helpfile=gimp-help-2020-10-07.tar.xz
if [ ! -e $helpfile ]; then # download it
  wget $wgetopts http://anduin.linuxfromscratch.org/BLFS/gimp/${helpfile}
fi
cd $(tar vxf ${SrcName}[0-9]*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   git-|gnome-icon-theme-|freetype-|polkit-|poppler-) #  git man-pages and htmldocs, gnome-icon-theme-extras and symbolic, freetype-doc, polkit-gnome, poppler-data
     if [ "$BOOK_VERSION" = arch ]; then
       getSrcLocal "[0-9]*" "*.*" false
       echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
     else
       getSrcLocal "[0-9]*" "*.*" true
     fi
   ;;
   google-chrome-stable_) # this is the source for pepperflash
     pkgvers=${srcname}current_x86_64.rpm
     pkgURL=https://dl.google.com/linux/direct/
     wgetWrite $pkgvers $pkgURL "" false false true
   ;;
   grep-) # reinstalling so src already in place in /usr/src/core/grep
    cat >> $Output << "EOF"
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
#xlibs sources may be out of kilter with blfs
   amtk-|atk-|atkmm-|at-spi2-atk-|at-spi2-core-|cairomm-|clutter-gst-|clutter-gtk-|clutter-1.|cogl-|gdk-pixbuf-|gtk+-3.|gtkmm-3.|gtksourceview-3.|gtksourceview-4.|gtk-vnc|pango-|pangomm-|tepl-)
     gnmvers=""
     revsrcnm=""
     case $srcname in
       amtk-)
          cur_vers=${notBookPkgVers[amtk]}
       ;;
       atk-)
          cur_vers=${notBookPkgVers[atk]}
       ;;
       atkmm-)
          cur_vers=${notBookPkgVers[atkmm]}
       ;;
       at-spi2-atk-)
          cur_vers=${notBookPkgVers[at-spi2-atk]}
       ;;
       at-spi2-core-)
          cur_vers=${notBookPkgVers[at-spi2-core]}
       ;;
       cairomm-)
           cur_vers="1.14.0" # problem with vers 1.16.0
#          cur_vers=${notBookPkgVers[cairomm]}
       ;;
       clutter-gst-)
          cur_vers=${notBookPkgVers[clutter-gst]}
       ;;
       clutter-gtk-)
          cur_vers=${notBookPkgVers[clutter-gtk]}
       ;;
       clutter-1.)
          cur_vers=${notBookPkgVers[clutter]}
       ;;
       cogl-)
          cur_vers=${notBookPkgVers[cogl]}
       ;;
       gdk-pixbuf-)
          cur_vers=${notBookPkgVers[gdk-pixbuf2]}
       ;;
       gtk+-3.)
          cur_vers=${notBookPkgVers[gtk3]}
       ;;
       gtkmm-3.)
         cur_vers=${notBookPkgVers[gtkmm3]}
       ;;
       gtksourceview-3.)
         cur_vers=${notBookPkgVers[gtksourceview3]}
       ;;
       gtksourceview-4.)
         cur_vers=${notBookPkgVers[gtksourceview4]}
       ;;
       gtk-vnc-)
          cur_vers=${notBookPkgVers[gtk-vnc]}
       ;;
       pango-)
          cur_vers=${notBookPkgVers[pango]}
       ;;
       pangomm-)
          cur_vers=${notBookPkgVers[pangomm]}
       ;;
       tepl-)
          cur_vers=${notBookPkgVers[tepl]}
       ;;
     esac
     case $srcname in
        clutter-1.|gtk+-3.|gtkmm-3.|gtksourceview-3.|gtksourceview-4.)
          srcname=${srcname%??} # remove the <integer>.
        ;;
     esac
     pkgvers=${srcname}${cur_vers}.tar.xz
     if $useArchVersions; then # use version from Arch
       gnmComsWrite $srcname $pkgvers false false true
     else # use the downloaded src files
       getSrcLocal "*" "*.*" true
     fi
   ;;
   cairo-|colord-gtk-)
     case $srcname in
       cairo-)
          cur_vers=${notBookPkgVers[cairo]}
          for I in "${!srcURLs[@]}"; do
            if [ "$I" = "$srcname" ]; then # found the srcfile
              pkgURL=${srcURLs[$I]}
              pkgvers=${opFilename[$I]}
              break
            fi
          done
       ;;
       colord-gtk-)
          cur_vers=${notBookPkgVers[colord-gtk]}
          for I in "${!srcURLs[@]}"; do
            if [ "$I" = "$srcname" ]; then # found the srcfile
              pkgURL=${srcURLs[$I]}
              pkgvers=${opFilename[$I]}
              break
            fi
          done
       ;;
     esac
     echo "pkgVers=$cur_vers" >> $Output
     if $useArchVersions; then
       wgetWrite $pkgvers $pkgURL $pkgvers false false true true # cp any patches
     else
       case $srcname in
          cairo-)
            getSrcLocal "*" "*.*" true true # need to get a patch
          ;;
          colord-gtk-)
            getSrcLocal "*" "*.*" true
          ;;
       esac
     fi
   ;;
# get gnomeplatform sources
   dconf-|evolution-data-server-|folks-|GConf-|gcr-|geocode-glib-|gexiv2-|gjs-|gnome-autoar-|gnome-desktop-|gnome-menus-|gnome-online-accounts-|grilo-|gsettings-desktop-schemas-|gssdp-|gupnp-|gupnp-igd-|libchamplain-|libgdata-|libgee-|libgtop-|libgweather-|libpeas-|libsecret-|libwnck-3.|polkit-gnome-|rest-|totem-pl-parser-|tracker-2.|tracker-3.|tracker-miners-2.|tracker-miners-3.|vte-0.6|yelp-xsl-|gnome-common-|grilo-plugins-|yelp-tools-)
     gnmvers=""
     revsrcnm=""
     case $srcname in
       dconf-)
         cur_vers=${notBookPkgVers[dconf]}
       ;;
       evolution-data-server-)
         cur_vers=${notBookPkgVers[evolution-data-server]}
       ;;
       folks-)
         cur_vers=${notBookPkgVers[folks]}
       ;;
       GConf-)
         cur_vers="3.2.6" # not in Arch
       ;;
       gcr-)
         cur_vers=${notBookPkgVers[gcr]}
       ;;
       geocode-glib-)
	 cur_vers=${notBookPkgVers[geocode-glib]}
       ;;
       gexiv2-)
         cur_vers=${notBookPkgVers[libgexiv2]}
       ;;
       gjs-)
	 cur_vers=${notBookPkgVers[gjs]}
       ;;
       gnome-autoar-)
	 cur_vers=${notBookPkgVers[gnome-autoar]}
       ;;
       gnome-desktop-)
	 cur_vers=${notBookPkgVers[gnome-desktop]}
       ;;
       gnome-menus-)
	 cur_vers=${notBookPkgVers[gnome-menus]}
       ;;
       gnome-online-accounts-)
	 cur_vers=${notBookPkgVers[gnome-online-accounts]}
       ;;
       grilo-)
         cur_vers=${notBookPkgVers[grilo]}
       ;;
       gsettings-desktop-schemas-)
	 cur_vers=${notBookPkgVers[gsettings-desktop-schemas]}
       ;;
       libchamplain-)
	 cur_vers=${notBookPkgVers[libchamplain]}
       ;;
       libgdata-)
	 cur_vers=${notBookPkgVers[libgdata]}
       ;;
       libgee-)
	 cur_vers=${notBookPkgVers[libgee]}
       ;;
       libgtop-)
	 cur_vers=${notBookPkgVers[libgtop]}
       ;;
       libgweather-)
	 cur_vers=${notBookPkgVers[libgweather]}
       ;;
       libpeas-)
	 cur_vers=${notBookPkgVers[libpeas]}
       ;;
       libsecret-)
         cur_vers=${notBookPkgVers[libsecret]}
       ;;
       libwnck-3.)
	 cur_vers=${notBookPkgVers[libwnck3]}
       ;;
       polkit-gnome-)
	 cur_vers=${notBookPkgVers[polkit-gnome]}
       ;;
       rest-)
	 cur_vers=${notBookPkgVers[rest]}
       ;;
       totem-pl-parser-)
	 cur_vers=${notBookPkgVers[totem-pl-parser]}
       ;;
       tracker-2.)
	 cur_vers=${notBookPkgVers[tracker]}
       ;;
       tracker-3.)
         cur_vers=${notBookPkgVers[tracker3]}
       ;;
       tracker-miners-2.)
	 cur_vers=${notBookPkgVers[tracker-miners]}
       ;;
       tracker-miners-3.)
         cur_vers=${notBookPkgVers[tracker3-miners]}
       ;;
       vte-0.6)
	 cur_vers=${notBookPkgVers[vte3]}
       ;;
       yelp-xsl-)
	 cur_vers=${notBookPkgVers[yelp-xsl]}
       ;;
# NOTE
# these are not in the book so need latest version if not using Arch versions
       gnome-common-)
         if $useArchVersions; then
           cur_vers=${notBookPkgVers[gnome-common]}
         else
           pkgvers=$(python3 BShref-gnome.py "$gnomeBaseURL/gnome-common")
         fi
       ;;
       grilo-plugins-)
         if $useArchVersions; then
           cur_vers=${notBookPkgVers[grilo-plugins]}
         else
           pkgvers=$(python3 BShref-gnome.py "$gnomeBaseURL/grilo-plugins")
         fi
       ;;
       gssdp-)
         if $useArchVersions; then
           cur_vers=${notBookPkgVers[gssdp]}
         else
           pkgvers=$(python3 BShref-gnome.py "$gnomeBaseURL/gssdp")
         fi
       ;;
       gupnp-)
         if $useArchVersions; then
           cur_vers=${notBookPkgVers[gupnp]}
         else
           pkgvers=$(python3 BShref-gnome.py "$gnomeBaseURL/gupnp")
         fi
       ;;
       gupnp-igd-)
         if $useArchVersions; then
           cur_vers=${notBookPkgVers[gupnp-igd]}
         else
           pkgvers=$(python3 BShref-gnome.py "$gnomeBaseURL/gupnp-igd")
         fi
       ;;
       yelp-tools-)
         if $useArchVersions; then
           cur_vers=${notBookPkgVers[yelp-tools]}
         else
           pkgvers=$(python3 BShref-gnome.py "$gnomeBaseURL/yelp-tools")
         fi
       ;;
     esac
     case $srcname in
        libwnck-3.|tracker-2.|tracker-3.|tracker-miners-2.|tracker-miners-3.) # remove the <integer>.
          srcname=${srcname%??}
        ;;
        vte-0.6)
          srcname=${srcname%???} # remove the 0.6
	;;
     esac
     if $useArchVersions; then pkgvers=${srcname}${cur_vers}.tar.xz; fi
     case $srcname in
	dconf-) # special case, need to add dconf-editor
          if $useArchVersions; then
    	    gnmComsWrite $srcname $pkgvers true false true
            dconfed_vers=${notBookPkgVers[dconf-editor]}
          else # download latest version from the website
            getSrcLocal "*" "*.*" false
            gnome_lines=$(python3 BShref-gnome.py "$gnomeBaseURL/dconf-editor")
            getPkgVersion $gnome_lines ".tar"
            dconfed_vers=${RtrnVars[1]}
          fi
	  pkgvers=dconf-editor-${dconfed_vers}.tar.xz
	  GetSeriesNum $dconfed_vers
	  dconfedSeries=$rtrseries
	  pkgURL=${gnomeBaseURL}/dconf-editor/${dconfedSeries}/
          wgetWrite $pkgvers $pkgURL "" true false true
          cat >> $Output << "EOF"
# unpack the dconf source, not dconf-editor
cd $(tar vxf ${SrcName}[0-9]*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
	;;
        *)
          if $useArchVersions; then
            gnmComsWrite $srcname $pkgvers false false true
          else
            case $srcname in
               gnome-common-|grilo-plugins-|gssdp-|gupnp-|gupnp-igd-|yelp-tools-)
                 gnmComsWrite $srcname $pkgvers false false true # need to download the src file
               ;;
               *)
                 getSrcLocal "*" "*.*" true
               ;;
            esac
          fi
	;;
     esac
   ;;
# get gnomedesktop sources
   gdm-|gnome-backgrounds-|gnome-bluetooth-|gnome-control-center-|gnome-keyring-|gnome-session-|gnome-settings-daemon-|gnome-shell-|gnome-shell-extensions-|gnome-user-docs-|gnome-video-effects-|gvfs-|mutter-|nautilus-|yelp-|zenity-|cantarell-fonts-|gnome-user-share-|gsound-|nautilus-sendto-)
     gnmvers=""
     revsrcnm=""
     case $srcname in
       gdm-)
	 cur_vers=${notBookPkgVers[gdm]}
       ;;
       gnome-backgrounds-)
	 cur_vers=${notBookPkgVers[gnome-backgrounds]}
       ;;
       gnome-bluetooth-)
	 cur_vers=${notBookPkgVers[gnome-bluetooth]}
       ;;
       gnome-control-center-)
	 cur_vers=${notBookPkgVers[gnome-control-center]}
       ;;
       gnome-keyring-)
         cur_vers=${notBookPkgVers[gnome-keyring]}
       ;;
       gnome-session-)
         cur_vers=${notBookPkgVers[gnome-session]}
       ;;
       gnome-settings-daemon-)
         cur_vers=${notBookPkgVers[gnome-settings-daemon]}
       ;;
       gnome-shell-)
         cur_vers=${notBookPkgVers[gnome-shell]}
       ;;
       gnome-shell-extensions-)
         cur_vers=${notBookPkgVers[gnome-shell-extensions]}
       ;;
       gnome-user-docs-)
         cur_vers=${notBookPkgVers[gnome-user-docs]}
       ;;
       gnome-video-effects-)
         cur_vers=${notBookPkgVers[gnome-video-effects]}
       ;;
       gvfs-)
         cur_vers=${notBookPkgVers[gvfs]}
       ;;
       mutter-)
         cur_vers=${notBookPkgVers[mutter]}
       ;;
       nautilus-)
         cur_vers=${notBookPkgVers[nautilus]}
       ;;
       yelp-)
         cur_vers=${notBookPkgVers[yelp]}
       ;;
       zenity-)
         cur_vers=${notBookPkgVers[zenity]}
       ;;
# the following are not in the book so get the latest version if not using Arch versions
       cantarell-fonts-)
         if $useArchVersions; then
           cur_vers=${notBookPkgVers[cantarell-fonts]}
         else
           pkgvers=$(python3 BShref-gnome.py "$gnomeBaseURL/cantarell-fonts")
         fi
       ;;
       gnome-user-share-)
         if $useArchVersions; then
           cur_vers=${notBookPkgVers[gnome-user-share]}
         else
           pkgvers=$(python3 BShref-gnome.py "$gnomeBaseURL/gnome-user-share")
         fi
       ;;
       gsound-)
         if $useArchVersions; then
           cur_vers=${notBookPkgVers[gsound]}
         else
           pkgvers=$(python3 BShref-gnome.py "$gnomeBaseURL/gsound")
         fi
       ;;
       nautilus-sendto-)
         if $useArchVersions; then
           cur_vers=${notBookPkgVers[nautilus-sendto]}
         else
           pkgvers=$(python3 BShref-gnome.py "$gnomeBaseURL/nautilus-sendto")
         fi
       ;;
     esac
     if $useArchVersions; then
       pkgvers=${srcname}${cur_vers}.tar.xz
       case $srcname in
          mutter-) # need to get a patch
            gnmComsWrite $srcname $pkgvers false false false
          ;;
          *)
            gnmComsWrite $srcname $pkgvers false false true
          ;;
       esac
     else
       case $srcname in
         cantarell-fonts-|gnome-user-share-|gsound-|nautilus-sendto-)
           gnmComsWrite $srcname $pkgvers false false true # need to download the src file
         ;;
         mutter-) # need to get a patch
            gnmComsWrite $srcname $pkgvers false false false
         ;;
         *)
           getSrcLocal "*" "*.*" true
         ;;
       esac
     fi
   ;;
# get gnomeapps sources
   aisleriot-|baobab-|brasero-|cheese-|eog-|evince-|gedit-|gnome-calculator-|gnome-color-manager-|gnome-dictionary-|gnome-disk-utility-|gnome-nettool-|gnome-power-manager-|gnome-screenshot-|gnome-system-monitor-|gnome-terminal-|gnome-tweaks-|gnome-user-share-|seahorse-|gnome-chess-|gnome-clocks-)
     gnmvers=""
     revsrcnm=""
     case $srcname in
       baobab-)
         cur_vers=${notBookPkgVers[baobab]}
        ;;
       brasero-)
         cur_vers=${notBookPkgVers[brasero]}
        ;;
       cheese-)
         cur_vers=${notBookPkgVers[cheese]}
        ;;
       eog-)
         cur_vers=${notBookPkgVers[eog]}
        ;;
       evince-)
         cur_vers=${notBookPkgVers[evince]}
        ;;
       gnome-calculator-)
         cur_vers=${notBookPkgVers[gnome-calculator]}
        ;;
       gnome-color-manager-)
         cur_vers=${notBookPkgVers[gnome-color-manager]}
        ;;
       gnome-disk-utility-)
         cur_vers=${notBookPkgVers[gnome-disk-utility]}
        ;;
       gnome-nettool-)
         cur_vers=${notBookPkgVers[gnome-nettool]}
        ;;
       gnome-power-manager-)
         cur_vers=${notBookPkgVers[gnome-power-manager]}
        ;;
       gnome-screenshot-)
         cur_vers=${notBookPkgVers[gnome-screenshot]}
        ;;
       gnome-system-monitor-)
         cur_vers=${notBookPkgVers[gnome-system-monitor]}
        ;;
       gnome-terminal-)
         cur_vers=${notBookPkgVers[gnome-terminal]}
        ;;
       seahorse-)
         cur_vers=${notBookPkgVers[seahorse]}
        ;;
       gnome-tweaks-)
         cur_vers=${notBookPkgVers[gnome-tweaks]}
       ;;
# the following are not in the book so get the latest version if not using Arch versions
       aisleriot-)
         if $useArchVersions; then
           cur_vers=${notBookPkgVers[aisleriot]}
         else
           pkgvers=$(python3 BShref-gnome.py "$gnomeBaseURL/aisleriot")
         fi
       ;;       
       gedit-)
         if $useArchVersions; then
           cur_vers=${notBookPkgVers[gedit]}
         else
           pkgvers=$(python3 BShref-gnome.py "$gnomeBaseURL/gedit")
	 fi
       ;;
       gnome-chess-)
         if $useArchVersions; then
           cur_vers=${notBookPkgVers[gnome-chess]}
         else
           pkgvers=$(python3 BShref-gnome.py "$gnomeBaseURL/gnome-chess")
	 fi
       ;;
       gnome-clocks-)
         if $useArchVersions; then
           cur_vers=${notBookPkgVers[gnome-clocks]}
         else
           pkgvers=$(python3 BShref-gnome.py "$gnomeBaseURL/gnome-clocks")
         fi
	 ;;
       gnome-dictionary-)
         if $useArchVersions; then
           cur_vers=${notBookPkgVers[gnome-dictionary]}
         else
           pkgvers=$(python3 BShref-gnome.py "$gnomeBaseURL/gnome-dictionary")
         fi
        ;;
       gnome-user-share-)
         if $useArchVersions; then
           cur_vers=${notBookPkgVers[gnome-user-share]}
         else
           pkgvers=$(python3 BShref-gnome.py "$gnomeBaseURL/gnome-user-share")
         fi
       ;;
     esac
     if $useArchVersions; then
       pkgvers=${srcname}${cur_vers}.tar.xz
       gnmComsWrite $srcname $pkgvers
     else
       case $srcname in
         aisleriot-|gedit-|gnome-chess-|gnome-clocks-|gnome-dictionary-|gnome-user-share-)
           gnmComsWrite $srcname $pkgvers false false true # need to download the src file
         ;;
         *)
           getSrcLocal "*" "*.*" true
         ;;
       esac
     fi
   ;;
   gnuchess-)
     pkgURL=ftp://ftp.gnu.org/pub/gnu/chess/
     if $useArchVersions; then
       cur_vers=${notBookPkgVers[gnuchess]}
     else
       cur_vers="6.2.7"
     fi
     pkgvers=${srcname}${cur_vers}.tar.gz
     wgetWrite $pkgvers $pkgURL
   ;;
   gucharmap-) # need the unicode data
     echo "cp -r \${blfsfiles}/unicodeData ." >> $Output
     if $useArchVersions; then
       cur_vers=${notBookPkgVers[gucharmap]}
       pkgvers=${srcname}${cur_vers}.tar.xz
       gnmComsWrite $srcname $pkgvers
     else
       pkgvers=$(python3 BShref-gnome.py "$gnomeBaseURL/gucharmap")
       getSrcLocal "*" "*.*" true
     fi
   ;;
   hamcrest-)
     cat >> $Output << "EOF"
pkgver=1.3
corejar=${SrcName}core-${pkgver}.jar
libraryjar=${SrcName}library-${pkgver}.jar
generatorjar=${SrcName}generator-${pkgver}.jar
integrationjar=${SrcName}integration-${pkgver}.jar
pkgURL=https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/hamcrest
wgetopts="${wgetopts} --no-check-certificate"
if [ ! -e $corejar ]; then
  wget $wgetopts ${pkgURL}/hamcrest-core/1.3/${corejar}
fi
if [ ! -e $libraryjar ]; then
  wget $wgetopts ${pkgURL}/hamcrest-library/1.3/${libraryjar}
fi
if [ ! -e $generatorjar ]; then
  wget $wgetopts ${pkgURL}/hamcrest-generator/1.3/${generatorjar}
fi
if [ ! -e $integrationjar ]; then
  wget $wgetopts ${pkgURL}/hamcrest-integration/1.3/${integrationjar}
fi
EOF
   ;;
   hunspell) # get it from Arch - used with thunderbird
   if [ "$BOOK_VERSION" != arch ]; then
     getSrcLocal "*" "*.*" true
   else # Arch binary
     getSrcLocal "*" "*.*" false
     echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
   fi
   ;;
   ibus-) # need to cp UCD.zip as well
     getSrcLocal "*" "*.*" false
     cat >> $Output << "EOF"
if [ -e ${CUR_DIR}/UCD.zip ]; then
  echo "UCD.zip already in current dir - will use that one"
elif [ -e ${sourcedir}/UCD.zip ]; then # src exists so copy it to current dir
  cp ${sourcedir}/UCD.zip .
else # download it
  wget $wgetopts https://www.unicode.org/Public/zipped/13.0.0/UCD.zip
fi
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   ImageMagick-) # version in the book is normally not the latest
     cur_vers=${notBookPkgVers[imagemagick]}
     for I in "${!srcURLs[@]}"; do
       if [ "$I" = "$srcname" ]; then # found the srcfile
         pkgURL=${srcURLs[$I]}
         pkgvers=${opFilename[$I]}
         break
       fi
     done
# cur_vers is of the form 7.0.11.1 Needs to be 7.0.11-1
     echo "pkgVers=${cur_vers%.*}-${cur_vers##*.}" >> $Output
     wgetWrite $pkgvers $pkgURL
   ;;
   iproute2-) # need a patch
     copyPatches $Section $srcname
     cur_vers=$iproute2vers
     pkgvers=${srcname}${cur_vers}.tar.xz
     pkgURL=https://www.kernel.org/pub/linux/utils/net/iproute2/
     wgetWrite $pkgvers $pkgURL
   ;;
   ipython-)
     echo "ncc=$ncc" >> $Output
     echo "pkgVers=${notBookPkgVers[ipython]}" >> $Output
     echo "backcallvers=${notBookPkgVers[python-backcall]}" >> $Output
     cat >> $Output << "EOF"
simplevers=0.8.1
srcpkg="${pkgVers}.tar.gz"
outputFile="${SrcName}${pkgVers}.tar.gz"
simplegenericFile="simplegeneric-${simplevers}.zip"
backcallFile="backcall-${backcallvers}.tar.gz"
if [ -e ${CUR_DIR}/${outputFile} ]; then # src exists in current dir - use that
  echo "$srcpkg src already in current dir - will use that one"
elif [ -e ${sourcedir}/${outputFile} ]; then
  cp ${sourcedir}/${outputFile} . # cp from sourcedir location
else
  wget $wgetopts $ncc -O $outputFile https://github.com/ipython/ipython/archive/${srcpkg}
fi
if [ -e ${CUR_DIR}/${simplegenericFile} ]; then # src exists in current dir - use that
  echo "$simplegenericFile src already in current dir - will use that one"
elif [ -e ${sourcedir}/${simplegenericFile} ]; then
  cp ${sourcedir}/${simplegenericFile} . # cp from sourcedir location
else
  wget $wgetopts $ncc https://pypi.python.org/packages/3d/57/4d9c9e3ae9a255cd4e1106bb57e24056d3d0709fc01b2e3e345898e49d5b/${simplegenericFile}
fi
if [ -e ${CUR_DIR}/${backcallFile} ]; then # src exists in current dir - use that
  echo "$backcallFile src already in current dir - will use that one"
elif [ -e ${sourcedir}/${backcallFile} ]; then
  cp ${sourcedir}/${backcallFile} . # cp from sourcedir location
else
  wget $wgetopts $ncc https://files.pythonhosted.org/packages/source/b/backcall/${backcallFile}
fi
if [ ! -e icon.png ]; then
  wget $wgetopts http://www.packal.org/sites/default/files/public/styles/icon_large/public/workflow-files/nkeimipynbworkflow/icon/icon.png
fi
tar zxf $outputFile
unzip $simplegenericFile
tar zxf $backcallFile
EOF
   ;;
   j4-dmenu-desktop)
     gitClone $srcname "git://github.com/enkore"
   ;;
# *** NOTE *** as of 28/01/2021, using the openjdk version in the book
   jdk15u) # download files to build jdk15-openjdk
     _java_ver=15
     _min_ver=0
     _sec_ver=2
     _jdk_build=7
     echo "_java_ver=$_java_ver
_min_ver=$_min_ver
_sec_ver=$_sec_ver
_jdk_build=$_jdk_build" >> $Output
     cat >> $Output << "EOF"
pkgver=${_java_ver}.${_min_ver}.${_sec_ver}+${_jdk_build}
_repo_ver=jdk-${pkgver}
_url_src=http://hg.openjdk.java.net/jdk-updates/jdk${_java_ver}u
# if more than one patch, conventional test will fail with wild card, so use array
#patchfile=(${sourcedir}/${SrcName}${_icedtea_ver}*.patch)
#homepatch=(${CUR_DIR}/${SrcName}${_icedtea_ver}*.patch)
#if [ -e "${patchfile[0]}" ]; then # patch(es) exists so copy to current dir
#  cp ${sourcedir}/${SrcName}${_icedtea_ver}*.patch .
#elif [ -e "${homepatch[0]}" ]; then # patch(es) exists in current dir
#  echo "Patch(es) already in current dir"
#else
#  echo "No patches found for $SrcName. Should there be some?"
#fi
if [ ! -e ${_repo_ver}.tar.bz2 ]; then
  wget $wgetopts ${_url_src}/archive/${_repo_ver}.tar.bz2
fi
icedteaVers=1.7.1
if [ ! -e icedtea-web-${icedteaVers}.tar.gz ]; then
  wget $wgetopts http://icedtea.classpath.org/download/source/icedtea-web-${icedteaVers}.tar.gz
fi
# cp any patches
#cp -v ${blfsfiles}/patches/java/*.patch . # patches to apply
# change into the extracted dir
cd $(tar vxf ${_repo_ver}.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
# use if have a zip file (not docbook-xml) because bash now needs cd dir*/ to find dirs
#         cat >> $Output << "EOF"
#gotoDir=$(zipinfo -1 ${SrcName}*.zip | grep -m1 /)
#unzip ${SrcName}*.zip
#cd ${SrcName}*/  # need the / to look for dirs only
#EOF
   jdk-${jdkvers}_)
     cat >> $Output << "EOF"
if [ -e ${CUR_DIR}/${SrcName}*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that one"
elif [ -e ${sourcedir}/${SrcName}*.tar.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* . # cp any patches as well
else
  echo "No source file found for $SrcName"
  echo "Please download it from the Oracle website"
  echo "exit now"
  exit 1
fi
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   libcap-) # package file may be present, so tar ?.?? to distinguish source file
     getSrcLocal "*" "*.*" false
     if [ "$BOOK_VERSION" = arch ]; then
       echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
     else
       cat >> $Output << "EOF"
cd $(tar vxf ${SrcName}?.??.tar.*z* | awk -F\/ 'END{print $1}')
EOF
     fi
   ;;
   libcdio-) # don't unpack libcdio-paranoia
     if [ "$BOOK_VERSION" = arch ]; then
       getSrcLocal "[0-9]*" "[0-9]*" false
       echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
     else
       getSrcLocal "[0-9]*" "*" true
     fi
   ;;
   libnfs-)
     gitClone $pkgname "https://github.com/sahlberg"
   ;;
   libreoffice-) # don't need the translations. need --no-overwrite-dir when untaring
     getSrcLocal "[0-9]*" "*.*" false
     cat >> $Output << "EOF"
rm -rf libreoffice-translations*
cd $(tar vxf ${SrcName}[0-9]*.tar.*z* --no-overwrite-dir | awk -F\/ 'END{print $1}')
EOF
   ;;
   libusb-|grilo-|mutter-) # don't want libusb-compat, grilo-plugins
     if [ "$BOOK_VERSION" = arch ]; then
       getSrcLocal "[0-9]*" "[0-9]*" false
       echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
     else
       getSrcLocal "[0-9]*" "[0-9]*" true
     fi
   ;;
   Linux-PAM-) # do not want to untar the docs
     getSrcLocal "?.?.?" "*.*" true
   ;;
   libva-|libvdpau-1.) # do not want to untar the libva-intel-driver or libvdpau-va-gl
     getSrcLocal "[0-9]*" "*.*" true
   ;;
   libvdpau-va-gl-)
     cur_vers=${notBookPkgVers[libvdpau-va-gl]}
     curVers="v${cur_vers}.tar.gz"
     pkgvers=${srcname}${cur_vers}.tar.gz
     pkgURL=https://github.com/i-rinat/libvdpau-va-gl/archive/
     wgetWrite $curVers $pkgURL $pkgvers false false true
   ;;
   lldb-) # don't need to get any src
     :
   ;;
# include the clang compiler in llvm
   llvm-)
     echo "llvmvers=$llvmvers" >> $Output
     cat >> $Output << "EOF"
clangSrc=clang-${llvmvers}.src.tar.xz
clangSrcExtra=clang-tools-extra-${llvmvers}.src.tar.xz
compilerrt=compiler-rt-${llvmvers}.src.tar.xz
llvmURL="https://github.com/llvm/llvm-project/releases/download/llvmorg-${llvmvers}"
#lldbsrc=lldb-${llvmvers}.src.tar.xz
if [ ! -e $clangSrc ]; then
  wget $wgetopts ${llvmURL}/${clangSrc}
fi
if [ ! -e $clangSrcExtra ]; then
  wget $wgetopts ${llvmURL}/${clangSrcExtra}
fi
if [ ! -e $compilerrt ]; then
  wget $wgetopts ${llvmURL}/${compilerrt}
fi
#if [ ! -e $lldbsrc ]; then
#  wget $wgetopts ${llvmURL}/${lldbsrc}
#fi
cp ${sourcedir}/${SrcName}*.* .
cd $(tar vxf llvm-${llvmvers}.src.tar.xz | awk -F\/ 'END{print $1}')
EOF
   ;;
   LVM2.|cdparanoia-III-|graphite2-|icu4c-|openldap-|sg3_utils-|sgml-common-|xterm-|zip) # a .tgz src fime
     cat >> $Output << "EOF"
if [ -e ${CUR_DIR}/${SrcName}*.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that one"
elif [ -e ${sourcedir}/${SrcName}*.*z* ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${SrcName}*.* .
else
EOF
     tryWgetSrc
     echo "fi" >> $Output
     if [ "$BOOK_VERSION" = arch ]; then
       cat >> $Output << "EOF"
tar xf ${SrcName}*.tar.*z* --no-same-owner
EOF
     else
       cat >> $Output << "EOF"
cd $(tar vxf ${SrcName}*.*z* | awk -F\/ 'END{print $1}')
EOF
     fi
   ;;
   lua-)
     getSrcLocal "?.?.?" "*.*" true # avoid lua-tests file
   ;;
   lxqt-preinstall)
     echo "# There is no source file for this setup" >> $Output
   ;;
   nasm-) # has a src file and -xdoc file to deal with
# TODO experimental - needs tidying
     cat >> $Output << "EOF"
local found=($( ls -l $sourcedir | grep ${SrcName}[0-9]*.*z* | awk '{print $NF}' ))
#echo "These versions were found:"
#echo ${found[@]}
local fileFound
for fileFound in ${found[@]}; do
  case $fileFound in
      *-xdoc*) # ignore
         :
      ;;
      *) # src file so use it
#       echo "fileFound is $fileFound"
        starttime=$( date +%s )
        if [ -e ${CUR_DIR}/${SrcName}*.tar.*z* ]; then # src exists in current dir - use that
          echo "$SrcName already in current dir - will use that one"
        elif [ -e ${sourcedir}/${fileFound} ]; then # src exists so copy it to current dir
          cp -v ${sourcedir}/${fileFound} . # don't bother with the xdoc file
        else
          if [ -e /usr/bin/wget ]; then # wget installed so try and get the source
            echo "Can't find $SrcName src file in $sourcedir"
            echo "Enter the url (including the filename) and wget will download it:"
            read URLFileName
            wget $wgetopts $URLFileName
          else
            echo "wget not installed"
            echo "Cannot get source file for $SrcName - exit now"
            exit 1
          fi
        fi
        cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
        endtime=$( date +%s )
        unpacktime=$( expr $endtime - $starttime )
        starttime=$( date +%s )
      ;;
  esac
done
EOF
   ;;
   NVIDIA-Linux-x86_64-)
     cur_vers=${notBookPkgVers[nvidia]}
     echo "pkgver=$cur_vers" >> $Output
     pkgURL=https://download.nvidia.com/XFree86/Linux-x86_64/\${pkgver}/
     wgetWrite "\${SrcName}\${pkgver}.run" $pkgURL "" true false true
     cat >> $Output << "EOF"
sh $outputFile --extract-only
trimto=".run" # need to remove this from outputFile when cd'ing
_pkg="${outputFile%${trimto}*}"
# place any patches here
EOF
     if [ "$pkgname" = nvidia ]; then # need a patch
       cat >> $Output << "EOF"
cp ${blfsfiles}/patches/nvidia/nvidia-* .
EOF
     fi
echo "cd \${_pkg}" >> $Output
   ;;
   OpenJDK-)
     getSrcLocal "*-bin" "*.*" true
   ;;
   php-) # wget the docs (single html)
     getSrcLocal "*" "*.*" false
     cat >> $Output << "EOF"
phpManual=php_manual_en.html.gz
if [ -e ${CUR_DIR}/${phpManual} ]; then
  echo "$phpManual already in current directory"
elif [ -e ${sourcedir}/${phpManual} ]; then
  cp -r ${sourcedir}/${phpManual} .
else
  wget $wgetopts https://www.php.net/distributions/manual/php_manual_en.html.gz
fi
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   portsmf) # svn the source
     if [ "$BOOK_VERSION" != arch ]; then
       cur_vers=${notBookPkgVers[portsmf]}
       for I in "${!srcURLs[@]}"; do
         if [ "$I" = "$srcname" ]; then # found the srcfile
           pkgURL=${srcURLs[$I]}
           pkgvers=${opFilename[$I]}
           break
         fi
       done
       echo "pkgVers=$cur_vers" >> $Output
       cat >> $Output << "EOF"
cp -v ${blfsfiles}/patches/multimedia/portsmf*.patch .
if [ -d ${CUR_DIR}/portsmf ]; then # src exists in current dir - use that
  echo "portsmf already in current dir - will use that one"
elif [ -e ${sourcedir}/portsmf ]; then # src exists so copy it to current dir
  cp -r ${sourcedir}/portsmf .
else
EOF
       echo "  svn co $pkgURL $pkgvers" >> $Output
       cat >> $Output << "EOF"
fi
cd portsmf
EOF
     else # for the Arch binary
       getSrcLocal "*" "*.*" false
       echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
     fi
   ;;
   primus)
     gitClone $pkgname "git://github.com/amonakov" "" true "" "d"
     cat >> $Output << "EOF"
cp -v ${blfsfiles}/patches/nvidia/primus*.patch .
cd primus
EOF
   ;;
#   pycairo-) # need to download waf
#     getSrcLocal "*" "*.*" false
#     wafversion="1.9.12"
#     echo "wafversion=$wafversion" >> $Output
#     pkgvers="waf-\${wafversion}.tar.bz2"
#     pkgURL=https://waf.io/
#    wgetWrite $pkgvers $pkgURL
#   ;;
   Python-3.) # get the docs as well
     cat >> $Output << "EOF"
pythondocs="python-${py3series}.0-docs-html.tar.bz2"
if [ ! -e $pythondocs ]; then
  wget $wgetopts --no-check-certificate https://docs.python.org/${py3series}/archives/${pythondocs}
fi
EOF
     getSrcLocal "*" "*.*" true
   ;;
   quarter)
     cat >> $Output << "EOF"
if [ ! -d quarter ]; then
  svn co --username anonymous --password emergent https://grey.colorado.edu/svn/coin3d/quarter/trunk quarter
fi
cd quarter
EOF
   ;;
   qtwebkit-opensource-src-) # cp the patch as well
     cat >> $Output << "EOF"
if [ -e ${CUR_DIR}/${SrcName}*.tar.*z* ]; then
  echo "$SrcName already in current dir - will use that one"
elif [ -e ${sourcedir}/${SrcName}*.tar.*z* ]; then
  cp ${sourcedir}/${SrcName}*.* .
  cp ${sourcedir}/qtwebkit*.patch . # patch not named as SrcName*.patch
else
  if hash wget &> /dev/null; then # wget installed so try and get the source
    echo "Can't find $SrcName src file in $sourcedir"
    echo "Enter the url (including the filename) and wget will download it:"
    read URLFileName
    wget $wgetopts $URLFileName
  else
    echo "wget not installed"
    echo "Cannot get source file for $SrcName - exit now"
    exit 1
  fi
fi
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   qtwebengine-everywhere-src-)
     cat >> $Output << "EOF"
_qtver=5.10.0
pkgver=${_qtver/-/}
_pkgfqn="${SrcName}${_qtver}"
if [ -e ${CUR_DIR}/${SrcName}*.tar.*z* ]; then
  echo "$SrcName already in current dir - will use that one"
elif [ -e ${sourcedir}/${SrcName}*.tar.*z* ]; then
  cp ${sourcedir}/${SrcName}*.* .
else
  wget $wgetopts http://download.qt.io/official_releases/qt/${pkgver%.*}/${_qtver}/submodules/${_pkgfqn}.tar.xz
fi
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   rapidjson-)
     cat >> $Output << "EOF"
if [ -e ${CUR_DIR}/${SrcName}*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that one"
elif [ -e ${sourcedir}/${SrcName}*.tar.*z* ]; then # src exists so copy it to current dir
  cp -v ${sourcedir}/${SrcName}*.* .
else
  if [ -e /usr/bin/wget ]; then # wget installed so download the source
    pkgname=rapidjson
    pkgver=1.1.0
    wget $wgetopts https://github.com/miloyip/$pkgname/archive/v$pkgver/$pkgname-$pkgver.tar.gz
  else
    echo "wget not installed"
    echo "Cannot get source file for $SrcName - exit now"
    exit 1
  fi
fi
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   raptor2-) # the patch has a different name from the src tarfile
     cat >> $Output << "EOF"
if [ -e ${CUR_DIR}/${SrcName}*.tar.*z* ]; then # src exists in current dir - use that
  echo "$SrcName already in current dir - will use that one"
elif [ -e ${sourcedir}/${SrcName}*.tar.*z* ]; then # src exists so copy it to current dir
  cp -v ${sourcedir}/${SrcName}*.* .
  cp -v ${sourcedir}/${SrcName/2/}*.patch .
else
  if [ -e /usr/bin/wget ]; then # wget installed so try and get the source
    echo "Can't find $SrcName src file in $sourcedir"
    echo "Enter the url (including the filename) and wget will download it:"
    read URLFileName
    wget $wgetopts $URLFileName
  else
    echo "wget not installed"
    echo "Cannot get source file for $SrcName - exit now"
    exit 1
  fi
fi
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   recode-)
     copyPatches $Section $srcname
     cur_vers=3.7.8
     curVers="v${cur_vers}"
     pkgvers=${srcname}${cur_vers}.tar.gz
     pkgURL=https://github.com/pinard/\${PkgName}/tarball/
     wgetWrite $curVers $pkgURL $pkgvers false false true
   ;;
   rpmextract-) # create rpm2cpio and rpmextract.sh 
     cat >> $Output << "EOF"
cat > rpm2cpio << "RPMEOF"
#!/bin/sh

pkg=$1
if [ "$pkg" = "" -o ! -e "$pkg" ]; then
  echo "no package supplied" 1>&2
  exit 1
fi

leadsize=96
o=`expr $leadsize + 8`
set `od -j $o -N 8 -t u1 $pkg`
il=`expr 256 \* \( 256 \* \( 256 \* $2 + $3 \) + $4 \) + $5`
dl=`expr 256 \* \( 256 \* \( 256 \* $6 + $7 \) + $8 \) + $9`
# echo "sig il: $il dl: $dl"

sigsize=`expr 8 + 16 \* $il + $dl`
o=`expr $o + $sigsize + \( 8 - \( $sigsize \% 8 \) \) \% 8 + 8`
set `od -j $o -N 8 -t u1 $pkg`
il=`expr 256 \* \( 256 \* \( 256 \* $2 + $3 \) + $4 \) + $5`
dl=`expr 256 \* \( 256 \* \( 256 \* $6 + $7 \) + $8 \) + $9`
# echo "hdr il: $il dl: $dl"

hdrsize=`expr 8 + 16 \* $il + $dl`
o=`expr $o + $hdrsize`

dd if=$pkg ibs=$o skip=1 2>/dev/null
RPMEOF
cat > rpmextract.sh << "EXTEOF"
#!/bin/sh
if [ "$1" = "" -o ! -e "$1" ]; then
    echo "no package supplied" 1>&2
   exit 1
fi
rpm2cpio "$1" | bsdtar -xf -
EXTEOF
EOF
   ;;
   rtmpdump-) # get source from git
     gitClone $pkgname "git://git.ffmpeg.org"
   ;;
   shadow-) # distinguish src file from a pkg file, if present
     getSrcLocal "*" "*.*" false
     if [ "$BOOK_VERSION" = arch ]; then
       echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
     else
       echo "cd \$(tar vxf \${SrcName}${shadowvers}.tar.*z* | awk -F\/ 'END{print \$1}')" >>$Output
     fi
   ;;
   SDL-) # need to apply a load of patches from Arch
     copyPatches $Section $srcname
     getSrcLocal "*" "*.*" true
   ;;
   smpeg-) # get the source from svn
     if [ "$BOOK_VERSION" != arch ]; then
       cur_vers=${notBookPkgVers[smpeg]}
       cur_vers=${cur_vers//./_} # Arch version has . separator Need to change it to _
       for I in "${!srcURLs[@]}"; do
         if [ "$I" = "$srcname" ]; then # found the srcfile
           pkgURL=${srcURLs[$I]}
           pkgvers=${opFilename[$I]}
           curVers=${ipFilename[$I]}
           break
         fi
       done
       echo "pkgVers=\"${cur_vers}\"" >> $Output
       cat >> $Output << "EOF"
# the smpeg source is downloaded from svn
if [ -d ${CUR_DIR}/${SrcName}${pkgVers} ]; then
  echo "${SrcName}${pkgVers} already in current dir - will use that one"
elif [ -e ${sourcedir}/${SrcName}${pkgVers} ]; then
  cp -r ${sourcedir}/${SrcName}${pkgVers} .
else
EOF
       echo "  svn co ${pkgURL}${curVers} \${CUR_DIR}/\${SrcName}\${pkgVers}" >> $Output
       cat >> $Output << "EOF"
fi
cd ${SrcName}${pkgVers}
EOF
     else # get the smpeg Arch binary file
       wgetWrite "" "" "" true false false false true
       echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
     fi
   ;;
   speex-) # also get the speexdsp file
     getSrcLocal "*" "*.*" false
     if [ "$BOOK_VERSION" != arch ]; then
       cur_vers="1.2.0"
       pkgvers="speexdsp-${cur_vers}.tar.gz"
       pkgURL=http://downloads.us.xiph.org/releases/speex/
       wgetWrite $pkgvers $pkgURL "" true false true
       cat >> $Output << "EOF"
# unpack speex- source file, not speexdsp
cd $(tar vxf ${SrcName}*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
     else # untar the binary
       echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
     fi
   ;;
   systemd-) # src already in place, but may need patches. If so, need to define blfsfiles
     cat >> $Output << "EOF"
#cp ${blfsfiles}/patches/sysutils/systemd-*.patch .
cd $(tar vxf ${SrcName}[0-9]*.tar.*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   tcl*) # there is -src and -html so specify src
     getSrcLocal "*-src" "*.*" true
   ;;
# get these Perl modules from cpan - use no-check-certificate
   Alien-Build-|Alien-Libxml2-|Archive-Zip-|Capture-Tiny-|ExtUtils-Depends-|ExtUtils-PkgConfig-|File-BaseDir-|File-chdir-|File-Which-|IPC-System-Simple-|Module-Build-|Parse-Yapp-|Path-Tiny-|SUPER-|Test-MockModule-|Tie-IxHash-|URI-|XML-LibXML-|XML-NamespaceSupport-|XML-SAX-1.|XML-SAX-Base-|XML-SAX-Expat-|XML-Simple-)
     case $srcname in
        Alien-Build-)
            cur_vers=${notBookPkgVers[perl-alien-build]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
		pkgvers=${opFilename[$I]}
		break
              fi
            done
        ;;
        Alien-Libxml2-)
            cur_vers=${notBookPkgVers[perl-alien-libxml2]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        Archive-Zip-)
            cur_vers=${notBookPkgVers[perl-archive-zip]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        Capture-Tiny-)
            cur_vers=${notBookPkgVers[perl-capture-tiny]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        ExtUtils-Depends-) # not in the book
            cur_vers=${notBookPkgVers[perl-extutils-depends]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        ExtUtils-PkgConfig-) # not in the book
            cur_vers=${notBookPkgVers[perl-extutils-pkgconfig]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        File-BaseDir-) # not in the book
            cur_vers=${notBookPkgVers[perl-file-basedir]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        File-chdir-)
            cur_vers=${notBookPkgVers[perl-file-chdir]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        File-Which-)
            cur_vers=${notBookPkgVers[perl-file-which]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done   
        ;;
        IPC-System-Simple-)
            cur_vers=${notBookPkgVers[perl-ipc-system-simple]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        Module-Build-) # in the book
            cur_vers=${notBookPkgVers[perl-module-build]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        Parse-Yapp-)
            cur_vers=${notBookPkgVers[perl-parse-yapp]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        Path-Tiny-)
            cur_vers=${notBookPkgVers[perl-path-tiny]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        SUPER-)
            cur_vers=${notBookPkgVers[perl-super]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        Test-MockModule-)
            cur_vers=${notBookPkgVers[perl-test-mockmodule]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        Tie-IxHash-) # not in the book
	    cur_vers=${notBookPkgVers[perl-tie-ixhash]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
	;;
        URI-)
            cur_vers=${notBookPkgVers[perl-uri]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        XML-LibXML-)
            cur_vers=${notBookPkgVers[perl-xml-libxml]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        XML-NamespaceSupport-)
            cur_vers=${notBookPkgVers[perl-xml-namespacesupport]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        XML-SAX-1.)
            cur_vers=${notBookPkgVers[perl-xml-sax]}
	    srcname=${srcname%??} # remove the 1.
# need to write srcname to the script
            echo "srcname=$srcname" >> $Output
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        XML-SAX-Base-)
            cur_vers=${notBookPkgVers[perl-xml-sax-base]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        XML-SAX-Expat-) # not in the book
            cur_vers=${notBookPkgVers[perl-xml-sax-expat]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
        XML-Simple-)
            cur_vers=${notBookPkgVers[perl-xml-simple]}
            for I in "${!srcURLs[@]}"; do
              if [ "$I" = "$srcname" ]; then # found the srcfile
                pkgURL=${srcURLs[$I]}
                pkgvers=${opFilename[$I]}
                break
              fi
            done
        ;;
      esac
      echo "pkgVers=$cur_vers" >> $Output
      case $srcname in
         Alien-libxml2-|Archive-Zip-|File-chdir-|File-Which-|IPC-System-Simple-|Module-Build-|Parse-Yapp-|SUPER-|Test-MockModule-|URI-|XML-SAX-|XML-Simple-) # in the book, so use srcname not outputfile name
            wgetWrite $pkgvers $pkgURL $pkgvers false true false
         ;;
         *) # not in the book
            wgetWrite $pkgvers $pkgURL $pkgvers false true true
         ;;
      esac
   ;;
# telepathy-glib, logger and mission-control are now in different sections of the book (01/2018)
# so download these if they are not in the blfs-sources dir
   telepathy-glib-|telepathy-logger-|telepathy-mission-control-)
      if [ "$SYSTEMD" = yes ]; then
        case $srcname in
           telepathy-glib-)
              pkgvers=${srcname}0.24.2.tar.gz
              pkgURL=http://telepathy.freedesktop.org/releases/telepathy-glib/
           ;;
           telepathy-logger-)
              pkgvers=${srcname}0.8.2.tar.bz2
              pkgURL=http://telepathy.freedesktop.org/releases/telepathy-logger/
           ;;
           telepathy-mission-control-)
              pkgvers=${srcname}5.16.6.tar.gz
              pkgURL=http://telepathy.freedesktop.org/releases/telepathy-mission-control/
           ;;
        esac
        wgetWrite $pkgvers $pkgURL "" "" "" "" true
      fi
   ;;
# if installing gnome, then can download these as they are not in any book
   telepathy-farstream-|telepathy-gabble-|telepathy-haze-|telepathy-idle-|telepathy-salut-)
      if [ "$SYSTEMD" = yes ]; then
        case $srcname in
           telepathy-farstream-)
              pkgvers=${srcname}0.6.2.tar.gz
              pkgURL=http://telepathy.freedesktop.org/releases/telepathy-farstream/
           ;;
           telepathy-gabble-)
              pkgvers=${srcname}0.18.3.tar.gz
              pkgURL=http://telepathy.freedesktop.org/releases/telepathy-gabble/
           ;;
           telepathy-haze-)
              pkgvers=${srcname}0.8.0.tar.gz
              pkgURL=http://telepathy.freedesktop.org/releases/telepathy-haze/
           ;;
           telepathy-idle-)
              pkgvers=${srcname}0.2.0.tar.gz
              pkgURL=http://telepathy.freedesktop.org/releases/telepathy-idle/
           ;;
           telepathy-salut-)
              pkgvers=${srcname}0.8.1.tar.gz
              pkgURL=http://telepathy.freedesktop.org/releases/telepathy-salut/
           ;;
        esac
        wgetWrite $pkgvers $pkgURL
      fi
   ;;
   thunderbird-)
   if [ "$BOOK_VERSION" != arch ]; then
     cat >> $Output << "EOF"
cp ${blfsfiles}/patches/xsoftware/thunderbird*.patch .
EOF
     getSrcLocal "*" "*.*" true
   else # Arch binary
     getSrcLocal "*" "*.*" false
     echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
   fi
   ;;
   traitlets-)
     cur_vers=${notBookPkgVers[python-traitlets]}
     for I in "${!srcURLs[@]}"; do
       if [ "$I" = "$srcname" ]; then # found the srcfile
         pkgURL=${srcURLs[$I]}
         pkgvers=${opFilename[$I]}
         break
       fi
     done
     echo "pkgVers=$cur_vers
srcpkg=\"$pkgvers\"
outputFile=\"$pkgvers\"" >> $Output
     cat >> $Output << "EOF"
if [ -e ${CUR_DIR}/${srcpkg} ]; then # src exists in current dir - use that
  echo "$srcpkg already in current dir - will use that one"
elif [ -e ${sourcedir}/${srcpkg} ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${srcpkg} .
else
EOF
     echo "  wget \$wgetopts --no-check-certificate ${pkgURL}\${srcpkg}" >> $Output
     cat >> $Output << "EOF"
  if [ $? -ne 0 ]; then
    echo "Failed to download $srcpkg"
    echo "Aborting"
    exit 1
  fi
fi
genutilsver="0.2.0"
genutilsFile="ipython_genutils-${genutilsver}.tar.gz"
if [ -e ${CUR_DIR}/${genutilsFile} ]; then
  echo "$genutilsFile already in current dir - will use that one"
elif [ -e ${sourcedir}/${genutilsFile} ]; then # src exists so copy it to current dir
  cp ${sourcedir}/${genutilsFile} .
else
  wget $wgetopts --no-check-certificate https://files.pythonhosted.org/packages/e8/69/fbeffffc05236398ebfcfb512b6d2511c622871dca1746361006da310399/${genutilsFile}
  if [ $? -ne 0 ]; then
    echo "Failed to download $genutilsFile"
    echo "Aborting"
    exit 1
  fi
fi
tar xf $outputFile
tar xf $genutilsFile
EOF
   ;;
   tvheadend)
     gitClone $srcname "https://github.com/tvheadend"
   ;;
   udevil)
     cat >> $Output << "EOF"
cp ${blfsfiles}/patches/openelec/udevil-*.patch .
EOF
     gitClone $srcname "https://github.com/IgnorantGuru"
   ;;
   kodi-) # get it from the source tarfile
#     copyPatches $Section $srcname
     local kodi_vers=${notBookPkgVers[kodi]}
     local codename=Leia
# required dependencies
     libdvdcss_vers="1.4.2-$codename-Beta-5"
     libdvdnav_vers="6.0.0-$codename-Alpha-3"
     libdvdread_vers="6.0.0-$codename-Alpha-3"
     ffmpeg_vers="4.0.4-$codename-18.4"
     fmt_vers="5.1.0"
     crossguid_vers="8f399e8bd4"
     fstrcmp_vers="0.7.D001"
     flatbuffers_vers="1.9.0"
# kodi source
     curVers="${kodi_vers}-${codename}.tar.gz"
     pkgvers="\${SrcName}\${srcpkg}"
     pkgURL=https://github.com/xbmc/xbmc/archive/
     wgetWrite $curVers $pkgURL $pkgvers true false true true
     echo "kodi_outputfile=\$outputFile" >> $Output # need to store this for the cd line later
# for libdvdcss
     curVers=${libdvdcss_vers}.tar.gz
     pkgvers="\${SrcName}libdvdcss-\${srcpkg}"
     pkgURL=https://github.com/xbmc/libdvdcss/archive/
     wgetWrite $curVers $pkgURL $pkgvers true false true
     echo "libdvdcss_outputfile=\$outputFile" >> $Output
# for libdvdnav
     curVers=${libdvdnav_vers}.tar.gz
     pkgvers="\${SrcName}libdvdnav-\${srcpkg}"
     pkgURL=https://github.com/xbmc/libdvdnav/archive/
     wgetWrite $curVers $pkgURL $pkgvers true false true
     echo "libdvdnav_outputfile=\$outputFile" >> $Output
# for libdvdread
     curVers=${libdvdread_vers}.tar.gz
     pkgvers="\${SrcName}libdvdread-\${srcpkg}"
     pkgURL=https://github.com/xbmc/libdvdread/archive/
     wgetWrite $curVers $pkgURL $pkgvers true false true
     echo "libdvdread_outputfile=\$outputFile" >> $Output
# for ffmpeg
     curVers=${ffmpeg_vers}.tar.gz
     pkgvers="\${SrcName}ffmpeg-\${srcpkg}"
     pkgURL=https://github.com/xbmc/FFmpeg/archive/
     wgetWrite $curVers $pkgURL $pkgvers true false true
     echo "ffmpeg_outputfile=\$outputFile" >> $Output
# for fmt
     curVers=fmt-${fmt_vers}.tar.gz
     pkgvers="\${SrcName}\${srcpkg}"
     pkgURL=http://mirrors.kodi.tv/build-deps/sources/
     wgetWrite $curVers $pkgURL $pkgvers true false true
     echo "fmt_outputfile=\$outputFile" >> $Output
# for crossguid
     curVers=crossguid-${crossguid_vers}.tar.gz
     pkgvers="\${SrcName}\${srcpkg}"
     pkgURL=http://mirrors.kodi.tv/build-deps/sources/
     wgetWrite $curVers $pkgURL $pkgvers true false true
     echo "crossguid_outputfile=\$outputFile" >> $Output
# for fstrcmp
     curVers=fstrcmp-${fstrcmp_vers}.tar.gz
     pkgvers="\${SrcName}\${srcpkg}"
     pkgURL=http://mirrors.kodi.tv/build-deps/sources/
     wgetWrite $curVers $pkgURL $pkgvers true false true
     echo "fstrcmp_outputfile=\$outputFile" >> $Output
# for flatbuffers
     curVers=flatbuffers-${flatbuffers_vers}.tar.gz
     pkgvers="\${SrcName}\${srcpkg}"
     pkgURL=http://mirrors.kodi.tv/build-deps/sources/
     wgetWrite $curVers $pkgURL $pkgvers true false true
     echo "flatbuffers_outputfile=\$outputFile" >> $Output
     echo "cd \$(tar vxf \$kodi_outputfile | awk -F\/ 'END{print \$1}')" >> $Output # kodi cd line
   ;;
   xboard-)
     cur_vers=${notBookPkgVers[xboard]}
     echo "pkgVers=$cur_vers" >> $Output
     for I in "${!srcURLs[@]}"; do
       if [ "$I" = "$srcname" ]; then # found the srcfile
         pkgURL=${srcURLs[$I]}
         pkgvers=${opFilename[$I]}
         break
       fi
     done
     if [ "$BOOK_VERSION" = arch ]; then # don't write the cd line and use SrcName not outputFile name
       wgetWrite $pkgvers $pkgURL "$pkgvers" true false false false true
       echo "tar xf \${SrcName}*-x86_64.pkg.tar.*z* --no-same-owner" >> $Output
     else
       wgetWrite $pkgvers $pkgURL "$pkgvers" false false $switch
     fi
   ;;
   xcb-util-|wayland-)
     if [ "$BOOK_VERSION" = arch ]; then
       getSrcLocal "[0-9]*" "[0-9]*.*" false
       echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
     else
       getSrcLocal "[0-9]*" "[0-9]*.*" true
     fi
   ;;
   xinit-) # need patches
     cat >> $Output << "EOF"
cp ${blfsfiles}/patches/x/xinit-*.patch .
EOF
     getSrcLocal "*" "*.*" true
   ;;
   $xlib) # need patch(es) from patches/x
     cat >> $Output << "EOF"
cp -r ${sourcedir}/${SrcName}/* . # copy the md5 file, sources and any patches
#cp ${blfsfiles}/patches/x/libXfont*.patch .
EOF
   ;;
   $xapp|$xfont)
     cat >> $Output << "EOF"
cp -r ${sourcedir}/${SrcName}/* . # copy the md5 file, sources and any patches
EOF
   ;;
   zlib-) # this is the src for minizip
     cur_vers=${notBookPkgVers[minizip]}
     for I in "${!srcURLs[@]}"; do
       if [ "$I" = "$srcname" ]; then # found the srcfile
         pkgURL=${srcURLs[$I]}
         pkgvers=${opFilename[$I]}
         break
       fi
     done
     echo "pkgVers=$cur_vers
srcpkg=$pkgvers
outputFile=$pkgvers" >> $Output
     cat >> $Output << "EOF"
if [ -e ${CUR_DIR}/${SrcName}*.tar.*z* ]; then
  echo "$SrcName already in current dir - will use that one"
elif [ -d $sourcedir ]; then
  cp ${sourcedir}/${SrcName}*.tar.*z* . # get it from zlib in core
else # try and download the zlib source
  if [ -e /usr/bin/wget ]; then # wget installed so try and get the source
EOF
     echo "    wget \$wgetopts -O \$outputFile ${pkgURL}\${srcpkg}" >> $Output
     cat >> $Output << "EOF"
    if [ $? -ne 0 ]; then
      echo "Failed to download $srcpkg"
      echo "Aborting"
      exit 1
    fi
  else
    echo "wget not installed"
    echo "Cannot get source file for $SrcName - exit now"
    exit 1
  fi
fi
cd $(tar vxf ${SrcName}*z* | awk -F\/ 'END{print $1}')
EOF
   ;;
   *) # tar.xz,gz,bz2,tgz
     if [ "$BOOK_VERSION" = arch ]; then # don't need to cd into package
       case $pkgname in
	  gst-plgns-base) # need [0-9] to distinguish from gst-plugins-base-libs- binary file
            getSrcLocal "[0-9]*" "[0-9]*" false
	  ;;
          *)
            getSrcLocal "*" "*.*" false
	  ;;
       esac
       echo "tar xf \${SrcName}*.tar.*z* --no-same-owner" >> $Output
     else
       getSrcLocal "*" "*.*" true
     fi
   ;;
esac
    cat >> $Output << "EOF"
endtime=$( date +%s )
unpacktime=$( expr $endtime - $starttime )
starttime=$( date +%s )
} # end unpack
#
EOF
} # end unpack ()
#
destdirInstall () {
cat >> $Output << "EOF"
destdirInstall () {
# install the files from a DESTDIR build
# $1 is the directory containing the files to install
local pkgfileDir=$1
local eachDir=""
pushd $pkgfileDir
local listDIRS=$(ls -l --time-style="long-iso" . | grep '^d' | awk '{print $8}')
echo "directories are $listDIRS"
for eachDir in $listDIRS; do
  if [[ $eachDir != etc && $eachDir != lib && $eachDir != usr && $eachDir != var && $eachDir != opt && $eachDir != run && $eachDir != srv && $eachDir != sbin ]]; then
  echo "Install files from directory $eachDir? [y/N]"
    read reply
      case $reply in
         [yY]|[yY][Ee][Ss])
            echo "okay continuing"
         ;;
         [nN]|[nN][Oo])
            echo "Okay, ignoring directory $eachDir"
            continue
         ;;
         *)
            echo "Okay, ignoring directory $eachDir"
            continue
         ;;
      esac
  fi
  echo "installing files in $eachDir"
# take account of symlinks /bin /lib /sbin
  if [ -L "/$eachDir" ]; then # for /bin and /lib it's /usr/$eachDir. For /sbin, /usr/sbin is also a symlink
    echo "dir $eachDir is a symlink"
    if [ "$eachDir" = sbin ]; then # use /usr/bin, not /usr/sbin
      cp -a $eachDir/* /usr/bin
    else
      cp -a $eachDir/* /usr/${eachDir}
    fi
  elif [ "$eachDir" = usr ]; then # deal with symlink usr/sbin if it exists
    pushd usr
    local usrDIRS=$(ls -l --time-style="long-iso" . | grep '^d' | awk '{print $8}')
    echo "directories under usr are $usrDIRS"
    for eachusrDir in $usrDIRS; do
      if [ "$eachusrDir" = sbin ]; then # deal with the /usr/sbin symlink
        cp -a $eachusrDir/* /usr/bin
      elif [ "$eachusrDir" = libexec ]; then # use /usr/lib instead of /usr/libexec
        cp -a $eachusrDir/* /usr/lib
      elif [ "$eachusrDir" = man ]; then # dvd+rw-tools creates /usr/man
        cp -a $eachusrDir/* /usr/share/man
      elif [ "$eachusrDir" = usr ]; then # net-tools creates usr/usr/share/man
        cp -a $eachusrDir/share/man/* /usr/share/man
      else
        cp -a $eachusrDir /usr
      fi
    done
    popd
  elif [ "$eachDir" = var ]; then # deal with symlink /var/run if it exists
    pushd var
    local varDIRS=$(ls -l --time-style="long-iso" . | grep '^d' | awk '{print $8}')
    echo "directories under var are $varDIRS"
    for eachvarDir in $varDIRS; do
      if [ "$eachvarDir" = run ]; then # deal with the /var/run symlink
        cp -a $eachvarDir/* /run
      else
        cp -a $eachvarDir /var
      fi
    done
    popd
  else
    cp -a $eachDir /
  fi
  echo "Delete dir $eachDir? [Y/n]"
  read reply
    case $reply in
         [yY]|[yY][Ee][Ss])
            echo "okay deleting $eachDir"
            rm -rf $eachDir
         ;;
         [nN]|[nN][Oo])
            echo "okay leaving $eachDir in place"
         ;;
         *)
            echo "okay deleting $eachDir"
            rm -rf $eachDir
         ;;
    esac
done
popd
} # end destdirInstall
#
EOF
} # end destdirInstall
#
WriteScript1 () {
local IFS='
'
# remove docs statements and && and some other stuff
  case $pkgname in
    accountsservice)
       GetCommands \
	 | sed -e 's/meson/arch-meson/' \
	       -e 's/group=adm/group=wheel/' \
	       -e '/cat > \/etc\/polkit-1/,/systemctl enable accounts-daemon/d' \
	       -e 's/\(.*\)&&$/\1/' \
         >> $Output
    ;;
    acl)
     if [[ "$as_root" = false && "$useDESTDIR" = false ]]; then
       GetCommands \
        | sed -e 's/INSTALL_USER=root/INSTALL_USER=acl/' \
              -e 's/INSTALL_GROUP=root/INSTALL_GROUP=acl/' \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_BIN_DIR)/d' getfacl\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_BIN_DIR)/d' setfacl\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_BIN_DIR)/d' chacl\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(MAN_DEST)/d' man\/man1\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(MAN_DEST)/d' man\/man3\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(MAN_DEST)/d' man\/man5\/Makefile" \
              -e "/make install/i\  sed -i '0,/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_INC_DIR)/{//d;}' include\/Makefile" \
              -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_INC_DIR)\\\/sys/d' include\/Makefile" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
     else
       GetCommands \
        | sed -e 's/\(.*\)&&$/\1/' \
        >> $Output
     fi
    ;;
    acpid)
       GetCommands \
        | sed -e 's/usr --docdir/usr --sbindir=\/usr\/bin --docdir/' \
        | sed -e '/\/etc\/acpi\/events\/lid/,/make install-acpid/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    aisleriot)
       GetInternalCommands aisleriotComms \
        >> $Output
    ;;
    alacarte)
       GetInternalCommands basicComms  \
        | sed -e '/make install/a\  python2 -m compileall /usr/lib/python2.7/site-packages/Alacarte/' \
        >> $Output
    ;;
# not in the book
    amtk|ffmpegthumnaler|gnome-common|gnome-serch-tool|gnuchess|gsound|libbluray|libcddb|libmodplug|libnftnl|pygtk|pyatspi|ragel|sdl_image|seed|sysfsutils|tor|tvheadend|vdpauinfo|wayland-proto|xorg-fonts-encodings)
       GetInternalCommands basicComms >> $Output
    ;;
    alsa-lib)
       GetCommands \
        | sed -e '/make doc/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    alsa-utils)
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e '/disable-xmlto/a\              --with-udev-rules-dir=\/usr\/lib\/udev\/rules.d \\\n\              --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system \\\n\              --sbindir=\/usr\/bin \\'\
                  -e '/make install-alsa/d' \
                  -e '/make install/a\  cd alsactl\n\  make 90-alsa-restore.rules\n\  install -D -m644 90-alsa-restore.rules \/usr\/lib\/udev\/rules.d' \
                  -e '/alsactl/,/usermod/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/make install-alsa/d' \
                  -e '/alsactl/,/usermod/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
    ;;
    apache)
       if ! $as_root; then
         GetCommands \
          | sed -e '/groupadd/,/-s \/bin\/false/d' \
                -e '/enable-suexec=shared/a\              --sbindir=\/usr\/bin                    \\' \
                -e "/make install[[:space:]]/i\  sed -e 's/-o root -g root//' \\\\\n\      -e 's/root:root/apache:apache/' \\\\\n\      -i Makefile support/Makefile" \
                -e 's/mv -v \/usr\/sbin\/suexec/mv -v \/usr\/bin\/suexec/' \
		-e '/chgrp apache/,/make install-httpd/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else # as_root
         GetCommands \
          | sed -e '/make install-httpd/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    apache-ant)
      GetCommands \
       | sed -e '/chown -R root:root/d' \
             -e 's/ant.sh << EOF/ant.sh << "EOF"/' \
             -e 's/\(.*\)&&$/\1/' \
       >> $Output
    ;;
    apache-maven)
      GetCommands \
       | sed -e 's/'"$mavencomvers"'/'"$apachemavenvers"'/g' \
             -e 's/\(.*\)&&$/\1/' \
       >> $Output
    ;;
    appstream-glib)
      GetInternalCommands appstreamGlibComms >> $Output
    ;;
    asciidoc)
      GetCommands \
       | sed -e 's/make install/make DESTDIR="$CUR_DIR" install/' \
             -e 's/make docs/make DESTDIR="$CUR_DIR" docs/' \
             -e 's/\(.*\)&&$/\1/' \
       >> $Output
    ;;
    attr)
      if [[ "$as_root" = false && "$useDESTDIR" = false ]]; then
        GetCommands \
         | sed -e 's/INSTALL_USER=root/INSTALL_USER=attr/' \
               -e 's/INSTALL_GROUP=root/INSTALL_GROUP=attr/' \
               -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_BIN_DIR)/d' attr\/Makefile" \
               -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_BIN_DIR)/d' getfattr\/Makefile" \
               -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(PKG_BIN_DIR)/d' setfattr\/Makefile" \
               -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(MAN_DEST)/d' man\/man1\/Makefile" \
               -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(MAN_DEST)/d' man\/man2\/Makefile" \
               -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(MAN_DEST)/d' man\/man3\/Makefile" \
               -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -m 755 -d \\\\\$(MAN_DEST)/d' man\/man5\/Makefile" \
               -e 's/\(.*\)&&$/\1/' \
         >> $Output
      else
        GetCommands \
         | sed -e 's/\(.*\)&&$/\1/' \
         >> $Output
      fi
    ;;
    at-spi2-atk)
       GetCommands \
        | sed -e '/glib-compile-schemas/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    at-spi2-core)
       GetCommands \
        | sed -e 's/meson --prefix/arch-meson --prefix/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    audacity)
       GetInternalCommands audacityComms >> $Output
    ;;
    avahi)
       if ! $as_root; then
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e '/groupadd -fg 84 avahi/,/groupadd -fg 86 netdev/d' \
                  -e '/configure --prefix=/i\  PKG_CONFIG_PATH=/opt/qt5/lib/pkgconfig \\' \
                  -e '/disable-static/i\              --sbindir=\/usr\/bin  \\' \
                  -e 's/systemunitdir=\/lib/systemunitdir=\/usr\/lib/' \
                  -e '/systemctl enable avahi/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/groupadd -fg 84 avahi/,/groupadd -fg 86 netdev/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       else # as root
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
	    | sed -e 's/systemunitdir=\/lib/systemunitdir=\/usr\/lib/' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       fi
    ;;
    avr-binutils)
       GetInternalCommands avrbinutilsComms >> $Output
    ;;
    avr-gcc)
       GetInternalCommands avrgccComms >> $Output
    ;;
    avr-libc)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static --host=avr/' \
        >> $Output
    ;;
    babl)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/\/usr\/share\/gtk-doc/${CUR_DIR}\/usr\/share\/gtk-doc/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    bash-completion)
       GetInternalCommands basicComms >> $Output
    ;;
    bbswitch)
       GetInternalCommands bbswitchComms >> $Output
    ;;
    bind)
       if ! $as_root; then
         if $useDESTDIR; then
           GetCommands \
            | sed -e '/patch -Np1 -i/d' \
                  -e '/sysconfdir=/i\              --sbindir=\/usr\/bin      \\' \
                  -e '/bin\/tests\/system\/ifconfig.sh/d' \
                  -e '/groupadd/,/install -d -m770 -o named -g named/d' \
                  -e '/cd \/srv\/named/i install -vm755 -d \/srv\/named' \
                  -e '/mknod/,/chmod/d' \
                  -e '/rndc-confgen/,/dig www.linuxfromscratch.org/d' \
                  -e '/dig www.linuxfromscratch.org/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/patch -Np1 -i/d' \
                  -e '/bin\/tests\/system\/ifconfig.sh/d' \
                  -e '/groupadd/,/install -d -m770 -o named -g named/d' \
                  -e '/mknod/,/chmod/d' \
                  -e '/rndc-confgen/,/sed/d' \
                  -e '/resolv.conf.bak/,/dig www.linuxfromscratch.org/d' \
                  -e '/dig www.linuxfromscratch.org/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       else #as root
         GetCommands \
          | sed -e '/patch -Np1 -i/d' \
                -e '/bin\/tests\/system\/ifconfig.sh/d' \
                -e '/cp \/etc\/resolv.conf/,/dig www.linuxfromscratch.org/d' \
                -e '/dig www.linuxfromscratch.org/i chown -R named:named \/srv\/named' \
                -e '/dig www.linuxfromscratch.org/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    bind-tools)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/make -C bin\/dig install/make -C bin\/dig DESTDIR="${CUR_DIR}" install/' \
                -e 's/cp -v doc\/man\/{dig.1,host.1,nslookup.1} \/usr/cp -v doc\/man\/{dig.1,host.1,nslookup.1} "${CUR_DIR}"\/usr/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    blas)
       GetInternalCommands blasComms >> $Output
    ;;
    blfs-btscrpts)
       GetInternalCommands blfsbtscrptsComms >> $Output
    ;;
    bluez)
       if [ "$SYSTEMD" = yes ]; then
         if [ "$isSystemdBook" = true ]; then
           GetCommands \
            | sed -e '/enable-library/i\              --libexecdir=\/usr\/lib \\\n\              --with-udevdir=\/usr\/lib\/udev \\\n\              --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system \\' \
                  -e 's/libexec/lib/' \
                  -e '/cat > \/etc\/bluetooth\/rfcomm/,/systemctl enable --global obex/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/disable-systemd/i\              --libexecdir=\/usr\/lib \\\n\              --with-udevdir=\/usr\/lib\/udev \\\n\              --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system' \
                  -e '/disable-systemd/d' \
                  -e 's/libexec/lib/' \
                  -e '/cat > \/etc\/bluetooth\/rfcomm/,/make install-bluetooth/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       else
         GetCommands \
          | sed -e '/make install-bluetooth/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    bogofilter)
       if [ "$isSystemdBook" = true ]; then
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms \
          | sed -e 's/sysconfdir=\/etc/sysconfdir=\/etc\/bogofilter/' \
          >> $Output
       fi
    ;;
    boost)
       GetCommands \
        | sed -e 's/\*\*EDITME<N>EDITME\*\*/4/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    brasero)
       GetCommands \
        | sed -e '/configure_commands()/i autoreconf -fi' \
              -e 's/prefix=\/usr/prefix=\/usr \\\n\              --disable-caches/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    bridge-utils)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr --sbindir=\/usr\/bin/' \
              -e '/make install-service-bridge/d' \
              -e '/cat > \/etc\/sysconfig/,/EOF/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    bumblebee)
       GetInternalCommands bumblebeeComms >> $Output
    ;;
    busybox)
       GetInternalCommands busyboxComms >> $Output
    ;;
    ca-certificates)
       if ! $useDESTDIR; then # remove dir install commands
         if ! $as_root; then
           if $useProxy; then # add proxy details to make-ca
             GetCommands \
              | sed -e '/systemctl enable update-pki.timer/,/\/usr\/sbin\/make-ca -r -f/d' \
                    -e "/make install/i\  sed -e '/vdm755 \\\\\$(DESTDIR)\\\\\$(SBINDIR)/d' \\\\\n\      -e '/vdm755 \\\\\$(DESTDIR)\\\\\$(MANDIR)/d' \\\\\n\      -e '/vdm755 \\\\\$(DESTDIR)\\\\\$(ETCDIR)/d' -i Makefile" \
                    -e 's/\/usr\/sbin\/make-ca -g/\/usr\/sbin\/make-ca -g -p \${ipaddr}:3128/' \
                    -e 's/\(.*\)&&$/\1/' \
              >> $Output
           else # not useProxy
             GetCommands \
              | sed -e '/systemctl enable update-pki.timer/,/\/usr\/sbin\/make-ca -r -f/d' \
                    -e "/make install/i\  sed -e '/vdm755 \\\\\$(DESTDIR)\\\\\$(SBINDIR)/d' \\\\\n\      -e '/vdm755 \\\\\$(DESTDIR)\\\\\$(MANDIR)/d' \\\\\n\      -e '/vdm755 \\\\\$(DESTDIR)\\\\\$(ETCDIR)/d' -i Makefile" \
                    -e 's/\(.*\)&&$/\1/' \
  	    >> $Output
           fi
	 else # as root TODO may need the useProxy test here as well
           GetCommands \
            | sed -e 's/\(.*\)&&$/\1/' \
	    >> $Output
	 fi
       else # using DESTDIR
         GetCommands \
          | sed -e '/\/usr\/sbin\/make-ca -g/,/systemctl enable update-pki.timer/d ' \
	        -e 's/\(.*\)&&$/\1/' \
	  >> $Output
       fi
    ;;
    cairo)
       GetInternalCommands basicNinjaComms \
        | sed -e 's/mkdir build/mkdir -pv cairo-build/' \
              -e 's/cd build/cd cairo-build/' \
              -e 's/arch-meson/arch-meson -D spectre=disabled \\\n             -D tee=enabled \\\n             -D tests=disabled/' \
        >> $Output
    ;;
    cantarell-fonts)
       GetInternalCommands cantarellComms >> $Output
    ;;
    caribou)
       GetInternalCommands basicComms \
        | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/caribou/' \
              -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
        >> $Output
    ;;
    cbindgen)
       if $useDESTDIR; then
         GetCommands \
          | sed -e '/install -Dm755 target/i\  mkdir -pv "${CUR_DIR}"\/usr\/bin' \
	        -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    cblas)
       GetInternalCommands blasComms \
        | sed -e 's/cd BLAS/cd CBLAS/' \
        >> $Output
    ;;
    ccache)
       if $useDESTDIR; then
         GetInternalCommands ccachedestdirComms >> $Output
       else
         GetInternalCommands ccacheComms >> $Output
       fi
    ;;
    cdparanoia)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/make install/make prefix=${CUR_DIR}\/usr MANDIR=${CUR_DIR}\/usr\/share\/man install/' \
                -e 's/chmod -v 755 \/usr\/lib\/libcdda/chmod -v 755 ${CUR_DIR}\/usr\/lib\/libcdda/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e "/make install/i\  sed -i '/\\\\\$(INSTALL) -d -m 0755/d' Makefile" \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    cdrdao)
       GetCommands \
        | sed -e "/configure_commands()/i sed -i 's/bitrate_table\\\[1\\\]\\\[i\\\]/lame_get_bitrate(1, i)/g' utils/toc2mp3.cc" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    celt)
       GetInternalCommands basicComms \
	| sed -e '/disable-static/i\              --enable-custom-modes \\' \
	>> $Output
    ;;
    cmake)
       GetCommands \
        | sed -e '/docdir/d' \
              -e '/no-system-librhash/a\              --docdir=/share/doc/cmake-'"${cmakevers}"'' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    clutter)
       if [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    clutter-gst)
      if [ "$isSystemdBook" = true ]; then
        GetCommands \
         | sed -e 's/\(.*\)&&$/\1/' \
         >> $Output
      else
        GetInternalCommands basicComms >> $Output
      fi
    ;;
    cmocka)
       GetInternalCommands cmockaComms >> $Output
    ;;
    codelite)
       GetInternalCommands codeliteComms >> $Output
    ;;
    cogl)
       if [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e "/make_commands()$/N;/make_commands()\n{ :/a\  sed -i -e 's\/ -shared \/ -Wl,-O1,--as-needed\\\\0/g' libtool" \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    coin)
       GetInternalCommands coinComms >> $Output
    ;;
    colord)
       GetCommands \
        | sed -e '/groupadd/,/-g colord -s \/bin\/false colord/d' \
              -e '/meson --prefix/a\      --libexecdir=\/usr\/lib\/colord      \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    colord-gtk)
       GetCommands \
        | sed -e '/enable-vala/i\              --libexecdir=\/usr\/lib\/colord \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    confuse)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/enable-shared/' \
        >> $Output
    ;;
    connman)
       GetInternalCommands connmanComms >> $Output
    ;;
    cracklib)
       GetCommands \
        | sed -e 's/--prefix=\/usr/--prefix=\/usr --sbindir=\/usr\/bin/' \
              -e 's/--with-default-dict=\/lib/--with-default-dict=\/usr\/lib/' \
              -e '/mv -v/,/ln -sfv ..\/..\/lib/d' \
              -e 's/install -v -m755 -d      \/lib/install -v -m755 -d      \/usr\/lib/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    crda)
       GetInternalCommands crdaComms >> $Output
    ;;
    cuda)
       GetInternalCommands cudaComms >> $Output
    ;;
    cups)
       if ! $as_root; then
         if $useDESTDIR; then
           GetCommands \
            | sed -e '/useradd/,/usermod/d' \
                  -e '/libdir=\/usr\/lib/a\              --sbindir=\/usr\/bin \\' \
                  -e '/systemctl enable/d' \
                  -e 's/make install/make BUILDROOT="$CUR_DIR" install/' \
                  -e 's/rm -rf \/tmp/rm -rf ${CUR_DIR}\/tmp/' \
                  -e '/ln -svnf \.\.\/cups/i mkdir -pv ${CUR_DIR}\/usr\/share' \
                  -e 's/ \/usr\/share/ ${CUR_DIR}\/usr\/share/' \
                  -e 's/echo "ServerName \/run\/cups\/cups.sock" > \/etc\/cups\/client.conf/echo "ServerName "${CUR_DIR}"\/run\/cups\/cups.sock" > "${CUR_DIR}"\/etc\/cups\/client.conf/' \
                  -e '/gtk-update-icon-cache/d' \
                  -e '/cat > \/etc\/pam.d\/cups/i mkdir -pv ${CUR_DIR}\/etc\/pam.d\/cups' \
                  -e 's/cat > \/etc\/pam/cat > ${CUR_DIR}\/etc\/pam/' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else # installs as DESTDIR even though useDESTDIR not set
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e '/useradd/,/usermod/d' \
                  -e 's/firefox/chromium/' \
                  -e '/systemctl enable/d' \
                  -e 's/make install/make BUILDROOT="$CUR_DIR" install/' \
                  -e 's/rm -rf \/tmp\/cupsinit/ rm -rf ${CUR_DIR}\/tmp/' \
                  -e '/ln -svnf \.\.\/cups/i mkdir -pv ${CUR_DIR}\/usr\/share/doc' \
                  -e 's/ \/usr\/share\/doc/ ${CUR_DIR}\/usr\/share\/doc/' \
                  -e 's/echo "ServerName \/run\/cups\/cups.sock" > \/etc\/cups\/client.conf/echo "ServerName "${CUR_DIR}"\/run\/cups\/cups.sock" > "${CUR_DIR}"\/etc\/cups\/client.conf/' \
                  -e '/gtk-update-icon-cache/d' \
                  -e 's/cat > \/etc\/pam/cat > ${CUR_DIR}\/etc\/pam/' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else # sysv
           GetCommands \
            | sed -e '/useradd/,/usermod/d' \
                  -e '/make install-cups/d' \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BUILDROOT)\\\\\$(DBUSDIR)\\\/system.d; \\\\\\\/d' desktop\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LOCALEDIR)/d' locale\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(MANDIR)\\\/man1/d' man\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(MANDIR)\\\/man5/d' man\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(MANDIR)\\\/man7/d' man\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(AMANDIR)\\\/man\\\\\$(MAN8DIR)/d' man\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BINDIR)/d' Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' cups\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' filter\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' cgi-bin\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' ppdc\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(LIBDIR)/d' scheduler\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BINDIR)/d' test\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BINDIR)/d' berkeley\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(SBINDIR)/d' berkeley\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) \\\\\$(BINDIR)/d' ppdc\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(SBINDIR)/d' scheduler\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(SBINDIR)/d' systemv\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(BINDIR)/d' systemv\/Makefile" \
                  -e "/make install/i\  sed -i '/\\\\\$(INSTALL_DIR) -m 755 \\\\\$(SERVERBIN)$/d' scheduler/Makefile" \
                  -e '/gtk-update-icon-cache/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi # test if SYSTEMD
         fi # if useDESTDIR
       else # as root
         GetCommands \
          | sed -e 's/\*\*EDITME<username>EDITME\*\*/john/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    cups-filters) # uses DESTDIR even though useDESTDIR is not set
       GetCommands \
        | sed -e '/sysconfdir=\/etc/i\              --sbindir=\/usr\/bin   \\' \
              -e 's/disable-avahi/enable-avahi/' \
              -e '/docdir=\/usr/i\              --enable-auto-setup-driverless \\' \
              -e 's/make install/make DESTDIR="$CUR_DIR" install/' \
              -e '/install -v -m644 utils/i\  mkdir -pv ${CUR_DIR}\/usr\/lib\/systemd\/system' \
              -e 's/service \/lib\/systemd/service ${CUR_DIR}\/usr\/lib\/systemd/' \
              -e '/systemctl enable cups-browsed/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    curl)
       GetCommands \
        | sed -e '/cat >> tests/,/EOF/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    cvs)
       GetCommands \
        | sed -e '/make -C doc html txt/d' \
              -e "/sed -e 's\/rsh};\/ssh};/,/-i src\/sanity.sh/d" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    cyrus-sasl)
       GetCommands \
        | sed -e 's/\.\/configure/CFLAGS+="-fPIC" \.\/configure/' \
              -e '/sysconfdir=\/etc/i\              --sbindir=\/usr\/bin \\' \
              -e '/make install-saslauthd/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    dav1d)
       GetInternalCommands basicNinjaComms \
        | sed -e 's/arch-meson/arch-meson -Dtestdata_tests=false/' \
        >> $Output
    ;;       
    db)
       if ! $as_root; then
         GetCommands \
          | sed -e 's/root:root/db:db/' \
              -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    dbus)
       if [ "$SYSTEMD" = yes ]; then # dbus already installed
         GetInternalCommands dbusComms >> $Output
       else
         GetCommands \
          | sed -e '/groupadd/,/messagebus -s/d' \
                -e '/make distclean/,/kill $DBUS_SESSION_BUS_PID/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    dbus-glib)
       GetCommands \
        | sed -e 's/disable-static/disable-static --enable-bash-completion=no/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    dconf)
       GetCommands \
        | sed -e 's/meson/arch-meson/' \
              -e 's/'"$dconfedcomvers"'/'"$dconfed_vers"'/' \
              -e '/cd dconf-editor/a mkdir build\ncd    build\necho -n editorConfigure...\n{ configure_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/editorconfigure.err" ;} &>"$CUR_DIR/editorconfigure.log"\ntest_pipe\necho -n editorCompile...\n{ make_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/editormake.err" ;} &>"$CUR_DIR/editormake.log"\ntest_pipe\necho -n editorInstall...\n{ install_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/editorinstall.err" ;} &>"$CUR_DIR/editorinstall.log"\ntest_pipe' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    dejavu-fonts)
       GetInternalCommands dejavuComms >> $Output
    ;;
    dhcp)
       GetCommands \
        | sed -e '/missing_ipv6-1.patch/d' \
              -e '/sysconfdir/i\              --sbindir=\/usr\/bin \\' \
              -e '/mv -v \/usr\/sbin\/dhclient \/sbin/d' \
              -e '/make -C server install/,/client\/scripts\/linux \/sbin\/dhclient-script/d' \
              -e 's/\/sbin\/dhclient/\/usr\/bin\/dhclient/' \
              -e '/dhclient \*\*EDITME<eth0>EDITME\*\*/,/make install-dhcpd/d' \
              -e '/make install-dhclient/,/make install-dhcpd/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    dhcpcd)
       if [[ "$as_root" = false && "$useDESTDIR" = false ]]; then
         GetCommands \
          | sed -e '/groupadd -g 52 dhcpcd/,/chown    -v dhcpcd:dhcpcd/d' \
                -e 's/libexecdir=\/lib/libexecdir=\/usr\/lib/' \
                -e '/dbdir=/i\              --sbindir=\/usr\/bin \\\n\              --runstatedir=\/run \\' \
                -e '/make install-dhcpcd/d' \
                -e "/make install/i\  sed -e '/\\\\\${INSTALL} -d \\\\\${DESTDIR}\\\\\${LIBEXECDIR}/ s/^/#/' \\\\\n\      -e '/\\\\\${INSTALL} -d \\\\\${DESTDIR}\\\\\${SBINDIR}/ s/^/#/' \\\\\n\      -e '/\\\\\${INSTALL} -d \\\\\${DESTDIR}\\\\\${MANDIR}\\\/man5/ s/^/#/' \\\\\n\      -e '/\\\\\${INSTALL} -d \\\\\${DESTDIR}\\\\\${MANDIR}\\\/man8/ s/^/#/' \\\\\n\      -e '/\\\\\${INSTALL} -d \\\\\${DESTDIR}\\\\\${SYSCONFDIR}/ s/^/#/' \\\\\n\      -i src/Makefile" \
                -e "/make install/i\  sed -e '/\\\\\${INSTALL} -d \\\\\${DESTDIR}\\\\\${MANDIR}\\\/man8/ s/^/#/' \\\\\n\      -i hooks/Makefile" \
	        -e '/systemctl start/,/systemctl enable/d' \
	        -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/groupadd -g 52 dhcpcd/,/chown    -v dhcpcd:dhcpcd/d' \
                -e 's/libexecdir=\/lib/libexecdir=\/usr\/lib/' \
                -e '/dbdir=/i\              --sbindir=\/usr\/bin \\\n\              --runstatedir=\/run \\' \
                -e '/make install-dhcpcd/d' \
                -e '/systemctl start/,/systemctl enable/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    dialog)
       GetInternalCommands basicComms \
        | sed -e 's/make install/make install-full/' \
        >> $Output
    ;;
    dmenu2)
       GetInternalCommands libdcadecComms >> $Output
    ;;
    docbook-xml)
       if $useDESTDIR; then
         GetInternalCommands docbkXmlDestdirComms >> $Output
       else
	 if ! $as_root; then
           GetCommands \
            | sed -e '/chown -R root:root/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
	 else
           GetCommands \
	    | sed -e 's/\(.*\)&&$/\1/' \
	    >> $Output
	 fi
       fi
    ;;
    docbook-xsl)
       if $useDESTDIR; then
         GetInternalCommands docbkXslDestdirComms >> $Output
       else
         GetCommands \
          | sed -e '/tar -xf/d' \
                -e '/install -v -m644 -D README/i install -v -d \/usr\/share\/doc\/docbook-xsl-'"${docbookxslvers}"'' \
                -e '/cp -v -R doc/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    dosfstools)
       GetInternalCommands dosfstoolsComms >> $Output
    ;;
    dotconf)
       GetInternalCommands basicComms \
        | sed -e '/configure --prefix=\/usr/i\  autoreconf -i' \
        >> $Output
    ;;
    doxygen)
       GetCommands \
        | sed -e '/cmake -DDOC_INSTALL_DIR/,/make docs/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    dsktp-file-utls)
       GetCommands \
        | sed -e '/update-desktop-database/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    dvd-rw-tools)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/make prefix=\/usr install/make prefix=${CUR_DIR}\/usr install/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    emergent)
       GetInternalCommands emergentComms >> $Output
    ;;
    enca)
       GetInternalCommands basicComms \
        | sed -e '/disable-static/i\              --mandir=/usr/share/man \\\n\              --with-librecode=/usr \\\n\              --enable-external \\' \
        >> $Output
    ;;
    enchant)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/\/usr\/include\/enchant/${CUR_DIR}\/usr\/include\/enchant/' \
	        -e 's/\/usr\/bin\/enchant/${CUR_DIR}\/usr\/bin\/enchant/' \
		-e 's/\ \/usr\/lib/\ ${CUR_DIR}\/usr\/lib/' \
                -e '/test-enchant.txt/,/enchant -d en_GB -a/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/test-enchant.txt/,/enchant -d en_GB -a/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    esound)
       GetCommands \
        | sed -e '/chown -v root:root \/usr\/share\/doc\/esound-0.2.41/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    espeak)
       GetInternalCommands espeakComms >> $Output
    ;;
    ethtool)
       GetInternalCommands basicComms \
        | sed -e '/disable-static/i\              --mandir=/usr/share/man \\\n\              --sbindir=/usr/bin \\' \
        >> $Output
    ;;
    eudev)
       GetInternalCommands eudevComms >> $Output
    ;;
    evol-data-server)
       GetCommands \
        | sed -e '/DENABLE_VALA_BINDINGS/i\        -DLIBEXEC_INSTALL_DIR=\/usr\/lib\/evolution-data-server \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    evince)
       GetCommands \
        | sed -e 's/meson/arch-meson/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    evolution)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static \\\n\              --enable-nss=yes \\\n\              --with-openldap=yes \\\n\              --enable-smime=yes \\\n\              --with-krb5=\/usr \\\n\              --disable-schemas-compile \\\n\              --disable-spamassassin \\\n\              --disable-text-highlight \\\n\              --disable-pst-import \\\n\              --disable-gtkspell/' \
        >> $Output
    ;;
    faac)
       GetCommands \
        | sed -e '/Front_Left/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    faad2)
       GetCommands \
        | sed -e '/sample.wav/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    farstream) # not in any book
       GetInternalCommands farstreamComms >> $Output
    ;;
    feh)
       GetInternalCommands fehComms >> $Output
    ;;
    ffmpeg)
       GetCommands \
        | sed -e '/pushd doc/,/unset DOCNAME/d' \
              -e '/make fate-rsync SAMPLES=fate-suite/,/grep \^TEST/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    firefox)
       GetCommands \
        | sed -e '/If you have a multicore machine/,/ac_add_options --enable-system-hunspell/d' \
              -e 's/\#ac_add_options --enable-startup-notification/ac_add_options --enable-startup-notification/' \
              -e 's/ac_add_options --disable-gconf/\#ac_add_options --disable-gconf/' \
              -e '/patch -Np1 -i \.\.\/firefox-/d' \
              -e 's/make -f client.mk/SHELL=\/bin\/sh make -f client.mk/' \
              -e '0,/make -f client.mk install/! s/SHELL=\/bin\/sh make -f client.mk install//' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    flashplugin)
       GetInternalCommands flashComms >> $Output
    ;;
    fluxbox)
       GetCommands \
        | sed -e '/echo startfluxbox/,/fluxbox\/theme\/theme.cfg/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    fontconfig)
        GetCommands \
        | sed -e '/install -v -dm755/,/\/usr\/share\/{man\/man/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    freeglut)
       GetCommands \
        | sed -e '/DCMAKE_BUILD_TYPE=Release/i\        -DCMAKE_INSTALL_LIBDIR=lib       \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    freetype)
       GetCommands \
        | sed -e '/tar -xf \.\.\/freetype-doc/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    fuse3)
       GetCommands \
	| sed -e '/doxygen/,/pytest/d' \
	      -e '/mv -vf   \/usr\/lib\/libfuse3/,/mv -vf \/usr\/sbin\/mount/d' \
	      -e 's/\(.*\)&&$/\1/' \
	>> $Output
    ;;
    gcab)
       GetInternalCommands basicNinjaComms \
        | sed -e 's/arch-meson ../arch-meson \\\n\  -Ddocs=false \\\n\  ../' \
	>> $Output
    ;;
    gcc)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/d,fortran,go,objc,obj-c++/fortran/' \
                -e '/--prefix=\/usr/a\      --libexecdir=\/usr\/lib                          \\' \
                -e '/ulimit -s 32768/,/contrib\/test_summary/d' \
                -e 's/mv -v \/usr\/lib\/\*gdb.py/mv -v "${CUR_DIR}"\/usr\/lib\/\*gdb.py/' \
                -e 's/rm -rf \/usr\/lib\/gcc/rm -rf "${CUR_DIR}"\/usr\/lib\/gcc/' \
                -e '/chown -v -R root:root/,/\/usr\/lib\/gcc\/\*linux-gnu/d' \
                -e '/ln -v -sf ..\/usr\/bin\/cpp/,/ln -sfv ..\/..\/libexec\/gcc/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/d,fortran,go,objc,obj-c++/fortran/' \
                -e '/--prefix=\/usr/a\      --libexecdir=\/usr\/lib                          \\' \
                -e '/ulimit -s 32768/,/contrib\/test_summary/d' \
                -e '/chown -v -R root:root/,/\/usr\/lib\/gcc\/\*linux-gnu/d' \
                -e '/ln -v -sf ..\/usr\/bin\/cpp/,/ln -sfv ..\/..\/libexec\/gcc/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    gconf)
       GetCommands \
        | sed -e 's/disable-static/disable-static --libexecdir=\/usr\/lib\/GConf/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gcr)
       GetCommands \
        | sed -e 's/meson --prefix/arch-meson --prefix/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gdb)
       GetCommands \
        | sed -e '/make -C gdb\/doc doxy/,/popd/d' \
              -e '/rm -rf gdb\/doc\/doxy\/xml/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gdk-pixbuf)
       GetCommands \
        | sed -e '/gdk-pixbuf-query-loaders/d' \
	      -e 's/meson/arch-meson/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gdm)
       GetCommands \
        | sed -e '/groupadd -g 21 gdm/,/passwd -ql gdm/d' \
              -e '/meson --prefix=/a\        --libexecdir=\/usr\/lib\/gdm \\' \
              -e '/systemctl enable gdm/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gedit)
       GetInternalCommands basicNinjaComms \
        | sed -e 's/arch-meson/arch-meson -Ddocumentation=false/' \
        >> $Output
    ;;
    geoclue)
        GetCommands \
        | sed -e 's/meson/arch-meson/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    geocode-glib)
       GetCommands \
        | sed -e 's/meson/arch-meson/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
    ;;
    ghostscript)
       GetCommands \
        | sed -e 's/LIBS=-lz/LIBS=-lz --with-install-cups/' \
              -e '/bin\/gs/d' \
              -e '/tar -xvf/ i for (( i=0; i<\${#fontfile[@]}; i++ )); do' \
              -e 's/\*\*EDITME<font-tarball>EDITME\*\*/\${fontfile[\$i]}/' \
              -e '/tar -xvf/ a done' \
              -e '/gs -q -dBATCH \/usr\/share\/ghostscript/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    giflib)
       if [[ "$as_root" = false && "$useDESTDIR" = false ]]; then
         GetCommands \
          | sed -e "/make PREFIX=\/usr/i\  sed -e '/\\\\\$(INSTALL) -d \"\\\\\$(DESTDIR)\\\\\$(BINDIR)\"/ s/^/#/' \\\\\n\      -e '/\\\\\$(INSTALL) -d \"\\\\\$(DESTDIR)\\\\\$(INCDIR)\"/ s/^/#/' \\\\\n\      -e '/\\\\\$(INSTALL) -d \"\\\\\$(DESTDIR)\\\\\$(LIBDIR)\"/ s/^/#/' \\\\\n\      -e '/\\\\\$(INSTALL) -d \"\\\\\$(DESTDIR)\\\\\$(MANDIR)\\\/man1\"/ s/^/#/' \\\\\n\      -i Makefile" \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       elif $useDESTDIR; then
         GetCommands \
          | sed -e 's/make PREFIX=\/usr install/make PREFIX=\/usr DESTDIR="${CUR_DIR}" install/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    gimp)
       GetCommands \
        | sed -e 's/--sysconfdir=\/etc/--sysconfdir=\/etc \\\n              --libexecdir=\/usr\/lib --disable-python/' \
	      -e 's/\(.*\)&&$/\1/' \
	>> $Output
    ;;
    git)
       GetCommands \
        | sed -e '/with-gitconfig/i\              --libexecdir=/usr/lib \\' \
              -e '/make html/,/make man/d' \
              -e 's/make perllibdir/make DESTDIR="${CUR_DIR}" perllibdir/' \
              -e '/make install-man/d' \
              -e '/tar -xf ..\/git-manpages/i\  install -d -m755 ${CUR_DIR}\/usr\/share\/man' \
              -e 's/-C \/usr\/share\/man/-C ${CUR_DIR}\/usr\/share\/man/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gjs)
       GetCommands \
        | sed -e 's/meson/arch-meson/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output 
    ;;
    glew)
       GetInternalCommands glewComms \
        | sed -e "/make install.all/i\  sed -e '/\\\\\$(INSTALL) -d -m 0755 \"\\\\\$(DESTDIR)\\\\\$(LIBDIR)\"/ s/^/#/' \\\\\n\      -e '/\\\\\$(INSTALL) -d -m 0755 \"\\\\\$(DESTDIR)\\\\\$(BINDIR)\"/ s/^/#/' \\\\\n\      -e '/\\\\\$(INSTALL) -d -m 0755 \"\\\\\$(DESTDIR)\\\\\$(INCDIR)\"/ s/^/#/' \\\\\n\      -e '/\\\\\$(INSTALL) -d -m 0755 \"\\\\\$(DESTDIR)\\\\\$(PKGDIR)\"/ s/^/#/' \\\\\n\      -i Makefile" \
	>> $Output
    ;;
    glib-networking)
       GetCommands \
        | sed -e 's/disable-static/disable-static --libexecdir=\/usr\/lib\/glib-networking/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gmime)
       GetCommands \
        | sed -e '/pushd/,/popd/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnm-power-mngr)
       GetInternalCommands basicComms \
        | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/gnome-power-manager/' \
        >> $Output
    ;;
    gnome-bluetooth)
       GetCommands \
        | sed -e '/configure_commands()/i export PYTHONPATH="\/usr\/share\/glib-2.0"' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnome-calculator)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib\/gnome-calculator/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnome-chess|gnome-clocks|gnome-tweaks|grilo|grilo-plugins|yelp-tools)
       GetInternalCommands basicNinjaComms >> $Output
    ;;
    gnome-cntrl-cntr)
       GetCommands \
        | sed -e 's/meson --prefix/arch-meson --prefix/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnome-colr-mngr)
       GetCommands \
        | sed -e 's/meson --prefix/arch-meson --prefix/' \
              -e "/configure_commands()/i sed -e 's/    gtk-update-icon/#   gtk-update-icon/' \\\\\n\    -e 's/    update-desktop/#   update-desktop/' \\\\\n\    -i ../meson_post_install.sh" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnome-desktop)
       GetCommands \
        | sed -e 's/meson/arch-meson/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnome-dictionary)
       GetInternalCommands basicNinjaComms \
        | sed -e "/configure_commands()/i sed -e 's/  glib-compile/# glib-compile/' \\\\\n\    -e 's/  update-desktop/# update-desktop/' \\\\\n\    -i ../build-aux/post-install.sh" \
        >> $Output
    ;;
    gnome-disk-util)
       GetCommands \
        | sed -e 's/meson --prefix=\/usr/arch-meson ../' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnome-keyring)
       if [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e 's/with-pam-dir=\/lib/with-pam-dir=\/usr\/lib/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    gnome-menus|gnome-bckgrnds|gnome-shell-ext|gnome-user-docs)
       if [ "$isSystemdBook" = true ]; then
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms >> $Output
       fi
    ;;
    gnome-pwr-mngr)
       GetInternalCommands basicNinjaComms \
        | sed -e "/configure_commands()/i sed -e 's/    glib-compile/#   glib-compile/' \\\\\n\    -e 's/    gtk-update-icon/#   gtk-update-icon/' \\\\\n\    -e 's/    update-desktop/#   update-desktop/' \\\\\n\    -i ../meson_post_install.sh" \
        >> $Output
    ;;
    gnome-session)
       GetCommands \
        | sed -e 's@meson@arch-meson@' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnome-set-daemon)
       GetCommands \
        | sed -e '/configure_commands()/i export PYTHONPATH="\/usr\/share\/glib-2.0"' \
              -e 's@meson@arch-meson@' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnome-shell)
       GetCommands \
	| sed -e 's@meson@arch-meson@' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnome-system-mon)
       GetInternalCommands basicNinjaComms >> $Output
    ;;
    gnome-terminal)
       GetInternalCommands gnometermComms >> $Output
    ;;
    gnm-tweaks)
       GetInternalCommands basicNinjaComms >> $Output
    ;;
    gnm-user-share)
       GetInternalCommands gnmusershareComms >> $Output
    ;;
    gnupg)
       GetCommands \
        | sed -e '/docdir=\/usr/i\              --sbindir=\/usr\/bin \\\n\              --libexecdir=\/usr\/lib\/gnupg \\' \
              -e '/makeinfo --html/,/make -C doc pdf ps/d' \
              -e '/install -v -m755 -d \/usr\/share\/doc/i ln -s gpg2 \/usr\/bin\/gpg\n ln -s gpgv2 \/usr\/bin\/gpgv\n rm \/usr\/share\/gnupg\/com-certs.pem' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gnutls)
       GetCommands \
        | sed -e '/reference install-data-local/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    goa)
       GetInternalCommands basicComms \
        | sed -e '/configure_commands()/i export PYTHONPATH="\/usr\/share\/glib-2.0"' \
              -e 's/disable-static/disable-static --libexecdir=\/usr\/lib\/gnome-online-accounts/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gom)
       GetCommands \
        | sed -e '/disable-static/i\              --libexecdir=\/usr\/lib\/gnome-online-miners \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gpm)
       if $useDESTDIR; then
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e 's/usr --sysconfdir/usr --sbindir=\/usr\/bin --sysconfdir/' \
                  -e '/install-info --dir-file=\/usr\/share\/info\/dir/,/\/usr\/share\/info\/gpm.info/d' \
                  -e 's/libgpm.so.2.1.0 \/usr\/lib\/libgpm.so/libgpm.so.2.1.0 ${CUR_DIR}\/usr\/lib\/libgpm.so/' \
                  -e 's/install -v -m644 conf\/gpm-root.conf \/etc/install -v -m644 conf\/gpm-root.conf ${CUR_DIR}\/etc/' \
                  -e '/make install-gpm/i chmod 755 ${CUR_DIR}\/usr\/lib\/libgpm.so.\*' \
                  -e '/cat > \/etc\/sysconfig\/mouse/i install -m755 -d ${CUR_DIR}\/etc\/sysconfig' \
                  -e 's/cat > \/etc\/sysconfig\/mouse <</cat > ${CUR_DIR}\/etc\/sysconfig\/mouse <</' \
                  -e '/make install-gpm/d' \
                  -e '/install -v -dm755 \/etc\/systemd/,/echo \"ExecStart/d' \
                  -e 's/\*\*EDITME<yourdevice>EDITME\*\*/\/dev\/input\/mice/' \
                  -e 's/\*\*EDITME<yourprotocol>EDITME\*\*/imps2/' \
                  -e 's/\*\*EDITME<additional options>EDITME\*\*//' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/make install-gpm/i chmod 755 \/usr\/lib\/libgpm.so.\*' \
                  -e '/make install-gpm/d' \
                  -e 's/\*\*EDITME<yourdevice>EDITME\*\*/\/dev\/input\/mice/' \
                  -e 's/\*\*EDITME<yourprotocol>EDITME\*\*/imps2/' \
                  -e 's/\*\*EDITME<additional options>EDITME\*\*//' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       else
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e '/make install-gpm/i chmod 755 \/usr\/lib\/libgpm.so.\*' \
                  -e '/make install-gpm/d' \
                  -e '/install -v -dm755 \/etc\/systemd/,/echo \"ExecStart/d' \
                  -e 's/\*\*EDITME<yourdevice>EDITME\*\*/\/dev\/input\/mice/' \
                  -e 's/\*\*EDITME<yourprotocol>EDITME\*\*/imps2/' \
                  -e 's/\*\*EDITME<additional options>EDITME\*\*//' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/make install-gpm/i chmod 755 \/usr\/lib\/libgpm.so.\*' \
                  -e '/make install-gpm/d' \
                  -e 's/\*\*EDITME<yourdevice>EDITME\*\*/\/dev\/input\/mice/' \
                  -e 's/\*\*EDITME<yourprotocol>EDITME\*\*/imps2/' \
                  -e 's/\*\*EDITME<additional options>EDITME\*\*//' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       fi
    ;;
    gptfdisk)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/make install/install -d ${CUR_DIR}\/usr\/{bin,share\/{doc\/gdisk,man\/man8}}\n\  install -t ${CUR_DIR}\/usr\/bin {,c,s}gdisk fixparts\n\  install -m644 -t ${CUR_DIR}\/usr\/share\/man\/man8 {{,c,s}gdisk,fixparts}.8\n\  install -m644 -t ${CUR_DIR}\/usr\/share\/doc\/gdisk README NEWS/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e "/make install/i\  sed -i '/install -dm 755 \\\\\$(DESTDIR)\\\/sbin \\\\\$(DESTDIR)/d' Makefile" \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    graphene)
       GetInternalCommands basicNinjaComms \
        | sed -e 's/arch-meson ../arch-meson \\\n\      -D gtk_doc=false \\\n\      -D installed_tests=false \\\n\      ../' \
        >> $Output
    ;;
    graphite2)
       GetCommands \
        | sed -e '/make docs/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    grep)
       GetInternalCommands grepComms >> $Output
    ;;
    graphviz)
       GetCommands \
        | sed -e '/wget -c http/,/O graphviz/d' \
	      -e '/patch -p1 -i/d' \
	      -e 's/\(.*\)&&$/\1/' \
	>> $Output
    ;;
    gset-dsktp-schms)
       GetCommands \
        | sed -e '/glib-compile-schemas/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gsl)
       GetCommands \
        | sed -e '/make html/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gssdp)
       GetInternalCommands basicNinjaComms >> $Output
    ;;
    gstreamer)
       GetCommands \
        | sed -e '/meson  --prefix=/a\       --libexecdir=/usr/lib \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gst-plgns-bad|gst-plgns-base|gst-plgns-good|gst-plgns-ugly|gst-libav)
       GetCommands \
        | sed -e '/meson  --prefix=/a\       --libexecdir=/usr/lib \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gtk-engines)
       if [ "$isSystemdBook" = true ]; then
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms >> $Output
       fi
    ;;
    gtkhtml|libzeitgeist|uhttpmock)
      if [ "$isSystemdBook" = true ]; then
        GetCommands \
         | sed -e 's/\(.*\)&&$/\1/' \
         >> $Output
      else
        GetInternalCommands basicComms >> $Output
      fi
    ;;
    gtkmm2)
       GetCommands \
        | sed -e "/\.\/configure --prefix=\/usr/i\  CXXFLAGS+=\' -std=c++11\' \\\\" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gtkplus2)
       GetCommands \
        | sed -e '/gtk-query-immodules-2.0/d' \
              -e 's/\*\*EDITMEGliderEDITME\*\*/Clearlooks/' \
              -e 's/\*\*EDITMEhicolorEDITME\*\*/elementary/' \
              -e 's/\*\*EDITMEClearlooksEDITME\*\*/Clearlooks/' \
              -e 's/\*\*EDITMEelementaryEDITME\*\*/elementary/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gtkplus3)
         GetCommands \
          | sed -e '/gtk-query-immodules/,/End of editable block/d' \
                -e '/gtk.css/,/^EOF/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
    ;;
    gtksourceview3)
       GetInternalCommands basicComms >> $Output
    ;;
    gtksourceview4)
       GetInternalCommands basicNinjaComms >> $Output
    ;;
    gucharmap)
       GetCommands \
        | sed -e 's/download/\.\.\/unicodeData/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    guile)
       GetCommands \
        | sed -e '/find examples -name/,/unset DIRNAME/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gupnp)
       GetInternalCommands basicNinjaComms >> $Output
    ;;
    gupnp-igd)
       GetInternalCommands basicNinjaComms >> $Output
    ;;
    gutenprint)
       GetCommands \
        | sed -e 's/disable-static/disable-static \\\n\              --sbindir=\/usr\/bin/' \
              -e '/systemctl restart/d' \
              -e '/etc\/rc.d\/init.d\/cups restart/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    gvfs)
       GetCommands \
        | sed -e '/meson --prefix/a\        --libexecdir=\/usr\/lib\/gvfs \\' \
              -e '/-Dgphoto2=false/d' \
	      -e '/-Dgoa=false/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    harfbuzz)
       GetCommands \
        | sed -e 's/ --with-graphite2//' \
	      -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    highlight)
       GetCommands \
        | sed -e '/gui/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    hplip)
       GetInternalCommands hplipComms >> $Output
    ;;
    hyphen)
       GetInternalCommands hyphenComms >> $Output
    ;;
    i3lock)
       GetInternalCommands i3lockComms >> $Output
    ;;
    i3status)
       GetInternalCommands yajlComms \
        | sed -e '/cmake/d' \
        >> $Output
    ;;
    i3-wm)
       GetInternalCommands i3Comms >> $Output
    ;;
    ibus)
       if [ "$isSystemdBook" = true ]; then
         GetCommands \
          | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib\/ibus/' \
                -e '/disable-unicode-dict/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms \
          | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/ibus/' \
                -e '/disable-static/i\              --enable-dconf \\\n\              --enable-wayland \\\n\              --disable-gconf \\' \
          >> $Output
       fi
    ;;
    icedtea-sound)
       GetInternalCommands icedteasoundComms >> $Output
    ;;
    icedtea-web)
       GetCommands \
        | sed -e 's/{JAVA_HOME}\/man/{JAVA_HOME}\/man --with-firefox=\/usr\/bin\/firefox/' \
              -e '/mandb -c \/opt\/jdk\/man/d' \
              -e '/install -v -Dm0644 javaws.png/i if [ ! -e \/usr\/share\/pixmaps\/javaws.png ]; then' \
              -e '/install -v -Dm0644 javaws.png/a fi' \
              -e '/install -dm755 \/usr\/lib\/mozilla\/plugins/d' \
              -e '/ln -s/i install -m644 javaws.desktop /usr/share/applications' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    icon-nam-utls)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib\/icon-naming-utils/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    icu)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr --sbindir=\/usr\/bin/' \
              -e 's/\(.*\)&&[[:blank:]]*$/\1/' \
        >> $Output
    ;;
    ijs)
       GetInternalCommands ijsComms >> $Output
    ;;
    inkscape)
       GetCommands \
        | sed -e '/gtk-update-icon-cache/,/update-desktop-database/d' \
              -e 's/\(.*\)&&[[:blank:]]*$/\1/' \
        >> $Output
    ;;
    iproute2)
       if $useDESTDIR; then
         GetInternalCommands iproute2destdirComms >> $Output
       else
         GetInternalCommands iproute2Comms >> $Output
       fi
    ;;
    iptables)
       if [[ "$as_root" = false && "$useDESTDIR" = false ]]; then
         GetCommands \
          | sed -e 's/sbindir=\/sbin/sbindir=\/usr\/bin/' \
                -e '/enable-libipq/i\              --enable-shared \\' \
                -e 's/xtlibdir=\/lib\/xtables/xtlibdir=\/usr\/lib\/iptables/' \
                -e "/configure_commands()/ i sed -i -e '\/sbin\\\/ldconfig/d' \\\\\n       -e '/\${INSTALL} -dm0755 \"\${DESTDIR}\${bindir}\";/d' iptables\/Makefile.in" \
                -e 's/..\/..\/sbin\/xtables-multi/xtables-multi/' \
                -e '/for file in ip4tc/,/make install-iptables/d' \
                -e 's/\(.*\)&&[[:blank:]]*$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/sbindir=\/sbin/sbindir=\/usr\/bin/' \
                -e '/enable-libipq/i\              --enable-shared \\' \
                -e 's/xtlibdir=\/lib\/xtables/xtlibdir=\/usr\/lib\/iptables/' \
                -e 's/..\/..\/sbin\/xtables-multi/xtables-multi/' \
                -e '/for file in ip4tc/,/make install-iptables/d' \
                -e 's/\(.*\)&&[[:blank:]]*$/\1/' \
          >> $Output
       fi
    ;;
# TODO leave the Makefile line in place if iso-codes is already installed
    iso-codes)
       GetCommands \
        | sed -e '/Makefile/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    iw)
       if [ "$SYSTEMD" = yes ]; then
         GetInternalCommands iwComms >> $Output
       else
         GetInternalCommands iwComms \
          | sed -e 's/SBINDIR=\/usr\/bin//' \
          >> $Output
       fi
    ;;
    j4-dmenu-dsktp)
       GetInternalCommands j4menudsktpComms >> $Output
    ;;
    jack2)
       GetInternalCommands jack2Comms >> $Output
    ;;
    java-hamcrest)
       GetInternalCommands hamcrestComms >> $Output
    ;;
    jdkbin)
       GetCommands \
        | sed -e 's/OpenJDK-'"${jdkcomvers}"'-bin/\${SrcName}bin/g' \
              -e '/chown/,/export PATH/d' \
              -e '/mv -v/a ln -svf ${SrcName}bin /opt/jdk' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    js78)
       GetCommands \
        | sed -e '/configure_commands/i export SHELL=/bin/sh' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    json-glib)
       GetCommands \
        | sed -e 's/meson --prefix=\/usr \.\./meson setup --prefix=\/usr --buildtype=release .. \\\n\              --libexecdir=\/usr\/lib/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    junit)
       GetCommands \
        | sed -e '/mvn site/d' \
	      -e '/usr\/share\/doc\/junit/d' \
	      -e 's/\(.*\)&&$/\1/' \
	>> $Output
    ;;
    kodi)
       GetInternalCommands kodiComms >> $Output
    ;;
    kodi-encdr-flac|kodi-encdr-lame|kodi-encdr-vorb|kodi-encdr-wav)
       GetInternalCommands audioencoderComms >> $Output
    ;;
    krb5)
       GetCommands \
        | sed -e '/sysconfdir=\/etc/i\              --sbindir=\/usr\/bin       \\' \
              -e 's/enable-dns-for-realm/enable-dns-for-realm   \\\n\              --with-ldap/' \
              -e '/mv -v/d' \
              -e '/ln -v -sf/d' \
              -e '/cat > \/etc\/krb5.conf/,/make install-krb5/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    lapack)
        GetInternalCommands lapackComms >> $Output
    ;;
    lcdproc)
       GetInternalCommands lcdprocComms >> $Output
    ;;
    libaacs)
       GetInternalCommands basicComms \
        | sed -e '/\.\/configure --prefix/i\  \.\/bootstrap' \
              -e '/make install/a\  install -Dm644 KEYDB.cfg /usr/share/doc/libaacs/KEYDB.cfg \n\  install -Dm644 README.md /usr/share/doc/libaacs/README.md' \
        >> $Output
    ;;
    libassuan)
       GetCommands \
        | sed -e '/make -C doc pdf ps/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libatasmart)
       GetCommands \
        | sed -e 's/usr --disable/usr --sbindir=\/usr\/bin --disable/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libatomic_ops)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/rm -vrf \/usr/rm -vrf ${CUR_DIR}\/usr/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    libbytesize)
       if [[ "$as_root" = false && "$useDESTDIR" = false ]]; then
         GetCommands \
          | sed -e "/make install/i\  sed -e '/install -d \\\\\${DESTDIR}\\\\\${bindir}/ s/^/#/' \\\\\n\      -i tools\/Makefile" \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    libcanberra)
       if [ "$INSTALLDSKTP" = xfce ]; then
         GetCommands \
          | sed -e 's/oss/oss --disable-schemas-install/' \
                -e '/systemctl enable canberra/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       elif [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e 's/oss/oss \\\n   --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system/' \
                -e '/systemctl enable canberra/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    libcap)
      if $useDESTDIR; then
        GetInternalCommands libcapdestdirComms >> $Output
      else
        GetInternalCommands libcapComms >> $Output
      fi
    ;;
    libcdio)
        GetCommands \
         | sed -e '/tar -xf ..\/libcdio-paranoia/i if [ ! -e ..\/libcdio-paranoia-*.tar.*z* ]; then\n\  wget \$wgetopts -P ../ https:\/\/ftp.gnu.org\/gnu\/libcdio\/libcdio-paranoia-10.2+2.0.1.tar.bz2\nfi\nif [ $? -ne 0 ]; then\n\  echo "Failed to download libcdio-paranoia"\n\  echo "Aborting"\n\  exit 1\nfi' \
               -e '/cd libcdio-paranoia/a # configure, make and install commands are the same as before\necho -n paranConfigure...\n{ configure_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/paranconfigure.err" ;} &>"$CUR_DIR/paranconfigure.log"\ntest_pipe\necho -n paranCompile...\n{ make_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/paranmake.err" ;} &>"$CUR_DIR/paranmake.log"\ntest_pipe\necho -n paranInstall...\n{ install_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/paraninstall.err" ;} &>"$CUR_DIR/paraninstall.log"\ntest_pipe' \
               -e 's/\(.*\)&&$/\1/' \
         >> $Output
    ;;
    libcec|p8-platform)
       GetInternalCommands libcecComms >> $Output
    ;;
    libchamplain)
       GetInternalCommands basicNinjaComms >> $Output
    ;;
    libcrossguid)
       GetInternalCommands crossguidComms >> $Output
    ;;
    libdazzle)
       GetInternalCommands basicNinjaComms >> $Output
    ;;
    libdaemon)
       GetCommands \
        | sed -e '/make -C doc doxygen/d' \
              -e '/install -v -m644 doc\/reference\/man/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libdcadec)
       GetInternalCommands libdcadecComms >> $Output
    ;;
    libdvdcss)
       GetCommands \
        | sed -e '/doxygen.cfg/d' \
              -e '/make -C doc\/latex pdf/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libedit)
       if $useDESTDIR; then
         GetInternalCommands basicComms \
          | sed -e 's/prefix=\/usr/prefix=\/usr --enable-widec/' \
                -e '/make install/a\  rm ${CUR_DIR}\/usr\/share\/man\/man3\/history.3\n  cp ${CUR_DIR}\/usr\/share\/man\/man3\/editline.3 ${CUR_DIR}\/usr\/share\/man\/man3\/el.3' \
          >> $Output
       else
         GetInternalCommands basicComms \
          | sed -e 's/prefix=\/usr/prefix=\/usr --enable-widec/' \
                -e '/make install/a\  rm \/usr\/share\/man\/man3\/history.3\n  cp \/usr\/share\/man\/man3\/editline.3 \/usr\/share\/man\/man3\/el.3' \
          >> $Output
       fi
    ;;
    libev)
       GetInternalCommands basicComms >> $Output
    ;;
    libevent)
       GetCommands \
        | sed -e '/doxygen/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libfm)
       GetInternalCommands libfmComms >> $Output
    ;;
    libfmt)
       GetInternalCommands basicCmakeComms >> $Output
    ;;
    libftdi-compat)
       GetInternalCommands basicComms \
        | sed -e '/disable-static/i\              --without-examples \\' \
        >> $Output
    ;;
    libgcrypt)
       GetCommands \
        | sed -e '/make -C doc pdf ps/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libgda)
       GetCommands \
        | sed -e '/--enable-system-sqlite/ i --with-java=no \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libgdata|tracker-miners|tracker3-miners)
       GetCommands \
        | sed -e 's/meson --prefix=\/usr/meson --prefix=\/usr --libexecdir=\/usr\/lib/' \
	      -e 's/\(.*\)&&$/\1/' \
	>> $Output
    ;;
    libgee|libwacom)
       if [ "$isSystemdBook" = true ]; then
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms >> $Output
       fi
    ;;
    libexiv2)
       GetInternalCommands libexiv2Comms >> $Output
    ;;
    libgnm-keyring)
       GetInternalCommands basicComms \
        | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/gnome-keyring/' \
        >> $Output
    ;;
    libgpg-error)
        if [ "$SYSTEMD" = yes ]; then
          GetCommands \
           | sed -e '/mv -v/,/ln -sfv/d' \
                 -e 's/\(.*\)&&$/\1/' \
           >> $Output
        else
          GetCommands \
           | sed -e 's/\(.*\)&&$/\1/' \
           >> $Output
        fi 
    ;;
    libgphoto2)
       GetInternalCommands libgphoto2Comms >> $Output
    ;;
    libical)
       GetCommands \
        | sed -e '/mkdir build/i if [ ! -d build ]; then' \
              -e '/mkdir build/a fi' \
              -e '/CMAKE_BUILD_TYPE/i\        -DCMAKE_INSTALL_LIBEXECDIR=lib \\' \
              -e '/make docs/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libidl)
       GetCommands \
        | sed -e '/make pdf ps/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libidn)
       GetCommands \
        | sed -e '/cp/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libinput)
       GetCommands \
        | sed -e '/Dudev-dir/i\       --libexecdir=\/usr\/lib \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libisoburn|libisofs|libburn) # don't have doxygen installed at this stage
       GetCommands \
        | sed -e '/doxygen/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libjpeg-turbo)
       GetCommands \
        | sed -e 's/DEFAULT_LIBDIR=lib/DEFAULT_LIBDIR=\/usr\/lib/' \
	      -e '/DCMAKE_INSTALL_DOCDIR/i\        -DWITH_JPEG8=1 \\' \
              -e '/rm -f \/usr\/lib\/libjpeg.so\*/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libksba)
       GetCommands \
        | sed -e '/makeinfo/,/make -C doc/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    liblinear)
       if $useDESTDIR; then
         GetCommands \
          | sed -e '/wget/,/-O liblinear-/d' \
                -e '/install -vm644/i mkdir -pv ${CUR_DIR}\/usr\/include\n mkdir -pv ${CUR_DIR}\/usr\/lib' \
                -e 's/install -vm644 linear.h \/usr/install -vm644 linear.h ${CUR_DIR}\/usr/' \
                -e 's/install -vm755 liblinear.so.3 \/usr/install -vm755 liblinear.so.3 ${CUR_DIR}\/usr/' \
                -e 's/ln -sfv liblinear.so.3 \/usr/ln -sfv liblinear.so.3 ${CUR_DIR}\/usr/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/wget/,/-O liblinear-/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    libmbim)
       if [ "$isSystemdBook" = true ]; then
         GetCommands \
          | sed -e 's/disable-static/disable-static \\\n              --libexecdir=\/usr\/lib\/libmbim/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms \
          | sed -s 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/libmbim/' \
          >> $Output
       fi
    ;;
    libmicrohttpd)
       GetInternalCommands libmicrohttpdComms >> $Output
    ;;
    libmm-glib)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static \\\n              --sbindir=\/usr\/bin \\\n              --with-udev-base-dir=\/usr\/lib\/udev \\\n              --with-polkit=permissive \\\n              --enable-gtk-doc \\\n              --without-mbim \\\n              --without-qmi/' \
        >> $Output
    ;;
    libmnl)
       GetCommands \
        | sed -e '/mv \/usr\/lib\/libmnl/,/ln -sfv/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libmusicbrainz5)
       GetCommands \
        | sed -e '/doxygen/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libnfs)
       GetInternalCommands basicComms \
        | sed -e '/configure --prefix=\/usr/i autoreconf -vif' \
        >> $Output
    ;;
    libnice)
       GetInternalCommands basicNinjaComms \
        | sed -e 's/arch-meson/arch-meson -Dtests=disabled/' \
        >> $Output
    ;;
    libnl)
       GetCommands \
        | sed -e '/disable-static/i\              --sbindir=\/usr\/bin \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    liboauth)
       GetCommands \
        | sed -e '/make dox/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libpeas)
       GetCommands\
        | sed -e 's/meson --prefix=/arch-meson --prefix=/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libplist)
       GetInternalCommands libplistComms \
        | sed -e '/configure --prefix=/i\  NOCONFIGURE=1 ./autogen.sh' \
        >> $Output
    ;;
    libproxy)
       GetInternalCommands libproxyComms >> $Output
    ;;
    libpwquality)
       if [ "$isSystemdBook" = true ]; then
         GetCommands \
          | sed -e '/mv -v \/usr\/lib\/libpwquality.so/,/ln -sfv ..\/..\/lib/d' \
                -e '/mv \/etc\/pam.d\/system-password/,/End \/etc\/pam.d\/system-password/d' \
	        -e '/EOF/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms \
          | sed -s 's/disable-static/disable-static      \\\n\              --with-securedir=\/usr\/lib\/security/' \
          >> $Output
       fi
    ;;
    libqmi)
       if [ "$isSystemdBook" = true ]; then
         GetCommands \
          | sed -e 's/disable-static/disable-static \\\n\              --libexecdir=\/usr\/lib\/libqmi/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms \
          | sed -s 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/libqmi/' \
          >> $Output
       fi
    ;;
    libquarter)
       GetInternalCommands quarterComms >> $Output
    ;;
    libreoffice)
       GetCommands \
        | sed -e '/tar -xf libreoffice/,/cd libreoffice/d' \
              -e '/ln -sv ..\/..\/libreoffice-translations/d' \
              -e 's/\*\*EDITME<PREFIX>EDITME\*\*/\/usr/' \
              -e 's/en-US pt-BR"/en-US"      /' \
              -e 's/--enable-python=system/--disable-python      /' \
              -e '/with-system-clucene/d' \
              -e '/with-system-graphite/d ' \
              -e '/--with-system-odbc/d' \
              -e '/chown -cR 0:0 dictionaries/d' \
              -e '/dict-pt-BR/,/unset i/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    librest)
       GetInternalCommands basicComms \
        | sed -e "/configure_commands()/i sed -i '\\/seems to be moved\\/s\\/^\\/#\\/' build/ltmain.sh" \
              -e 's/disable-static/disable-static \\\n\              --with-ca-certificates=\/etc\/pki\/tls\/certs\/ca-bundle.crt/' \
        >> $Output
    ;;
    librsvg)
        GetCommands \
        | sed -e '/gdk-pixbuf-query-loaders --update-cache/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;    
    libsass)
       GetInternalCommands libsassComms >> $Output
    ;;
    libseccomp)
       GetInternalCommands basicComms >> $Output
    ;;
    libsecret)
       GetCommands \
        | sed -e '/configure_commands()/i export PYTHONPATH="\/usr\/share\/glib-2.0"' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libsoup) # disable sysprof instead of gssapi
       GetCommands \
        | sed -e 's/gssapi/sysprof/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libssh)
       GetInternalCommands libsshComms >> $Output
    ;;
    libtasn1)
        GetCommands \
        | sed -e '/make -C doc\/reference install-data-local/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libtheora)
       GetCommands \
        | sed -e '/cd examples/,/done/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libtirpc)
       GetCommands \
        | sed -e '/mv -v/,/ln -sfv/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libunwind)
       GetInternalCommands basicComms \
        | sed -e '/configure --prefix/i\  CFLAGS+=" -fcommon" \\' \
        >> $Output
    ;;
    libusb|cpio)
       GetCommands \
        | sed -e 's/bindir=\/bin/bindir=\/usr\/bin/' \
              -e '/enable-mt/i\              --libexecdir=\/usr\/lib  \\' \
              -e 's/libexec/lib/' \
              -e '/make -C doc /d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libva-vdpau-driver)
       GetInternalCommands basicComms \
        | sed -e '/configure_commands()/i patch -p1 -i ../libva-vdpau-driver-glext-missing-definition.patch\npatch -p1 -i ../libva-vdpau-driver-libvdpau-0.8.patch\npatch -p1 -i ../libva-vdpau-driver-VAEncH264VUIBufferType.patch' \
        >> $Output
    ;;
    libvdpau)
       GetInternalCommands basicNinjaComms >> $Output
    ;;
    libvirt)
      GetInternalCommands libvirtComms \
       | sed -e "/make install/i\  sed -i 's|/etc/sysconfig/|/etc/conf.d/|' daemon/libvirtd.service tools/libvirt-guests.service\n  sed -i 's|@sbindir@|/usr/bin|g' src/virtlockd.service\n  sed -i 's|#group =.*|group=\"kvm\"|' src/qemu/qemu.conf" \
       >> $Output
    ;;
    libxkbcommon)
       GetCommands \
        | sed -e 's/meson/arch-meson/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    libxml2)
       GetCommands \
        | sed -e '/tar xf ../d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    lilv)
       GetInternalCommands basicpy2WafComms \
        | sed -e '/libdir=\/usr\/lib/a\                        --no-bash-completion \\\n\                        --dyn-manifest' \
              -e 's/libdir=\/usr\/lib/libdir=\/usr\/lib \\/' \
	      -e '/python2 waf install/a\  install -vDm 644 utils/lilv.bash_completion /usr/share/bash-completion/completions/lilv' \
        >> $Output
    ;;
    linux-pam)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/libdir=\/usr\/lib/libdir=\/usr\/lib --sbindir=\/usr\/bin/' \
                -e 's/securedir=\/lib/securedir=\/usr\/lib/' \
                -e 's/cat > \/etc\/pam.d\//cat > ${CUR_DIR}\/etc\/pam.d\//' \
                -e 's/install -vdm755 \/etc/install -vdm755 ${CUR_DIR}\/etc/' \
                -e '/for file in pam pam_misc pamc/,/done/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/tar -xf ..\/Linux-PAM/d' \
                -e 's/libdir=\/usr\/lib/libdir=\/usr\/lib --sbindir=\/usr\/bin/' \
                -e 's/securedir=\/lib/securedir=\/usr\/lib/' \
                -e '/for file in pam pam_misc pamc/,/done/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    lirc)
       GetInternalCommands lircComms >> $Output
    ;;
    lldb)
       :
    ;;
    llvm) # with clang
       GetCommands \
        | sed -e '/tar -xf \.\.\/compiler-rt/a tar -xf \.\.\/\${clangSrcExtra} -C tools' \
              -e '/mv projects\/compiler-rt-/a mv tools/clang-tools-extra-\${llvmvers}.src tools/clang/tools/extra' \
              -e '/cmake -DLLVM_BUILD_DOCS=ON/,/ninja docs-clang-html docs-clang-man/d' \
              -e '/install -v -m644 docs\/man/,/install -v -m644 tools\/clang\/docs\/man/d' \
	      -e 's/\(.*\)&&$/\1/' \
        >> $Output
#           GetInternalCommands llvmComms >> $Output # use if want lldb
    ;;
    lockdev)
         GetInternalCommands lockdevComms >> $Output
    ;;
    lv2)
         GetInternalCommands basicpy2WafComms \
          | sed -e "/configure_commands()/ised -e 's\/python\/python2/' -i lv2specgen\/lv2specgen.py" \
          >> $Output
    ;;
    lvm2)
       GetCommands \
        | sed -e '/PATH/d' \
              -e 's/make install/make DESTDIR="${CUR_DIR}" install/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    lxqt-setup)
       GetCommands \
        | sed -e 's/install -vdm755 \/opt\/lxqt\/{bin,lib/install -vdm755 \/opt\/lxqt\/{bin,include,lib/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    lynx)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/-i \/etc\/lynx/-i ${CUR_DIR}\/etc\/lynx/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    mdadm)
       GetCommands \
        | sed -e '/test --keep-going/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    mediaplayrinfo)
       GetInternalCommands mpiComms >> $Output
    ;;
    menu-cache)
       GetCommands \
        | sed -e '/disable-static/i\              --libexecdir=\/usr\/lib \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    menumaker)
       GetInternalCommands basicComms \
        | sed -e '/disable-static/i\              --infodir=/usr/share/info \\' \
        >> $Output
    ;;
    mesa)
       GetCommands \
        | sed -e 's/i915,iris,nouveau,r600,radeonsi,svga,swrast,virgl/r600,radeonsi,swrast/' \
              -e 's/i965,nouveau/r100,r200/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    metacity)
       GetInternalCommands basicComms \
        | sed -e 's@libexecdir=/usr/lib@libexecdir=/usr/lib/metacity@' \
        >> $Output
    ;;
    minizip)
       GetInternalCommands minizipComms true >> $Output
    ;;
    modem-manager)
       GetCommands \
        | sed -e '/configure_commands()/i export PYTHONPATH="\/usr\/share\/glib-2.0"' \
              -e '/disable-static/i\              --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system \\' \
              -e '/systemctl enable ModemManager/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    mupdf)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/make prefix/make DESTDIR="$CUR_DIR" prefix/' \
                -e 's/755 \/usr\/lib\/libmupdf.so/755 "${CUR_DIR}"\/usr\/lib\/libmupdf.so/' \
                -e 's/mupdf-x11 \/usr\/bin\/mupdf/mupdf-x11 "${CUR_DIR}"\/usr\/bin\/mupdf/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e "/make prefix=/i\  sed -e '/install -d \\\\\$(DESTDIR)\\\\\$(libdir)/ s/^/#/' \\\\\n\      -e '/install -d \\\\\$(DESTDIR)\\\\\$(bindir)/ s/^/#/' \\\\\n\      -e '/install -d \\\\\$(DESTDIR)\\\\\$(mandir)\\\/man1/ s/^/#/' \\\\\n\      -e '/install -d \\\\\$(DESTDIR)\\\\\$(docdir)/ s/^/#/' \\\\\n\      -i Makefile" \
                -e '/make prefix=/i\  mkdir -pv /usr/share/doc/mupdf-1.18.0/examples' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    mutter)
       GetCommands \
        | sed -e "/mkdir build/i sed -i '/update-desktop-database/d' meson\/meson-postinstall.sh" \
              -e "/mkdir build/i sed -i '/glib-compile-schemas/d' meson\/meson-postinstall.sh" \
              -e 's/meson/arch-meson/' \
              -e 's/--prefix=\/usr/-Dinstalled_tests=false/' \
	      -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    mariadb)
       GetCommands \
        | sed -e '/groupadd/,/useradd/d' \
              -e 's/DINSTALL_SBINDIR=sbin/DINSTALL_SBINDIR=bin/' \
              -e '/pushd mysql-test/,/popd/d' \
              -e '/mysql_install_db/,/make install-mysql/d' \
              -e 's/\(.*\)&&$/\1/' \
         >> $Output
    ;;
    nasm)
       if $useDESTDIR; then
         GetCommands \
          | sed -e '/tar -xf \.\.\/nasm-2/d' \
                -e '/install -m755 -d/,/cp -v doc\/\*/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/tar -xf \.\.\/nasm-2/d' \
                -e '/install -m755 -d/,/cp -v doc\/\*/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    nautilus)
       GetCommands \
        | sed -e '/meson --prefix=\/usr/a\        --libexecdir=\/usr\/lib\/nautilus \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    nautilus-sendto)
       GetInternalCommands basicNinjaComms >> $Output
    ;;
    neon)
       if [[ "$as_root" = false && "$useDESTDIR" = false ]]; then
         GetCommands \
          | sed -e 's/disable-static/disable-static \\\n\              --with-expat    \\\n\              --with-ssl=openssl \\\n\              --with-ca-bundle=\/etc\/pki\/tls\/certs\/ca-bundle.crt/' \
                -e "/make install/i\  sed -e '/\\\\\$(INSTALL) -d \\\\\$(DESTDIR)\\\\\$(man3dir)/ s/^/#/' \\\\\n\      -e '/\\\\\$(INSTALL) -d \\\\\$(DESTDIR)\\\\\$(man1dir)/ s/^/#/' \\\\\n\      -e '/\\\\\$(INSTALL) -d \\\\\$(DESTDIR)\\\\\$(libdir)/ s/^/#/' \\\\\n\      -e '/\\\\\$(INSTALL) -d \\\\\$(DESTDIR)\\\\\$(bindir)/ s/^/#/' \\\\\n\      -e '/\\\\\$(INSTALL) -d \\\\\$(DESTDIR)\\\\\$(pkgconfigdir)/ s/^/#/' \\\\\n\      -i Makefile" \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/disable-static/disable-static \\\n\              --with-expat    \\\n\              --with-ssl=openssl \\\n\              --with-ca-bundle=\/etc\/pki\/tls\/certs\/ca-bundle.crt/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    netctl)
       if $useDESTDIR; then
         GetInternalCommands netctldestdirComms >> $Output
       else
         GetInternalCommands netctlComms >> $Output
       fi
    ;;
    ntificatn-demon)
       GetCommands \
        | sed -e 's/sysconfdir=\/etc/sysconfdir=\/etc \\\n\              --libexecdir=\/usr\/lib\/notification-daemon/' \
              -e '/pgrep -l notification/,/notify-send/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    net-tools)
       if [[ "$as_root" = false && "$useDESTDIR" = false ]]; then
         GetCommands \
          | sed -e "/make update/i\  sed -e '/install -m 0755 -d \\\\\${BASEDIR}\\\/sbin/ s/^/#/' \\\\\n\      -e '/install -m 0755 -d \\\\\${BASEDIR}\\\/bin/ s/^/#/' \\\\\n\      -i Makefile" \
                -e 's/make update/yes \"\" | make update/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/make update/yes "" | make update/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    networkmanager)
       GetCommands \
        | sed -e '/Qt5/,/examples/d' \
              -e 's/meson --prefix/arch-meson --prefix/' \
              -e 's/Dudev_dir=/Dudev_dir=\/usr/' \
              -e 's/systemdsystemunitdir=/systemdsystemunitdir=\/usr/' \
	      -e '/groupadd -fg 86 netdev/,/NetworkManager-wait-online/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    nftables)
       GetInternalCommands basicComms \
        | sed -e '/disable-static/i\              --with-json \\\n\              --disable-debug \\' \
        >> $Output
    ;;
    ninja)
       GetCommands \
        | sed -e '/emacs -Q --batch/,/ninja_test --gtest_filter/d' \
              -e '/misc\/ninja-mode.el/,/site-lisp\/ninja-mode.elc/d' \
              -e '/ninja manual/,/doc\/doxygen/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    nmap)
       if [[ "$as_root" = false && "$useDESTDIR" = false ]]; then
         GetCommands \
          | sed -e "/make install/i\  sed -e '/\\\\\$(INSTALL) -d \\\\\$(DESTDIR)\\\\\$(bindir) \\\\\$(DESTDIR)\\\\\$(mandir)\\\/man1/ s/^/#/' \\\\\n\      -i Makefile" \
                -e "/make install/i\  sed -e '/\\\\\$(INSTALL) -d \\\\\$(DESTDIR)\\\\\$(bindir) \\\\\$(DESTDIR)\\\\\$(mandir)\\\/man1/ s/^/#/' \\\\\n\      -i nping/Makefile" \
                -e '/make install/i\  mkdir -pv /usr/share/nmap' \
		-e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    nodejs)
       GetInternalCommands nodejsComms >> $Output
    ;;
    nss)
       GetCommands \
        | sed -e '/cd tests/,/cd ..\/dist/d' \
	      -e '/install -v -m755 Linux\*\/lib/i\  mkdir -pv /usr/{bin,include,lib/{,pkgconfig}}' \
	      -e '/install -v -m755 Linux\*\/lib\/\*.so/i\  cd ..\/dist' \
	      -e '/ln -sfv .\/pkcs11\/p11-kit/i chmod -v 644 /usr/include/nss/*' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    nss-mdns)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static \\\n\              --disable-lynx/' \
        >> $Output
    ;;
    nvidia)
       GetInternalCommands nvidiaComms >> $Output
    ;;
    nvidia-utils)
       GetInternalCommands nvutilsComms >> $Output
    ;;
    ode)
       GetInternalCommands odeComms >> $Output
    ;;
    opal)
       if [[ "$as_root" = false && "$useDESTDIR" = false ]]; then
         GetCommands \
          | sed -e "/make install/ i\  sed -i '/mkdir -p \\\\\$(DESTDIR)\\\\\$(libdir); chmod 755 \\\\\$(DESTDIR)\\\\\$(libdir)/d' Makefile" \
                -e "/make install/ i\  sed -i '/mkdir -p \\\\\$(DESTDIR)\\\\\$(libdir)\\\/pkgconfig ; chmod 755 \\\\\$(DESTDIR)\\\\\$(libdir)\\\/pkgconfig/d' Makefile" \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    openbox)
       GetInternalCommands openboxComms >> $Output
    ;;
    openjdk)
       GetCommands \
        | sed -e '/tar -xf \.\.\/jtreg/d' \
	      -e '/with-jtreg=/d' \
              -e '/export JT_JAVA=/,/unset JT_JAVA/d' \
	      -e '/chown -R root:root/d' \
              -e '/ln -v -nsf jdk/i rm -rf \/opt\/jdk' \
              -e '/cd \/opt\/jdk/,/bin\/keytool -list -cacerts/d' \
	      -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    openjpeg2)
       GetCommands \
        | sed -e '/wget -c https/,/-O openjpeg/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    openldap)
       GetCommands \
        | sed -e 's/with-tls=openssl/disable-slapd/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    openobex)
       GetInternalCommands openobexComms >> $Output
    ;;
    openssh)
       if ! $as_root; then
         if $useDESTDIR; then
           GetCommands \
            | sed -e '/-v -m700 -d \/var\/lib\/sshd/,/-u 50 sshd/d' \
                  -e '/with-md5-passwords/i\              --sbindir=/usr/bin \\\n\              --libexecdir=/usr/lib/ssh \\\n\              --with-ssl-engine \\\n\              --with-pam \\' \
                  -e 's/\/usr\/share\/man\/man1/${CUR_DIR}\/usr\/share\/man\/man1/' \
                  -e '/ssh-keygen/,/make install-sshd/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
	 else # not DESTDIR
           GetCommands \
            | sed -e '/-v -m700 -d \/var\/lib\/sshd/,/-u 50 sshd/d' \
                  -e '/with-md5-passwords/i\              --sbindir=/usr/bin \\\n\              --libexecdir=/usr/lib/ssh \\\n\              --with-ssl-engine \\\n\              --with-pam \\' \
                  -e '/ssh-keygen/,/make install-sshd/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       else
         GetCommands \
          | sed -e '/with-md5-passwords/i\              --sbindir=/usr/bin \\\n\              --libexecdir=/usr/lib/ssh \\\n\              --with-ssl-engine \\\n\              --with-pam \\' \
                -e '/ssh-keygen/,/make install-sshd/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    openssl)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/make MANDIR/make INSTALL_PREFIX=$CUR_DIR MANDIR/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    openvpn)
        GetInternalCommands openvpnComms >> $Output
    ;;
    p11-kit)
       GetCommands \
        | sed -e 's/anchors/anchors \\\n\              --libexecdir=\/usr\/lib/' \
	      -e 's/usr\/libexec\/p11-kit/usr\/lib\/p11-kit/' \
              -e '/usr\/lib\/libnssckbi.so/i if [ ! -L \/usr\/lib\/libnssckbi.so ]; then' \
              -e '/usr\/lib\/libnssckbi.so/a fi' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    parted)
       GetCommands \
        | sed -e 's/--disable-static/\\\n\              --sbindir=\/usr\/bin \\\n\              --disable-debug \\\n\              --disable-static/' \
              -e '/make -C doc html/,/dvips/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    pciutils)
#       if $useDESTDIR; then
       GetCommands \
        | sed -e 's/make PREFIX=\/usr/make PREFIX=\/usr SBINDIR=\/usr\/bin/' \
              -e '/install install-lib/i\       DESTDIR="${CUR_DIR}" \\' \
              -e 's/chmod -v 755 \/usr/chmod -v 755 ${CUR_DIR}\/usr/' \
              -e '/update-pciids.service/i\mkdir -pv ${CUR_DIR}\/usr\/lib\/systemd\/system' \
              -e 's/cat > \/lib/cat > ${CUR_DIR}\/usr\/lib/' \
              -e '/systemctl enable update-pciids.timer/d' \
              -e 's/\(.*\)&&$/\1/' \
          >> $Output
#       else
#         GetCommands \
#          | sed -e '/systemctl enable update-pciids.timer/d' \
#                -e 's/\(.*\)&&$/\1/' \
#          | awk '
#  index($0, "make PREFIX=/usr") && (++c == 2){
#    print "  sed -e \047/\\$(DIRINSTALL) -m 755 \\$(DESTDIR)\\$(SBINDIR)/ s/^/#/\047 \\"
#    print "      -e \047/\\$(DIRINSTALL) -m 755 \\$(DESTDIR)\\$(LIBDIR)/ s/^/#/\047 \\"
#    print "      -e \047s/pci \\$(DESTDIR)\\$(PKGCFDIR)/pci/\047 \\"
#    print "      -i Makefile"
#  } # 047 is single quote in octal
#  1 # print current line
#' \
#	  >> $Output
#       fi
    ;; 
    pcre)
       if [ "$SYSTEMD" = yes ]; then 
         GetCommands \
          | sed -e '/mv -v/,/ln -sfv/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
           >> $Output
       fi
    ;;
    perl-glib|tie-ixhash|xml-libxml|xml-sax-expat|xml-sax-base|xml-namespace|xml-simple|extutls-dpnds|extutls-pkgcnfg|parse-yapp|uri|archive-zip|ipc-sys-simple|module-build|file-which|file-basedir|alien-build|path-tiny|file-chdir|capture-tiny|alien-libxml2|super)
       GetInternalCommands perlmodstnrdComms >> $Output
    ;;
    xml-sax)
       GetInternalCommands perlmodstnrdComms \
        | sed -e 's/perl Makefile.PL/yes | perl Makefile.PL/' \
        >> $Output
    ;;
    pepperflash)
       GetInternalCommands pepperflashComms >> $Output
    ;;
    php)
       rtrnCom="" # need the version of php used in the book commands
       local bookSection=$(Getbooksec $Section)
       getComms $pkgname $bookSection
       numcomms=${#rtrnCom[@]}
       phpXBookVers ${rtrnCom[numcomms-10]}
       if $useDESTDIR; then
         GetCommands \
          | sed -e '/sysconfdir=/i\              --sbindir=\/usr\/bin        \\' \
	        -e '/install -v -m644 php/i\  install -d -m755 ${CUR_DIR}\/etc\/httpd' \
		-e 's/production \/etc/production ${CUR_DIR}\/etc/' \
                -e 's/\/usr\/share\/doc\/php-/${CUR_DIR}\/usr\/share\/doc\/php-/' \
                -e '/gunzip/,/no-same-owner/d' \
                -e "s/$phpXbookvers/$phpvers/" \
                -e 's/make install/make INSTALL_ROOT="$CUR_DIR" install/' \
                -e '/install -v -m644    CODING_STANDARDS/i\  install -v -m644 ${blfsfiles}/conf-files/httpd.conf ${CUR_DIR}\/etc\/httpd/httpd.conf' \
		-e 's/\/etc\/php-fpm/${CUR_DIR}\/etc\/php-fpm/' \
                -e '/install-php-fpm/d' \
		-e 's/\ \/etc\/php.ini/${CUR_DIR}\/etc\/php.ini/' \
		-e 's/\ \/etc\/httpd\/httpd.conf/${CUR_DIR}\/etc\/httpd\/httpd.conf/' \
		-e 's/^\/etc\/httpd\/httpd.conf/${CUR_DIR}\/etc\/httpd\/httpd.conf/' \
		-e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/--with-readline/--with-readline \\\n\              --with-curl=shared \\\n\              --with-mysql-sock=\/run\/mysqld\/mysqld.sock \\\n\              --with-mysqli=shared,mysqlnd \\\n\              --with-openssl/' \
                -e '/tar -xvf/,/no-same-owner/d' \
                -e "s/$phpXbookvers/$phpvers/" \
                -e '/install -v -m644 php.ini-production/i\  install -D -m755 libs\/libphp7.so \/usr\/lib\/libphp7.so' \
                -e '/make install-php-fpm/i\cat >> \/etc\/httpd\/httpd.conf << "PHPEOF"\n\AddType application\/x-httpd-php .php\n\AddType application\/x-httpd-php-source .phps\n\PHPEOF' \
		-e '/make install-php-fpm/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    pidgin)
       GetCommands \
        | sed -e '/disable-avahi/d' \
              -e '/disable-idn/,/disable-tcl/d' \
              -e '/disable-meanwhile/a\              --disable-vv' \
              -e '/gtk-update-icon-cache/,/update-desktop-database/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    pinentry)
       GetCommands \
        | sed -e "s/\.\/configure/CXXFLAGS+=' -std=c++11' \.\/configure/" \
              -e '/makeinfo --html/,/make -k -C doc/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    pkcs11-helper)
       GetInternalCommands pkcs11helperComms >> $Output
    ;;
    pm-utils)
       GetCommands \
        | sed -e '/sysconfdir=/i\              --sbindir=\/usr\/bin \\' \
              -e '/ln -sv pm-action.8/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    polkit)
       if ! $as_root; then
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e '/groupadd/,/-g polkitd -s \/bin\/false polkitd/d' \
                  -e '/disable-static/i\              --libdir=/usr/lib \\\n\              --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system \\\n            --libexecdir=\/usr\/lib\/polkit-1 \\' \
		  -e '/cp ..\/polkitbackendjsauthoritytest/d' \
                  -e '/chmod 755 test\/polkitbacken/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/groupadd/,/-g polkitd -s \/bin\/false polkitd/d' \
                  -e '/disable-static/i\              --libdir=/usr/lib \\\n\              --libexecdir=\/usr\/lib\/polkit-1 \\' \
		  -e '/cp ..\/polkitbackendjsauthoritytest/d' \
                  -e '/chmod 755 test\/polkitbacken/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       else
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e '/disable-static/i\              --libdir=/usr/lib \\\n\              --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system \\\n              --libexecdir=\/usr\/lib\/polkit-1 \\' \
	          -e '/cp ..\/polkitbackendjsauthoritytest/d' \
		  -e '/chmod 755 test\/polkitbacken/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/disable-static/i\              --libdir=/usr/lib \\\n\              --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system \\\n              --libexecdir=\/usr\/lib\/polkit-1 \\' \
	          -e '/cp ..\/polkitbackendjsauthoritytest/d' \
                  -e '/chmod 755 test\/polkitbacken/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       fi
    ;;
    polkit-gnome)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr \\\n\              --sysconfdir=\/etc \\\n\              --localstatedir=\/var \\\n\              --libexecdir=\/usr\/lib\/polkit-gnome \\\n\              --disable-static/' \
              -e 's/usr\/libexec/usr\/lib\/polkit-gnome/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    poppler)
       if [[ "$as_root" = false && "$useDESTDIR" = false ]]; then
         GetCommands \
          | sed -e "/make prefix=\/usr install/i\sed -e '/install -d -m 0755 \\\\\$(DESTDIR)\\\\\$(datadir)\\\/pkgconfig/ s/^/#/' \\\\\n\    -i Makefile" \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    popt)
       GetCommands \
        | sed -e '/doxygen/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    portaudio)
       if [[ "$as_root" = false && "$useDESTDIR" = false ]]; then
         GetInternalCommands basicComms \
          | sed -e "/make install/i\  sed -e '/\\\\\$(INSTALL) -d \\\\\$(DESTDIR)\\\\\$(libdir)/ s/^/#/' \\\\\n\      -e '/\\\\\$(INSTALL) -d \\\\\$(DESTDIR)\\\\\$(includedir)/ s/^/#/' \\\\\n\      -e '/\\\\\$(INSTALL) -d \\\\\$(DESTDIR)\\\\\$(libdir)\\\/pkgconfig/ s/^/#/' \\\\\n\      -i Makefile" \
          >> $Output
       else
         GetInternalCommands basicComms >> $Output
       fi
    ;;
    portsmf)
       GetInternalCommands portsmfComms >> $Output
    ;;
    primus)
       GetInternalCommands primusComms >> $Output
    ;;
    ptlib)
       if [[ "$as_root" = false && "$useDESTDIR" = false ]]; then
         GetCommands \
          | sed -e "/make install/i\  sed -e '/mkdir -p \$(DESTDIR)\$(LIBDIR)\\\/pkgconfig/d' \\\\" \
                -e "/make install/i\      -e '/chmod 755 \$(DESTDIR)\$(LIBDIR)\\\/pkgconfig/d' -i Makefile" \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi 
    ;;
    pulseaudio)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib\/pulseaudio/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    py2-atspi)
       GetInternalCommands py2atspiComms >> $Output
    ;;
    py3-atspi)
       GetInternalCommands py2atspiComms \
        | sed -e 's/python2/python3/' \
        >> $Output
    ;;
    py2-backports)
       GetInternalCommands backportsComms >> $Output
    ;;
    py2-beaker)
       GetInternalCommands py2beakerComms >> $Output
    ;;
    py3-beaker)
       GetInternalCommands py3beakerComms >> $Output
    ;;
    py2-appdirs|py3-appdirs|py2-backports-os|py2-bckptshutil|py3-beautsoup|py2-bflc|py2-pycairo|py2-chardet|py2-contextlib2|py2-cssselect|py3-cssselect|py3-cycler|py2-pycryptodome|py3-pycryptodome|py2-cython|py3-cython|py2-dateutil|py3-pycairo|py3-dateutil|py3-dbusmock|py2-decorator|py3-decorator|py2-funcsigs|py2-future|py3-future|py2-lxml|py3-lxml|py2-m2crypto|py2-docutils|py3-docutils|py2-idna|py2-import-meta|py3-import-meta|py2-kiwisolver|py3-kiwisolver|py2-markupsafe|py3-markupsafe|py2-mako|py3-mako|py2-matplotlib|py3-matplotlib|py2-nltk|py3-nltk|py2-numpy|py3-numpy|py2-ordered-set|py2-packaging|py3-packaging|py2-path|py3-path|py2-pexpect|py3-pexpect|py3-pickleshare|py2-pillow|py2-prmpt_tlkit|py3-prmpt_tlkit|py2-ptyprocess|py3-ptyprocess|py2-pyasn1|py3-pycryptodomex|py2-pygments|py3-pygments|py2-pyparsing|py3-pyparsing|py2-pysocks|py2-pytz|py3-pytz|py3-pyqt5|py2-requests|py2-scandir|py3-sip|py3-simplejson|py2-sklearn|py3-sklearn|py2-scipy|py3-scipy|py2-setuptools_scm|py3-setuptools_scm|py2-six|py3-six|py3-slip|py3-soupsieve|py2-theano|py3-theano|py3-urllib3|py2-wcwidth|py3-wcwidth|py2-xdg|py3-xdg|python-ply|pybind11)
       GetInternalCommands pyComms >> $Output
    ;;
    py2-dbus)
       GetInternalCommands py2dbusComms >> $Output
    ;;
    py3-dbus)
       GetInternalCommands py3dbusComms >> $Output
    ;;
    py2-gobject3)
       GetInternalCommands py2gobject3Comms >> $Output
    ;;
    py3-gobject3)
       GetInternalCommands py3gobject3Comms >> $Output
    ;;
    py3-ipython)
       GetInternalCommands py3ipythonComms >> $Output
    ;;
    py2-setuptools)
       GetInternalCommands py2setuptoolsComms >> $Output
    ;;
    py3-setuptools)
       GetInternalCommands py3setuptoolsComms >> $Output
    ;;
    py3-traitlets)
       GetInternalCommands traitletsComms >> $Output
    ;;
    pysolfc)
       GetInternalCommands pysolfcComms >> $Output
    ;;
    python2)
       GetCommands \
        | sed -e '/install -v -dm755 \/usr\/share\/doc/d' \
              -e '/tar --strip-components=1/,/export PYTHONDOCS=\/usr/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    python3)
       GetCommands \
        | sed -e '/tar --strip/ i install -v -m755 -d /usr/share/doc/python-${Python3vers}/html' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    qemu)
       GetCommands \
        | sed -e '/prefix=\/usr                \\/a\              --libexecdir=\/usr\/lib\/qemu   \\\n\              --localstatedir=\/var       \\' \
              -e '/egrep/,/export/d' \
              -e '/qemu-img create/,/chmod +x \/etc\/qemu-ifdown/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    qt5-base)
       GetCommands \
        | sed -e 's/mkdir \/opt\/qt/mkdir -pv \/opt\/qt/' \
              -e '/ln -sfnv qt-/i if [ ! -L \/opt\/qt5 ]; then\n\  rm -rf /opt/qt5' \
              -e 's/ln -sfnv qt-'"$qt5basevers"'/  ln -sfnv qt-'"$qt5basevers"'/' \
              -e '/ln -sfnv qt-/a fi' \
              -e '/configure_commands()/i patch -Np1 -i ../qtbase-'"$qt5basevers"'-cflags.patch' \
              -e '/install -v -dm755 \/usr\/share\/pixmaps/,/install -dm755 \/usr\/share\/applications/d' \
              -e '/ldconfig/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    qt5-svg)
       GetInternalCommands qt5svgComms >> $Output
    ;;
    qt5-webengine)
       GetInternalCommands qtwebengineComms >> $Output
    ;;
    qt5-x11extras)
       GetInternalCommands qt5x11extrasComms >> $Output
    ;;
    qtwebkit)
        if $as_root; then
          GetCommands \
           | sed -e '/configure_commands()/i export QT5DIR=\/opt\/qt5' \
                 -e 's/qmake \.\.\/WebKit/\/opt\/qt5\/bin\/qmake \.\.\/WebKit/' \
                 -e 's/\(.*\)&&$/\1/' \
           >> $Output
        else
          GetCommands \
           | sed -e '/configure_commands()/i export QT5DIR=\/opt\/qt5' \
                 -e 's/qmake \.\.\/WebKit/\/opt\/qt5\/bin\/qmake \.\.\/WebKit/' \
                 -e "/find \$QT5DIR/,/QMAKE_PRL_BUILD_DIR/d" \
                 -e 's/\(.*\)&&$/\1/' \
           >> $Output
        fi
    ;;
    rapidjson)
       GetInternalCommands rapidjsonComms >> $Output
    ;;
    re2)
        GetInternalCommands re2Comms >> $Output
    ;;    
    recode)
        GetInternalCommands recodeComms >> $Output
    ;;
    rpmextract)
        if $useDESTDIR; then
	  GetInternalCommands rpmextractComms \
	   | sed -e '/m755 rpmextract/i\install -d -m755 ${CUR_DIR}\/usr\/bin' \
	         -e 's/\/usr\/bin/${CUR_DIR}\/usr\/bin/' \
	   >> $Output
	else
          GetInternalCommands rpmextractComms >> $Output
	fi
    ;;
    rsync)
        if [ "$SYSTEMD" = yes ]; then
          GetCommands \
           | sed -e '/groupadd -g 48 rsyncd/,/\/bin\/false -u 48 rsyncd/d' \
                 -e '/doxygen/d' \
                 -e '/make install-rsyncd/,/systemctl start rsyncd.socket/d' \
                 -e 's/\(.*\)&&$/\1/' \
           >> $Output
        else
          GetCommands \
           | sed -e '/groupadd -g 48 rsyncd/,/\/bin\/false -u 48 rsyncd/d' \
                 -e '/doxygen/d' \
                 -e '/make install-rsyncd/d' \
                 -e 's/\(.*\)&&$/\1/' \
           >> $Output
        fi
    ;;
    rtmpdump)
       GetInternalCommands rtmpdumpComms >> $Output
    ;;
    ruby)
       GetCommands \
        | sed -e '/cp -v template/,/doxygen/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    rustc)
       GetCommands \
	| sed -e '/mkdir \/opt\/rustc/,/ln -svfin rustc/d' \
	      -e '/prefix = \"\/opt\/rustc-/d ' \
	      -e '/docdir = \"share\/doc\/rustc/iprefix = \"\/usr"' \
	      -e '/rustc-testlog/d' \
	      -e '/chown -R root:root install/d' \
              -e '/cat >> \/etc\/ld.so.conf/,/source \/etc\/profile.d\/rustc.sh/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    samba)
       if [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e '/pip3 install cryptography/,/selftest\/knownfail/d' \
                -e '/sysconfdir=/i\      --sbindir=\/usr\/bin \\\n\      --libdir=\/usr\/lib \\\n\      --libexecdir=\/usr\/lib\/samba \\' \
                -e 's/pammodulesdir=\/lib/pammodulesdir=\/usr\/lib/' \
                -e '/mv -v \/usr\/lib\/libnss_win/,/libnss_wins.so.2/d' \
                -e '/install -dvm 755 \/usr\/lib\/cups\/backend/d' \
                -e '/make install-samba/,/systemctl start smbd.socket/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    sane)
       GetCommands \
        | sed -e '/groupadd -g 70 scanner/,/usermod -G scanner /d' \
	      -e '/sg scanner/d' \
	      -e "s/$sanebackendsvers\"/$sanebackendsvers/" \
              -e '/with-docdir=/i\              --enable-libusb_1_0 \\' \
              -e '/chgrp -v scanner/,/\/usr\/share\/sane/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    sassc)
       GetInternalCommands libsassComms >> $Output
    ;;
    scons)
       if $useDESTDIR; then
         GetCommands \
          | sed -e '/install-data/i\                          --root="$CUR_DIR" \\' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    sddm)
       GetInternalCommands sddmComms >> $Output
    ;;
    sdl)
       GetInternalCommands sdlComms >> $Output
    ;;
    sdl2)
       GetInternalCommands sdl2Comms >> $Output
    ;;
    seahorse)
       GetInternalCommands basicNinjaComms >> $Output
    ;;
    seamonkey)
       GetCommands \
        | sed -e '/Yasm/,/disable-libnotify/d' \
              -e 's/\# ac_add_options --enable-startup-notification/ac_add_options --enable-startup-notification/' \
              -e 's/\# ac_add_options --enable-system-sqlite/ac_add_options --enable-system-sqlite/' \
              -e 's/\# ac_add_options --enable-system-libevent/ac_add_options --enable-system-libevent/' \
              -e 's/\# ac_add_options --with-system-libvpx/ac_add_options --with-system-libvpx/' \
              -e 's/\# ac_add_options --with-system-nspr/ac_add_options --with-system-nspr/' \
              -e 's/\# ac_add_options --with-system-nss/ac_add_options --with-system-nss/' \
              -e '/make -C moz-build-dir install/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    serd)
         GetInternalCommands basicpy3WafComms >> $Output
    ;;
    sord|sratom)
         GetInternalCommands basicpy2WafComms \
          | sed -e "/configure_commands()/ised -i '/ldconfig/d' wscript" \
	  >> $Output
    ;;
    setconf)
         GetInternalCommands setconfComms >> $Output
    ;;
    sgml-common)
       GetCommands \
        | sed -e '/install-catalog --remove/,/\/etc\/sgml\/sgml-ent.cat/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    shadow)
        # assume cracklib support with Linux-PAM
        # don't install foreign man pages
       if $useDESTDIR; then
         GetCommands \
          | sed -e '/DICTPATH\\t\/lib\/cracklib/d' \
                -e "/configure_commands()/i sed -i -e 's\/po cs da de es fi fr hu id it ja ko pl pt_BR ru sv tr \\\\\\\//' \\\\\n\       -e 's\/zh_CN zh_TW\/\/' \\\\\n\       -e 's\/po cs da de es fi fr hu id it ja ko pl pt_BR ru sv tr\//'  man/Makefile.in" \
                -e 's/sysconfdir=\/etc --with-group-name-max-length=32/prefix=\/usr \\\n\              --bindir=\/usr\/bin \\\n\              --sbindir=\/usr\/bin \\\n\              --libdir=\/usr\/lib \\\n\              --mandir=\/usr\/share\/man \\\n\              --sysconfdir=\/etc \\\n\              --with-libpam \\\n\              --with-group-name-max-length=32/' \
                -e '/mv -v \/usr\/bin\/passwd/d' \
                -e '/install -v -m644 \/etc\/login.defs/i if [ -e \/etc\/login.defs ]; then' \
                -e '/install -v -m644 \/etc\/login.defs/a fi' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/DICTPATH\\t\/lib\/cracklib/d' \
                -e "/configure_commands()/i sed -i -e 's\/po cs da de es fi fr hu id it ja ko pl pt_BR ru sv tr \\\\\\\//' \\\\\n\       -e 's\/zh_CN zh_TW\/\/' \\\\\n\       -e 's\/po cs da de es fi fr hu id it ja ko pl pt_BR ru sv tr\//'  man/Makefile.in" \
                -e 's/sysconfdir=\/etc --with-group-name-max-length=32/prefix=\/usr \\\n\              --bindir=\/usr\/bin \\\n\              --sbindir=\/usr\/bin \\\n\              --libdir=\/usr\/lib \\\n\              --mandir=\/usr\/share\/man \\\n\              --sysconfdir=\/etc \\\n\              --with-libpam \\\n\              --with-group-name-max-length=32/' \
                -e '/mv -v \/usr\/bin\/passwd/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    slang)
       if $useDESTDIR; then
         GetCommands \
          | sed -e '/install_doc/d ' \
	        -e '/SLSH_DOC_DIR/d' \
	        -e 's/     install-all/make DESTDIR="$CUR_DIR" install-all/' \
		-e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
	  | sed -e 's/\(.*\)&&$/\1/' \
	  >> $Output
       fi
    ;;
    smpeg)
       GetInternalCommands basicComms \
        | sed -e '/prefix=\/usr/i\  \.\/autogen.sh\n\  CXX=\"g++ -Wno-narrowing\" \\' \
             -e 's/prefix=\/usr/prefix=\/usr --mandir=\/usr\/share\/man/' \
        >> $Output
    ;;
    snappy)
       GetInternalCommands snappyComms >> $Output
    ;;
    speechd)
       GetInternalCommands speechdComms >> $Output
    ;;
    speex)
       GetCommands \
        | sed -e '/cd speexdsp-/a dspconfigure_commands()\n{ :' \
              -e '/share\/doc\/speexdsp/a }\necho -n dspConfigure...\n{ dspconfigure_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/dspconfigure.err" ;} &>"$CUR_DIR/dspconfigure.log"\ntest_pipe\necho -n dspCompile...\n{ make_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/dspmake.err" ;} &>"$CUR_DIR/dspmake.log"\ntest_pipe\necho -n dspInstall..\n{ install_commands 3>&1 1>&2 2>&3 | tee "$CUR_DIR/dspinstall.err" ;} &>"$CUR_DIR/dspinstall.log"\ntest_pipe' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    sqlite)
       GetCommands \
        | sed -e '/unzip/d' \
              -e '/cp -v -R sqlite-doc/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    squid)
       GetInternalCommands squidComms >> $Output
    ;;
    subversion) # use DESTDIR when a package user
       if $as_root; then
         GetCommands \
          | sed -e 's/disable-static/disable-static \\\n\              --with-apr=\/usr --with-apr-util=\/usr \\\n\              --with-ruby-sitedir=\/usr\/lib\/ruby\/vendor_ruby/' \
                -e 's/with-apache-libexecdir/with-apache-libexecdir=\/usr\/lib\/httpd\/modules/' \
                -e '/doxygen/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/disable-static/disable-static \\\n\              --with-apr=\/usr --with-apr-util=\/usr \\\n\              --with-ruby-sitedir=\/usr\/lib\/ruby\/vendor_ruby/' \
                -e 's/with-apache-libexecdir/with-apache-libexecdir=\/usr\/lib\/httpd\/modules/' \
                -e 's/make install/make DESTDIR="$CUR_DIR" install/' \
                -e '/doxygen/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    sudo)
       GetCommands \
        | sed -e "/configure_commands()/i sed -e '/\\\\\${CHOWNIT}/,/fi/d' \\\\\n    -e '/\\\\\${CHGROUPIT}/,/fi/d' \\\\\n    -i install-sh" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    swig)
        if [[ "$as_root" = false && "$useDESTDIR" = false ]]; then
          GetCommands \
           | sed -e "/make install/i\  sed -e '/\\\\\${INSTALLCMD} -d \\\\\$(DESTDIR)\\\\\${bindir}/ s/^/#/' \\\\\n\      -e '/\\\\\${INSTALLCMD} -d \\\\\$(DESTDIR)\\\\\${mandir}\\\/man1/ s/^/#/' \\\\\n\      -i CCache/Makefile" \
                 -e 's/\(.*\)&&$/\1/' \
           >> $Output
        else
          GetCommands \
           | sed -e 's/\(.*\)&&$/\1/' \
           >> $Output
        fi
    ;;
    sysprof) # remove post_install commands
       GetInternalCommands basicNinjaComms \
        | sed -e "/configure_commands()/i sed -e 's/    update-mime-database/#   update-mime-database/' \\\\\n\    -e 's/    gtk-update-icon/#   gtk-update-icon/' \\\\\n\    -e 's/    update-desktop/#   update-desktop/' \\\\\n\    -i ../build-aux/meson/post_install.sh" \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    systemd)
       GetCommands \
        | sed -e '/Drootprefix=/d' \
              -e 's/rootlibdir=\/lib/rootlibdir=\/usr\/lib/' \
              -e '/Dsplit-usr=true/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    taglib)
       GetCommands \
        | sed -e '/BUILD_TYPE=Release/a\        -DBoost_INCLUDE_DIR=/usr/include \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    tcl) # destdir uses INSTALL_ROOT=, not DESTDIR=
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/make install/make INSTALL_ROOT="${CUR_DIR}" install/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    tdb)
       GetInternalCommands basicComms \
        | sed -e 's/sysconfdir=\/etc/sysconfdir=\/etc\/samba/' \
              -e 's/usr\/share\/man \\/usr\/share\/man/' \
              -e '/disable-static/d' \
        >> $Output
    ;;
    telepathy-logr)
       GetInternalCommands telloggerComms >> $Output
    ;;
    telepathy-salut)
       GetInternalCommands basicComms \
        | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/telepathy/' \
              -e '/--disable-static/i\              --disable-avahi-tests \\\n\
--docdir=/usr/share/doc/telepathy-salut-'"${telepathysalutvers}"' \\' \
        >> $Output
    ;;
    tepl)
       GetInternalCommands basicNinjaComms \
        | sed -e 's/arch-meson/arch-meson \\\n\       -D gtk_doc=false/' \
        >> $Output
    ;;
    termcap)
       GetInternalCommands termcapComms >> $Output
    ;;
    test-mockmodule)
       GetInternalCommands perlmodbuildComms >> $Output
    ;;
    thunderbird)
       GetCommands \
        | sed -e 's/\#ac_add_options --enable-startup-notification/ac_add_options --enable-startup-notification/' \
              -e 's/ac_add_options --disable-pulseaudio/\#ac_add_options --disable-pulseaudio/' \
              -e 's/make -f client.mk/SHELL=\/bin\/sh make -f client.mk/' \
              -e '/chown -R 0:0 \/usr\/lib\/thunderbird/d' \
              -e '/chown -R root:root \/usr\/lib\/thunderbird/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    tidy-html5)
       GetCommands \
        | sed -e '/wget -c/,/O tidy-html5/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    tinyxml)
       GetInternalCommands tinyxmlComms >> $Output
    ;;
    tk) # destdir uses INSTALL_ROOT=, not DESTDIR=
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/make install/make INSTALL_ROOT="${CUR_DIR}" install/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    tlpthy-frstream|telepathy-gabl|telepathy-haze|telepathy-idle)
       GetInternalCommands basicComms \
        | sed -e 's/libexecdir=\/usr\/lib/libexecdir=\/usr\/lib\/telepathy/' \
        >> $Output
    ;;
    tpthymisscntrl)
       GetInternalCommands telmissionComms >> $Output
    ;;
    traceroute)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/make prefix=\/usr install/make prefix=\/usr DESTDIR="${CUR_DIR}" install/' \
                -e '/mv \/usr\/bin\/traceroute/d' \
                -e '/rm -fv \/usr\/share\/man\/man1\/traceroute.1/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/mv \/usr\/bin\/traceroute/d' \
                -e '/rm -fv \/usr\/share\/man\/man1\/traceroute.1/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    tracker|tracker3)
       GetCommands \
        | sed -e 's/meson --prefix=\/usr/meson --prefix=\/usr --libexecdir=\/usr\/lib/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    udevil)
       GetInternalCommands basicComms \
        | sed -e '/configure_commands()/i patch -Np1 -i ../udevil-device-info-sys-stat.patch\npatch -Np1 -i ../udevil-fix-spelling-error.patch' \
        >> $Output
    ;;
    udisks)
       if [ "$SYSTEMD" = yes ]; then
         GetCommands \
          | sed -e '/configure_commands()/i export PYTHONPATH="\/usr\/share\/glib-2.0"' \
                -e 's/--disable-static/--disable-static --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system \\\n\              --sbindir=\/usr\/bin \\\n\              --libexecdir=\/usr\/lib \\\n\              --with-udevdir=\/usr\/lib\/udev/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    unzip)
       if $useDESTDIR; then
         GetCommands \
          | sed -e '/This.block.must.be.edited/,/End.of.editable.block/d' \
                -e '/configure_commands()/i sed -i "/MANDIR =/s#)/#)/share/#" unix/Makefile' \
                -e 's/make prefix=\/usr MANDIR=\/usr\/share\/man\/man1/make prefix="${CUR_DIR}"\/usr/' \
          >> $Output
       else
         GetCommands \
          | sed -e '/This.block.must.be.edited/,/End.of.editable.block/d' \
          >> $Output
       fi
    ;;
    upower)
       GetCommands \
        | sed -e '/disable-static/i\              --libexecdir=\/usr\/lib\/upower \\\n\              --with-systemdsystemunitdir=\/usr\/lib\/systemd\/system \\\n\              --with-udevrulesdir=\/usr\/lib\/udev \\' \
              -e '/systemctl enable upower/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    usbutils)
       if $useDESTDIR; then
         GetCommands \
          | sed -e 's/install -dm755 \/usr/mkdir -pv ${CUR_DIR}\/usr/' \
                -e '0,/wget http:\/\/www.linux-usb.org\/usb.ids -O \/usr\/share\/hwdata\/usb.ids/s///' \
		-e '/update-usbids.service/i\mkdir -pv ${CUR_DIR}\/usr\/lib\/systemd\/system' \
                -e '/systemctl enable update-usbids.timer/d' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/install -dm755/mkdir -pv/' \
                -e '0,/wget http:\/\/www.linux-usb.org\/usb.ids -O \/usr\/share\/hwdata\/usb.ids/s///' \
                -e '/systemctl enable update-usbids.timer/d' \
		-e 's/\(.*\)&&$/\1/' \
	  >> $Output
       fi
    ;;
    vamp-plugin-sdk)
       GetInternalCommands basicComms >> $Output
    ;;
    valgrind)
       GetCommands \
        | sed -e 's/prefix=\/usr/prefix=\/usr --libexecdir=\/usr\/lib\/valgrind/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    vlc)
       GetCommands \
        | sed -e 's/--prefix=\/usr/--prefix=\/usr --disable-lua/' \
              -e '/gtk-update-icon-cache/,/update-desktop-database/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    vte)
       GetCommands \
        | sed -e 's/meson/arch-meson/' \
              -e 's/fribidi=false/fribidi=false -Db_lto=false/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    waf)
       if $useDESTDIR; then
	 theDestdir=\"\${CUR_DIR}\"
       else
         theDestdir=""
       fi
       GetInternalCommands wafComms >> $Output
    ;;
    wavpack)
       GetInternalCommands basicComms \
        | sed -e 's/disable-static/disable-static --enable-mmx/' \
        >> $Output
    ;;
    wayland)
       if [ "$isSystemdBook" = true ]; then
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetInternalCommands basicComms \
          | sed -e 's/disable-static/disable-static --disable-documentation/' \
          >> $Output
       fi
    ;;
    webkit2gtk)
       GetCommands \
        | sed -e '/configure_commands()/i export PYTHONPATH="\/usr\/share\/glib-2.0"' \
              -e '/Wno-dev/i\        -DLIBEXEC_INSTALL_DIR=/usr/lib/webkit2gtk-4.0 \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    weston)
       GetInternalCommands westonComms >> $Output
    ;;
    wget)
      GetCommands \
       | sed -e 's/--with-ssl=openssl/--with-ssl=\$SSLTYPE/' \
             -e 's/\(.*\)&&$/\1/' \
       >> $Output
    ;;
    which)
       GetCommands \
        | sed -e '/cat/,/chown/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    windscribe)
       GetInternalCommands windscribeComms >> $Output
    ;;
    wireless-regdb)
       GetInternalCommands wregdbComms >> $Output
    ;;
    wireless_tools)
       if [[ "$as_root" = false && "$useDESTDIR" = false ]]; then
         GetCommands \
          | sed -e "/make PREFIX=/i\  sed -e '/install -m 755 -d \\\\\$(INSTALL_LIB)/ s/^/#/' \\\\\n\      -e '/install -m 755 -d \\\\\$(INSTALL_DIR)/ s/^/#/' \\\\\n\      -e '/install -m 755 -d \\\\\$(INSTALL_INC)/ s/^/#/' \\\\\n\      -e '/install -m 755 -d \\\\\$(INSTALL_MAN)\\\/man8/ s/^/#/' \\\\\n\      -e '/install -m 755 -d \\\\\$(INSTALL_MAN)\\\/man7/ s/^/#/' \\\\\n\      -e '/install -m 755 -d \\\\\$(INSTALL_MAN)\\\/man5/ s/^/#/' \\\\\n\      -i Makefile" \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/make PREFIX=\/usr INSTALL_MAN=\/usr\/share\/man install/make INSTALL_DIR="${CUR_DIR}\/usr\/bin" \\\n\       INSTALL_LIB="${CUR_DIR}\/usr\/lib" \\\n\       INSTALL_INC="${CUR_DIR}\/usr\/include" \\\n\       INSTALL_MAN="${CUR_DIR}\/usr\/share\/man" \\\n\       install/' \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi
    ;;
    wpa_supplicant)
       if $useDESTDIR; then
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e 's/BINDIR=\/sbin LIBDIR=\/lib/BINDIR=\/usr\/bin LIBDIR=\/usr\/lib/' \
                  -e '/pushd wpa_gui-qt/,/popd/d' \
                  -e 's#/sbin/#/usr/bin/#' \
                  -e '/install -v -m755 wpa_{cli,passphrase,supplicant}/i\  make LIBDIR=\/usr\/lib BINDIR=\/usr\/bin DESTDIR="${CUR_DIR}" install\n\  install -d -m755 "${CUR_DIR}\/usr\/share\/man\/man"{5,8}' \
                  -e '/install -v -m755 wpa_{cli,passphrase,supplicant}/d' \
		  -e '/install -v -m644 systemd\/\*\.service \/lib\/systemd\/system/d' \
                  -e '/dbus\/fi/i\  install -d -m755 ${CUR_DIR}\/usr\/lib\/systemd\/system\n\  install -v -m644 systemd\/*.service ${CUR_DIR}\/usr\/lib\/systemd\/system' \
                  -e '/install -v -m644 dbus\/fi.{epitest.hostap/i\  install -d -m755 ${CUR_DIR}\/usr\/share\/dbus-1\/system-services' \
                  -e 's/\/usr\/share\/dbus-1\/system-services\//${CUR_DIR}\/usr\/share\/dbus-1\/system-services\//' \
                  -e 's/install -v -d -m755 \/etc\/dbus-1\/system.d/install -v -d -m755 ${CUR_DIR}\/etc\/dbus-1\/system.d/' \
                  -e '/install -v -m644 doc\/docbook\/wpa_gui.8/a\install -d -m755 ${CUR_DIR}/usr/share/{applications,pixmaps}' \
		  -e '/systemctl enable wpa_supplicant/d' \
		  -e '/wpa_gui/d' \
                  -e '/update-desktop-database/d' \
                  -e '/EDITME/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else
           GetCommands \
            | sed -e '/wpa_passphrase/,/ifup \*\*EDITMEwifi0EDITME\*\*/d' \
                  -e '/update-desktop-database/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       else # not useDESTDIR
         if [ "$SYSTEMD" = yes ]; then
           GetCommands \
            | sed -e 's/BINDIR=\/sbin LIBDIR=\/lib/BINDIR=\/usr\/bin LIBDIR=\/usr\/lib/' \
                  -e '/pushd wpa_gui-qt/,/popd/d' \
                  -e 's#/sbin/#/usr/bin/#' \
                  -e 's/service \/lib\/systemd\/system/service \/usr\/lib\/systemd\/system/' \
                  -e '/systemctl enable wpa_supplicant/d' \
		  -e '/install -v -m755 wpa_gui/,/systemctl start wpa_supplicant/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         else # sysv
           GetCommands \
            | sed -e '/wpa_passphrase/,/ifup \*\*EDITMEwifi0EDITME\*\*/d' \
                  -e '/update-desktop-database/d' \
                  -e 's/\(.*\)&&$/\1/' \
            >> $Output
         fi
       fi
    ;;
    wxgtk)
       GetInternalCommands wxgtkComms >> $Output
    ;;
    x264)
       if [[ "$as_root" = false && "$useDESTDIR" = false ]]; then
         GetCommands \
          | sed -e "/make install/i\  sed -e '/\\\\\$(INSTALL) -d \\\\\$(DESTDIR)\\\\\$(bindir)/ s/^/#/' \\\\\n\      -e '/\\\\\$(INSTALL) -d \\\\\$(DESTDIR)\\\\\$(includedir) \\\\\$(DESTDIR)\\\\\$(libdir)\\\/pkgconfig/ s/^/#/' \\\\\n\      -e '/\\\\\$(INSTALL) -d \\\\\$(DESTDIR)\\\\\$(libdir)/ s/^/#/' \\\\\n\      -i Makefile" \
                -e 's/\(.*\)&&$/\1/' \
          >> $Output
       else
         GetCommands \
          | sed -e 's/\(.*\)&&$/\1/' \
          >> $Output
       fi

    ;;
    $xapp)
        GetXCommands \
        | sed -e 's/bash -e/set -e/' \
              -e '/for package in/ i cd $curdir' \
              -e '/configure/i\  for curFile in .\/*; do\n  permval=$(stat -c %a $curFile)\n  if [ $permval -eq 555 ]; then\n   chmod 755 $curFile\n  fi\n  done' \
              -e 's/XORG_CONFIG/XORG_CONFIG --disable-selective-werror 2>\&1 | tee ..\/\${packagedir}-configure.log/' \
              -e 's/as_root make install/make install 2>\&1 | tee ..\/\${packagedir}-install.log/' \
              -e '/exit/d' \
              -e 's/as_root rm -f \$XORG_PREFIX\/bin\/xkeystone/rm -f \$XORG_PREFIX\/bin\/xkeystone/' \
              -e 's/\(.*\)&&$/\1/' \
         | awk '{
if( $1 == "make" && $2 == "")
  print "  "$1" 2>&1 | tee ../${packagedir}-make.log";
else
  print $0;
}' \
       >> $Output
    ;;
    xboard)
       GetInternalCommands basicComms \
        | sed -e "/configure_commands()/i sed -i 's/fairymax/gnuchess/g' {xaw,gtk}/xboard.h xboard.conf" \
              -e "/configure --prefix=/i\  CFLAGS+=' -fcommon' \\\\" \
              -e 's/disable-static/disable-static \\\n\              --with-gtk/' \
              -e '/make install/a\  install -Dm755 cmail /usr/bin/cmail' \
       >> $Output
    ;;
    xclock)
       GetCommands \
        | sed -e 's/configure \$XORG_CONFIG/configure \$XORG_CONFIG --with-appdefaultdir=\/usr\/share\/X11\/app-defaults/' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    xfce4-xkb-plugin)
       GetCommands \
        | sed -e '/disable-static/i\              --libexecdir=\/usr\/lib \\' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    xfce4-session)
       GetCommands \
        | sed -e '/.xinitrc/d' \
              -e '/\*\*EDITMEUSERNAMEEDITME\*\*/,/sudoers/d' \
              -e 's/\(.*\)&&$/\1/' \
        >> $Output
    ;;
    xinit)
       GetCommands \
        | sed -e '/ldconfig/d' \
              -e 's/\(.*\)&&$/\1/' \
         >> $Output
    ;;
    $xlib)
       GetXCommands \
        | sed -e 's/bash -e/set -e/' \
              -e '/for package in/ i cd $curdir' \
              -e '/case $packagedir in/i\  for curFile in .\/*; do\n  permval=$(stat -c %a $curFile)\n  if [[ $permval -eq 555 || $permval -eq 444 ]]; then\n   chmod 755 $curFile\n  fi\n  done' \
              -e 's/ICE_LIBS=-lpthread/ICE_LIBS=-lpthread 2>\&1 | tee ..\/\${packagedir}-configure.log/' \
              -e 's/disable-devel-docs/disable-devel-docs 2>\&1 | tee ..\/\${packagedir}-configure.log/' \
              -e 's/appdefaultdir=\/etc\/X11\/app-defaults/appdefaultdir=\/etc\/X11\/app-defaults 2>\&1 | tee ..\/\${packagedir}-configure.log/' \
              -e 's/as_root make install/    make install 2>\&1 | tee ..\/\${packagedir}-install.log/' \
              -e '/as_root \/sbin\/ldconfig/d' \
              -e '/exit/d' \
              -e '/ln -sv \$XORG_PREFIX/d' \
              -e 's/\(.*\)&&$/\1/' \
        | awk '{
if ($1 == "./configure" && $2 == "$XORG_CONFIG")
{
  icount++;
  if (icount == 4)
    print "      "$1" "$2" 2>&1 | tee ../${packagedir}-configure.log";
  else
    print $0;
}
else if ($1 == "make" && $2 == "")
  print "      "$1" 2>&1 | tee ../${packagedir}-make.log";
else
  print $0;
}' \
       >> $Output
    ;;
    xorg-amdgpu)
        GetInternalCommands xorgamdgpuComms >> $Output
    ;;
    xorg-intel)
        GetInternalCommands xorgintelComms >> $Output
    ;;
    xorg-launch-helper)
       GetInternalCommands basicComms \
        | sed -e '/\.\/configure/i\  \.\/autogen.sh' \
         >> $Output
    ;;
    xorg-server)
       GetInternalCommands xorgservComms >> $Output
    ;;
    xorg-vmmouse)
        GetCommands \
         | sed -e 's/--with-udev-rules-dir=\/lib/--with-udev-rules-dir=\/usr\/lib/' \
               -e 's/\(.*\)&&$/\1/' \
         >> $Output
    ;;
    xorg-wacom)
        if [ "$SYSTEMD" = yes ]; then
          GetInternalCommands xorgwacomComms >> $Output
        else
          GetInternalCommands xorgwacomnosysdComms >> $Output
        fi
    ;;
    $xfont)
        GetXCommands \
         | sed -e 's/bash -e/set -e/' \
               -e '/for package in/i cd $curdir' \
               -e '/configure/i\  for curFile in .\/*; do\n  permval=$(stat -c %a $curFile)\n  if [[ $permval -eq 555 || $permval -eq 444 ]]; then\n   chmod 755 $curFile\n  fi\n  done' \
               -e 's/.\/configure \$XORG_CONFIG/.\/configure \$XORG_CONFIG 2>\&1 | tee ..\/\${packagedir}-configure.log/' \
               -e 's/as_root make install/make install 2>\&1 | tee ..\/\${packagedir}-install.log/' \
               -e 's/as_root rm -rf \$packagedir/rm -rf \$packagedir/' \
               -e '/exit/d' \
               -e 's/\(.*\)&&$/\1/' \
         | awk '{
if( $1 == "make" && $2 == "")
  print "  "$1" 2>&1 | tee ../${packagedir}-make.log";
else
  print $0;
}' \
         >> $Output
    ;;
    xsane)
        GetCommands \
         | sed -e 's/<browser>/firefox/' \
               -e 's/\(.*\)&&$/\1/' \
         >> $Output
    ;;
    xterm)
        GetCommands \
         | sed -e '/make install-ti/d' \
               -e '/cat >> \/etc\/X11\/app-defaults\/XTerm/,/EOF/d' \
               -e 's/\(.*\)&&$/\1/' \
         >> $Output
    ;;
    xvid)
        if [[ "$as_root" = false && "$useDESTDIR" = false ]]; then
          GetCommands \
           | sed -e "/make install/i\  sed -e '/\\\\\$(INSTALL) -d \\\\\$(DESTDIR)\\\\\$(includedir)/ s/^/#/' \\\\\n\      -e '/\\\\\$(INSTALL) -d \\\\\$(DESTDIR)\\\\\$(libdir)/ s/^/#/' \\\\\n\      -i Makefile" \
                 -e 's/\(.*\)&&$/\1/' \
           >> $Output
        else
          GetCommands \
           | sed -e 's/\(.*\)&&$/\1/' \
           >> $Output
        fi
    ;;
    yajl)
        GetInternalCommands yajlComms >> $Output
    ;;
    yaml)
        GetInternalCommands basicComms >> $Output
    ;;
    yelp)
        GetCommands \
         | sed -e '/update-desktop-database/d' \
               -e 's/\(.*\)&&$/\1/' \
         >> $Output
    ;;    
    zenity)
        GetInternalCommands basicComms \
         | sed -e 's/\.\/configure/\.\/autogen.sh/' \
         >> $Output
    ;;
    zip)
        if $useDESTDIR; then
          GetCommands \
           | sed -e 's/make prefix=\/usr MANDIR=\/usr\/share\/man\/man1/make prefix="${CUR_DIR}"\/usr MANDIR=${CUR_DIR}\/usr\/share\/man\/man1/' \
                 -e 's/\(.*\)&&$/\1/' \
           >> $Output
        else
          GetCommands \
           | sed -e 's/\(.*\)&&$/\1/' \
           >> $Output
        fi
    ;;
    *)
        GetCommands \
         | sed -e 's/\(.*\)&&$/\1/' \
         >> $Output
        return_val=$?
        if [ $return_val -eq $RETURN_PARAM ]; then # no build file
          echo "No buildsrc file available in ${SOURCEDIR}/pkguser"
          echo "Please place the build file there"
          exit 1
        fi
    ;;
  esac
} # end WriteScript1
#
cleanstart () {
# $1 is the section script to remove
cursection=$1
for Script in ${cursection}.sh; do
  for loc in $LFS /; do
    if [ -e $loc/$Script ]; then rm -v $loc/$Script;fi
  done
done
} #end cleanstart
#
PkgDepend () {
cat >> $Output << "EOF"
PkgDepend () {
declare -a ndep
declare -a tdep
foundDep=false
dpName=${FuncName}dep # package dependencies
depfile=${blfsfiles}/dependencies/${Section}-dependencies
if [ ! -e $depfile ]; then
 return $RETURN_PARAM
else
  while read depline
  do
    case $depline in
# don't include a line if it begins with #
      \#*)
           : # do nothing
      ;;
      $dpName*)
        foundDep=true
        ic=0
        ndep=""
        tdep=""
        stordep=""
        ndeps=($depline)
        for (( i=1; i<${#ndeps[@]}-1; i++ )); do
          tdep[ic++]=${ndeps[i]}
        done
      ;;
    esac
  done < $depfile
  if ! $foundDep; then # no deps found for this package
    return $RETURN_NOTSET
  else
    DepRtrn=(${tdep[@]})
    return 0
  fi
fi
} # end PkgDepend
EOF
} # end PkgDepend
#
testDeps () {
cat >> $Output << "EOF"
testDeps () {
declare -a tstDeps=("${!1}")
declare -a stordep
countdep=0
for (( k=0; k<${#tstDeps[@]}; k++ )); do
  pfile=$(echo ${tstDeps[k]} | awk 'BEGIN {FS="/"}{print $2}')
  case $pfile in
    iproute2_blfs)
        tstDeps[k]="core/iproute2"
    ;;
    systemd_gudev)
        tstDeps[k]="core/systemd"
    ;;
    dbus_launch)
        if [ "$SYSTEMD" = yes ]; then
          tstDeps[k]="core/dbus"
        else
          tstDeps[k]="sysutils/dbus"
        fi
    ;;
    eudev_gudev)
        tstDeps[k]="core/eudev"
    ;;
    python3_tk)
        tstDeps[k]="core/python3"
    ;;
  esac
  testfile=${PKGUSERDIR}/${tstDeps[k]}/.${pfile}
  testfiledestdir="${PKGUSERDIR}/${tstDeps[k]}/.${pfile}-destdir"
  if [ ! -f $testfile ]; then # test if installed by DESTDIR
    if [ ! -f $testfiledestdir ]; then
      if [ "$SYSTEMD" = yes ]; then 
        case $pfile in 
           libcap)
             : # already installed in lfs
           ;;
           consolekit|eudev_gudev)
             : # not present in a systemd system
           ;;
           *)
             stordep[countdep++]=${tstDeps[k]} # package dependency not met
           ;;
        esac
      else
        case $pfile in
           netctl|systemd_gudev)
             : # not required if not systemd
           ;;
           *) 
             stordep[countdep++]=${tstDeps[k]}
           ;;
        esac
      fi
    fi
  fi
done
if [ $countdep -gt 0 ]; then # some dependencies not met
  rtrnDepNotMet=(${stordep[@]})
  return $RETURN_DEPNOTMET
else
  return $RETURN_ALLDEPSMET # all dependencies met
fi
} # end testDeps
EOF
} # end testDeps
#
numcharInstall () { # get the number of chars in the install group
cat >> $Output << "EOF"
numcharInstall () {
group="/etc/group"
grpname=$1
while read line; do
  case $line in
    $grpname*)
         numchars=$( printf $line | wc -c ) # should be <= 2048
         return 0
    ;;
  esac
done < $group
} # end numcharInstall
EOF
} # end numcharInstall
#
setMime () {
cat >> $Output << "EOF"
setMime () {
# sets everything under /usr/share/mime to owner $1
onr=$1
chown $onr:$onr /usr/share/mime/{aliases,generic-icons,globs,globs2,icons,magic,mime.cache,subclasses,treemagic,types,version,XMLnamespaces}
chown -R $onr:$onr /usr/share/mime/{application,audio,font,image,inode,message,model,multipart,text,video,x-content,x-epoc}
} # end setMime
EOF
} # end setMime
#
SetXorgVars () {
mkdir -pv ${LFS}/etc/profile.d
if [ ! -e ${LFS}/etc/profile.d/xorg.sh ]; then
  xorgsh="${LFS}/etc/profile.d/xorg.sh"
  echo "XORG_PREFIX=$XORG_PREFIX" >> $xorgsh
  cat >> $xorgsh << "EOF"
XORG_CONFIG="--prefix=$XORG_PREFIX \
             --sysconfdir=/etc \
             --mandir=$XORG_PREFIX/share/man \
             --localstatedir=/var"
export XORG_PREFIX XORG_CONFIG
EOF
  chmod 644 $xorgsh
  if [ "$XORG_PREFIX" != "/usr" ]; then
    cat >> $xorgsh << "EOF"
pathappend $XORG_PREFIX/bin PATH
pathappend $XORG_PREFIX/lib/pkgconfig PKG_CONFIG_PATH
pathappend $XORG_PREFIX/share/pkgconfig PKG_CONFIG_PATH
export PATH PKG_CONFIG_PATH
EOF
    echo "${XORG_PREFIX}/lib" >> ${LFS}/etc/ld.so.conf
    sed 's@/usr/X11R6@<PREFIX>@g' -i ${LFS}/etc/man_db.conf
    case $(uname -m) in
        x86_64)
             install -v -m755 -d ${LFS}$XORG_PREFIX
             install -v -m755 -d ${LFS}$XORG_PREFIX/lib
             ln -s lib ${LFS}$XORG_PREFIX/lib64
        ;;
    esac
  fi
fi
} # end SetXorgVars
#
ArchToSrcname () {
# pass in associative arrays
# $1 the keys are the Arch pkg names and the values are corresponding src names
# $2 the keys are the Arch pkg names and the values are the src URLs
# $3 the keys are the src names and the values are the src URLs
# $4 the keys are the src names and the values are the output srcfile names
# $5 the keys are the src names and the values are the input srcfile names
local -n ArchToSrc="$1"
local -n ArchToURL="$2"
local -n srcnameURL="$3"
local -n outputSrcName="$4"
local -n inputSrcName="$5"
local IFS=' '
local n1 n2 n3 n4 n5
local nameConvFile="${BLFSBUILDFILES}/ArchToSrcname"
if [ ! -e $nameConvFile ]; then
  return $RETURN_PARAM
else
   while read n1 n2 n3 n4 n5; do
# don't include a line if it begins with #
    case $n1 in
       \#*)
           : # do nothing
       ;;
       *)
           ArchToSrc[$n1]="$n2"
           ArchToURL[$n1]="$n3"
           srcnameURL[$n2]="$n3"
           outputSrcName[$n2]="$n4"
           inputSrcName[$n2]="$n5"
           if [ -z "${inputSrcName[$n2]}" ]; then inputSrcName[$n2]=${outputSrcName[$n2]}; fi
	   ((ic++))
       ;;
    esac
  done < $nameConvFile
fi
return 0
} # End ArchToSrcname
#
altFileNames () {
local IFS=' '
local -a pkgnm=""
local -a srcnm=""
local -a cmdnm=""
local n1 n2 n3 n4
local secFiles=${BLFSBUILDFILES}/files/${1}-files
if [ ! -e $secFiles ]; then
  return $RETURN_PARAM
else
  ic=0
  while read n1 n2 n3 n4; do
# don't include a line if it begins with #
    case $n1 in
       \#*)
           : # do nothing
       ;;
       *)
           pkgnm[ic]=$n2
           srcnm[ic]=$n3
	   cmdnm[ic]=${n4%??} # strip last 2 chars [the space ) ]
           ((ic++))
       ;;
    esac
  done < $secFiles
fi
# return the arrays as global variables
rtrnPkg=(${pkgnm[@]})
rtrnSrc=(${srcnm[@]})
rtrnCmd=(${cmdnm[@]})
return 0
} # end altFileNames
#
pkgInSection () {
# test if the requested package is in the <section>-files file
# NOTE - the package name to find is stripped of any hyphen(s)
# $1 is the name of the package to test
# $2 is the section
# $3 is the location of the <section>-files file
local pkgToTest=$1
local InSection=$2
local pkgFiles=$3
local sectionFile="${pkgFiles}/files/${InSection}-files"
#echo "in pkgInSection"
#echo "pkgToTest is $pkgToTest"
#echo "InSection is $InSection"
#echo "pkgFiles is $pkgFiles"
#echo "sectionFile is $sectionFile"
# test if the section-file exists
if [ ! -e $sectionFile ]; then
  return $RETURN_PARAM
else
  while read aline; do # read each line in the section-file
    pkg_is=$(echo $aline | awk -F= '{print $1}')
    case $pkg_is in
       $pkgToTest)
         if [ "$BOOK_VERSION" = arch ]; then # get the source file name
           local sourceName=$(echo $aline | awk '{print $3}') # separator is space by default
           echo $sourceName
         fi
         return 0
      ;;
    esac
  done < $sectionFile
# got here so file not found
return $RETURN_FNF
fi
} # end pkgInSection
#
delElement () { # deletes an element from a specified position in an array
cat >> $Output << "EOF"
delElement () {
# array input in $1, position to delete is $2
declare -a arrayIn=("${!1}")
pos=$2
arrayIn=(${arrayIn[@]:0:$pos} ${arrayIn[@]:$(($pos + 1))})
rtrDelArray=(${arrayIn[@]})
} # end delElement
EOF
} # end delElement
#
delElementPattern () { # deletes an array element that matches a pattern
cat >> $Output << "EOF"
delElementPattern () {
# array input in $1, pattern to delete is $2
declare -a arrayInput=("${!1}")
patToMatch=$2
declare -a delPatArray=( ${arrayInput[@]/$patToMatch*/} )
rtrPlessArray=(${delPatArray[@]})
} # end delElementPattern
EOF
} # end delElementPattern
#
subElementPattern () { # substitutes a pattern with a given string
cat >> $Output << "EOF"
subElementPattern () {
# array input in $1, pattern to substitute is $2, string is $3
declare -a arrayInput=("${!1}")
patToMatch=$2
subString=$3
declare -a subPatArray=( ${arrayInput[@]/$patToMatch*/$subString} ) # honour white space too
rtrPlessArray=(${subPatArray[@]})
} # end subElementPattern
EOF
} # end subElementPattern
#
min2 () { # return min of two integers
if [ -z "$2" ]
then
  return $RETURN_PARAM
fi
if [ "$1" -eq "$2" ]
then
  return $1
else
  if [ "$1" -lt "$2" ]
  then
    return $1
  else
    return $2
  fi
fi
} # end min2
#
# Return the value of an operation e.g addition: z=$(float_val "$x + $y")
float_val () {
     echo | awk 'END { print '"$1"'; }'
}
#
# Return status code of a comparison e.g. float_test "$x > $y" && num=$x
# or float_test "$x < $y" && num=$y to find greater of two floating point numbers
float_test () {
echo "float_test () {
     echo | awk 'END { exit ( !( '\"\$1\"')); }'
}" >> $Output
}
#
ChkSrcListFiles () {
declare -a pkgname=("${!1}")
declare -a srcname=("${!2}")
# $3 is the source dir
local srcdir=$3
# $4 is the section
local section=$4
local SrcPath=${srcdir}/${section}
# $5 is the name of the wget-list file
local wgetlist=$5
# $6 is the name of the sorted file
local sortedfile=$6
# make sure the section dir exists
if [ ! -d $SrcPath ]; then install -v -m0755 -d $SrcPath; fi
# does master wgetlist file exist
local wgetlistMaster=${srcdir}/${wgetlist}
local wgetlistSection=${SrcPath}/${wgetlist}
local sortedfileSection=${SrcPath}/${sortedfile}
CREATE_WGET=false # Note - this ia a global variable
#
if [ -e $wgetlistMaster ]; then # check if section wget-list exists
  if [ -e $wgetlistSection ]; then # exists, check if empty
    if [ -s $wgetlistSection ]; then # not empty
      echo "$wgetlist file already in ${srcdir}/${section}. Will use that."
      if [ -e $sortedfileSection ]; then # sortedfile exists, check if empty
        if [ ! -s $sortedfileSection ]; then # is empty
          echo "$wgetlist file is okay but $sortedfile is empty."
          echo "Will create it from $wgetlist"
          sort -u $wgetlistSection > $sortedfileSection
        else
          echo "$sortedfile file already in ${srcdir}/${section}. Will use that."
        fi
      else # sortedfile doesn't exist
        echo "$wgetlist file is okay but there is no $sortedfile file."
        echo "Will create it from $wgetlist"
        sort -u $wgetlistSection > $sortedfileSection
      fi
    else
      CREATE_WGET=true
    fi
  else # the section wget-list file doesn't exist so create it
    if $printit; then
      echo "the file $wgetlistSection doesn't exist - will create it"
    fi
    CREATE_WGET=true
    if [ -e $sortedfileSection ]; then rm $sortedfileSection; fi # delete any sortedfile
  fi
else # master wget-list doesn't exist so create it
  echo "No $wgetlist file in $srcdir. Will try and create it."
  GetListFile $bookDir $book_version $wgetlist # get wget-list file
  rm -rf $wgetlistSection $sortedfileSection # delete if exists
  CREATE_WGET=true
fi
if $CREATE_WGET; then # create the section wget-list file
  for (( ik=0; ik<${#srcname[@]}; ik++ )); do
    if $single_package; then # find the package
      if [[ "$SINGLE_PACKAGE" == "${pkgname[ik]}" ]]; then # found the package
        tomatch="/${srcname[ik]}[0-9]"
        grep $tomatch $wgetlistMaster >> $wgetlistSection
        break
      fi
    else # some packages need extra files downloaded
      case ${srcname[ik]} in
         cracklib-|libnl-|git-|docbook-xsl-|freetype-|poppler-) # need cracklib-words, libnl-docs, git-manpages, docbook-xsl-doc, freetype-doc, poppler-data
              tomatch="/${srcname[ik]}"
         ;;
         *)
              tomatch="/${srcname[ik]}[0-9]"
         ;;
      esac
      grep $tomatch $wgetlistMaster  >> $wgetlistSection # list of files in this section
    fi
  done
# make sure there are no duplicate lines
  if [ -e $sortedfileSection ]; then rm $sortedfileSection; fi
  sort -u $wgetlistSection > $sortedfileSection
# don't download icedtea-web in the java section
  case $section in
    java)
       sed -i '/icedtea-web/d' $sortedfileSection
    ;;
  esac
fi
} # end ChkSrcListFiles
#
Start () {
local section=$1
local cursection=$2
declare -a PkgName=("${!3}")
declare -a SrcName=("${!4}")
declare -a CommandName=("${!5}")
#
secFiles=${BLFSBUILDFILES}/files/${section}-files
if ! $single_package; then
  cleanstart $cursection
  Output=${LFS}/${cursection}.sh
else
  if [ -e ${LFS}/${SINGLE_PACKAGE}.sh ]; then rm ${LFS}/${SINGLE_PACKAGE}.sh; fi
  Output=${LFS}/${SINGLE_PACKAGE}.sh
fi
local bookSection=$(Getbooksec $cursection)
if [[ "$section" == x ]]; then SetXorgVars; fi
if [[ "$section" == pythonmodbin ]]; then section="pythonmodules"; fi # use pythonmodules not pythonmodbin
REPODIR=${BLFS_BOOK_LOC_DIR}/$version
Header $section
if ! $as_root; then
# if section is pythonmodbin then will use updatePkgUser not pkguser
  if [ "$SECTION" != "pythonmodbin" ]; then pkguser; fi
  numcharInstall # check that numchars in current install line in /etc/group is < 2048
fi
if [ "$section" != blfs ]; then
  if [ "$BOOK_VERSION" != arch ]; then
    PkgDepend
    testDeps
  fi
fi
if [[ "$INSTALLDSKTP" = xfce ]]; then
  if [[ "$section" = networks || "$section" = sysutils || "$section" = x || "$section" = xlibs || "$section" = multimedia ]]; then
    delElementPattern
  fi
  if [[ "$section" == xlibs || "$section" == networks || "$section" == multimedia ]]; then subElementPattern; fi # for webkitgtk and pulseaudio, if xfce installed
fi
if [[ "$cursection" == gnomeplatform || "$cursection" == gnomedesktop || "$cursection" == gnomeapps || "$cursection" == xfcegnomeplatform ]]; then
  setMime
fi
if [[ "$section" = programming || "$section" = java ]]; then testOnline; fi # for rustc, apache-maven to stop installation if no web access
if [ "$section" = security ]; then onlineNoWget; fi # ca-certificates when wget may not be installed
if [[ "$useDESTDIR" = true && "$installDEST" = false ]]; then # don't need these if install from DESTDIR
  cleanPkgDir
  SetPkgVers
  createPkgfile # no args - leave the dirs in place for now
fi
setup_colors # need colors to signal status of dependencies
pkgusernum=0
updatePkgUserSet=false # used to write-out only one of these e.g. shadow and libcap in security and systemd and dbus in sysutils
#
# cycle through all the package names
# if using Arch Binaries then don't include a package if it hasn't been downloaded to /blfs-sources/Arch/<section>
for (( pkgn=0; pkgn<${#PkgName[@]}; pkgn++ )); do
  if $single_package; then # find the package
    if [[ "$SINGLE_PACKAGE" == "${PkgName[$pkgn]}" ]]; then # found the package
      pkgname=${PkgName[pkgn]}
      FuncName=$( echo $pkgname | sed -e s/-//g -e s/+//g -e s/_//g )
      srcname=${SrcName[pkgn]}
      commandname=${CommandName[pkgn]}
      Output=$LFS/${SINGLE_PACKAGE}.sh
      case $pkgname in
        consolekit) # not present if using systemd
           if [ "$SYSTEMD" = no ]; then
             Function $section
           else
             echo "To install consolekit, set SYSTEMD=no in the menu"
             exit 1
           fi
        ;;
        dbus)
           if [ "$SYSTEMD" = yes ]; then # dbus already installed in core
             if ! $as_root; then updatePkgUser "core"; fi
           fi
           Function "core"
        ;;
        eudev|gcc|grep|iproute2|libcap|python3|shadow|systemd|autoconf_2_13) # these are core LFS
           if ! $as_root; then updatePkgUser "core"; fi
           Function "core"
        ;;
        jdkbin)
           if $jdkoracle; then srcname=${srcname}${jdkvers}_; fi
           Function $section
        ;;
	jemalloc|ca-certificates|ca-certificates-utils|gobject-intro-rt|gst-plgns-base-libs|libcdio-paranoia|libmariadbclient|libspeechd|lz4|mariadb-clients|openssl|speexdsp) # Arch binary only
           if [ "$BOOK_VERSION" = arch ]; then Function $section; fi
        ;;
        linux-pam) # only used with the book. If using arch replace with pam
           if [ "$BOOK_VERSION" = arch ]; then
             pkgname=pam
             srcname=pam-
             commandname=pam
             FuncName=$( echo $pkgname | sed -e s/-//g -e s/_//g )
           fi
           Function $section
        ;;
        *)
           Function $section
        ;;
      esac
      break
    fi
  else # entire section, not single package
    pkgname=${PkgName[pkgn]}
    FuncName=$( echo $pkgname | sed -e s/-//g -e s/_//g )
    srcname=${SrcName[pkgn]}
    commandname=${CommandName[pkgn]}
    if [ "$BOOK_VERSION" = arch ]; then
      if [ ! -e ${SOURCEDIR}/${Section}/${WgetList} ]; then
        echo "file ${SOURCEDIR}/${Section}/${WgetList} doesn't exist"
        echo "Cannot continue without a wget-list file present"
        exit 1
      fi
      ArchSrcDir=${srcrootdir}/${section}
      if [ -e ${SOURCEDIR}/${Section}/${sortedfile} ]; then # Arch filename may be different from pkgname
        case $pkgname in
           ca-certificates)
             srcname="ca-certificates-mozilla-"
             useThisName="ca-certificates-mozilla"
           ;;
           gst-plgns-base)
             useThisName="gst-plugins-base"
           ;;
           gst-plgns-bad)
             useThisName="gst-plugins-bad"
           ;;
           gst-plgns-good)
             useThisName="gst-plugins-good"
           ;;
           gst-plgns-ugly)
             useThisName="gst-plugins-ugly"
           ;;
           libsigcpp) # arch name is libsigc++
             useThisName="libsigc++"
           ;;
           linux-pam) # only used with the book. Using Arch so replace with pam
             pkgname=pam
             srcname=pam-
             commandname=pam
             useThisName=$pkgname
             FuncName=$( echo $pkgname | sed -e s/-//g -e s/_//g )
           ;;
           mediaplayrinfo) # arch name is media-player-info
             useThisName="media-player-info"
           ;;
           py2-ordered-set|py2-pyparsing|py2-setuptools) # use the srcname
             useThisName="$srcname"
           ;;
           speechd) # arch name is speech-dispatcher
             useThisName="speech-dispatcher"
           ;;
           xvid)
             useThisName="xvidcore"
           ;;
           *)
             useThisName=$pkgname
           ;;
        esac
        ChkSrcPresent $SOURCEDIR $Section $sortedfile $SOURCES $useThisName
        ret_val=$?
        if [ $ret_val -eq $RETURN_PARAM ]; then
          echo "No Arch binary downloaded for ${SOURCEDIR}/${Section}/${pkgname}"
        else
          case $pkgname in
             shadow) # reinstall shadow using the arch binary - shadow is in the core dir
               if ! $as_root; then
                 if ! $updatePkgUserSet; then
                   updatePkgUser "core"
                   updatePkgUserSet=true # one of these has been written to Output
                 fi
               fi
               Function "core"
             ;;
             py2-ordered-set|py2-pyparsing|py2-setuptools) # installing using the Arch binaries
               if ! $as_root; then
                 if ! $updatePkgUserSet; then # only write one of these
                   updatePkgUser "pythonmodules"
                   updatePkgUserSet=true # one of these has been written to Output
                 fi
               fi
               Function "pythonmodules"
             ;;
             *)
               Function $section
             ;;
          esac
        fi
      else # no sortedfile found
        echo "file ${SOURCEDIR}/${Section}/${sortedfile} doesn't exist"
        echo "Investigate why not"
        exit 1
      fi
    else # not arch, using the book
      case $pkgname in
         consolekit) # not present if using systemd
           if [ "$SYSTEMD" = no ]; then
             Function $section
           fi
         ;;
         dbus) # installed in core when systemd used
           if [ "$SYSTEMD" = yes ]; then # dbus already installed in core
# no updatePkgUser here because it follows reinstall of systemd which has updatePkgUser
             Function "core"
           else
             Function $section
           fi
         ;;
         eudev|gcc|grep|iproute2|libcap|autoconf_2_13|python3|shadow|systemd) # installed in core LFS and autoconf_2_13 added to core
           if ! $as_root; then
             if ! $updatePkgUserSet; then
               updatePkgUser "core"
               updatePkgUserSet=true # one of these has been written to Output
             fi
           fi
           Function "core"
         ;;
         jdkbin)
           if $jdkoracle; then srcname=${srcname}${jdkvers}_; fi
           Function $section
         ;;
# only used when BOOK_VERSION=Arch, so do nothing
       jemalloc|ca-certificates-mozilla|ca-certificates-utils|gobject-intro-rt|gst-plgns-base-libs|hunspell|hunspell-en-us|libcdio-paranoia|libmariadbclient|libspeechd|lz4|mariadb-clients|mariadb-libs|pambase|speexdsp)
           :
         ;;
         *)
           if $useArchVersions; then
             Function $section ArchPkgVers
           else
             Function $section
           fi
         ;;
      esac
    fi
  fi
done
#
tmpFile=/tmp/$(date +%d%B%Y_%H:%M)tmp.file
# write the function name to the tmp file by matching the function pattern _ () {
awk '/_[[:space:]]\(\)[[:space:]]\{/ {print $1}' $Output >> $tmpFile
#
# this next section allows you to change the order of, add or remove, a package
#
while read eachFunc; do
  case $eachFunc in
      colordgtk_|farstream_|geoclue_|gtkvnc_|ibus_|libinput_|libmbim_|libnice_|liboauth_|libpwquality_|libqmi_|libxkbcommon_|modemmanager_|py2atspi_|py3atspi_|uhttpmock_|wayland_|weston_) # don't use if SYSTEMD is no
          if [ "$SYSTEMD" = yes ]; then echo $eachFunc >> $Output; fi
      ;;
      dbus_)
          if [ "$SYSTEMD" = yes ]; then # already installed in core
            echo $eachFunc >> $Output
            if ! $as_root; then
              echo "pkguser_" >> $Output
            fi
          else # is installed in sysutils
            echo $eachFunc >> $Output
          fi
      ;;
      eudev_)
          if [ "$SYSTEMD" = no ]; then
            echo $eachFunc >> $Output
            if ! $as_root; then 
              echo "pkguser_" >> $Output
            fi
          fi
      ;;
      firewall_|consolekit_)
          if [ "$SYSTEMD" = no ]; then
            echo $eachFunc >> $Output
          fi
      ;;
      grep_|iproute2_|libcap_|autoconf213_) # core packages so need pkguser_ after each one if using the book
          if [ "$BOOK_VERSION" != arch ]; then
            echo $eachFunc >> $Output
            if ! $as_root; then
              echo "pkguser_" >> $Output
            fi
          fi
      ;;
      mesa_) # need libva_ after mesa to install libva with mesa support
          echo $eachFunc >> $Output
          echo "libva_" >> $Output
      ;;
      python3_|gcc_) # need updatePkgUser_ before and pkguser_ after, if not root. This is because autoconf213 has caused the updatePkgUser function to be output and $updatePkgUserSet=true
          if ! $as_root; then
            echo "updatePkgUser_" >> $Output
            echo $eachFunc >> $Output
            echo "pkguser_" >> $Output
	  else
	    echo $eachFunc >> $Output
          fi
      ;;
      updatePkgUser_) # eudev and systemd each produce one of these but only one is needed
          if $updatePkgUserSet; then # need one of these so write it
            echo $eachFunc >> $Output
            updatePkgUserSet=false
          fi
      ;;
      *)
          echo $eachFunc >> $Output
      ;;
  esac
done < $tmpFile
if $printit; then echo "remove tmpFile $tmpFile"; fi
rm $tmpFile
rm -rf $newLines # delete the temp file used for versions of packages not in the book
chmod 700 $Output
if $single_package; then
  fpkgnme=${LFS}/${SINGLE_PACKAGE}.sh
else
  fpkgnme=${LFS}/${cursection}.sh
fi
sed -e 's@BuildLog='$LFS'@BuildLog=@' -i $fpkgnme
# remove any test statements and the root and edit comments
sed -e '/make check/d' \
    -e '/make -j1 check/d' \
    -e '/make -j1 test/d' \
    -e '/make -k check/d' \
    -e '/make -kj1 check/d' \
    -e '/make test/d' \
    -e '/\# End root commands/d' \
    -e '/\# Run this as root/d' \
    -e '/\# This block must be edited to suit your needs./d' \
    -e '/\# End of editable block./d' \
    -i $fpkgnme
# if using DESTDIR, change install commands to install to a specified DIR
if $useDESTDIR; then
  sed -e 's/make install/make DESTDIR="$CUR_DIR" install/' -i $fpkgnme # make install
  sed -e 's/ninja install/DESTDIR="$CUR_DIR" ninja install/' -i $fpkgnme # ninja install
  sed -e 's/setup.py install/setup.py install --root="$CUR_DIR"/' -i $fpkgnme # py module install
  case $section in
     libraries)
       sed -e 's/chmod -v 755 \/usr\/lib\/libpt.so/chmod -v 755 ${CUR_DIR}\/usr\/lib\/libpt.so/' \
	   -i $fpkgnme # ptlib
       sed -e 's/bootstrap.sh --prefix=\/usr/bootstrap.sh --with-toolset=gcc --with-icu --with-python=\/usr\/bin\/python2/' \
           -e '/b2 install threading/i\  install -dm755 ${CUR_DIR}\/usr' \
           -e 's/b2 install/b2 --prefix=${CUR_DIR}\/usr install/' \
           -e 's/sha1.hpp \/usr\/include\/boost/sha1.hpp ${CUR_DIR}\/usr\/include\/boost/' \
           -i $fpkgnme # for boost
       sed -e '/install -v -m644 fc-/i\  mkdir -pv ${CUR_DIR}\/usr\/share\/man\/{man1,man3,man5}' \
           -e 's/*\/\*.1         \/usr\/share\/man\/man1/*\/\*.1         ${CUR_DIR}\/usr\/share\/man\/man1/' \
           -e 's/\/\*.3          \/usr\/share\/man\/man3/\/\*.3          ${CUR_DIR}\/usr\/share\/man\/man3/' \
           -e 's/fonts-conf.5 \/usr\/share\/man\/man5/fonts-conf.5  ${CUR_DIR}\/usr\/share\/man\/man5/' \
           -i $fpkgnme # for fontconfig
       sed -e '/install -v -m 755 scripts\/ispell/i\mkdir -pv ${CUR_DIR}\/usr\/bin' \
           -e 's/ln -svfn aspell-0.60 \/usr/ln -svfn aspell-0.60 ${CUR_DIR}\/usr/' \
           -e 's/install -v -m 755 scripts\/ispell \/usr/install -v -m 755 scripts\/ispell ${CUR_DIR}\/usr/' \
           -e 's/install -v -m 755 scripts\/spell \/usr/install -v -m 755 scripts\/spell ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for aspell
       sed -e 's/chmod -v 755 \/usr\/lib\/libexiv2.so/chmod -v 755 ${CUR_DIR}\/usr\/lib\/libexiv2.so/' \
           -i $fpkgnme # for exiv2
       sed -e 's/pushd \/usr\/share\/hyphen/pushd ${CUR_DIR}\/usr\/share\/hyphen/' \
	   -e 's/in \/usr\/share\/hyphen/in ${CUR_DIR}\/usr\/share\/hyphen/' \
	   -e 's/\/usr\/share\/myspell/${CUR_DIR}\/usr\/share\/myspell/' \
	   -i $fpkgnme # for hyphen
       sed -e 's/make prefix=\/usr install/make prefix=\/usr DESTDIR="$CUR_DIR" install/' \
           -i $fpkgnme # for poppler
       sed -e '/install -m755 libglade-convert/i\  mkdir -pv ${CUR_DIR}\/usr\/bin' \
           -e 's/libglade-convert \/usr/libglade-convert ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for libglade
       sed -e ':1;s/make docdir\(.*install\)/make DESTDIR="$CUR_DIR" docdir\1/;t1' -i $fpkgnme
       sed -e 's/cp apps\/lib\/\*\.h \/usr\/include\/openobex/cp apps\/lib\/\*\.h ${CUR_DIR}\/usr\/include\/openobex/' \
           -e 's/libopenobex-apps-common.a \/usr\/lib\/libopenobex/libopenobex-apps-common.a ${CUR_DIR}\/usr\/lib\/libopenobex/' \
           -i $fpkgnme # for openobex
       sed -e 's/rm -v \/usr\/lib\/libjs_static.ajs/rm -v "${CUR_DIR}"\/usr\/lib\/libjs_static.ajs/' \
           -e "s/sed -i '\/@NSPR_CFLAGS@\/d' \/usr\/bin\/js78-config/sed -i '\/@NSPR_CFLAGS@\/d' \"\${CUR_DIR}\"\/usr\/bin\/js78-config/" \
           -i $fpkgnme # for js78
     ;;
     multimedia)
       sed -e ':1;s/make pkghtmldir\(.*install\)/make DESTDIR="$CUR_DIR" pkghtmldir\1/;t1' \
           -i $fpkgnme # for lame
       sed -e 's/install -D -m644 90-alsa-restore.rules \/usr\/lib\/udev\/rules.d/install -D -m644 90-alsa-restore.rules ${CUR_DIR}\/usr\/lib\/udev\/rules.d/' \
           -i $fpkgnme # for alsa-utils
       sed -e ':1;s/make htmldocdir\(.*install\)/make DESTDIR="$CUR_DIR" htmldocdir\1/;t1' \
           -i $fpkgnme # for libsndfile
       sed -e ':1;s/make pkgdocdir\(.*install\)/make DESTDIR="$CUR_DIR" pkgdocdir\1/;t1' \
           -i $fpkgnme # for soundtouch
#       sed -e ':1;s/make prefix=\(.*install\)/make DESTDIR="$CUR_DIR" prefix=\1/;t1' \
#           -i $fpkgnme # for dvdrw-tools
       sed -e 's/chmod -v 755 \/usr\/lib\/libxvidcore.so/chmod -v 755 ${CUR_DIR}\/usr\/lib\/libxvidcore.so/' \
           -i $fpkgnme # for xvid
       sed -e '/cat > \/usr\/lib\/pkgconfig\/mad.pc/i install -m755 -d ${CUR_DIR}\/usr\/lib\/pkgconfig' \
           -e 's/cat > \/usr\/lib\/pkgconfig\/mad.pc/cat > ${CUR_DIR}\/usr\/lib\/pkgconfig\/mad.pc/' \
           -i $fpkgnme # for libmad
       sed -e '/cp liba52\/a52_internal.h/i\mkdir -pv ${CUR_DIR}\/usr\/include\/a52dec' \
           -e 's/cp liba52\/a52_internal.h \/usr/cp liba52\/a52_internal.h ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for liba52
       sed -e 's/chmod -v 644 \/usr\/lib\/libopal/chmod -v 644 ${CUR_DIR}\/usr\/lib\/libopal/' \
           -i $fpkgnme # for opal
       sed -e 's/mkdir -pv \/usr\/lib\/udev\/hwdb.d/mkdir -pv ${CUR_DIR}\/usr\/lib\/udev\/hwdb.d/' \
           -e 's/mkdir -pv \/usr\/lib\/udev\/rules.d/mkdir -pv ${CUR_DIR}\/usr\/lib\/udev\/rules.d/' \
           -e 's/LD_LIBRARY_PATH=\/usr\/lib\${LD_LIBRARY_PATH:/LD_LIBRARY_PATH=${CUR_DIR}\/usr\/lib\${LD_LIBRARY_PATH:/' \
           -e 's/CAMLIBS=\/usr\/lib\/libgphoto2/CAMLIBS=${CUR_DIR}\/usr\/lib\/libgphoto/' \
           -e 's/\/usr\/lib\/libgphoto2\/print-camera-list/${CUR_DIR}\/usr\/lib\/libgphoto2\/print-camera-list/' \
           -e 's/\/usr\/lib\/udev\/hwdb.d\/20-gphoto.hwdb/${CUR_DIR}\/usr\/lib\/udev\/hwdb.d\/20-gphoto.hwdb/' \
           -e 's/\/usr\/lib\/udev\/rules.d\/40-gphoto.rules/${CUR_DIR}\/usr\/lib\/udev\/rules.d\/40-gphoto.rules/' \
           -e 's/\/usr\/include\/gphoto2\/gphoto2/${CUR_DIR}\/usr\/include\/gphoto2\/gphoto2/' \
           -e '/rm -rf \/opt\/cuda/d' \
           -i $fpkgnme # for libgphoto2
       sed -e 's/make -C docs\/plugins install-data/make -C docs\/plugins DESTDIR="$CUR_DIR" install-data/' \
           -i $fpkgnme # for gst-plgns-ugly0, gst-plgns-good0
       sed -e ':1;s/make docdir\(.*install\)/make DESTDIR="$CUR_DIR" docdir\1/;t1' -i $fpkgnme # libcanberra, vlc
       sed -e 's/\/etc\/dbus-1\/system.d\/pulseaudio-system.conf/${CUR_DIR}\/etc\/dbus-1\/system.d\/pulseaudio-system.conf/' \
           -e 's/-i \/etc\/pulse\/default.pa/-i ${CUR_DIR}\/etc\/pulse\/default.pa/' \
           -i $fpkgnme # for pulseaudio
       sed -e 's/tools\/qt-faststart \/usr/tools\/qt-faststart ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for ffmpeg
       sed -e 's/chmod 644 \/usr\/lib\/libespeak.a/chmod 644 ${CUR_DIR}\/usr\/lib\/libespeak.a/' \
           -i $fpkgnme # for espeak
       sed -e 's/ln -sv pysol.py \/usr\/bin\/pysol/ln -sv pysol.py ${CUR_DIR}\/usr\/bin\/pysol/' \
           -i $fpkgnme # for pysolfc
     ;;
     security)
       sed -e 's/xtables-multi \/usr/xtables-multi ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for iptables
       sed -e 's/chmod   -v   755 \/usr\/lib\/lib{hogweed,nettle/chmod   -v   755 ${CUR_DIR}\/usr\/lib\/lib{hogweed,nettle/' \
           -i $fpkgnme # for nettle
       sed -e 's/\/usr\/share\/dict\/cracklib-words/${CUR_DIR}\/usr\/share\/dict\/cracklib-words/' \
           -e 's/\/usr\/share\/dict\/words/${CUR_DIR}\/usr\/share\/dict\/words/' \
           -e 's/install -v -m755 -d      \/usr\/lib\/cracklib/install -v -m755 -d      ${CUR_DIR}\/usr\/lib\/cracklib/' \
           -e 's/\/usr\/share\/dict\/cracklib-extra-words/${CUR_DIR}\/usr\/share\/dict\/cracklib-extra-words/' \
	   -e 's/^create-cracklib-dict/${CUR_DIR}\/usr\/bin\/create-cracklib-dict/' \
           -i $fpkgnme # for cracklib
       sed -e 's/chmod -v 4755 \/sbin\/unix_chkpwd/chmod -v 4755 ${CUR_DIR}\/usr\/bin\/unix_chkpwd/' \
           -e 's/install -v -m755 -d \/etc\/pam.d/install -v -m755 -d ${CUR_DIR}\/etc\/pam.d/' \
           -i $fpkgnme # for linux-pam
       sed -e 's/\/etc\/default\/useradd/${CUR_DIR}\/etc\/default\/useradd/' \
           -e 's/\/etc\/login.defs/${CUR_DIR}\/etc\/login.defs/g' \
           -e 's/cat > \/etc\/pam.d\/login/cat > ${CUR_DIR}\/etc\/pam.d\/login/' \
           -e 's/cat > \/etc\/pam.d\/passwd/cat > ${CUR_DIR}\/etc\/pam.d\/passwd/' \
           -e 's/cat > \/etc\/pam.d\/su <</cat > ${CUR_DIR}\/etc\/pam.d\/su <</' \
           -e 's/cat > \/etc\/pam.d\/chage/cat > ${CUR_DIR}\/etc\/pam.d\/chage/' \
           -e 's/install -v -m644 \/etc\/pam.d\/chage/install -v -m644 ${CUR_DIR}\/etc\/pam.d\/chage/' \
           -e 's/\/etc\/pam.d\/${PROGRAM}/${CUR_DIR}\/etc\/pam.d\/${PROGRAM}/' \
           -e 's/\/etc\/login.access/${CUR_DIR}\/etc\/login.access/g' \
           -e 's/\/etc\/limits/${CUR_DIR}\/etc\/limits/g' \
           -i $fpkgnme # for shadow
       sed -e 's/so \/lib\/security/so ${CUR_DIR}\/lib\/security/' \
	   -e 's/conf \/etc\/security/conf ${CUR_DIR}\/etc\/security/' \
	   -e 's/cat > \/etc/cat > ${CUR_DIR}\/etc/' \
	   -e 's/bak >> \/etc/bak >> ${CUR_DIR}\/etc/' \
           -i $fpkgnme # for libcap
       sed -e 's/\/usr\/lib\/sudo\/libsudo_util/${CUR_DIR}\/usr\/lib\/sudo\/libsudo_util/' \
           -e 's/cat > \/etc\/pam.d\/sudo <</cat > ${CUR_DIR}\/etc\/pam.d\/sudo <</' \
           -e 's/chmod 644 \/etc\/pam.d\/sudo/chmod 644 ${CUR_DIR}\/etc\/pam.d\/sudo/' \
	   -e '/cat > ${CUR_DIR}\/etc\/pam.d\/sudo/imkdir -pv ${CUR_DIR}/etc/pam.d' \
           -i $fpkgnme # for sudo
       sed -e 's/mkdir -pv \/usr\/lib\/systemd\/system\/{sockets/mkdir -pv ${CUR_DIR}\/usr\/lib\/systemd\/system\/{sockets/' \
           -e 's/ln -sf ..\/dm-event.socket \/usr\/lib\/systemd\/system/ln -sf ..\/dm-event.socket ${CUR_DIR}\/usr\/lib\/systemd\/system/' \
           -e 's/ln -sf ..\/lvm2-lvmetad.socket \/usr\/lib\/systemd\/system/ln -sf ..\/lvm2-lvmetad.socket ${CUR_DIR}\/usr\/lib\/systemd\/system/' \
           -i $fpkgnme # for lvm2
       sed -e 's/install -v -m755    contrib\/ssh-copy-id \/usr\/bin/install -v -m755    contrib\/ssh-copy-id ${CUR_DIR}\/usr\/bin/' \
           -e 's/>> \/etc\/ssh\/sshd_config/>> ${CUR_DIR}\/etc\/ssh\/sshd_config/' \
           -i $fpkgnme # for openssh
       sed -e 's/cat > \/etc\/pam.d\/polkit-1/cat > ${CUR_DIR}\/etc\/pam.d\/polkit-1/' \
           -i $fpkgnme # for polkit
       sed -e 's/mkdir -pv \/usr\/{bin,include,lib\/{,pkgconfig}}/mkdir -pv ${CUR_DIR}\/usr\/{bin,include,lib\/{,pkgconfig}}/' \
           -e 's/install -v -m755 Linux\*\/lib\/\*.so              \/usr\/lib/install -v -m755 Linux\*\/lib\/\*.so              ${CUR_DIR}\/usr\/lib/' \
           -e 's/install -v -m644 Linux\*\/lib\/{\*.chk,libcrmf.a} \/usr\/lib/install -v -m644 Linux\*\/lib\/{\*.chk,libcrmf.a} ${CUR_DIR}\/usr\/lib/' \
           -e 's/\/usr\/include\/nss/${CUR_DIR}\/usr\/include\/nss/' \
           -e 's/{certutil,nss-config,pk12util} \/usr\/bin/{certutil,nss-config,pk12util} ${CUR_DIR}\/usr\/bin/' \
           -e 's/nss.pc  \/usr\/lib\/pkgconfig/nss.pc  ${CUR_DIR}\/usr\/lib\/pkgconfig/' \
	   -e 's/p11-kit-trust.so \/usr/p11-kit-trust.so ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for nss
       sed -e 's/install -v -dm700 \/var\/lib\/sasl/mkdir -pv ${CUR_DIR}\/var\/lib\/sasl/' \
           -i $fpkgnme # for cyrus-sasl
       sed -e 's/\/usr\/bin\/update-ca-certificates/${CUR_DIR}\/usr\/bin\/update-ca-certificates/' \
           -i $fpkgnme # for p11-kit
       sed -e 's/install -vdm755 \/etc\/ssl\/local/install -vdm755 ${CUR_DIR}\/etc\/ssl\/local/' \
	   -i $fpkgnme # for ca-certificates
       sed -e 's/ln -svf \${f}2.1 \/usr\/share\/man\/man1\/\$f.1/ln -svf \${f}2.1 ${CUR_DIR}\/usr\/share\/man\/man1\/\$f.1/' \
           -e 's/ln -svf \${f}2   \/usr\/bin\/\$f/ln -svf \${f}2   ${CUR_DIR}\/usr\/bin\/\$f/' \
           -i $fpkgnme # for gnupg
       sed -e 's/find \/usr\/lib -type f -name/find ${CUR_DIR}\/usr\/lib -type f -name/' \
           -e 's/chmod -v 755 \/bin\/ksu/chmod -v 755 ${CUR_DIR}\/usr\/bin\/ksu/' \
           -i $fpkgnme # for krb5
     ;;
     networks)
       sed -e 's/make -C client install/make -C client DESTDIR="$CUR_DIR" install/' \
           -e '/install -v -m755 client\/scripts\/linux/i mkdir -pv ${CUR_DIR}\/usr\/bin' \
           -e 's/install -v -m755 client\/scripts\/linux \/usr\/bin\/dhclient-script/install -v -m755 client\/scripts\/linux ${CUR_DIR}\/usr\/bin\/dhclient-script/' \
           -e 's/cat > \/etc\/dhcp\/dhclient.conf/cat > ${CUR_DIR}\/etc\/dhcp\/dhclient.conf/' \
           -e 's/install -v -dm 755 \/var\/lib\/dhclient/install -v -dm 755 ${CUR_DIR}\/var\/lib\/dhclient/' \
           -i $fpkgnme # for dhcp
       sed -e 's/make update/make DESTDIR=${CUR_DIR}\/usr update/' \
           -i $fpkgnme # for net-tools
       sed -e 's/echo ca-directory=\/etc\/ssl\/certs >> \/etc\/wgetrc/echo ca-directory=\/etc\/ssl\/certs >> ${CUR_DIR}\/etc\/wgetrc/' \
           -i $fpkgnme # for wget
       sed -e 's/ln -sv -f traceroute \/bin\/traceroute6/ln -sv -f traceroute ${CUR_DIR}\/usr\/bin\/traceroute6/' \
           -e 's/ln -sv -f traceroute.8 \/usr\/share\/man\/man8\/traceroute6.8/ln -sv -f traceroute.8 ${CUR_DIR}\/usr\/share\/man\/man8\/traceroute6.8/' \
           -i $fpkgnme # for traceroute
       sed -e 's/make prefix=\/usr install-whois/make prefix=\/usr BASEDIR="${CUR_DIR}" install-whois/' \
           -e 's/make prefix=\/usr install-mkpasswd/make prefix=\/usr BASEDIR="${CUR_DIR}" install-mkpasswd/' \
           -e 's/make prefix=\/usr install-pos/make prefix=\/usr BASEDIR="${CUR_DIR}" install-pos/' \
           -i $fpkgnme # for whois
       sed -e 's/make SBINDIR=\/usr\/bin install/make DESTDIR="${CUR_DIR}" SBINDIR=\/usr\/bin install/' \
           -i $fpkgnme # for iw
       sed -e '/cat > \/etc\/rsyncd.conf <</i mkdir -pv ${CUR_DIR}\/etc' \
           -e 's/cat > \/etc\/rsyncd.conf << /cat > ${CUR_DIR}\/etc\/rsyncd.conf << /' \
           -i $fpkgnme # for rsync
       sed -e 's/cp \/blfsBuildFiles\/blfsfiles\/conf-files\/squid.conf \/etc\/squid/cp \/blfsBuildFiles\/blfsfiles\/conf-files\/squid.conf ${CUR_DIR}\/etc\/squid/' \
           -e '/cat > \/etc\/pam.d\/squid << "SQUIDEOF"/i mkdir -pv ${CUR_DIR}\/etc\/pam.d' \
           -e 's/cat > \/etc\/pam.d\/squid << "SQUIDEOF"/cat > ${CUR_DIR}\/etc\/pam.d\/squid << "SQUIDEOF"/' \
           -i $fpkgnme # for squid
       sed -e '/scons PREFIX=\/usr install/i\  install -m755 -d ${CUR_DIR}\/usr' \
           -e 's/scons PREFIX=\/usr install/scons PREFIX=${CUR_DIR}\/usr install/' \
           -i $fpkgnme # for serf
       sed -e 's/\/usr\/share\/bash-completion\/completions\/netctl/${CUR_DIR}\/usr\/share\/bash-completion\/completions\/netctl/' \
           -e 's/\/usr\/share\/zsh\/site-functions\/_netctl/${CUR_DIR}\/usr\/share\/zsh\/site-functions\/_netctl/' \
           -i $fpkgnme # for netctl
       sed -e 's/examples\/smb.conf.default \/etc\/samba/examples\/smb.conf.default ${CUR_DIR}\/etc\/samba/' \
           -e 's/\/etc\/openldap\/schema/${CUR_DIR}\/etc\/openldap\/schema/' \
           -e '/ln -v -sf \/usr\/bin\/smbspool/i mkdir -pv ${CUR_DIR}\/usr\/lib\/cups\/backend' \
           -e 's/ln -v -sf \/usr\/bin\/smbspool \/usr/ln -v -sf \/usr\/bin\/smbspool ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for samba
       sed -e 's/cli,passphrase,supplicant} \/usr/cli,passphrase,supplicant} ${CUR_DIR}\/usr/' \
           -e 's/wpa_supplicant.conf.5 \/usr/wpa_supplicant.conf.5 ${CUR_DIR}\/usr/' \
           -e 's/cli,passphrase,supplicant}.8 \/usr/cli,passphrase,supplicant}.8 ${CUR_DIR}\/usr/' \
           -e 's/\/etc\/dbus-1\/system.d\/wpa_supplicant/${CUR_DIR}\/etc\/dbus-1\/system.d\/wpa_supplicant/' \
           -e 's/wpa_gui-qt4\/wpa_gui \/usr/wpa_gui-qt4\/wpa_gui ${CUR_DIR}\/usr/' \
           -e 's/docbook\/wpa_gui.8 \/usr/docbook\/wpa_gui.8 ${CUR_DIR}\/usr/' \
           -e 's/wpa_gui-qt4\/wpa_gui.desktop \/usr/wpa_gui-qt4\/wpa_gui.desktop ${CUR_DIR}\/usr/' \
           -e 's/wpa_gui-qt4\/icons\/wpa_gui.svg \/usr/wpa_gui-qt4\/icons\/wpa_gui.svg ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for wpa_supplicant
       sed -e 's/cat >> \/etc\/NetworkManager\/NetworkManager.conf/cat >> ${CUR_DIR}\/etc\/NetworkManager\/NetworkManager.conf/' \
           -i $fpkgnme # for networkmanager
     ;;
     perlmodules)
       sed -e 's/\/Build install/\/Build install destdir=${CUR_DIR}/' -i $fpkgnme
     ;;
     programming)
       sed -e ':1;s/make docdir\(.*install\)/make DESTDIR="$CUR_DIR" docdir\1/;t1' -i $fpkgnme # for check
       sed -e 's/make -C doc install-pdf/make -C doc DESTDIR="$CUR_DIR" install-pdf/' -i $fpkgnme # for cvs
       sed -e 's/autoconf213\.info \/usr\/share/autoconf213\.info ${CUR_DIR}\/usr\/share/' \
           -e 's/--info-dir=\/usr\/share\/info autoconf213\.info/--info-dir=${CUR_DIR}\/usr\/share\/info autoconf213\.info/' \
           -i $fpkgnme # for autoconf-2.13
       sed -e 's/chmod -v 755 \/usr\/lib\/libslang.so/chmod -v 755 ${CUR_DIR}\/usr\/lib\/libslang.so/' \
           -e 's/\/usr\/lib\/slang\/v2\/modules\/\*.so/${CUR_DIR}\/usr\/lib\/slang\/v2\/modules\/\*.so/' \
           -i $fpkgnme # for s-lang
       sed -e 's/ln -v -sf wish8.6 \/usr\/bin\/wish/ln -v -sf wish8.6 ${CUR_DIR}\/usr\/bin\/wish/' \
           -e 's/chmod -v 755 \/usr\/lib\/libtk8.6.so/chmod -v 755 ${CUR_DIR}\/usr\/lib\/libtk8.6.so/' \
           -i $fpkgnme # for tk
       sed -e 's/chmod -v 755 \/usr\/lib\/libpython2.7.so.1.0/chmod -v 755 ${CUR_DIR}\/usr\/lib\/libpython2.7.so.1.0/' \
           -i $fpkgnme # for python2
       sed -e '/install -v -m644 doc\/gc.man/i\  install -m755 -d ${CUR_DIR}/usr/share/man/man3' \
           -e 's/install -v -m644 doc\/gc.man \/usr/install -v -m644 doc\/gc.man ${CUR_DIR}\/usr/' \
           -e 's/ln -sfv gc_malloc.3 \/usr/ln -sfv gc_malloc.3 ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for gc
       sed -e 's/make -C gdb install/make DESTDIR="$CUR_DIR" -C gdb install/' \
	   -i $fpkgnme # for gdb
       sed -e 's/\/usr\/share\/gdb\/auto-load/${CUR_DIR}\/usr\/share\/gdb\/auto-load/' \
	   -e 's/mv \/usr\/lib\/libguile/mv ${CUR_DIR}\/usr\/lib\/libguile/' \
	   -e 's/mv \/usr\/share\/doc\/guile-/mv ${CUR_DIR}\/usr\/share\/doc\/guile-/' \
	   -i $fpkgnme # for guile 
       sed -e 's/for file in \/usr\/lib\/lib{clang,LLVM,LTO}/for file in ${CUR_DIR}\/usr\/lib\/lib{clang,LLVM,LTO}/' \
           -e 's/install -v -dm755 \/usr\/lib\/clang-analyzer/install -v -dm755 ${CUR_DIR}\/usr\/lib\/clang-analyzer/' \
           -e 's/tools\/clang\/tools\/\$prog \/usr/tools\/clang\/tools\/\$prog ${CUR_DIR}\/usr/' \
           -e 's/clang-analyzer\/\$prog\/\$prog \/usr/clang-analyzer\/\$prog\/\$prog ${CUR_DIR}\/usr/' \
           -e 's/clang \/usr\/lib\/clang-analyzer/clang ${CUR_DIR}\/usr\/lib\/clang-analyzer/' \
           -e '/mv -v \/usr\/lib\/clang-analyzer\/scan-build/i install -v -dm755 ${CUR_DIR}\/usr\/share\/man\/man1' \
           -e 's/mv -v \/usr\/lib\/clang-analyzer\/scan-build\/scan-build.1 \/usr/mv -v ${CUR_DIR}\/usr\/lib\/clang-analyzer\/scan-build\/scan-build.1 ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for llvm
       sed -e 's/INSTALL_TOP=\/usr/INSTALL_TOP=${CUR_DIR}\/usr/' \
           -e 's/INSTALL_MAN=\/usr\/share/INSTALL_MAN=${CUR_DIR}\/usr\/share/' \
           -e 's/install -v -m644 -D lua.pc \/usr\/lib/install -v -m644 -D lua.pc ${CUR_DIR}\/usr\/lib/' \
           -i $fpkgnme # for lua
       sed -e 's/chmod -v 755 \/usr\/lib\/libpython3/chmod -v 755 ${CUR_DIR}\/usr\/lib\/libpython3/' \
           -e 's/install -v -m755 -d \/usr\/share\/doc\/python-\${Python3vers/install -v -m755 -d ${CUR_DIR}\/usr\/share\/doc\/python-\${Python3vers/' \
           -e 's/-C \/usr\/share\/doc\/python-3.4.3\/html/-C ${CUR_DIR}\/usr\/share\/doc\/python-3.4.3\/html/' \
           -i $fpkgnme # for python3
       sed -e 's/install --prefix=\/usr --optimize/install --prefix=\/usr --root="$CUR_DIR" --optimize/' \
           -e 's/rm \/usr\/bin\/easy_install/rm ${CUR_DIR}\/usr\/bin\/easy_install/' \
           -i $fpkgnme # for py2setuptools
       sed -e 's/mv \/usr\/bin\/mako-render \/usr\/bin\/mako-render2/mv ${CUR_DIR}\/usr\/bin\/mako-render ${CUR_DIR}\/usr\/bin\/mako-render2/' \
           -i $fpkgnme # for py2-mako
       sed -e 's/target\/release\/cbindgen \/usr/target\/release\/cbindgen "${CUR_DIR}"\/usr/' \
           -i $fpkgnme # for cbindgen
     ;;
     sysutils)
       sed -e 's/chmod -v 755 \/usr\/lib\/libpci.so/chmod -v 755 ${CUR_DIR}\/usr\/lib\/libpci.so/' \
           -i $fpkgnme # for pciutils
       sed -e 's/\/lib\/systemd\/system\/update/${CUR_DIR}\/usr\/lib\/systemd\/system\/update/' \
           -i $fpkgnme # for pciutils and usbutils
       sed -e 's/install -v -m644 man\/\*\.1 \/usr\/share\/man\/man1/install -v -m644 man\/\*\.1 ${CUR_DIR}\/usr\/share\/man\/man1/' \
           -e 's/install -v -m644 man\/\*\.8 \/usr\/share\/man\/man8/install -v -m644 man\/\*\.8 ${CUR_DIR}\/usr\/share\/man\/man8/' \
           -i $fpkgnme # for pm-utils
       sed -e 's/install -v -m755 -d \/etc\/acpi\/events/install -v -m755 -d ${CUR_DIR}\/etc\/acpi\/events/' \
           -i $fpkgnme # for acpid
       sed -e 's/\/usr\/lib\/tmpfiles.d\/legacy.conf/${CUR_DIR}\/usr\/lib\/tmpfiles.d\/legacy.conf/' \
           -e 's/rm -r \/usr\/lib\/rpm/rm -r ${CUR_DIR}\/usr\/lib\/rpm/' \
           -e 's/if \[ \! -d \/etc\/pam.d/if \[ \! -d ${CUR_DIR}\/etc\/pam.d/' \
           -e 's/install -m755 -d \/etc\/pam.d/install -m755 -d ${CUR_DIR}\/etc\/pam.d/' \
           -e 's/cat >> \/etc\/pam.d\/system-session/cat >> ${CUR_DIR}\/etc\/pam.d\/system-session/' \
           -e 's/cat > \/etc\/pam.d\/systemd-user/cat > ${CUR_DIR}\/etc\/pam.d\/systemd-user/' \
           -i $fpkgnme # for systemd
       sed -e 's/ln -svf ..\/lib\/bluetooth\/bluetoothd \/usr/ln -svf ..\/lib\/bluetooth\/bluetoothd ${CUR_DIR}\/usr/' \
           -e 's/install -v -dm755 \/etc\/bluetooth/install -v -dm755 ${CUR_DIR}\/etc\/bluetooth/' \
           -e 's/install -v -m644 src\/main.conf \/etc\/bluetooth/install -v -m644 src\/main.conf ${CUR_DIR}\/etc\/bluetooth/' \
           -i $fpkgnme # for bluez
     ;;
     java)
       sed -e 's/install -vdm755 \/opt\/\${SrcName}bin/install -vdm755 ${CUR_DIR}\/opt\/\${SrcName}bin/' \
           -e 's/mv -v \* \/opt\/\${SrcName}bin/mv -v * ${CUR_DIR}\/opt\/\${SrcName}bin/' \
           -e 's/ln -svf \${SrcName}bin \/opt\/jdk/ln -svf \${SrcName}bin ${CUR_DIR}\/opt\/jdk/' \
           -i $fpkgnme # for jdkbin
       sed -e 's/\/usr\/share\/java\/\$/${CUR_DIR}\/usr\/share\/java\/\$/' \
           -i $fpkgnme # for java-hamcrest
       sed -e 's/build.sh -Ddist.dir=\/opt\/ant-1.9.6 dist/build.sh -Ddist.dir=${CUR_DIR}\/opt\/ant-1.9.6 dist/' \
           -e 's/ln -v -sfn ant-1.9.6 \/opt\/ant/ln -v -sfn ant-1.9.6 ${CUR_DIR}\/opt\/ant/' \
           -i $fpkgnme # for apache-ant
       sed -e 's/junit-4.12.jar \/usr/junit-4.12.jar ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for junit
       sed -e '/cp -RT build\/\*\/images\/j2sdk-image/i\  install -vm755 -d ${CUR_DIR}\/opt\/jdk8-openjdk' \
           -e 's/cp -RT build\/\*\/images\/j2sdk-image \/opt\/OpenJDK-1.8.0.60/cp -RT build\/\*\/images\/j2sdk-image ${CUR_DIR}\/opt\/jdk8-openjdk/' \
           -e 's/ln -v -nsf OpenJDK-1.8.0.60 \/opt\/jdk/ln -v -nsf jdk8-openjdk ${CUR_DIR}\/opt\/jdk/' \
           -e 's/mkdir -pv \/usr\/share\/applications/mkdir -pv ${CUR_DIR}\/usr\/share\/applications/' \
           -e 's/cat > \/usr\/share\/applications\/openjdk-10/cat > ${CUR_DIR}\/usr\/share\/applications\/openjdk-10/' \
           -e 's/install -v -Dm0644 javaws.png \/usr\/share\/pixmaps/install -v -Dm0644 javaws.png ${CUR_DIR}\/usr\/share\/pixmaps/' \
           -e 's/\/opt\/jdk\/bin\/mkcacerts/${CUR_DIR}\/opt\/jdk\/bin\/mkcacerts/' \
           -i $fpkgnme # for openjdk
     ;;
     genutils)
       sed -e 's/make prefix=\/usr install/make prefix=\/usr DESTDIR="$CUR_DIR" install/' \
	   -i $fpkgnme # for re2
       sed -e ':1;s/make DOCUMENTATION_PATH\(.*install\)/make DESTDIR="$CUR_DIR" DOCUMENTATION_PATH\1/;t1' \
           -i $fpkgnme # for imagemagick
       sed -e 's/make doc_dir=\/usr\/share\/doc\/highlight/make DESTDIR="${CUR_DIR}" doc_dir=\/usr\/share\/doc\/highlight/' \
           -i $fpkgnme # for highlight
     ;;
     pst)
       sed -e 's/install -v -m755 -d \/usr\/share\/xml\/docbook\/xsl-stylesheets/install -v -m755 -d ${CUR_DIR}\/usr\/share\/xml\/docbook\/xsl-stylesheets/' \
           -i $fpkgnme # for docbook-xsl
       sed -e ':1;s/make docdir\(.*install\)/make DESTDIR="${CUR_DIR}" docdir\1/;t1' \
           -e 's/\/etc\/sgml\/sgml-ent.cat/${CUR_DIR}\/etc\/sgml\/sgml-ent.cat/' \
           -e 's/\/usr\/share\/sgml\/sgml-iso/${CUR_DIR}\/usr\/share\/sgml\/sgml-iso/' \
           -e 's/\/etc\/sgml\/sgml-docbook.cat/${CUR_DIR}\/etc\/sgml\/sgml-docbook.cat/' \
           -i $fpkgnme # for sgml-common
       sed -e '/docdir=\/usr\/share\/doc\/OpenSP/{n; s/install/DESTDIR="${CUR_DIR}" install/}' \
           -e 's/onsgmls   \/usr\/bin\/nsgmls/onsgmls   ${CUR_DIR}\/usr\/bin\/nsgmls/' \
           -e 's/osgmlnorm \/usr\/bin\/sgmlnorm/osgmlnorm ${CUR_DIR}\/usr\/bin\/sgmlnorm/' \
           -e 's/ospam     \/usr\/bin\/spam/ospam     ${CUR_DIR}\/usr\/bin\/spam/' \
           -e 's/ospcat    \/usr\/bin\/spcat/ospcat    ${CUR_DIR}\/usr\/bin\/spcat/' \
           -e 's/ospent    \/usr\/bin\/spent/ospent    ${CUR_DIR}\/usr\/bin\/spent/' \
           -e 's/osx       \/usr\/bin\/sx/osx       ${CUR_DIR}\/usr\/bin\/sx/' \
           -e 's/osx       \/usr\/bin\/sgml2xml/osx       ${CUR_DIR}\/usr\/bin\/sgml2xml/' \
           -e 's/libosp.so \/usr\/lib\/libsp.so/libosp.so ${CUR_DIR}\/usr\/lib\/libsp.so/' \
           -i $fpkgnme # for opensp
       sed -e 's/rm -rf \/tmp\/cupsinit/rm -rf ${CUR_DIR}\/tmp/' \
           -e '/ln -svnf ..\/cups\/doc/i install -vm755 -d ${CUR_DIR}\/usr\/share\/doc' \
           -e 's/ln -svnf ..\/cups\/doc-'"${cupsvers}"' \/usr/ln -svnf ..\/cups\/doc-'"${cupsvers}"' ${CUR_DIR}\/usr/' \
           -e 's/\/var\/run\/cups\/cups.sock" > \/etc/${CUR_DIR}\/var\/run\/cups\/cups.sock" > ${CUR_DIR}\/etc/' \
           -e '/cat > \/etc\/pam.d\/cups/i install -vm755 -d ${CUR_DIR}\/etc\/pam.d' \
           -e 's/cat > \/etc\/pam.d\/cups/cat > ${CUR_DIR}\/etc\/pam.d\/cups/' \
           -e '/gtk-update-icon-cache/d' \
           -i $fpkgnme # for cups
       sed -e 's/make soinstall/make DESTDIR="${CUR_DIR}" soinstall/' \
           -e 's/install -v -m644 base\/\*.h \/usr\/include\/ghostscript/install -v -m644 base\/\*.h ${CUR_DIR}\/usr\/include\/ghostscript/' \
           -e 's/ln -v -s ghostscript \/usr\/include\/ps/ln -v -s ghostscript ${CUR_DIR}\/usr\/include\/ps/' \
           -e 's/ln -sfv ..\/ghostscript\/9.16\/doc \/usr/ln -sfv ..\/ghostscript\/9.16\/doc ${CUR_DIR}\/usr/' \
           -e 's/\/usr\/share\/ghostscript/${CUR_DIR}\/usr\/share\/ghostscript/' \
           -i $fpkgnme # for ghostscript
     ;;
     server)
       sed -e ':1;s/make docdir\(.*install\)/make DESTDIR="${CUR_DIR}" docdir\1/;t1' \
           -i $fpkgnme # for berkeley db
       sed -e 's@mv -v /usr/bin/suexec /usr@mv -v ${CUR_DIR}/usr/bin/suexec ${CUR_DIR}/usr@' \
           -e 's@chgrp apache           /usr@chgrp apache           ${CUR_DIR}/usr@' \
           -e 's/chmod 4754             \/usr/chmod 4754             ${CUR_DIR}\/usr/' \
           -e 's/chown -v -R apache:apache \/srv\/www/chown -v -R apache:apache ${CUR_DIR}\/srv\/www/' \
           -i $fpkgnme # for apache when installing as root
       sed -e 's/chmod -v 0755 \/usr\/lib\/lib{bind9/chmod -v 0755 ${CUR_DIR}\/usr\/lib\/lib{bind9/' \
           -e 's/install -vm755 -d \/srv\/named/install -vm755 -d ${CUR_DIR}\/srv\/named/' \
           -e 's/cd \/srv\/named/cd ${CUR_DIR}\/srv\/named/' \
           -e 's/touch \/srv\/named\/managed/touch ${CUR_DIR}\/srv\/named\/managed/'\
           -i $fpkgnme # for bind
       sed -e 's/install -v -dm 755 \/etc\/mysql/install -v -dm 755 ${CUR_DIR}\/etc\/mysql/' \
           -e 's/cat > \/etc\/mysql\/my.cnf/cat > ${CUR_DIR}\/etc\/mysql\/my.cnf/' \
           -i $fpkgnme # for mariadb
     ;;
     x)
       sed -e 's/make -C xdemos DEMOS_PREFIX=\$XORG_PREFIX/make -C xdemos DEMOS_PREFIX=\$XORG_PREFIX DESTDIR="${CUR_DIR}"/' \
           -e 's/rm -f \$XORG_PREFIX\/bin\/xkeystone/rm -f ${CUR_DIR}\/\$XORG_PREFIX\/bin\/xkeystone/' \
           -e 's/install -v -d -m755 \/usr\/share\/fonts/install -v -d -m755 ${CUR_DIR}\/usr\/share\/fonts/' \
           -e 's/X11\/OTF \/usr\/share\/fonts/X11\/OTF ${CUR_DIR}\/usr\/share\/fonts/' \
           -e 's/X11\/TTF \/usr\/share\/fonts/X11\/TTF ${CUR_DIR}\/usr\/share\/fonts/' \
           -e 's/make DESTDIR="${CUR_DIR}" install-ti/make DESTDIR="${PkgUserDir}\/${PkgName}" install-ti/' \
           -e 's/install -m755 -d \/etc\/X11\/xorg.conf.d/install -m755 -d ${CUR_DIR}\/etc\/X11\/xorg.conf.d/' \
           -e 's/cat >> \/etc\/sysconfig\/createfiles/cat >> ${CUR_DIR}\/etc\/sysconfig\/createfiles/' \
           -e '/etc\/X11\/xorg.conf.d\/20-intel.conf/i install -v -m755 -d ${CUR_DIR}\/etc\/X11\/xorg.conf.d' \
           -e 's/\/etc\/X11\/xorg.conf.d\/20-intel.conf/${CUR_DIR}\/etc\/X11\/xorg.conf.d\/20-intel.conf/' \
           -i $fpkgnme # for x
     ;;
# TODO - add qt5 changes
     xlibs)
       sed -e 's/\/usr\/share\/gtk-doc\/html\/webkit/${CUR_DIR}\/usr\/share\/gtk-doc\/html\/webkit/' \
           -i $fpkgnme # for webkitgtk
     ;;
     xsoftware)
       sed -e 's/client.mk install/client.mk DESTDIR="${CUR_DIR}" install/' \
           -e 's/mkdir -pv \/usr\/share\/{applications,pixmaps}/mkdir -pv ${CUR_DIR}\/usr\/share\/{applications,pixmaps}/' \
           -e 's/cat > \/usr\/share\/applications\/thunderbird/cat > ${CUR_DIR}\/usr\/share\/applications\/thunderbird/' \
           -e 's/\/usr\/lib\/thunderbird/${CUR_DIR}\/usr\/lib\/thunderbird/' \
           -e 's/\/usr\/share\/pixmaps\/thunderbird/${CUR_DIR}\/usr\/share\/pixmaps\/thunderbird/' \
           -i $fpkgnme # for thunderbird
       sed -e '/mandb -c \/opt\/jdk\/man/i install -m755 -d ${CUR_DIR}\/opt\/jdk\/man\ninstall -m755 -d ${CUR_DIR}\/usr\/share\/applications\ninstall -m755 -d ${CUR_DIR}\/usr\/share\/pixmaps\ninstall -m755 -d ${CUR_DIR}\/usr\/lib\/mozilla\/plugins' \
           -e 's/mandb -c \/opt\/jdk\/man/mandb -c ${CUR_DIR}\/opt\/jdk\/man/' \
           -e 's/install -v -Dm0644 itweb-settings.desktop \/usr/install -v -Dm0644 itweb-settings.desktop ${CUR_DIR}\/usr/' \
           -e 's/install -v -Dm0644 javaws.png \/usr/install -v -Dm0644 javaws.png ${CUR_DIR}\/usr/' \
           -e 's/install -m644 javaws.desktop \/usr/install -m644 javaws.desktop ${CUR_DIR}\/usr/' \
           -e 's/IcedTeaPlugin.so \/usr/IcedTeaPlugin.so ${CUR_DIR}\/usr/' \
           -i $fpkgnme # for icedtea-web
     ;;
     browser)
       sed -e 's/client.mk install/client.mk DESTDIR="${CUR_DIR}" install/' \
           -e 's/mkdir -pv    \/usr\/lib\/mozilla/mkdir -pv    ${CUR_DIR}\/usr\/lib\/mozilla/' \
           -e 's/\/usr\/lib\/firefox/${CUR_DIR}\/usr\/lib\/firefox/' \
           -e 's/\/usr\/share\/applications/${CUR_DIR}\/usr\/share\/applications/' \
           -e 's/\/usr\/share\/pixmaps/${CUR_DIR}\/usr\/share\/pixmaps/' \
           -i $fpkgnme # for firefox
     ;;
     gnomeplatform)
       sed -e 's/mkdir -p \/etc\/xdg\/autostart/mkdir -p ${CUR_DIR}\/etc\/xdg\/autostart/' \
           -e 's/cat > \/etc\/xdg\/autostart\/polkit/cat > ${CUR_DIR}\/etc\/xdg\/autostart\/polkit/' \
           -i $fpkgnme # for polkit-gnome
       sed -e 's/\/etc\/gconf\/gconf.xml.system/${CUR_DIR}\/etc\/gconf\/gconf.xml.system/' \
           -i $fpkgnme # for gconf
     ;;
     gnomedesktop)
       sed -e 's/cat > \/etc\/profile.d\/gnome.sh/cat > ${CUR_DIR}\/etc\/profile.d\/gnome.sh/' \
           -i $fpkgnme # for gnome-session
       sed -e 's/\/usr\/share\/gnome-shell\/modes/${CUR_DIR}\/usr\/share\/gnome-shell\/modes/' \
           -i $fpkgnme # for gnome-shell
     ;;
     gnomeapps)
       sed -e 's/\/usr\/bin\/cmail/${CUR_DIR}\/usr\/bin\/cmail/' \
           -i $fpkgnme # for xboard
       sed -e 's/compileall \/usr\/lib\/python2.7/compileall ${CUR_DIR}\/usr\/lib\/python2.7/' \
           -i $fpkgnme # for alacarte
     ;;
  esac
fi
# delete any blank lines in the file
sed -i '/^$/d' $fpkgnme
} # end Start
#
SetPkgVers () {
cat >> $Output << "EOF"
SetPkgVers () {
# $1 is the src package name
# $2 is the name to trim against - usually .tar
local pkgnm=$1
local trim=$2
local fndpkg
local pkgplusvers
local pattern="${pkgnm}[0-9].*${trim}.*z*"
if [ "$trim" = ".zip" -o "$trim" = ".tgz" ]; then
  fndpkg=$( ls -l . | grep ${pkgnm}[0-9].*${trim} | awk '{print $NF}' )
else
  case $pkgnm in
     nasm-) # -xdoc tar file also present
       pattern="${pkgnm}?.??.??${trim}.*z*"
     ;;
  esac
  fndpkg=$( ls -l . | grep $pattern | awk '{print $NF}' )
fi
pkgplusvers="${fndpkg%${trim}*}"
rtrnpkgname=($pkgplusvers)
} # end SetPkgVers
#
EOF
} # end SetPkgVers
#
GetKernelVersion () {
local moddir="${LFS}/usr/lib/modules"
local IFS=' 
'
local foundmod=($(ls $moddir | grep ^[0-9])) # get all dirs beginning with numeric
local nummod=${#foundmod[@]}
rtrkernum=""
if [ $nummod -eq 1 ]; then
  rtrkernum=${foundmod[0]}
  return 0
elif [ $nummod -eq 0 ]; then
  return $RETURN_PARAM
else
  echo "Found these numerical dirs in /usr/lib/modules:"
  for ((i=0; i<$nummod; i++)); do
    echo "${foundmod[i]}"
  done
  echo "So couldn't determine the kernel version"
  return $RETURN_MTOV
fi
} # end GetKernelVersion
#
GetCommandVersion () {
# $1 is the location of the book commands
# $2 is the package name
# $3 is the characters at the beginning of the command that is to be found
local commandloc=$1
local pkgName=$2
local cmdLine
local charfnd=$3
local reqCom=""
local pkgplusvers
local pkgcomExt
local stripit
#
while read cmdLine; do
  if [[ ${cmdLine:0:1} != '#' ]]; then # ignore line if it has a hash at the start
    reqCom=$( echo "$cmdLine" | grep -e "$charfnd" )
    case $reqCom in
       *"$charfnd"*)
         break
       ;;
    esac
  fi
done < ${commandloc}/*-${pkgName}
if [ ! -z "${reqCom// }" ]; then # not empty
  case $pkgName in
     dconf) # looks for line such as tar -xf ../dconf-editor-3.28.0.tar.xz &&
       pkgcomExt=$( echo $reqCom | awk -F\- '{print $NF}' )
       local trimto=".tar"
       pkgcomvers="${pkgcomExt%${trimto}*}"
     ;;
     firefox|thunderbird) # looks like ln -sfv /usr/lib/firefox-58.0/browser/icons/mozicon128.png
       pkgplusvers=$( echo $reqCom | awk -F\/ '{print $4}' )
       pkgcomExt="${pkgplusvers#*-}" # assumes version is like firefox-44.0.1
       pkgcomvers="${pkgcomExt%" &&"}" # remove any && from end of line
     ;;
     maven) # looks like tar -xf ../apache-maven-3.6.3-bin.tar.gz
       stripit=$( echo $reqCom | awk -F\/ '{print $2}' )
       pkgplusvers=$( echo $stripit | awk '{print $1}' )
       RtrnVars=""
       getPkgVersion $pkgplusvers "-bin"
       pkgcomvers=${RtrnVars[1]}
     ;;
     *) # works for OpenJDK
       pkgplusvers=$( echo $reqCom | awk -F\/ '{print $NF}' )
       pkgcomExt="${pkgplusvers#*-}"
       pkgcomvers="${pkgcomExt%" &&"}"
     ;;
  esac
  return 0
else
  return $RETURN_PARAM
fi
} # end GetCommandVersion
#
GetSeriesNum () {
# $1 is the kernel version number
local versnumber=$1
rtrseries=""
local IFS='.' # parse using a .
digitarray=($versnumber)
rtrseries="${digitarray[0]}.${digitarray[1]}"
} # GetSeriesNum
#
testNumVers () {
# tests if mutiple versions of a src tarfile exist in a dir
# if multiple versions are found, it checks which is most recent (highest version num)
# $1 is the location of the src package
# $2 is the section
# $3 is the name of the package
# $4 is the name to trim against - usually .tar
local pkgLoc=$1
local section=$2
local pkgnm=$3
local trimto=$4
local found=""
local useThisOne=""
local num
local inum
#echo "pkgLoc is $pkgLoc"
#echo "section is $section"
#echo "pkgnm is $pkgnm"
#echo "trimto is $trimto"
# rtrFile is a global variable which returns the latest file found
#
local pkgloc=${pkgLoc}/${section}
#echo "pkgloc is $pkgloc"
if [ ! -d $pkgloc ]; then return $RETURN_PARAM; fi # pkgloc not found
local IFS='
'
# is more than one version of pkgnm present in pkgloc?
case $pkgnm in
   Linux-PAM-) # a docs file as well
      found=($( ls -l $pkgloc | grep ${pkgnm}.\..\..\.tar.*z.* | awk '{print $NF}' ))
   ;;
   *)
     case $trimto in
        *z) # is probably .tgz
          found=($( ls -l $pkgloc | grep ${pkgnm}.*${trimto} | awk '{print $NF}' ))
        ;;
        *)
          found=($( ls -l $pkgloc | grep ${pkgnm}.*${trimto}.*z.* | awk '{print $NF}' ))
        ;;
     esac
   ;;
esac
num=${#found[@]}
if [ $num -eq 1 ]; then # only one file found
  rtrFile=${found[0]}
  return 0
elif [ $num -gt 1 ]; then # more than one version present
  echo "These versions were found:"
  echo ${found[@]}
# find which version is most recent
  if [ $num -eq 2 ]; then # find the later version - easy comparison
    RtrnVars=""
    getPkgVersion ${found[0]} $trimto
    local vers1=${RtrnVars[1]}
    RtrnVars=""
    getPkgVersion ${found[1]} $trimto
    local vers2=${RtrnVars[1]}
    compare_versions $vers1 $vers2 "."
    ret_val=$?
    if [ $ret_val -eq $RETURN_GT -o $ret_val -eq $RETURN_EQ ]; then
      rtrFile=${found[0]}
    else
      rtrFile=${found[1]}
    fi
    return $RETURN_MTOV
  elif [ $num -gt 2 ]; then # have to do multiple comparisons
    local storit=""
    for ((inum=0; inum<$num; inum++)); do
      case ${found[inum]} in
# TODO if have more than one binary file - not dealt with here
         ${pkgnm}*x86_64.pkg.tar.xz) # binary file
             :
         ;;
         ${pkgnm}*[0-9]*${trimto}.*z*)
             if [ -z "$storit" ]; then # first time through
               storit=${found[0]}
             else
               if [ $inum -gt 0 ]; then
                 RtrnVars=""
                 getPkgVersion ${found[inum-1]} $trimto
                 local vers1=${RtrnVars[1]}
                 RtrnVars=""
                 getPkgVersion ${found[inum]} $trimto
                 local vers2=${RtrnVars[1]}
                 compare_versions $vers1 $vers2 "."
                 ret_val=$?
                 if [ $ret_val -eq 0 ]; then storit=${found[inum]}; fi
               else
                 echo "in testNumVers - inum is zero - INVESTIGATE WHY"
               fi
             fi
         ;;
      esac
    done
    rtrFile=$storit
    return $RETURN_MTOV
  fi
fi
#
if [ -z "$found" ]; then # still not found any match - might be a patch file
  if [ "$trimto" = ".patch" ]; then
    found=($( ls -l $pkgloc | grep ${pkgnm}[0-9].*${trimto} | awk '{print $NF}' ))
    num=${#found[@]}
  else
#    echo "in testNumVers, trimto is $trimto. Is this correct?"
    return $RETURN_FNF
  fi
fi
if [ -z "$found" ]; then # didn't find any patch files
 return $RETURN_FNF # file not found
elif [ $num -eq 1 ]; then
  rtrFile=${found[0]}
  return 0
elif [ $num -gt 1 ]; then # help, more than one patch file
  echo "in testNumVers - more than one patch file found - INVESTIGATE"
  return 1
fi
} # end testNumVers
#
phpXBookVers () {
# $1 the command to parse for the version #
fileis=$(echo $1 | awk -F\/ '{print $5}')
phpXbookvers="${fileis#php-}"
} # end phpXBookVers
#
evolutionVersion () {
echo "evolutionVersion () {
baseval=0.0 # assume version # will be > 0
evoldir="/usr/lib/evolution"
for evers in \${evoldir}/*; do # loop through all files in the directory
  evoltest=\$( echo \$evers | awk -F\/ '{print \$NF}' )
  if [[ \"\$evoltest\" =~ ^[0-9]+([.][0-9]+)?$ ]]; then # a number so test its value
    float_test \"\$evoltest > \$baseval\" && evolVers=\$evoltest
    baseval=\$evolVers
  fi
done
}" >> $Output
} # end evolutionVersion
#
GetFileOwner () {
cat >> $Output << "EOF"
#
GetFileOwner () {
# $1 is the file's full path name
local file=$1
local owner=$(stat -c "%u" $file) # this produces a number
# get the name for the owner number from the /etc/passwd file
local ownersname=$(grep "$owner:$owner" /etc/passwd | awk -F\: '{print $1}')
echo "$ownersname" # return by command sub.
} # end GetFileOwner
#
EOF
} # end GetFileOwner
#
numElem () {
# counts the number of elements in a version number (or words in a sentence if you like)
# $1 is the input string
# $2 is the separator - usually . in a version number - space in a sentence :)
local inputString=$1
local IFS=$2
local numels=$(set -f; set -- $inputString; echo $#)
echo $numels
} # end numElem
#
getiprout2versFromCore () {
# get the iproute2 version from the installed version in core
rtrFile=""
testNumVers ${LFS}${PKGUSERDIR} "core/iproute2" "iproute2-" ".tar"
retval=$?
if [ $retval -eq $RETURN_PARAM ]; then
  echo "Package location ${LFS}${PKGUSERDIR} not found"
  echo "Cannot get the iproute2 package version number"
  echo "ABORTING - you need to check why this failed"
elif [ $retval -eq $RETURN_FNF ]; then
  echo "No iproute2 src file found in ${LFS}${PKGUSERDIR}/core"
  echo "Unable to get the iproute2 package version number"
  echo "**** CHECK WHY NO IPROUTE2 SRC FILE FOUND ****"
elif [ $retval -eq $RETURN_MTOV ]; then
  echo "found more than one version of the iproute2 src file in ${LFS}${PKGUSERDIR}/core"
  echo "latest version is $rtrFile"
  echo "delete the other(s) to make this work"
  exit 1
elif [ $retval -eq 0 ]; then # success
  echo "found $rtrFile in ${LFS}${PKGUSERDIR}/core"
  RtrnVars=""
  getPkgVersion $rtrFile ".tar"
  if [ ! -z "${RtrnVars[1]}" ]; then
    iproute2vers=${RtrnVars[1]}
    echo "iproute2 version installed is $iproute2vers"
  else
    echo "return from getPkgVersion, RtrnVars is Null - failed to get iproute2 version"
  fi
fi
} # end getiprout2versFromCore
#
getpy3versFromCore () {
# get the python3 version and series from the installed version in core
rtrFile=""
testNumVers ${LFS}${PKGUSERDIR} "core/python3" "Python-" ".tar"
retval=$?
if [ $retval -eq $RETURN_PARAM ]; then
  echo "Package location ${LFS}${PKGUSERDIR} not found"
  echo "Cannot get the Python-3 package version number"
# last resort
  Python3vers="3.9.1"
  py3series="3.9"
  echo "added manually in the script"
  echo "Python-3 version installed is $Python3vers"
  echo "Python3 series installed is $py3series"
  echo "***** CHECK THIS IT IS LIKELY WRONG *****"
elif [ $retval -eq $RETURN_FNF ]; then
  echo "No Python-3 src file found in ${LFS}${PKGUSERDIR}/core"
  echo "Unable to get the Python-3 package version number"
elif [ $retval -eq $RETURN_MTOV ]; then
  echo "found more than one version of the Python-3 src file in ${LFS}${PKGUSERDIR}/core"
  echo "latest version is $rtrFile"
  echo "delete the other(s) to make this work"
  exit 1
elif [ $retval -eq 0 ]; then # success
  echo "found $rtrFile in ${LFS}${PKGUSERDIR}/core"
  RtrnVars=""
  getPkgVersion $rtrFile ".tar"
  if [ ! -z "${RtrnVars[1]}" ]; then
    Python3vers=${RtrnVars[1]}
    echo "Python-3 version installed is $Python3vers"
    GetSeriesNum $Python3vers
    py3series=$rtrseries
    echo "Python3 series installed is $py3series"
  else
    echo "return from getPkgVersion, RtrnVars is Null - failed to get python3 version"
  fi
fi    
} # end getpy3versFromCore
#
getpy3versFromSrcfile () {
# get the python3 version and series from the source file in section programming
local Section="programming"
rtrFile=""
testNumVers $SOURCEDIR $Section "Python-3" ".tar"
retval=$?
if [ $retval -eq $RETURN_PARAM ]; then
  echo "Package location ${SOURCEDIR}/${Section} not found"
  echo "Cannot get the Python3 package version number"
elif [ $retval -eq $RETURN_FNF ]; then
  echo "No Python-3 src file found in ${SOURCEDIR}/${Section}/"
  echo "Unable to get the Python3 version"
elif [ $retval -eq $RETURN_MTOV ]; then
  echo "found more than one version of the Python3 src file in ${SOURCEDIR}/${Section}"
  echo "latest version is $rtrFile"
  echo "delete the other(s)"
  exit 1
elif [ $retval -eq 0 ]; then # success
  echo "found $rtrFile in ${SOURCEDIR}/${Section}"
  RtrnVars=""
  getPkgVersion $rtrFile ".tar"
  if [ ! -z "${RtrnVars[1]}" ]; then
    Python3vers=${RtrnVars[1]}
    echo "Python3 version is $Python3vers"
    GetSeriesNum $Python3vers
    py3series=$rtrseries
    echo "Python3 series is $py3series"
  else
    echo "return from getPkgVersion, RtrnVars is Null - failed to get the Python3 version"
  fi
fi
} # end getpy3versFromSrcfile
#
#************************************************************************

# ***main program***  - call the functions

#************************************************************************
configEdit # option to change the config file
retval=$?
if [ $retval -eq $RETURN_PARAM ]; then
 echo "Cancel pressed. Exiting now"
 exit 1
fi
#
# *** NOTE ***
# Since Sept 2016 there is one amalgamated development book for sysv and systemd
# This book has the address http://svn.linuxfromscratch.org/blfs/trunk/BOOK/ and the
# books are retrieved using REV='sysv' or REV='systemd' in the Makefile.
#
# For released versions of BLFS, use amalgamated book releases of 7.10 and higher.
# These are the only released books that will work here. Previous releases will probably break.
# The address of the first amalgamated book is http://svn.linuxfromscratch.org/blfs/tags/7.10/
#
source $cfg # make sure config file values are current
# get the values from the config file
if [ "$DESTDIR" = yes ]; then
  useDESTDIR=true
else
  useDESTDIR=false
fi
# check for incompatible values
# Note - Armin Krejzi's git book is no longer available
# This is left here because one-day LFS svn will be replaced by git
if [[ "$BOOK_VERSION" == KBLFS && "$BOOK" == svn ]]; then
  echo "BOOK_VERSION is $BOOK_VERSION but BOOK is $BOOK"
  echo "These are incompatible values"
  echo "Either change BOOK to git or change BOOK_VERSION to an svn source."
  echo "Exiting now."
  exit 1
elif [[ "$BOOK" == git && "$BOOK_VERSION" != KBLFS ]]; then
  echo "BOOK_VERSION is $BOOK_VERSION but BOOK is $BOOK"
  echo "These are incompatible values"
  echo "Either change BOOK to svn or change BOOK_VERSION to KBLFS."
  echo "Exiting now."
  exit 1
fi
SECTION=$(echo ${SECTION,,*}) # make sure SECTION is lowercase
if [ "$SECTION" = pythonmodbin ]; then # install binaries from Arch Linux
  SOURCES="archbinaries"
fi
SOURCES=$(echo ${SOURCES,,*}) # make sure SOURCES is lowercase
BOOK=$(echo ${BOOK,,*}) # make sure BOOK is lowercase
INSTALLDSKTP=$(echo ${INSTALLDSKTP,,*}) # make sure INSTALLDSKTP is lowercase
if [ "$INSTALLDSKTP" = gnome ]; then
  case $SECTION in
     xfce|xfcegnomeplatform|xfcegnomedesktop|xfcebrowser|lxde|lxqt)
       echo "You are installing Gnome. You don't need section $SECTION."
       echo "Exiting now"
       exit 1
     ;;
  esac
elif [ "$INSTALLDSKTP" = xfce ]; then
  case $SECTION in
     gnomeplatform|gnomedesktop|gnomeapps|lxde|lxqt)
       echo "You are installing xfce. You don't need section $SECTION."
       echo "Exiting now"
       exit 1
     ;;
  esac
elif [ "$INSTALLDSKTP" = lxde ]; then
  case $SECTION in
     gnomeplatform|gnomedesktop|gnomeapps|xfce|xfcegnomeplatform|xfcegnomedesktop|xfcebrowser|lxqt)
       echo "You are installing lxde. You don't need section $SECTION."
       echo "Exiting now"
       exit 1
     ;;
  esac
elif [ "$INSTALLDSKTP" = lxqt ]; then
  case $SECTION in
     gnomeplatform|gnomedesktop|gnomeapps|xfce|xfcegnomeplatform|xfcegnomedesktop|xfcebrowser|lxde)
       echo "You are installing lxqt. You don't need section $SECTION."
       echo "Exiting now"
       exit 1
     ;;
  esac
else
  echo "You have not chosen one of the four possible desktops"
# TODO allow no desktop to be installed
fi
# check for install from DESTDIR
installDEST=false
if [ "$INSTALLDEST" = yes ]; then # DESTDIR must be yes
  if ! $useDESTDIR; then
    echo "You have requested to install from files created by DESTDIR but DESTDIR=no"
    echo "Set DESTDIR=yes for this to work. INSTALLDEST will be set to no"
    echo "press <return> to continue"
    read Reply
    INSTALLDEST=no
  else
    installDEST=true
  fi
fi
blfsfilesTar=$BLFSFILESTAR # the tar file containing the package names and dependencies
blfsfiles=$(tar tJf $blfsfilesTar | head -1 | cut -f1 -d"/") # untars to this directory
BLFSBUILDFILES=${LFS}${blfsBuildFiles}/${blfsfiles} # location of the blfs build files
#
# set up names of x subdirs
#
xVers=$( echo $XVERSION | awk -F\. '{print $NF}' )
xVers="x${xVers}" # current version of x is x7
xlib="${xVers}lib"
xapp="${xVers}app"
xfont="${xVers}font"
xdriver="${xVers}driver" # current xdriver command name in the book
#
as_root=false
if [ "$AS_ROOT" = yes ]; then as_root=true; fi
#
if [[ "$SOURCES" = local && "$UPDATESRCFILES" = yes ]]; then
  echo "You've requested to update the src files for this section but you set the sources to be local."
  echo "You should change SOURCES to download in order to update them"
  echo "Will continue without updating the sources"
  UPDATESRCFILES="no"
fi
updateSources=false
if [ "$UPDATESRCFILES" = yes ]; then updateSources=true; fi
single_package=true
[[ "$SINGLE_PACKAGE" == no ]] && single_package=false
#
if [ "$SOURCES" = archbinaries ]; then
  BOOK_VERSION=arch
  BOOK=arch # lowercase a
fi
#
bookDir=$BLFS_BOOK_LOC_DIR
book_version=$BOOK_VERSION
useArchVersions=true
if [[ "$USE_ARCH_VERSIONS" != yes && "$USE_ARCH_VERSIONS" != arch ]]; then useArchVersions=false; fi
useProxy=false
if [ "$USEPROXY" = yes ]; then useProxy=true; fi
runit=$RUNIT
printit=$PRINTIT
#
# get the book if needed
#
if [ "$book_version" != arch ]; then
# set version properly
case $book_version in
   */)
     book_version=${book_version%?} # remove trailing /
   ;;
   SYSTEMD|Systemd|systemd) # not okay - abort
     echo "The book version should not be systemd."
     echo "To use systemd, set BOOK_VERSION=BOOK and SYSTEMD=yes in the menu."
     exit 1
   ;;
   Current_Development)
     book_version="BOOK"
   ;;
esac
#
isSystemdBook=false # use sysv
if [ "$BOOK" = svn ]; then
  echo "Request to svn the book"
  GetSvnUrl # make sure the svn url is set
  if [ "$book_version" != blank ]; then #check if the requested book is present locally
    ChkLocalBook $bookDir $book_version $BOOK
    SetBLFSBook $book_version
  else # book_version set to blank so ask for which book
# note - only books 7.10 and later are guaranteed to work. Previous ones haven't been tested.
    WhichBLFSBook # choose which BLFS version to download the xml files
# book_version ends with a / so remove it
    case $book_version in
       */)
         book_version=${book_version%?}
       ;;
    esac
    # check if the requested book is already present locally
    ChkLocalBook $bookDir $book_version $BOOK
  fi
  if [ "$SOURCES" = download ]; then CleanLocalREPO $bookDir $book_version; fi # delete any files in local book repository
  CheckoutBook  $bookDir $book_version # svn the requested book xml files
  SVNINFO="$(svn info ${bookDir}/${book_version} | awk '{printf $0"|"}')"
# Note, tagged | on the end so it can be used as a record separator later
# e.g.
# echo $SVNINFO | awk 'BEGIN{ RS = "|" }; {print $0}'
# will 'reconstitute it
elif [ "$BOOK" = git ]; then # download the xml from git
# first check the latest commit
  latestCommit=$(git ls-remote ${BOOK_URL}.git refs/heads/master | cut -f 1)
# check if a local book already exists
  ChkLocalBook $bookDir $book_version $BOOK
  if [ "$?" -eq $RETURN_PARAM ]; then # git commit already present locally
    echo "Exiting now"
    exit 1
  else
    echo "Will get the book from $BOOK_URL"
    echo "and place it in $bookDir"
    rm -rf $bookDir # must not exist before cloning
    mkdir -pv $bookDir
    git clone ${BOOK_URL}.git $bookDir
    GetGitInfo $bookDir
  fi
elif [ "$BOOK" = local ]; then  # local book requested. Make sure it exists
  echo "Requested a local book"
  if [ "$book_version" != blank ]; then
    ChkLocalBookExists $bookDir $book_version
    return_val=$?
    if [ $return_val -eq $RETURN_PARAM ]; then # no local book found
      echo "The requested book was not found at $bookDir"
      echo "Change the location or svn it. Exiting now."
      exit 1
    else
      echo "Local book found at $bookDir with requested version $book_version"
      LocalBookFound $bookDir $book_version # set type for locally stored book xml
#echo "SVNINFO is $SVNINFO"
    fi
  else # BOOK=local and version set to blank
    WhichBLFSBook
# if version ends with a / remove it
    case $book_version in
       */)
         book_version=${book_version%?}
       ;;
    esac
    # check if the requested book is already present locally
    ChkLocalBookExists $bookDir $book_version
    return_val=$?
    if [ $return_val -eq $RETURN_PARAM ]; then # local book not found
      echo "The requested book was not found at $bookDir"
      echo "Change the location or svn it. Exiting now"
      exit 1
    else
      echo "Local book found at $bookDir with requested version $book_version"
      LocalBookFound $bookDir $book_version # set type for locally stored book xml
#echo "SVNINFO is $SVNINFO"
    fi
  fi
elif [ "$BOOK" = arch ]; then
  echo "BOOK set to arch"
else
  echo "Book $BOOK not recognised."
  echo "Exit now"
  exit 1
fi
VersToCompare=7.10 # first amalgamated book version
if [ "$SYSTEMD" = yes ]; then
  case $book_version in
     BOOK)
       isSystemdBook=true
     ;;
     7.10*)
       isSystemdBook=true
     ;;
     *systemd*) # old systemd book
       isSystemdBook=true
     ;;
     [0-9]*) # test if the version is > VersToCompare
       compare_versions $VersToCompare $version "."
       ret_val=$?
       if [ $ret_val -eq 0 ]; then isSystemdBook=true; fi
     ;;
  esac
fi
echo "isSystemdBook is $isSystemdBook"
case $BOOK in
    git)
        DumpCommands $REPO $bookDir $book_version "commit"
    ;;
    svn)
        DumpCommands $REPO $bookDir $book_version "Revision"
    ;;
    local) # check for .git or .svn
        if [ -d ${bookDir}/${book_version}/.git ]; then
          GetGitInfo ${bookDir}/${book_version}
          DumpCommands $REPO $bookDir $book_version "commit"
        elif [ -d ${bookDir}/${book_version}/.svn ]; then
          DumpCommands $REPO $bookDir $book_version "Revision"
        else
          echo "No .git or .svn directory found in $bookDir"
          echo "Couldn't get book commands - aborting"
          exit 1
        fi
     ;;
     arch)
	echo "Using the Arch Linux book to install binary files"
     ;;
     *)
        echo "BOOK value is $BOOK. It should be git, svn, or local."
        echo "Aborting"
        exit 1
     ;;
esac
#
# need to update SOURCEDIR and srcrootdir to include the book version
SOURCEDIR=${SOURCEDIR}/${book_version}
srcrootdir=${srcrootdir}/${book_version}
#
else # book is Arch
  if $single_package; then
    echo "BOOK is Arch. Will install an Arch binary file for single package $SINGLE_PACKAGE."
  else
    echo "BOOK is Arch. Will install Arch binary files for section $SECTION."
  fi
  SOURCEDIR=${SOURCEDIR}/Arch
  srcrootdir=${srcrootdir}/Arch
fi # end test BOOK is not Arch
#
# check if the BLFSBUILDFILES dir exists or if it needs updating
#
if [ ! -d $BLFSBUILDFILES ]; then # doesn't exist so try and build it
  if [ -e ${LFS}/${blfsfilesTar} ]; then # unpack it
    mkdir -pv ${LFS}${blfsBuildFiles}
    unpackBLFSfiles # files define pkg names and dependencies
  else
    if [ "$LFS" = "" ]; then
      echo "Set the global LFS variable to continue"
      echo "do: export LFS=/mnt/lfs"
      exit 1
    else
      echo "The file $blfsfilesTar should be in $LFS"
      echo "Please place it there in order to continue"
      echo "Exiting now"
      exit 1
    fi
  fi
else # build files exist - test if the blfsfilesTar file is present
  if [ -e ${LFS}/${blfsfilesTar} ]; then # ask if want to replace the build files
    echo "**Warning** - $blfsfilesTar present and $BLFSBUILDFILES exists."
    echo "Replace $BLFSBUILDFILES with the contents of $blfsfilesTar? [Y/n]"
    read reply
      case $reply in
         [nN]|[nN][Oo])
            echo "okay - continuing with existing $BLFSBUILDFILES"
         ;;
         *)
            echo "okay replacing $BLFSBUILDFILES"
            rm -rf ${LFS}${blfsBuildFiles}
            mkdir -pv ${LFS}${blfsBuildFiles}
            unpackBLFSfiles
         ;;
      esac
  fi
fi
# deal with a single package
# check if the single package is in the specified section
#
if $single_package; then
  pkgnamenohyph=$( echo ${SINGLE_PACKAGE/-/} ) # remove any - in package name
  pkgnamenohyph=$( echo ${pkgnamenohyph/_/} ) # remove any _ in the package name
  if [ "$BOOK_VERSION" = arch ]; then # need the source file name as well
     ArchSrcName=$(pkgInSection $pkgnamenohyph $SECTION $BLFSBUILDFILES)
     retv=$?
     case $ArchSrcName in
        webkitgtk-)
          ArchSrcName=webkit2gtk
        ;;
     esac
  else
    if $printit; then echo "check if $pkgnamenohyph is in section $SECTION"; fi
    pkgInSection $pkgnamenohyph $SECTION $BLFSBUILDFILES
    retv=$?
  fi
  if [ $retv -eq $RETURN_PARAM ]; then
    echo "File ${BLFSBUILDFILES}/files/${SECTION}-files does not exist"
    echo "Investigate why not"
    echo "**** exiting now ****"
    exit 1
  elif [ $retv -eq $RETURN_FNF ]; then 
    echo "Package $SINGLE_PACKAGE not found in section $SECTION"
    echo "Either put it there or change the section"
    echo "**** exiting now ****"
    exit 1
  else
    echo "Package $SINGLE_PACKAGE found in section $SECTION"
    echo "Will produce a script called $SINGLE_PACKAGE.sh for this single package"
  fi
fi
#
# update the proxy settings for wget
#
if $useProxy; then setHostProxy; fi
#
SetupSections # create the array SectionsALL. Contains all the sections that can be built
# could build an array containing only the required sections, but ignoring sections is quicker
for (( ij=0; ij<$numSections; ij++ )); do # loop through each section to get the sources
  cursection=${SectionsALL[$ij]}
  buildSection=true
  if [ "$SINGLE_PACKAGE" = no ]; then
    if [ "$INSTALLDSKTP" = gnome ]; then # skip sections not needed
      case $cursection in
         xfcegnomeplatform|xfcegnomedesktop|xfcebrowser|xfce|displaymanager|windowmanager|lxde|kdeforlxqt|lxdeforlxqt|lxqt)
           echo "Desktop is Gnome so don't build $cursection"
           buildSection=false
         ;;
      esac
    elif [ "$INSTALLDSKTP" = xfce ]; then # skip sections not needed
      case $cursection in
         gnomeplatform|gnomedesktop|gnomeapps|lxde|kdeforlxqt|lxdeforlxqt|lxqt|telepathy)
           echo "Desktop is xfce so don't build $cursection"
           buildSection=false
         ;;
      esac
    elif [ "$INSTALLDSKTP" = lxde ]; then # skip sections not needed
      case $cursection in
         xfcegnomeplatform|xfcegnomedesktop|xfcebrowser|xfce|gnomeplatform|gnomedesktop|gnomeapps|kdeforlxqt|lxdeforlxqt|lxqt|telepathy)
           echo "Desktop is lxde so don't build $cursection"
           buildSection=false
         ;;
      esac
    elif [ "$INSTALLDSKTP" = lxqt ]; then # skip sections not needed
      case $cursection in
         xfcegnomeplatform|xfcegnomedesktop|xfcebrowser|xfce|gnomeplatform|gnomedesktop|gnomeapps|lxde|telepathy)
           echo "Desktop is lxqt so don't build $cursection"
           buildSection=false
         ;;
      esac
    fi
  fi
  if ! $buildSection; then
    echo "buildSection is false. No script file will be generated for section $cursection"
  else
    if $single_package; then
      echo "* Building the script for package $SINGLE_PACKAGE *"
    else
      echo "* Building section $cursection *"
    fi
    rtrnPkg=""
    rtrnSrc=""
    rtrnCmd=""
    altFileNames $cursection # get pkg name, src name and command name for each package in this section
    return_val=$?
    if [ $return_val -eq $RETURN_PARAM ]; then
      echo "Requested section is $cursection but there is no"
      echo "${cursection}-files file in ${BLFSBUILDFILES}/files."
      echo "If $cursection is correct then create ${cursection}-files and"
      echo "place it in ${BLFSBUILDFILES}/files in order to continue."
      echo " Exiting now"
      exit 1
    fi
#
# Get the Sources
# ** NOTE **
# $Section is the section that has the required sources
# $cursection is the current section used to build the $cursection.sh script
# usually these are the same, but for e.g. lxdeforlxqt, Section is lxde and cursection 
# is lxdeforlxqt
#
    case $cursection in
       kdeforlxqt)
         Section=kde
       ;;
       lxdeforlxqt)
         Section=lxde
       ;;
       xfcebrowser)
         Section=browser
       ;;
       xfcegnomedesktop)
         Section=gnomedesktop
       ;;
       xfcegnomeplatform)
         Section=gnomeplatform
       ;;
       *)
         Section=$cursection
       ;;
    esac
#
    if [ "$SOURCES" = download ]; then # download the sources for this section
      if [ "$CLEAN_SRC_DIR" = yes ]; then # check if this is allowed
        case $cursection in
           kdeforlxqt|lxdeforlxqt|xfcegnomedesktop|xfcegnomeplatform|xfcebrowser)
             echo "You cannot clean the source directory for $Section"
             echo "because you cannot refill it using $cursection"
             CLEAN_SRC_DIR=no
           ;;
           *)
             CleanSourceDir $Section # clean the sources file if not empty
             if [ "$Section" = x ]; then # delete the x subdirs
               rm -rf ${SOURCEDIR}/${Section}/${xlib}
               rm -rf ${SOURCEDIR}/${Section}/${xapp}
               rm -rf ${SOURCEDIR}/${Section}/${xfont}
             fi
           ;;
        esac
      else
        if [ ! -d ${SOURCEDIR}/${Section} ]; then # create it
          install -v -m0755 -d ${SOURCEDIR}/${Section}
        fi
      fi
# make sure the wget-list file and the sorted file exist for this section
      ChkSrcListFiles rtrnPkg[@] rtrnSrc[@] $SOURCEDIR $Section $WgetList $sortedfile
# update source files?
        if $updateSources; then # check if a wget-list file exists
          if $single_package; then # make sure the single package is up-to-date
	    GetLatestPkgVers $SINGLE_PACKAGE $Section ${SOURCEDIR}/${Section}/${WgetList}
	  else
            if [ -e ${SOURCEDIR}/${Section}/${WgetList} ]; then
              GetLatestFiles $Section $WgetList $cursection "blfs-systemd" # update source files
              if $runit; then echo "source files in wget-list are up-to-date"; fi
            else
              echo "No ${WgetList} file in ${SOURCEDIR}/${Section}"
              echo "Cannot get latest source versions"
            fi # check wget-list file present
	  fi # single package test
        else # download the sources
          GetSources $SOURCEDIR $Section $sortedfile $SOURCEURL # download the sources in the $sortedfile file
        fi
    elif [ "$SOURCES" = local ]; then # sources are local - check if update of source files is requested
# NOTE - this has been changed (09/20) - if sources are local then you can't update the sources. You have to set sources to be download.
# This could change so the following code has been left in place.
        if $updateSources; then # check if there is a wget-list present
          if [ -e ${SOURCEDIR}/${Section}/${WgetList} ]; then # wget-list file in place
            GetLatestFiles $Section $WgetList $cursection "blfs-systemd" # update source files
            if $runit; then echo "All source files are up-to-date"; fi
          elif [ -e ${SOURCEDIR}/${WgetList} ]; then # master get-list in SOURCEDIR
            ChkSrcListFiles rtrnPkg[@] rtrnSrc[@] $SOURCEDIR $Section $WgetList $sortedfile
            GetLatestFiles $Section $WgetList $cursection "blfs-systemd" # update source files
            if $runit; then echo "All source files are up-to-date"; fi
          else
            echo "No ${WgetList} file found in ${SOURCEDIR}/${Section}"
            echo "You've set SOURCES=local. Have you downloaded the sources?"
            echo "Can't get latest source versions without a $WgetList file in ${SOURCEDIR}/${Section}"
          fi
        else # update of source files not requested
          if [ ! -e ${SOURCEDIR}/${Section}/${sortedfile} ]; then # no sorted file
# check if there is a wget-list file present
            if [ -e ${SOURCEDIR}/${Section}/${WgetList} ]; then # exists so use it
              sort -u ${SOURCEDIR}/${Section}/${WgetList} > ${SOURCEDIR}/${Section}/${sortedfile}
            elif [ -e ${SOURCEDIR}/${WgetList} ]; then # wget-list in SOURCEDIR
              ChkSrcListFiles rtrnPkg[@] rtrnSrc[@] $SOURCEDIR $Section $WgetList $sortedfile
            else # no wget-list file or sortedfile in src section
# check if there's a master wget-list file
              if [ ! -e ${SOURCEDIR}/${WgetList} ]; then # try and create it
                echo "No $WgetList file in $SOURCEDIR. Will try and create it."
                GetListFile $bookDir $book_version $WgetList # get wget-list file
                ChkSrcListFiles rtrnPkg[@] rtrnSrc[@] $SOURCEDIR $Section $WgetList $sortedfile
              else
                echo "The master $WgetList file is present in $SOURCEDIR but"
                echo "No ${sortedfile} file found in ${SOURCEDIR}/${Section}"
                echo "You've set SOURCES=local. Have you downloaded the sources?"
                echo "Cannot get latest source versions without a $WgetList file"
              fi
            fi
          else
            echo "$sortedfile file found in ${SOURCEDIR}/${Section}"
            echo "Will check all the files are present for section $Section"
          fi
        fi
    elif [ "$SOURCES" = archbinaries ]; then
# test if $WgetList exists
      if [ ! -e ${SOURCEDIR}/${Section}/${WgetList} ]; then
	mkdir -pv ${SOURCEDIR}/${Section}
	echo "No $WgetList file in ${SOURCEDIR}/${Section}"
	echo "Create $WgetList"
	touch ${SOURCEDIR}/${Section}/${WgetList}
	echo "Edit $WgetList to add the Arch binary URLs"
	exit 1
      else # $WgetList exists
        if $single_package; then
          GetArchBinaries $SOURCEDIR $Section $WgetList $single_package $ArchSrcName
        else
          GetArchBinaries $SOURCEDIR $Section $WgetList 
        fi
        retval=$?
# create the sortedfile if it doesn't exist or src binaries have been downloaded
        if [[ ! -e ${SOURCEDIR}/${Section}/${sortedfile} || $retval -eq $RETURN_BFD ]]; then
          echo "Create the $sortedfile from $WgetList"
          sort -u ${SOURCEDIR}/${Section}/${WgetList} > ${SOURCEDIR}/${Section}/${sortedfile}
        else
	  echo "$sortedfile already present in ${SOURCEDIR}/${Section}"
        fi
      fi
    else
      echo "SOURCES should be set to download, local or ArchBinaries"
      echo "exit now"
      exit 1
    fi
# need to create arrays to hold the data in blfsBuildFiles/blfsfiles/ArchToSrcname
# create the associative array where keys are Arch pkg name and values are corresponding src name
    declare -A ArchPkgSrcName
# create the associative array where keys are Arch pkg name and values are src URLs
    declare -A ArchToURLs
# create the associative array where keys are src names and values are src URLs
    declare -A srcNameURLs
# create the associative array where keys are the srcname stem and the values are output filenames
    declare -A tstcurVers 
# create the associative array where keys are the srcname stem and the values are input filenames
    declare -A tstpkgvers
    ArchToSrcname ArchPkgSrcName ArchToURLs srcNameURLs tstcurVers tstpkgvers
    return_val=$?
    if [ $return_val -eq $RETURN_PARAM ]; then
      echo "There is no file ArchToSrcname in $BLFSBUILDFILES"
      echo "Cannot get the relationship between the Arch package name"
      echo "and the source file name."
      echo "You need to create this file in order to continue."
      echo " Exiting now"
      exit 1
    fi
# downloaded all the data in file $BLFSBUILDFILES/ArchToSrcname
#echo "pkgname and srcname"
#for KK in "${!ArchPkgSrcName[@]}"; do
#  echo "$KK --- ${ArchPkgSrcName[$KK]}"
#done
#echo "the src URLs"
#for KK in "${!srcNameURLs[@]}"; do
#  echo "$KK --- ${srcNameURLs[$KK]}"
#done
#echo "the output filenames"
#for KK in "${!tstcurVers[@]}"; do
#  echo "$KK --- ${tstcurVers[$KK]}"
#done
#echo "the input filenames"
#for KK in "${!tstpkgvers[@]}"; do
#  echo "$KK --- ${tstpkgvers[$KK]}"
#done
# all the required sources in the book are in place so if useArchVersions=true then have to 
# get the Arch versions and compare them with what is downloaded for this section.
# If a src file hasn't been downloaded then ask to download it.
  if ! $single_package; then
    if [ -e ${BLFSBUILDFILES}/ArchLists/Arch${Section}List ]; then # use it to get the versions of those pkgs not in the book
# update version numbers of pkgs not in the book?
      if $useArchVersions; then # use the Arch package-search website to update pkgs not in the book
        ArchSectionFilelist="Arch${Section}List"
        declare -A ArchPkgVers # associative array to hold the pkgname and the version
# does a ${Section}.tmp file exist in /tmp?
        if [ -e "/tmp/${Section}.tmp" ]; then
          echo "Use the file /tmp/${Section}.tmp? [Y/n]"
          read reply
            case $reply in
               [yY]|[yY][Ee][Ss])
	         readarray -t pkgversPairs < "/tmp/${Section}.tmp"
                 for pkgvers in "${pkgversPairs[@]}"; do
                   apkgname=${pkgvers%%=*}
                   aversnum=${pkgvers#*=}
                   ArchPkgVers[$apkgname]=$aversnum
                 done
               ;;
               [nN]|[nN][Oo])
                 echo "Getting the Arch pkg names and versions - please wait"
                 getArchPkgVers ArchPkgVers $ArchSectionFilelist
               ;;
               *)
                 readarray -t pkgversPairs < "/tmp/${Section}.tmp"
                 for pkgvers in "${pkgversPairs[@]}"; do
                   apkgname=${pkgvers%%=*}
                   aversnum=${pkgvers#*=}
                   ArchPkgVers[$apkgname]=$aversnum  
                 done
               ;;
            esac
        else # no /tmp/${Section}.tmp file present - create it
          echo "Getting the Arch pkg names and versions - please wait"
          getArchPkgVers ArchPkgVers $ArchSectionFilelist
        fi
      fi
    else
      if [ "$SOURCES" = local -o "$SOURCES" = download ]; then
        echo "NOTE - there is no file Arch${Section}List in ${BLFSBUILDFILES}/ArchLists"
        echo "If you want the versions of any pkgs in this section that are not in the book,"
        echo "you will have to create it."
        echo "Will continue without getting any Arch package versions"
      else
        echo "*** NOTE *** SOURCES is set to $SOURCES"
      fi
    fi
    if [ -e /tmp/${Section}.tmp ]; then # check if these versions have been downloded
# show a table of the data
      dataTable=/tmp/$(date +%d%B%Y_%H:%M).temp
      echo "Arch package name,source name,version" >> $dataTable
      for K in "${!ArchPkgVers[@]}"; do
        echo "$K,${ArchPkgSrcName[$K]},${ArchPkgVers[$K]}" >> $dataTable
      done
      print_Table  "$(cat $dataTable)" ','
      rm $dataTable
# ask if want to download any of these src files
      downloadFile=false
      echo "Do you want to download any of these source file versions [y/N]?"
      read REPLY
      case $REPLY in
         [yY]|[yY][Ee][Ss])
           downloadFile=true
         ;;
      esac
      if $downloadFile; then
#        echo "Are the following packages and versions in ${SOURCEDIR}/${Section}"
        sourceLoc="${SOURCEDIR}/${Section}" 
        echo "files will be downloaded to source directory $sourceLoc"
        for K in "${!ArchPkgVers[@]}"; do
          ArchpkgVersion=${ArchPkgVers[$K]} # copy in case have to change it
# get the src filename and the inputfilename and outputfilename
          if [[ -v "ArchPkgSrcName[$K]" ]] ; then # it is set
            Archsrcname=${ArchPkgSrcName[$K]}
# make any essential changes
            case $K in
               imagemagick) # src version is of the form: 7.0.11-3, not 7.0.11.3
                 ArchpkgVersion=${ArchpkgVersion%.*}-${ArchpkgVersion##*.}
               ;;
               portaudio) # need to have the input file version
                 _version="190600_20161030"
               ;;
               qt5-base|qt5-svg|qt5-x11extras)
                 qt5series=${ArchpkgVersion%.*}
               ;;
               re2) # add hyphens to the version (date)
                 re2vers=${ArchpkgVersion:0:4}-${ArchpkgVersion:4:2}-${ArchpkgVersion:6:2}
               ;;
               smpeg) # replace the . with _
                 smpegPkgVersion=${ArchpkgVersion//./_}
               ;;
               tinyxml)
                 tinyxmlVers=${ArchpkgVersion//./_}
               ;;
               vamp-plugin-sdk)
                 ArchpkgVersion=${ArchpkgVersion%.0} # currently 2.10 not 2.10.0 in Arch
               ;;
            esac
            for KK in "${!tstpkgvers[@]}"; do
              case $KK in
                 $Archsrcname)
                   inputfilename=${tstpkgvers[$KK]}
                   outputfilename=${tstcurVers[$KK]}
                   break
		 ;;
              esac
            done
          else # can't continue
            echo "Can't get the data from BLFSBUILDFILES/ArchToSrcname"
	    echo "Investigate why not"
	    echo "Aborting"
	    exit 1
	  fi
# now have to substitute for the variables
          outputfilename=$(echo "$outputfilename" | sed "s/\${SrcName}/${Archsrcname}/")
          outputfilename=$(echo "$outputfilename" | sed "s/\${pkgVers}/${ArchpkgVersion}/")
# have to define _driverver for cuda
          case $K in
             cuda)
               _driverver="460.32.03" # can't get this from the Arch website
               outputfilename=$(echo "$outputfilename" | sed "s/\${_driverver}/${_driverver}/")
             ;;
             tinyxml)
               outputfilename=$(echo "$outputfilename" | sed "s#\${pkgVers//./_}#${tinyxmlVers}#")
             ;;
          esac
          if $printit; then echo "outputfilename is $outputfilename"; fi
# the input filename may be different from the output filename
          if [ -z "$inputfilename" ]; then
            inputfilename=$outputfilename
          else # do the name substitutions for the input file
            inputfilename=$(echo "$inputfilename" | sed "s/\${SrcName}/$Archsrcname/")
            case $K in
               cuda)
                 inputfilename=$(echo "$inputfilename" | sed "s/\${_driverver}/${_driverver}/")
                 inputfilename=$(echo "$inputfilename" | sed "s/\${pkgVers}/${ArchpkgVersion}/")
               ;;
               portaudio)
                 inputfilename=$(echo "$inputfilename" | sed "s/\${pkgVers}/${ArchpkgVersion}/")
                 inputfilename=$(echo "$inputfilename" | sed "s/\${_version}/${_version}/")
               ;;
               re2)
                 inputfilename=$(echo "$inputfilename" | sed "s/\${pkgVers}/${re2vers}/")
               ;;
               smpeg)
                 inputfilename=$(echo "$inputfilename" | sed "s/\${pkgVers}/${smpegPkgVersion}/")
               ;;
               tinyxml)
                 inputfilename=$(echo "$inputfilename" | sed "s#\${pkgVers//./_}#${tinyxmlVers}#")
               ;;
               *)
                 inputfilename=$(echo "$inputfilename" | sed "s/\${pkgVers}/${ArchpkgVersion}/")
               ;;
            esac
          fi
          if $printit; then echo "inputfilename is $inputfilename"; fi
# srcfile download will need the file URL
          if [[ -v "ArchToURLs[$K]" ]] ; then # it is set
            srcURL=${ArchToURLs[$K]}
          else # src URLs not in ArchToSrcname
            echo "ArchToURLs[K]} NOT set for $K"
            echo "add the URL for $K in $BLFSBUILDFILES/ArchToSrcname to make this work"
            echo "Aborting"
            exit 1
          fi
# set the correct srcURL for gnome packages
          case $Section in
             gnomeplatform|gnomedesktop|gnomeapps)
               revsrcnm=""
               gnmvers=""
               gnmPkgVers $Archsrcname $ArchpkgVersion tar
               srcURL="${gnomeBaseURL}/${revsrcnm}/${gnmvers}/"
             ;;
             *) # substitute any pkgVers in the URL
               case $K in
                  libssh) # need the series
                    GetSeriesNum $ArchpkgVersion
                    libsshSeries=$rtrseries
                    srcURL=$(echo "$srcURL" | sed "s/\${pkgVers%.\*}/${libsshSeries}/")
                  ;;
                  pkcs11-helper)
                    GetSeriesNum $ArchpkgVersion
                    pkcs11Series=$rtrseries
                    srcURL=$(echo "$srcURL" | sed "s/\${pkgVers%.0}/${pkcs11Series}/")
                  ;;
                  qt5-base|qt5-svg|qt5-x11extras)
                    srcURL=$(echo "$srcURL" | sed "s/\${pkgVers%.\*}/${qt5series}/")
                    srcURL=$(echo "$srcURL" | sed "s/\${pkgVers}/${ArchpkgVersion}/")
		  ;;
                  *)
                    srcURL=$(echo "$srcURL" | sed "s/\${pkgVers}/${ArchpkgVersion}/")
                  ;;
               esac
             ;;
          esac
          if $printit; then echo "the srcURL is $srcURL"; fi
# need to search sourceLoc for source packages already downloaded
          searchString="$Archsrcname" # modify for some packages
          case $searchString in
             clutter-) # not clutter-gst or clutter-gtk
               searchString="clutter-[0-9]"
             ;;
             dconf-) # not dconf-editor-
               searchString="dconf-[0-9]"
             ;;
             gnome-nettool-) # not the patch
               searchString="gnome-nettool-*.tar.xz"
             ;;
             tracker-miners-)
               case $K in
                  tracker-miners)
                    searchString="tracker-miners-2."
                  ;;
                  tracker3-miners)
                    searchString="tracker-miners-3."
                  ;;
               esac
             ;;
             tracker-)
               case $K in
                  tracker3)
                    searchString="tracker-3."
                  ;;
                  tracker)
                    searchString="tracker-2."
                  ;;
               esac
             ;;
          esac
          if [ ! -e "${sourceLoc}/${outputfilename}" ]; then
#            echo "file $outputfilename isn't in $sourceLoc"
#            echo "is there a different version in $sourceLoc?"
            fileExists=($(find $sourceLoc -type f -name "$searchString*"))
            if (( ${#fileExists[@]} )); then # not empty
              for (( ik=0; ik<${#fileExists[@]}; ik++ )); do
                echo "file ${fileExists[ik]} already downloaded" # delete it?
                echo "delete it [y/N]?"
                deleteFile=false
                read ANSWER
                  case $ANSWER in
                     [yY]|[yY][Ee][Ss])
                       deleteFile=true
                     ;;
                  esac
                if $deleteFile; then
                  rm -v ${fileExists[ik]}
# ask to download the outputfilename
                  if [ ! -e ${sourceLoc}/${outputfilename} ]; then
                    echo "download file $outputfilename [Y/n]?"
                    downloadIt=true
                    ANSWER=""
                    read ANSWER
                      case $ANSWER in
                        [nN]|[nN][Oo])
                          downloadIt=false
                        ;;
                      esac
                    if $downloadIt; then
                     wget $wgetopts $ncc -O ${sourceLoc}/${outputfilename} ${srcURL}${outputfilename}
                    fi
                  fi
                else # not deleted
                  echo "file ${fileExists[ik]} not deleted from $sourceLoc"
                fi
              done
            else # empty
              echo "no files found with search string $searchString"
              if $downloadFile; then
                echo "download ${srcURL}${inputfilename} to ${sourceLoc}/${outputfilename} [y/N]?"
                read ANSWER
                case $ANSWER in
                   [yY]|[yY][Ee][Ss]) # download the file
                     if [ -z "$srcURL" ]; then
                       echo "No source URL available. Can't download it"
                       echo "add the source URL to $BLFSBUILDFILES/ArchToSrcname"
                     else
                       case $K in
                          portsmf)
                            svn co ${srcURL} ${sourceLoc}/${outputfilename}
                          ;;
                          smpeg)
                            svn co ${srcURL}/${inputfilename} ${sourceLoc}/${outputfilename}
                          ;;
                          *)
                            wget $wgetopts $ncc -O ${sourceLoc}/${outputfilename} ${srcURL}${inputfilename}
                          ;;
                       esac
		     fi
	           ;;
                esac
              fi
            fi
          else # already in sourceLoc
            echo "$outputfilename already downloaded"
            echo " "
          fi
        done
      fi # test downloadFile
    fi
  fi
# get the perl version installed by LFS - this is not reinstalled in BLFS
    rtrFile=""
    testNumVers ${LFS}${PKGUSERDIR} "core/perl" "perl-" ".tar"
    retval=$?
    if [ $retval -eq $RETURN_PARAM ]; then
      echo "Package location ${LFS}${PKGUSERDIR}/core/perl not found"
      echo "Cannot get perl package version number"
# last resort
      echo "added manually in the script"
      perlvers="5.32.0"
      perlseries="5.32"
      echo "perl version is $perlvers"
      echo "perl series is $perlseries"
    elif [ $retval -eq $RETURN_FNF ]; then
      echo "No perl- src file found in ${LFS}${PKGUSERDIR}/core/perl/"
      echo "Unable to get the perl version"
    elif [ $retval -eq $RETURN_MTOV ]; then
      echo "found more than one version of perl in ${LFS}${PKGUSERDIR}/core/perl"
      echo "latest version is $rtrFile"
      echo "delete the other(s)"
      exit 1
    elif [ $retval -eq 0 ]; then # success
      echo "found $rtrFile in ${LFS}${PKGUSERDIR}/core/perl"
      RtrnVars=""
      getPkgVersion $rtrFile ".tar"
      if [ ! -z "${RtrnVars[1]}" ]; then
        perlvers=${RtrnVars[1]}
        echo "perl version is $perlvers"
        GetSeriesNum $perlvers
        perlseries=$rtrseries
        echo "perl series is $perlseries"
      else
        echo "return from getPkgVersion, RtrnVars is Null - failed to get perl version"
      fi
    fi
# get various other package versions
      if ! $single_package; then
        case $Section in
           browser)
            rtrFile=""
            testNumVers ${LFS}${PKGUSERDIR} "${Section}/firefox" "firefox-" ".source" # see if firefox is installed
            retval=$?
            if [ $retval -eq $RETURN_PARAM -o $retval -eq $RETURN_FNF ]; then # not installed
              echo "firefox doesn't seem to be installed - will try browser src dir"
              rtrFile=""
              testNumVers $SOURCEDIR $Section "firefox-" ".source"
              retval=$?
              if [ $retval -eq $RETURN_PARAM ]; then
                echo "Package location ${SOURCEDIR}/${Section} not found"
                echo "Cannot get firefox package version number"            
              elif [ $retval -eq $RETURN_FNF ]; then
                echo "No firefox- src file found in ${SOURCEDIR}/${Section}/"
                echo "Unable to get the firefox version"
              elif [ $retval -eq $RETURN_MTOV ]; then
                echo "found more than one version of firefox in ${SOURCEDIR}/${Section}"
                echo "latest version is $rtrFile"
                echo "delete the other(s)"
                exit 1
              elif [ $retval -eq 0 ]; then # success
                echo "found $rtrFile in ${SOURCEDIR}/${Section}"
                getPkgVersion $rtrFile ".source"
                if [ ! -z "${RtrnVars[1]}" ]; then
                  firefoxvers=${RtrnVars[1]}
                  numElement=$(numElem $firefoxvers ".")
                  echo "firefox version is $firefoxvers"
                  if [ $numElement -eq 3 ]; then
                    ffoxvers=$(echo $firefoxvers | awk -F\. '{print $1"\\\\."$2"\\\\."$3}')
                  elif [ $numElement -eq 2 ]; then
                   ffoxvers=$(echo $firefoxvers | awk -F\. '{print $1"\\\\."$2}')
                  fi
                  ffoxvers=$(echo -e "${ffoxvers}" | tr -d '[:space:]') # remove any whitespace
                else
                  echo "return from getPkgVersion, RtrnVars is Null - failed to get firefox version"
                fi
              fi
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of firefox in ${LFS}${PKGUSERDIR}/${Section}/firefox"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${LFS}${PKGUSERDIR}/${Section}/firefox"
              RtrnVars=""
              getPkgVersion $rtrFile ".source"
              if [ ! -z "${RtrnVars[1]}" ]; then
                firefoxvers=${RtrnVars[1]}
                echo "firefox version is $firefoxvers"
                numElement=$(numElem $firefoxvers ".")
                if [ $numElement -eq 3 ]; then
                  ffoxvers=$(echo $firefoxvers | awk -F\. '{print $1"\\\\."$2"\\\\."$3}')
                elif [ $numElement -eq 2 ]; then
                  ffoxvers=$(echo $firefoxvers | awk -F\. '{print $1"\\\\."$2}')
                fi
                ffoxvers=$(echo -e "$ffoxvers" | tr -d '[:space:]') # remove any whitespace
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get firefox version"
              fi
            fi
#            pkgcomvers=""
#            GetCommandVersion ${LFS}${blfscommands}/xsoft firefox "ln -sfv"
#            retval=$?
#            if [ $retval -eq $RETURN_PARAM ]; then
#              echo "firefox command not found in ${LFS}${blfscommands}/xsoft"
#              echo "Cannot get the firefox version in the book."
#              echo "Will not be able to compare the source version and the book version"
#            else
#              ffoxcomvers=$pkgcomvers
#              echo "firefox version from the commands is $ffoxcomvers"
#              numElement=$(numElem $ffoxcomvers ".")
#              if [ $numElement -eq 3 ]; then
#                firefoxcomvers=$(echo $ffoxcomvers | awk -F\. '{print $1"\\\\."$2"\\\\."$3}')
#              elif [ $numElement -eq 2 ]; then
#                firefoxcomvers=$(echo $ffoxcomvers | awk -F\. '{print $1"\\\\."$2}')
#              fi
#              firefoxcomvers=$(echo -e "${firefoxcomvers}" | tr -d '[:space:]') # remove any whitespace
#           fi
          ;;
          genutils)
            getpy3versFromSrcfile
          ;;
          gnomeplatform)
            pkgcomvers=""
            GetCommandVersion ${LFS}${blfscommands}/gnome dconf "tar"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "dconf command not found in ${LFS}${blfscommands}/gnome"
              echo "Cannot get the dconf-editor version in the book."
            else
              dconfedcomvers=$pkgcomvers
              echo "dconf-editor version from the commands is $dconfedcomvers"
            fi
          ;;
          java)
            OracleVers="openjdk-"
            jdksrcDir=""
            jdkbinSrcdir="/home/john/Downloads"
            if [ ! -e ${SOURCEDIR}/java/${OracleVers}* ]; then # ask to copy it
              echo "No Oracle version $OracleVers found in ${SOURCEDIR}/${Section}"
              echo "Do you want to put it there? [Y/n]"
              read reply
              case $reply in
                 [yY]|[yY][Ee][Ss])
                      echo "Directory holding jdk file (default is $jdkbinSrcdir)"
                      read jdksrcDir
                      if [ -z "$jdksrcDir" ]; then jdksrcDir=$jdkbinSrcdir; fi
                      echo "okay copying from $jdksrcDir"
                      if [ -e ${jdksrcDir}/${OracleVers}* ]; then
                        cp -v ${jdksrcDir}/${OracleVers}* ${SOURCEDIR}/${Section}/
                      else
                        echo "no Oracle version found in $jdkbinSrcdir"
                        echo " You'll need to download it"
                      fi
                 ;;
                 [nN]|[nN][Oo])
                      echo "Continuing without copying Oracle jdk"
                 ;;
                 *)
                      echo "Directory holding jdk file (default is $jdkbinSrcdir)"
                      read jdksrcDir
                      if [ -z "$jdksrcDir" ]; then jdksrcDir=$jdkbinSrcdir; fi
                      echo "okay copying from $jdksrcDir"
                      if [ -e ${jdksrcDir}/${OracleVers}* ]; then
                        cp -v ${jdksrcDir}/${OracleVers}* ${SOURCEDIR}/${Section}/
                      else
                        echo "no Oracle version found in $jdkbinSrcdir"
                        echo " You'll need to download it"
                      fi
                 ;;
              esac
            fi
            rtrFile=""
            testNumVers $SOURCEDIR $Section "openjdk-" "_linux"          
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get jdk binary package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No openjdk- binary file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the openjdk binary version"
              jdkoracle=false
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the openjdk binary in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile "_linux"
              if [ ! -z "${RtrnVars[1]}" ]; then
                jdkvers=${RtrnVars[1]}
                echo "openjdk binary version is $jdkvers"
                jdkoracle=true
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get openjdk binary version"
              fi
            fi
            pkgcomvers=""
            GetCommandVersion ${LFS}${blfscommands}/general openjdk "chown"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "openjdk command not found in ${LFS}${blfscommands}/general"
              echo "Cannot get the OpenJDK version in the book."
            else
              jdkcomvers=$pkgcomvers
              jdkdesktopver=$(echo $jdkcomvers | awk -F\+ '{print $1}') # assumes a + in the version
              echo "openJDK version from the commands is $jdkcomvers"
              echo "openjdk version for desktop file is $jdkdesktopver"
            fi
            com_update=$(echo $jdkcomvers | awk -F\. '{print $NF}')
# get the apache-maven version from the src file
            rtrFile=""
            testNumVers $SOURCEDIR $Section "apache-maven-" "-src"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get the apache-maven- package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No apache-maven- src file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the apache-maven- version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the apache-maven- src file in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile "-src"
              if [ ! -z "${RtrnVars[1]}" ]; then
                apachemavenvers=${RtrnVars[1]}
                echo "apache-maven- version is $apachemavenvers"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get apache-maven- version"
              fi
            fi
# apache-maven no longer in the book (13/03/19)
#            pkgcomvers=""
#            GetCommandVersion ${LFS}${blfscommands}/general maven "tar -xf"
#            retval=$?
#            if [ $retval -eq $RETURN_PARAM ]; then
#              echo "apache-maven command not found in ${LFS}${blfscommands}/general"
#              echo "Cannot get the apache-maven version in the book."
#            else
#              mavencomvers=$pkgcomvers
#              echo "apache-maven version from the commands is $mavencomvers"
#            fi
	    ;;
          libraries)
            rtrFile=""
            testNumVers $SOURCEDIR $Section "openjpeg-" ".tar"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get the openjpeg package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No openjpeg- src file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the openjpeg version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the openjpeg src file in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile ".tar"
              if [ ! -z "${RtrnVars[1]}" ]; then
                openjpegvers=${RtrnVars[1]}
                echo "openjpeg version is $openjpegvers"
                GetSeriesNum $openjpegvers
                openjpegseries=$rtrseries
                echo "openjpeg series is $openjpegseries"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get openjpeg version"
              fi
            fi
            rtrFile=""
            freetypeName="freetype-[0-9]"
            freetypeTrim=".tar"
            if [ "$BOOK_VERSION" = arch ]; then
              freetypeName="freetype2-[0-9]"
              freetypeTrim="-1-x86_64"
              testNumVers $SOURCEDIR $Section $freetypeName $freetypeTrim
            else
              testNumVers $SOURCEDIR $Section $freetypeName $freetypeTrim
            fi
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get the freetype package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No freetype- src file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the freetype version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the freetype src file in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile $freetypeTrim
              if [ ! -z "${RtrnVars[1]}" ]; then
                freetypevers=${RtrnVars[1]}
                echo "freetype version is $freetypevers"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get freetype version"
              fi
            fi
	    if [ "$BOOK_VERSION" = arch ]; then #get the python2 version from the BLFS book
	      SrcURLtoUse="http://www.linuxfromscratch.org/blfs/view/systemd/general/python2.html"
	      lines=($(python3 BShref.py $SrcURLtoUse)) # scrape the book for source files
	      Python2vers=$(echo ${lines[0]} | awk -F\/ '{print $6}')
	      GetSeriesNum $Python2vers
              py2series=$rtrseries
	      echo "Python2 version from the book is $Python2vers"
	      echo "Python2 series is $py2series"
	    else
# need the python version for libblockdev
              rtrFile=""
              testNumVers $SOURCEDIR "programming" "Python-2" ".tar"
              retval=$?
              if [ $retval -eq $RETURN_PARAM ]; then
                echo "Package location ${SOURCEDIR}/programming not found"
                echo "Cannot get the Python-2 package version number"
              elif [ $retval -eq $RETURN_FNF ]; then
                echo "No Python-2 src file found in ${SOURCEDIR}/programming/"
                echo "Unable to get the Python-2 version"
              elif [ $retval -eq $RETURN_MTOV ]; then
                echo "found more than one version of the Python-2 src file in ${SOURCEDIR}/programming"
                echo "latest version is $rtrFile"
                echo "delete the other(s)"
                exit 1
              elif [ $retval -eq 0 ]; then # success
                echo "found $rtrFile in ${SOURCEDIR}/programming"
                RtrnVars=""
                getPkgVersion $rtrFile ".tar"
                if [ ! -z "${RtrnVars[1]}" ]; then
                  Python2vers=${RtrnVars[1]}
                  echo "Python2 version is $Python2vers"
                  GetSeriesNum $Python2vers
                  py2series=$rtrseries
                  echo "Python2 series is $py2series"
                else
                  echo "return from getPkgVersion, RtrnVars is Null - failed to get Python-2 version"
                fi
              fi
	    fi
	    if [ "$BOOK_VERSION" = arch ]; then # get the python3 version from the BLFS book
	      SrcURLtoUse="http://www.linuxfromscratch.org/blfs/view/systemd/general/python3.html"
	      lines=($(python3 BShref.py $SrcURLtoUse)) # scrape the book for source files
	      Python3vers=$(echo ${lines[0]} | awk -F\/ '{print $6}')
	      GetSeriesNum $Python3vers
	      py3series=$rtrseries
	      echo "Python3 version from the book is $Python3vers"
	      echo "Python3 series is $py3series"
	    else # python3 is installed in core packages
              getpy3versFromCore
	    fi
          ;;
          nvidia)
            rtrkernum=""
            GetKernelVersion
            if [ $? -eq $RETURN_PARAM ]; then
              echo "No numerical dir in /usr/lib/modules found."
              echo "Couldn't determine the kernel version."
              echo "Exiting now"
              exit 1
            elif [ $? -eq $RETURN_MTOV ]; then
              echo "Give the kernel version that you wish to use"
              read rtrkernum
            fi
            echo "kernel version from modules dir is $rtrkernum"
            GetSeriesNum $rtrkernum
            echo "kernel series is $rtrseries"
            _extramodules="extramodules-${rtrseries}"
          ;;
          networks)
            rtrFile=""
            testNumVers $SOURCEDIR $Section "NetworkManager-" ".tar"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get the NetworkManager- package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No NetworkManager- src file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the NetworkManager- version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the NetworkManager- src file in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile ".tar"
              if [ ! -z "${RtrnVars[1]}" ]; then
                networkmanagervers=${RtrnVars[1]}
                echo "NetworkManager version is $networkmanagervers"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get NetworkManager version"
              fi
            fi
            getiprout2versFromCore # need the iproute2 version to reinstall it
          ;;
          programming)
            rtrFile=""
            testNumVers $SOURCEDIR $Section "llvm-" ".src"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get the llvm- package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No llvm- src file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the llvm version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the llvm src file in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile ".src"
              if [ ! -z "${RtrnVars[1]}" ]; then
                llvmvers=${RtrnVars[1]}
                echo "llvm version is $llvmvers"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get llvm version"
              fi
            fi
            rtrFile=""
            testNumVers $SOURCEDIR $Section "php-" ".tar"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get the php package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No php- src file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the php version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the php src file in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile ".tar"
              if [ ! -z "${RtrnVars[1]}" ]; then
                phpvers=${RtrnVars[1]}
                echo "php version is $phpvers"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get php version"
              fi
            fi
            rtrFile=""
            testNumVers $SOURCEDIR $Section "Python-2" ".tar"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get the Python-2 package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No Python-2 src file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the Python-2 version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the Python-2 src file in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile ".tar"
              if [ ! -z "${RtrnVars[1]}" ]; then
                Python2vers=${RtrnVars[1]}
                echo "Python-2 version is $Python2vers"
                GetSeriesNum $Python2vers
                py2series=$rtrseries
                echo "Python2 series is $py2series"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get Python-2 version"
              fi
            fi
	    getpy3versFromSrcfile
            rtrFile=""
            testNumVers $SOURCEDIR $Section "git-[0-9]" ".tar"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get the git package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No git- src file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the git version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the git src file in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile ".tar"
              if [ ! -z "${RtrnVars[1]}" ]; then
                gitvers=${RtrnVars[1]}
                echo "git version is $gitvers"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get git version"
              fi
            fi
            rtrFile=""
            testNumVers $SOURCEDIR $Section "vala-" ".tar"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get the vala package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No vala- src file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the vala version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the vala src file in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile ".tar"
              if [ ! -z "${RtrnVars[1]}" ]; then
                valavers=${RtrnVars[1]}
                echo "vala version is $valavers"
                GetSeriesNum $valavers
                valaseries=$rtrseries
                echo "vala series is $valaseries"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get vala version"
              fi
            fi
            rtrFile=""
            testNumVers $SOURCEDIR $Section "ruby-" ".tar"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get the ruby package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No ruby- src file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the ruby version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the ruby src file in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile ".tar"
              if [ ! -z "${RtrnVars[1]}" ]; then
                rubyvers=${RtrnVars[1]}
                echo "ruby version is $rubyvers"
		GetSeriesNum $rubyvers
                rubyseries=$rtrseries
		rubySeriesZero="${rubyseries}.0"
		echo "The ruby version for /usr/lib/ruby is $rubySeriesZero"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get ruby version"
              fi
            fi
            rtrFile=""
            testNumVers $SOURCEDIR $Section "cmake-" ".tar"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get the cmake package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No cmake- src file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the cmake version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the cmake src file in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile ".tar"
              if [ ! -z "${RtrnVars[1]}" ]; then
                cmakevers=${RtrnVars[1]}
                echo "cmake version is $cmakevers"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get cmake version"
              fi
            fi
          ;;
          pythonmodules) # need to know the python series
            rtrFile=""
            testNumVers $SOURCEDIR "programming" "Python-2" ".tar"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/programming not found"
              echo "Cannot get the Python-2 package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No Python-2 src file found in ${SOURCEDIR}/programming/"
              echo "Unable to get the Python-2 version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the Python-2 src file in ${SOURCEDIR}/programming"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/programming"
              RtrnVars=""
              getPkgVersion $rtrFile ".tar"
              if [ ! -z "${RtrnVars[1]}" ]; then
                Python2vers=${RtrnVars[1]}
                echo "Python-2 version is $Python2vers"
                GetSeriesNum $Python2vers
                py2series=$rtrseries
                echo "Python2 series is $py2series"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get Python-2 version"
              fi
            fi
	    getpy3versFromSrcfile
          ;;
          pythonmodbin) # need to know the python2 series
            rtrFile=""
            BOOKSOURCEDIR=${SOURCEDIR/Arch/BOOK}
            testNumVers $BOOKSOURCEDIR "programming" "Python-2" ".tar"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${BOOKSOURCEDIR}/programming not found"
              echo "Cannot get the Python-2 package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No Python-2 src file found in ${BOOKSOURCEDIR}/programming/"
              echo "Unable to get the Python-2 version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the Python-2 src file in ${BOOKSOURCEDIR}/programming"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${BOOKSOURCEDIR}/programming"
              RtrnVars=""
              getPkgVersion $rtrFile ".tar"
              if [ ! -z "${RtrnVars[1]}" ]; then
                Python2vers=${RtrnVars[1]}
                echo "Python-2 version is $Python2vers"
                GetSeriesNum $Python2vers
                py2series=$rtrseries
                echo "Python2 series is $py2series"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get Python-2 version"
              fi
            fi
          ;;
          pst) # cups version, docbook-xsl  and sane-backends
            rtrFile=""
            testNumVers $SOURCEDIR $Section "cups-[0-9]" "-source"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get the cups package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No cups- src file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the cups version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the cups src file in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile "-source"
              if [ ! -z "${RtrnVars[1]}" ]; then
                cupsvers=${RtrnVars[1]}
                echo "cups version is $cupsvers"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get cups version"
              fi
            fi
            rtrFile=""
# note - current docbook-xsl file is docbook-xsl-nons-<pkgver>.tar.bz2
            testNumVers $SOURCEDIR $Section "docbook-xsl-nons-" ".tar"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get the docbook-xsl package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No docbook-xsl-nons- src file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the docbook-xsl-nons- version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the docbook-xsl-nons- src file in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile ".tar"
              if [ ! -z "${RtrnVars[1]}" ]; then
                docbookxslvers=${RtrnVars[1]}
                echo "docbook-xsl-nons- version is $docbookxslvers"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get docbook-xsl-nons- version"
              fi
            fi
            rtrFile=""
            testNumVers $SOURCEDIR $Section "sane-backends-" ".tar"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get the sane-backends package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No sane-backends- src file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the sane-backends- version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the sane-backends- src file in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile ".tar"
              if [ ! -z "${RtrnVars[1]}" ]; then
                sanebackendsvers=${RtrnVars[1]}
                echo "sane-backends- version is $sanebackendsvers"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get sane-backends- version"
              fi
            fi	    
          ;;
          security)
            rtrFile=""
            testNumVers $SOURCEDIR $Section "krb5-" ".tar"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get the krb5 package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No krb5- src file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the krb5 version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the krb5 src file in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              trimto=".tar"
              if [ "$BOOK_VERSION" = arch ]; then trimto="-2-x86_64"; fi
              getPkgVersion $rtrFile $trimto
              if [ ! -z "${RtrnVars[1]}" ]; then
                krb5vers=${RtrnVars[1]}
                echo "krb5 version is $krb5vers"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get krb5 version"
              fi
            fi
            if [ "$BOOK_VERSION" != arch ]; then # not used when installing Arch binaries
              rtrFile=""
              testNumVers $SOURCEDIR $Section "Linux-PAM-" ".tar"
              retval=$?
              if [ $retval -eq $RETURN_PARAM ]; then
                echo "Package location ${SOURCEDIR}/${Section} not found"
                echo "Cannot get the Linux-PAM package version number"
              elif [ $retval -eq $RETURN_FNF ]; then
                echo "No Linux-PAM- src file found in ${SOURCEDIR}/${Section}/"
                echo "Unable to get the Linux-PAM version"
              elif [ $retval -eq $RETURN_MTOV ]; then
                echo "found more than one version of the Linux-PAM src file in ${SOURCEDIR}/${Section}"
                echo "latest version is $rtrFile"
                echo "delete the other(s)"
                exit 1
              elif [ $retval -eq 0 ]; then # success
                echo "found $rtrFile in ${SOURCEDIR}/${Section}"
                RtrnVars=""
                getPkgVersion $rtrFile ".tar"
                if [ ! -z "${RtrnVars[1]}" ]; then
                  linuxpamvers=${RtrnVars[1]}
                  echo "Linux-PAM version is $linuxpamvers"
                else
                  echo "return from getPkgVersion, RtrnVars is Null - failed to get Linux-PAM version"
                fi
              fi
            fi
            rtrFile=""
            testNumVers ${LFS}${PKGUSERDIR} "core/shadow" "shadow-" ".tar"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${LFS}${PKGUSERDIR}/core/shadow not found"
              echo "Cannot get the shadow package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No shadow- src file found in ${LFS}${PKGUSERDIR}/core/shadow/"
              echo "Unable to get the shadow version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the shadow src file in ${LFS}${PKGUSERDIR}/core/shadow"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${LFS}${PKGUSERDIR}/core/shadow"
              RtrnVars=""
              getPkgVersion $rtrFile ".tar"
              if [ ! -z "${RtrnVars[1]}" ]; then
                shadowvers=${RtrnVars[1]}
                echo "shadow version is $shadowvers"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get shadow version"
              fi
            fi
	    getpy3versFromCore  # for volume_key
          ;;
          sysutils)
            if [ "$SYSTEMD" = yes ]; then
              rtrFile=""
              testNumVers ${LFS}${PKGUSERDIR} "core/systemd" "systemd-[0-9]" ".tar"
              retval=$?
              if [ $retval -eq $RETURN_PARAM ]; then
                echo "Package location ${LFS}${PKGUSERDIR}/core/systemd not found"
                echo "Cannot get the systemd package version number"
              elif [ $retval -eq $RETURN_FNF ]; then
                echo "No systemd- src file found in ${LFS}${PKGUSERDIR}/core/systemd/"
                echo "Unable to get the systemd version"
              elif [ $retval -eq $RETURN_MTOV ]; then
                echo "found more than one version of the systemd src file in ${LFS}${PKGUSERDIR}/core/systemd"
                echo "latest version is $rtrFile"
                echo "delete the other(s)"
                exit 1
              elif [ $retval -eq 0 ]; then # success
                echo "found $rtrFile in ${LFS}${PKGUSERDIR}/core/systemd"
                RtrnVars=""
                getPkgVersion $rtrFile ".tar"
                if [ ! -z "${RtrnVars[1]}" ]; then
                  SYSTEMD_VERSION=${RtrnVars[1]}
                  echo "systemd version is $SYSTEMD_VERSION"
                else
                  echo "return from getPkgVersion, RtrnVars is Null - failed to get systemd version"
                fi
              fi
            fi
            rtrFile=""
	    numdigit1=""
	    numdigit2=""
            testNumVers ${LFS}${PKGUSERDIR} "core/dbus" "dbus-" ".tar"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${LFS}${PKGUSERDIR}/core/dbus not found"
              echo "Cannot get the dbus package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No dbus- src file found in ${LFS}${PKGUSERDIR}/core/dbus/"
              echo "Unable to get the dbus version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the dbus src file in ${LFS}${PKGUSERDIR}/core/dbus"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${LFS}${PKGUSERDIR}/core/dbus"
              RtrnVars=""
              getPkgVersion $rtrFile ".tar"
              if [ ! -z "${RtrnVars[1]}" ]; then
                dbusvers=${RtrnVars[1]}
                echo "dbus version is $dbusvers"
                numdigit1=$(echo $dbusvers | awk -F\. '{print $2}')
                numdigit2=$(echo $dbusvers | awk -F\. '{print $3}')
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get dbus version"
              fi
            fi
          ;;
          telepathy)
            rtrFile=""
            testNumVers $SOURCEDIR $Section "telepathy-salut-" ".tar"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get the telepathy-salut package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No telepathy-salut- src file found in ${SOURCEDIR}/${Section}/"
              telepathysalutvers=0.8.1
              echo "will assume version is $telepathysalutvers"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the telepathy-salut src file in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile ".tar"
              if [ ! -z "${RtrnVars[1]}" ]; then
                telepathysalutvers=${RtrnVars[1]}
                echo "telepathy-salut version is $telepathysalutvers"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get telepathy-salut version"
              fi
            fi
          ;;
          x)
            rtrFile=""
            testNumVers $SOURCEDIR $Section "xterm-" ".tgz"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get the xterm package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No xterm- src file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the xterm version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the xterm src file in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile ".tgz"
              if [ ! -z "${RtrnVars[1]}" ]; then
                xtermvers=${RtrnVars[1]}
                echo "xterm version is $xtermvers"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get xterm version"
              fi
            fi
          ;;
        esac
      else # single package requested
        case $SINGLE_PACKAGE in
          freetype)
            rtrFile=""
            testNumVers $SOURCEDIR $Section "freetype-[0-9]" ".tar"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get the freetype package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No freetype- src file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the freetype version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the freetype src file in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile ".tar"
              if [ ! -z "${RtrnVars[1]}" ]; then
                freetypevers=${RtrnVars[1]}
                echo "freetype version is $freetypevers"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get freetype version"
              fi
            fi
          ;;
          git)
            rtrFile=""
            testNumVers $SOURCEDIR $Section "git-[0-9]" ".tar"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get the git package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No git- src file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the git version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the git src file in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile ".tar"
              if [ ! -z "${RtrnVars[1]}" ]; then
                gitvers=${RtrnVars[1]}
                echo "git version is $gitvers"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get git version"
              fi
            fi
          ;;
          linux-pam)
            rtrFile=""
            testNumVers $SOURCEDIR $Section "Linux-PAM-" ".tar"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get the Linux-PAM package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No Linux-PAM- src file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the Linux-PAM version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the Linux-PAM src file in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile ".tar"
              if [ ! -z "${RtrnVars[1]}" ]; then
                linuxpamvers=${RtrnVars[1]}
                echo "Linux-PAM version is $linuxpamvers"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get Linux-PAM version"
              fi
            fi
          ;;
          php)
            rtrFile=""
            testNumVers $SOURCEDIR $Section "php-" ".tar"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get the php package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No php- src file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the php version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the php src file in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile ".tar"
              if [ ! -z "${RtrnVars[1]}" ]; then
                phpvers=${RtrnVars[1]}
                echo "php version is $phpvers"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get php version"
              fi
            fi
          ;;
          python2)
            rtrFile=""
            testNumVers $SOURCEDIR $Section "Python-2" ".tar"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get the Python-2 package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No Python-2 src file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the Python-2 version"
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the Python-2 src file in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile ".tar"
              if [ ! -z "${RtrnVars[1]}" ]; then
                Python2vers=${RtrnVars[1]}
                echo "Python-2 version is $Python2vers"
                GetSeriesNum $Python2vers
                py2series=$rtrseries
                echo "Python2 series is $py2series"
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get Python-2 version"
              fi
            fi
          ;;
          python3)
	    getpy3versFromSrcfile
          ;;
          jdkbin)
            case $(uname -m) in
              x86_64)
                 trimto=-linux
              ;;
              *)
                 trimto=-i686
              ;;
            esac
            rtrFile=""
            testNumVers $SOURCEDIR $Section "jdk-" "-linux"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "Package location ${SOURCEDIR}/${Section} not found"
              echo "Cannot get jdk binary package version number"
            elif [ $retval -eq $RETURN_FNF ]; then
              echo "No jdk- binary file found in ${SOURCEDIR}/${Section}/"
              echo "Unable to get the jdk binary version"
              jdkoracle=false
            elif [ $retval -eq $RETURN_MTOV ]; then
              echo "found more than one version of the jdk binary in ${SOURCEDIR}/${Section}"
              echo "latest version is $rtrFile"
              echo "delete the other(s)"
              exit 1
            elif [ $retval -eq 0 ]; then # success
              echo "found $rtrFile in ${SOURCEDIR}/${Section}"
              RtrnVars=""
              getPkgVersion $rtrFile "-linux"
              if [ ! -z "${RtrnVars[1]}" ]; then
                jdkvers=${RtrnVars[1]}
                echo "jdk binary version is $jdkvers"
                jdkoracle=true
              else
                echo "return from getPkgVersion, RtrnVars is Null - failed to get jdk binary version"
              fi
            fi
            pkgcomvers=""
            GetCommandVersion ${LFS}${blfscommands}/general java "chown"
            retval=$?
            if [ $retval -eq $RETURN_PARAM ]; then
              echo "java command not found in ${LFS}${blfscommands}/general"
              echo "Cannot get the java binary version in the book."
            else
              jdkcomvers=${pkgcomvers/-bin}
              echo "Java binary version from the commands is $jdkcomvers"
            fi
          ;;
        esac
      fi
    Start $Section $cursection rtrnPkg[@] rtrnSrc[@] rtrnCmd[@] # build the script for this section
#
# Note - if the section wget-list file didn't exist and the package version source files are not
# listed in the master wget-list file then the downloaded source files are used to create the section
# wget-list file. This may apply to the Gnome packages gnomeplatform, gnomedesktop and gnomeapps when the
# package versions are later than those in the book.
#
    if $CREATE_WGET; then # test if a gnome section
      if [[ "$Section" = gnomeplatform || "$Section" = gnomedesktop || "$Section" = gnomeapps ]]; then
        updateWgetList=false
        echo "Update the wget-list file? [y/N]"
        read reply
        case $reply in
           [yY]|[yY][Ee][Ss])
                updateWgetList=true
	        echo "Okay, will create the $WgetList file"
           ;;  
           *)
                echo "Don't alter the current wget-list file"
           ;;  
        esac
        if $updateWgetList; then
	  declare -a wgetListArray # array to hold all the wget-list file entries
	  wgetListCount=0 # counter for the wgetListArray
	  rm -rf ${SOURCEDIR}/${Section}/{$WgetList,$sortedfile}
# get filename from the gnome section src dir
          for gnomeFile in ${SOURCEDIR}/${Section}/*; do
            if [ -f $gnomeFile ]; then
	      gnomeFileName=$(echo $gnomeFile | awk -F\/ '{print $NF}')
	      RtrnVars=""
	      getPkgVersion $gnomeFileName ".tar"
	      pkgnm=${RtrnVars[0]}
	      gnmvers=$(echo ${RtrnVars[1]} | awk -F\. '{print $1"."$2}')
              pkgurl=${gnomeBaseURL}/${pkgnm%?}/${gnmvers}/
              wgetListArray[wgetListCount]="${pkgurl}${gnomeFileName}"
	      ((wgetListCount++))
	    else
	      echo "$gnomeFile does not appear to be a file"
	      echo "Please investigate"
            fi
          done
          if $printit; then echo "wgetListArray is ${wgetListArray[@]}"; fi
          printf "%s\n" "${wgetListArray[@]}" | sort -u > "${SOURCEDIR}/${Section}/${WgetList}"
# create the sortedfile
          cp ${SOURCEDIR}/${Section}/${WgetList} ${SOURCEDIR}/${Section}/${sortedfile}
        fi
      fi
    fi
  fi
done
cat >> $Output << "EOF"
if [ $canInstallCount -gt 1 ]; then
  echo "Can install $canInstallCount $Section packages"
elif [ $canInstallCount -eq 1 ]; then
  echo "Can install $canInstallCount $Section package"
fi
EOF
